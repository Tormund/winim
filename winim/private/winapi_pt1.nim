
{.deadCodeElim: on.}

import winapi_pt0

# def/basetsd.nim
when not defined(winansi):
  type
    IExtractIcon* = IExtractIconW
    LPEXTRACTICON* = LPEXTRACTICONW

else:
  type
    IExtractIcon* = IExtractIconA
    LPEXTRACTICON* = LPEXTRACTICONA

type
  IShellLinkA* {.pure.} = object
    lpVtbl*: ptr IShellLinkAVtbl
  IShellLinkAVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetPath*: proc(self: ptr IShellLinkA, P1: LPSTR, P2: int32, P3: ptr WIN32_FIND_DATAA, P4: DWORD): HRESULT {.stdcall.}
    GetIDList*: proc(self: ptr IShellLinkA, P1: ptr LPITEMIDLIST): HRESULT {.stdcall.}
    SetIDList*: proc(self: ptr IShellLinkA, P1: LPCITEMIDLIST): HRESULT {.stdcall.}
    GetDescription*: proc(self: ptr IShellLinkA, P1: LPSTR, P2: int32): HRESULT {.stdcall.}
    SetDescription*: proc(self: ptr IShellLinkA, P1: LPCSTR): HRESULT {.stdcall.}
    GetWorkingDirectory*: proc(self: ptr IShellLinkA, P1: LPSTR, P2: int32): HRESULT {.stdcall.}
    SetWorkingDirectory*: proc(self: ptr IShellLinkA, P1: LPCSTR): HRESULT {.stdcall.}
    GetArguments*: proc(self: ptr IShellLinkA, P1: LPSTR, P2: int32): HRESULT {.stdcall.}
    SetArguments*: proc(self: ptr IShellLinkA, P1: LPCSTR): HRESULT {.stdcall.}
    GetHotkey*: proc(self: ptr IShellLinkA, P1: PWORD): HRESULT {.stdcall.}
    SetHotkey*: proc(self: ptr IShellLinkA, P1: WORD): HRESULT {.stdcall.}
    GetShowCmd*: proc(self: ptr IShellLinkA, P1: ptr int32): HRESULT {.stdcall.}
    SetShowCmd*: proc(self: ptr IShellLinkA, P1: int32): HRESULT {.stdcall.}
    GetIconLocation*: proc(self: ptr IShellLinkA, P1: LPSTR, P2: int32, P3: ptr int32): HRESULT {.stdcall.}
    SetIconLocation*: proc(self: ptr IShellLinkA, P1: LPCSTR, P2: int32): HRESULT {.stdcall.}
    SetRelativePath*: proc(self: ptr IShellLinkA, P1: LPCSTR, P2: DWORD): HRESULT {.stdcall.}
    Resolve*: proc(self: ptr IShellLinkA, P1: HWND, P2: DWORD): HRESULT {.stdcall.}
    SetPath*: proc(self: ptr IShellLinkA, P1: LPCSTR): HRESULT {.stdcall.}
  IShellLinkW* {.pure.} = object
    lpVtbl*: ptr IShellLinkWVtbl
  IShellLinkWVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetPath*: proc(self: ptr IShellLinkW, P1: LPWSTR, P2: int32, P3: ptr WIN32_FIND_DATAW, P4: DWORD): HRESULT {.stdcall.}
    GetIDList*: proc(self: ptr IShellLinkW, P1: ptr LPITEMIDLIST): HRESULT {.stdcall.}
    SetIDList*: proc(self: ptr IShellLinkW, P1: LPCITEMIDLIST): HRESULT {.stdcall.}
    GetDescription*: proc(self: ptr IShellLinkW, P1: LPWSTR, P2: int32): HRESULT {.stdcall.}
    SetDescription*: proc(self: ptr IShellLinkW, P1: LPCWSTR): HRESULT {.stdcall.}
    GetWorkingDirectory*: proc(self: ptr IShellLinkW, P1: LPWSTR, P2: int32): HRESULT {.stdcall.}
    SetWorkingDirectory*: proc(self: ptr IShellLinkW, P1: LPCWSTR): HRESULT {.stdcall.}
    GetArguments*: proc(self: ptr IShellLinkW, P1: LPWSTR, P2: int32): HRESULT {.stdcall.}
    SetArguments*: proc(self: ptr IShellLinkW, P1: LPCWSTR): HRESULT {.stdcall.}
    GetHotkey*: proc(self: ptr IShellLinkW, P1: PWORD): HRESULT {.stdcall.}
    SetHotkey*: proc(self: ptr IShellLinkW, P1: WORD): HRESULT {.stdcall.}
    GetShowCmd*: proc(self: ptr IShellLinkW, P1: ptr int32): HRESULT {.stdcall.}
    SetShowCmd*: proc(self: ptr IShellLinkW, P1: int32): HRESULT {.stdcall.}
    GetIconLocation*: proc(self: ptr IShellLinkW, P1: LPWSTR, P2: int32, P3: ptr int32): HRESULT {.stdcall.}
    SetIconLocation*: proc(self: ptr IShellLinkW, P1: LPCWSTR, P2: int32): HRESULT {.stdcall.}
    SetRelativePath*: proc(self: ptr IShellLinkW, P1: LPCWSTR, P2: DWORD): HRESULT {.stdcall.}
    Resolve*: proc(self: ptr IShellLinkW, P1: HWND, P2: DWORD): HRESULT {.stdcall.}
    SetPath*: proc(self: ptr IShellLinkW, P1: LPCWSTR): HRESULT {.stdcall.}
  IShellFolder* {.pure.} = object
    lpVtbl*: ptr IShellFolderVtbl
  IShellFolderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ParseDisplayName*: proc(self: ptr IShellFolder, P1: HWND, P2: LPBC, P3: LPOLESTR, P4: PULONG, P5: ptr LPITEMIDLIST, P6: PULONG): HRESULT {.stdcall.}
    EnumObjects*: proc(self: ptr IShellFolder, P1: HWND, P2: DWORD, P3: ptr LPENUMIDLIST): HRESULT {.stdcall.}
    BindToObject*: proc(self: ptr IShellFolder, P1: LPCITEMIDLIST, P2: LPBC, P3: REFIID, P4: ptr PVOID): HRESULT {.stdcall.}
    BindToStorage*: proc(self: ptr IShellFolder, P1: LPCITEMIDLIST, P2: LPBC, P3: REFIID, P4: ptr PVOID): HRESULT {.stdcall.}
    CompareIDs*: proc(self: ptr IShellFolder, P1: LPARAM, P2: LPCITEMIDLIST, P3: LPCITEMIDLIST): HRESULT {.stdcall.}
    CreateViewObject*: proc(self: ptr IShellFolder, P1: HWND, P2: REFIID, P3: ptr PVOID): HRESULT {.stdcall.}
    GetAttributesOf*: proc(self: ptr IShellFolder, P1: UINT, P2: ptr LPCITEMIDLIST, P3: PULONG): HRESULT {.stdcall.}
    GetUIObjectOf*: proc(self: ptr IShellFolder, P1: HWND, P2: UINT, P3: ptr LPCITEMIDLIST, P4: REFIID, P5: PUINT, P6: ptr PVOID): HRESULT {.stdcall.}
    GetDisplayNameOf*: proc(self: ptr IShellFolder, P1: LPCITEMIDLIST, P2: DWORD, P3: LPSTRRET): HRESULT {.stdcall.}
    SetNameOf*: proc(self: ptr IShellFolder, P1: HWND, P2: LPCITEMIDLIST, P3: LPCOLESTR, P4: DWORD, P5: ptr LPITEMIDLIST): HRESULT {.stdcall.}
  LPSHELLFOLDER* = ptr IShellFolder

type
  IEnumExtraSearch* {.pure.} = object
    lpVtbl*: ptr IEnumExtraSearchVtbl
  IEnumExtraSearchVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumExtraSearch, P1: ULONG, P2: ptr LPEXTRASEARCH, P3: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumExtraSearch, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumExtraSearch): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumExtraSearch, P1: ptr ptr IEnumExtraSearch): HRESULT {.stdcall.}
  LPENUMEXTRASEARCH* = ptr IEnumExtraSearch
  IShellFolder2* {.pure.} = object
    lpVtbl*: ptr IShellFolder2Vtbl
  IShellFolder2Vtbl* {.pure, inheritable.} = object of IShellFolderVtbl
    GetDefaultSearchGUID*: proc(self: ptr IShellFolder2, P1: ptr GUID): HRESULT {.stdcall.}
    EnumSearches*: proc(self: ptr IShellFolder2, P1: ptr ptr IEnumExtraSearch): HRESULT {.stdcall.}
    GetDefaultColumn*: proc(self: ptr IShellFolder2, P1: DWORD, P2: ptr ULONG, P3: ptr ULONG): HRESULT {.stdcall.}
    GetDefaultColumnState*: proc(self: ptr IShellFolder2, P1: UINT, P2: ptr SHCOLSTATEF): HRESULT {.stdcall.}
    GetDetailsEx*: proc(self: ptr IShellFolder2, P1: LPCITEMIDLIST, P2: ptr SHCOLUMNID, P3: ptr VARIANT): HRESULT {.stdcall.}
    GetDetailsOf*: proc(self: ptr IShellFolder2, P1: LPCITEMIDLIST, P2: UINT, P3: ptr SHELLDETAILS): HRESULT {.stdcall.}
    MapColumnToSCID*: proc(self: ptr IShellFolder2, P1: UINT, P2: ptr SHCOLUMNID): HRESULT {.stdcall.}
  LPSHELLFOLDER2* = ptr IShellFolder2

type
  ICopyHook* {.pure.} = object
    lpVtbl*: ptr ICopyHookVtbl
  ICopyHookVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CopyCallback*: proc(self: ptr ICopyHook, P1: HWND, P2: UINT, P3: UINT, P4: LPCSTR, P5: DWORD, P6: LPCSTR, P7: DWORD): UINT {.stdcall.}
  LPCOPYHOOK* = ptr ICopyHook
  IFileViewerSite* {.pure.} = object
    lpVtbl*: ptr IFileViewerSiteVtbl
  IFileViewerSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetPinnedWindow*: proc(self: ptr IFileViewerSite, P1: HWND): HRESULT {.stdcall.}
    GetPinnedWindow*: proc(self: ptr IFileViewerSite, P1: ptr HWND): HRESULT {.stdcall.}
  LPFILEVIEWERSITE* = ptr IFileViewerSite
  IFileViewer* {.pure.} = object
    lpVtbl*: ptr IFileViewerVtbl
  IFileViewerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ShowInitialize*: proc(self: ptr IFileViewer, P1: LPFILEVIEWERSITE): HRESULT {.stdcall.}
    Show*: proc(self: ptr IFileViewer, P1: LPFVSHOWINFO): HRESULT {.stdcall.}
    PrintTo*: proc(self: ptr IFileViewer, P1: LPSTR, P2: BOOL): HRESULT {.stdcall.}
  LPFILEVIEWER* = ptr IFileViewer
  IFileSystemBindData* {.pure.} = object
    lpVtbl*: ptr IFileSystemBindDataVtbl
  IFileSystemBindDataVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetFindData*: proc(self: ptr IFileSystemBindData, P1: ptr WIN32_FIND_DATAW): HRESULT {.stdcall.}
    GetFindData*: proc(self: ptr IFileSystemBindData, P1: ptr WIN32_FIND_DATAW): HRESULT {.stdcall.}
  IPersistFolder* {.pure.} = object
    lpVtbl*: ptr IPersistFolderVtbl
  IPersistFolderVtbl* {.pure, inheritable.} = object of IPersistVtbl
    Initialize*: proc(self: ptr IPersistFolder, P1: LPCITEMIDLIST): HRESULT {.stdcall.}
  LPPERSISTFOLDER* = ptr IPersistFolder

type
  IPersistFolder2* {.pure.} = object
    lpVtbl*: ptr IPersistFolder2Vtbl
  IPersistFolder2Vtbl* {.pure, inheritable.} = object of IPersistFolderVtbl
    GetCurFolder*: proc(self: ptr IPersistFolder2, P1: ptr LPITEMIDLIST): HRESULT {.stdcall.}
  LPPERSISTFOLDER2* = ptr IPersistFolder2

type
  IPersistFolder3* {.pure.} = object
    lpVtbl*: ptr IPersistFolder3Vtbl
  IPersistFolder3Vtbl* {.pure, inheritable.} = object of IPersistFolder2Vtbl
    InitializeEx*: proc(self: ptr IPersistFolder3, P1: ptr IBindCtx, P2: LPCITEMIDLIST, P3: ptr PERSIST_FOLDER_TARGET_INFO): HRESULT {.stdcall.}
    GetFolderTargetInfo*: proc(self: ptr IPersistFolder3, P1: ptr PERSIST_FOLDER_TARGET_INFO): HRESULT {.stdcall.}
  LPPERSISTFOLDER3* = ptr IPersistFolder3

type
  LPSHELLBROWSER* = ptr IShellBrowser
  LPSHELLVIEW* = ptr IShellView
  IShellBrowser* {.pure.} = object
    lpVtbl*: ptr IShellBrowserVtbl
  IShellBrowserVtbl* {.pure, inheritable.} = object of IOleWindowVtbl
    InsertMenusSB*: proc(self: ptr IShellBrowser, P1: HMENU, P2: LPOLEMENUGROUPWIDTHS): HRESULT {.stdcall.}
    SetMenuSB*: proc(self: ptr IShellBrowser, P1: HMENU, P2: HOLEMENU, P3: HWND): HRESULT {.stdcall.}
    RemoveMenusSB*: proc(self: ptr IShellBrowser, P1: HMENU): HRESULT {.stdcall.}
    SetStatusTextSB*: proc(self: ptr IShellBrowser, P1: LPCOLESTR): HRESULT {.stdcall.}
    EnableModelessSB*: proc(self: ptr IShellBrowser, P1: BOOL): HRESULT {.stdcall.}
    TranslateAcceleratorSB*: proc(self: ptr IShellBrowser, P1: LPMSG, P2: WORD): HRESULT {.stdcall.}
    BrowseObject*: proc(self: ptr IShellBrowser, P1: LPCITEMIDLIST, P2: UINT): HRESULT {.stdcall.}
    GetViewStateStream*: proc(self: ptr IShellBrowser, P1: DWORD, P2: ptr LPSTREAM): HRESULT {.stdcall.}
    GetControlWindow*: proc(self: ptr IShellBrowser, P1: UINT, P2: ptr HWND): HRESULT {.stdcall.}
    SendControlMsg*: proc(self: ptr IShellBrowser, P1: UINT, P2: UINT, P3: WPARAM, P4: LPARAM, P5: ptr LRESULT): HRESULT {.stdcall.}
    QueryActiveShellView*: proc(self: ptr IShellBrowser, P1: ptr LPSHELLVIEW): HRESULT {.stdcall.}
    OnViewWindowActive*: proc(self: ptr IShellBrowser, P1: LPSHELLVIEW): HRESULT {.stdcall.}
    SetToolbarItems*: proc(self: ptr IShellBrowser, P1: LPTBBUTTON, P2: UINT, P3: UINT): HRESULT {.stdcall.}
  IShellView* {.pure.} = object
    lpVtbl*: ptr IShellViewVtbl
  IShellViewVtbl* {.pure, inheritable.} = object of IOleWindowVtbl
    TranslateAccelerator*: proc(self: ptr IShellView, P1: LPMSG): HRESULT {.stdcall.}
    EnableModeless*: proc(self: ptr IShellView, P1: BOOL): HRESULT {.stdcall.}
    UIActivate*: proc(self: ptr IShellView, P1: UINT): HRESULT {.stdcall.}
    Refresh*: proc(self: ptr IShellView): HRESULT {.stdcall.}
    CreateViewWindow*: proc(self: ptr IShellView, P1: ptr IShellView, P2: LPCFOLDERSETTINGS, P3: LPSHELLBROWSER, P4: ptr RECT, P5: ptr HWND): HRESULT {.stdcall.}
    DestroyViewWindow*: proc(self: ptr IShellView): HRESULT {.stdcall.}
    GetCurrentInfo*: proc(self: ptr IShellView, P1: LPFOLDERSETTINGS): HRESULT {.stdcall.}
    AddPropertySheetPages*: proc(self: ptr IShellView, P1: DWORD, P2: LPFNADDPROPSHEETPAGE, P3: LPARAM): HRESULT {.stdcall.}
    SaveViewState*: proc(self: ptr IShellView): HRESULT {.stdcall.}
    SelectItem*: proc(self: ptr IShellView, P1: LPCITEMIDLIST, P2: UINT): HRESULT {.stdcall.}
    GetItemObject*: proc(self: ptr IShellView, P1: UINT, P2: REFIID, P3: ptr PVOID): HRESULT {.stdcall.}
  ICommDlgBrowser* {.pure.} = object
    lpVtbl*: ptr ICommDlgBrowserVtbl
  ICommDlgBrowserVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnDefaultCommand*: proc(self: ptr ICommDlgBrowser, P1: ptr IShellView): HRESULT {.stdcall.}
    OnStateChange*: proc(self: ptr ICommDlgBrowser, P1: ptr IShellView, P2: ULONG): HRESULT {.stdcall.}
    IncludeObject*: proc(self: ptr ICommDlgBrowser, P1: ptr IShellView, P2: LPCITEMIDLIST): HRESULT {.stdcall.}
  LPCOMMDLGBROWSER* = ptr ICommDlgBrowser
  SHELLVIEWID* = GUID
  SV2CVW2_PARAMS* {.final, pure.} = object
    cbSize*: DWORD
    psvPrev*: ptr IShellView
    pfs*: ptr FOLDERSETTINGS
    psbOwner*: ptr IShellBrowser
    prcView*: ptr RECT
    pvid*: ptr SHELLVIEWID
    hwndView*: HWND
  LPSV2CVW2_PARAMS* = ptr SV2CVW2_PARAMS
  IShellView2* {.pure.} = object
    lpVtbl*: ptr IShellView2Vtbl
  IShellView2Vtbl* {.pure, inheritable.} = object of IShellViewVtbl
    GetView*: proc(self: ptr IShellView2, P1: ptr SHELLVIEWID, P2: ULONG): HRESULT {.stdcall.}
    CreateViewWindow2*: proc(self: ptr IShellView2, P1: LPSV2CVW2_PARAMS): HRESULT {.stdcall.}
  IShellExecuteHookA* {.pure.} = object
    lpVtbl*: ptr IShellExecuteHookAVtbl
  IShellExecuteHookAVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Execute*: proc(self: ptr IShellExecuteHookA, P1: LPSHELLEXECUTEINFOA): HRESULT {.stdcall.}
  IShellExecuteHookW* {.pure.} = object
    lpVtbl*: ptr IShellExecuteHookWVtbl
  IShellExecuteHookWVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Execute*: proc(self: ptr IShellExecuteHookW, P1: LPSHELLEXECUTEINFOW): HRESULT {.stdcall.}
  IShellIcon* {.pure.} = object
    lpVtbl*: ptr IShellIconVtbl
  IShellIconVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetIconOf*: proc(self: ptr IShellIcon, P1: LPCITEMIDLIST, P2: UINT, P3: PINT): HRESULT {.stdcall.}
  LPSHELLICON* = ptr IShellIcon
  SHELLFLAGSTATE* {.final, pure.} = object
    bitflags*: int16
  LPSHELLFLAGSTATE* = ptr SHELLFLAGSTATE

const
  SSF_SHOWALLOBJECTS* = 0x1
  SSF_SHOWEXTENSIONS* = 0x2
  SSF_SHOWCOMPCOLOR* = 0x8
  SSF_SHOWSYSFILES* = 0x20
  SSF_DOUBLECLICKINWEBVIEW* = 0x80
  SSF_SHOWATTRIBCOL* = 0x100
  SSF_DESKTOPHTML* = 0x200
  SSF_WIN95CLASSIC* = 0x400
  SSF_DONTPRETTYPATH* = 0x800
  SSF_MAPNETDRVBUTTON* = 0x1000
  SSF_SHOWINFOTIP* = 0x2000
  SSF_HIDEICONS* = 0x4000
  SSF_NOCONFIRMRECYCLE* = 0x8000

type
  IShellIconOverlayIdentifier* {.pure.} = object
    lpVtbl*: ptr IShellIconOverlayIdentifierVtbl
  IShellIconOverlayIdentifierVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    IsMemberOf*: proc(self: ptr IShellIconOverlayIdentifier, P1: LPCWSTR, P2: DWORD): HRESULT {.stdcall.}
    GetOverlayInfo*: proc(self: ptr IShellIconOverlayIdentifier, P1: LPWSTR, P2: int32, P3: ptr int32, P4: ptr DWORD): HRESULT {.stdcall.}
    GetPriority*: proc(self: ptr IShellIconOverlayIdentifier, P1: ptr int32): HRESULT {.stdcall.}

const
  ISIOI_ICONFILE* = 0x00000001
  ISIOI_ICONINDEX* = 0x00000002

type
  SHELLSTATE* {.final, pure.} = object
  LPSHELLSTATE* = ptr SHELLSTATE

type
  SHDRAGIMAGE* {.final, pure.} = object
    sizeDragImage*: SIZE
    ptOffset*: POINT
    hbmpDragImage*: HBITMAP
    crColorKey*: COLORREF
  LPSHDRAGIMAGE* = ptr SHDRAGIMAGE
  IDragSourceHelper* {.pure.} = object
    lpVtbl*: ptr IDragSourceHelperVtbl
  IDragSourceHelperVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    InitializeFromBitmap*: proc(self: ptr IDragSourceHelper, pshdi: LPSHDRAGIMAGE, pDataObject: ptr IDataObject): HRESULT {.stdcall.}
    InitializeFromWindow*: proc(self: ptr IDragSourceHelper, hwnd: HWND, ppt: ptr POINT, pDataObject: ptr IDataObject): HRESULT {.stdcall.}
  IDropTargetHelper* {.pure.} = object
    lpVtbl*: ptr IDropTargetHelperVtbl
  IDropTargetHelperVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    DragEnter*: proc(self: ptr IDropTargetHelper, hwndTarget: HWND, pDataObject: ptr IDataObject, ppt: ptr POINT, dwEffect: DWORD): HRESULT {.stdcall.}
    DragLeave*: proc(self: ptr IDropTargetHelper): HRESULT {.stdcall.}
    DragOver*: proc(self: ptr IDropTargetHelper, ppt: ptr POINT, dwEffect: DWORD): HRESULT {.stdcall.}
    Drop*: proc(self: ptr IDropTargetHelper, pDataObject: ptr IDataObject, ppt: ptr POINT, dwEffect: DWORD): HRESULT {.stdcall.}
    Show*: proc(self: ptr IDropTargetHelper, fShow: BOOL): HRESULT {.stdcall.}

proc SHAddToRecentDocs*(P1: UINT, P2: PCVOID): void {.winapi, dynlib: "shell32", importc.}
proc SHBrowseForFolderA*(P1: PBROWSEINFOA): LPITEMIDLIST {.winapi, dynlib: "shell32", importc.}
proc SHBrowseForFolderW*(P1: PBROWSEINFOW): LPITEMIDLIST {.winapi, dynlib: "shell32", importc.}
proc SHChangeNotify*(P1: LONG, P2: UINT, P3: PCVOID, P4: PCVOID): void {.winapi, dynlib: "shell32", importc.}
proc SHGetDataFromIDListA*(P1: LPSHELLFOLDER, P2: LPCITEMIDLIST, P3: int32, P4: PVOID, P5: int32): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHGetDataFromIDListW*(P1: LPSHELLFOLDER, P2: LPCITEMIDLIST, P3: int32, P4: PVOID, P5: int32): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHGetDesktopFolder*(P1: ptr LPSHELLFOLDER): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHGetInstanceExplorer*(P1: ptr ptr IUnknown): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHGetMalloc*(P1: ptr LPMALLOC): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHGetPathFromIDListA*(P1: LPCITEMIDLIST, P2: LPSTR): BOOL {.winapi, dynlib: "shell32", importc.}
proc SHGetPathFromIDListW*(P1: LPCITEMIDLIST, P2: LPWSTR): BOOL {.winapi, dynlib: "shell32", importc.}
proc SHGetSpecialFolderLocation*(P1: HWND, P2: int32, P3: ptr LPITEMIDLIST): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHLoadInProc*(P1: REFCLSID): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHGetSpecialFolderPathA*(P1: HWND, P2: LPSTR, P3: int32, P4: BOOL): BOOL {.winapi, dynlib: "shell32", importc.}
proc SHGetSpecialFolderPathW*(P1: HWND, P2: LPWSTR, P3: int32, P4: BOOL): BOOL {.winapi, dynlib: "shell32", importc.}
proc SHGetFolderPathA*(P1: HWND, P2: int32, P3: HANDLE, P4: DWORD, P5: LPSTR): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHGetFolderPathW*(P1: HWND, P2: int32, P3: HANDLE, P4: DWORD, P5: LPWSTR): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHGetFolderLocation*(P1: HWND, P2: int32, P3: HANDLE, P4: DWORD, P5: ptr LPITEMIDLIST): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHCreateDirectoryExA*(P1: HWND, P2: LPCSTR, P3: LPSECURITY_ATTRIBUTES): INT {.winapi, dynlib: "shell32", importc.}
proc SHCreateDirectoryExW*(P1: HWND, P2: LPCWSTR, P3: LPSECURITY_ATTRIBUTES): INT {.winapi, dynlib: "shell32", importc.}
proc SHCreateItemFromParsingName*(P1: PCWSTR, P2: ptr IBindCtx, P3: REFIID, P4: ptr PVOID): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHBindToParent*(P1: LPCITEMIDLIST, P2: REFIID, P3: ptr ptr VOID, P4: ptr LPCITEMIDLIST): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHGetFolderPathAndSubDirA*(P1: HWND, P2: int32, P3: HANDLE, P4: DWORD, P5: LPCSTR, P6: LPSTR): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHGetFolderPathAndSubDirW*(P1: HWND, P2: int32, P3: HANDLE, P4: DWORD, P5: LPCWSTR, P6: LPWSTR): HRESULT {.winapi, dynlib: "shell32", importc.}
proc SHGetSettings*(P1: LPSHELLFLAGSTATE, P2: DWORD): void {.winapi, dynlib: "shell32", importc.}
proc SHGetSetSettings*(P1: LPSHELLSTATE, P2: DWORD, P3: BOOL): void {.winapi, dynlib: "shell32", importc.}
proc ILIsEqual*(P1: LPCITEMIDLIST, P2: LPCITEMIDLIST): BOOL {.winapi, dynlib: "shell32", importc.}
proc ILIsParent*(P1: LPCITEMIDLIST, P2: LPCITEMIDLIST, P3: BOOL): BOOL {.winapi, dynlib: "shell32", importc.}
proc ILRemoveLastID*(P1: LPITEMIDLIST): BOOL {.winapi, dynlib: "shell32", importc.}
proc ILLoadFromStream*(P1: ptr IStream, P2: ptr LPITEMIDLIST): HRESULT {.winapi, dynlib: "shell32", importc.}
proc ILSaveToStream*(P1: ptr IStream, P2: LPCITEMIDLIST): HRESULT {.winapi, dynlib: "shell32", importc.}
proc ILAppendID*(P1: LPITEMIDLIST, P2: LPCSHITEMID, P3: BOOL): LPITEMIDLIST {.winapi, dynlib: "shell32", importc.}
proc ILClone*(P1: LPCITEMIDLIST): LPITEMIDLIST {.winapi, dynlib: "shell32", importc.}
proc ILCloneFirst*(P1: LPCITEMIDLIST): LPITEMIDLIST {.winapi, dynlib: "shell32", importc.}
proc ILCombine*(P1: LPCITEMIDLIST, P2: LPCITEMIDLIST): LPITEMIDLIST {.winapi, dynlib: "shell32", importc.}
proc ILFindChild*(P1: LPCITEMIDLIST, P2: LPCITEMIDLIST): LPITEMIDLIST {.winapi, dynlib: "shell32", importc.}
proc ILFindLastID*(P1: LPCITEMIDLIST): LPITEMIDLIST {.winapi, dynlib: "shell32", importc.}
proc ILGetNext*(P1: LPCITEMIDLIST): LPITEMIDLIST {.winapi, dynlib: "shell32", importc.}
proc ILGetSize*(P1: LPCITEMIDLIST): UINT {.winapi, dynlib: "shell32", importc.}
proc ILFree*(P1: LPITEMIDLIST): void {.winapi, dynlib: "shell32", importc.}
proc SHCoCreateInstance*(P1: LPCWSTR, P2: REFCLSID, P3: ptr IUnknown, P4: REFIID, P5: ptr pointer): HRESULT {.winapi, dynlib: "shell32", importc.}

when not defined(winansi):
  type
    IShellExecuteHook* = IShellExecuteHookW
    IShellLink* = IShellLinkW
    BROWSEINFO* = BROWSEINFOW

  proc SHBrowseForFolder*(P1: PBROWSEINFOW): LPITEMIDLIST {.winapi, dynlib: "shell32", importc: "SHBrowseForFolderW".}
  proc SHGetDataFromIDList*(P1: LPSHELLFOLDER, P2: LPCITEMIDLIST, P3: int32, P4: PVOID, P5: int32): HRESULT {.winapi, dynlib: "shell32", importc: "SHGetDataFromIDListW".}
  proc SHGetPathFromIDList*(P1: LPCITEMIDLIST, P2: LPWSTR): BOOL {.winapi, dynlib: "shell32", importc: "SHGetPathFromIDListW".}
  proc SHGetSpecialFolderPath*(P1: HWND, P2: LPWSTR, P3: int32, P4: BOOL): BOOL {.winapi, dynlib: "shell32", importc: "SHGetSpecialFolderPathW".}
  proc SHGetFolderPath*(P1: HWND, P2: int32, P3: HANDLE, P4: DWORD, P5: LPWSTR): HRESULT {.winapi, dynlib: "shell32", importc: "SHGetFolderPathW".}
  proc SHCreateDirectoryEx*(P1: HWND, P2: LPCWSTR, P3: LPSECURITY_ATTRIBUTES): INT {.winapi, dynlib: "shell32", importc: "SHCreateDirectoryExW".}
  proc SHGetFolderPathAndSubDir*(P1: HWND, P2: int32, P3: HANDLE, P4: DWORD, P5: LPCWSTR, P6: LPWSTR): HRESULT {.winapi, dynlib: "shell32", importc: "SHGetFolderPathAndSubDirW".}

  type
    FILEDESCRIPTOR* = FILEDESCRIPTORW
    LPFILEDESCRIPTOR* = LPFILEDESCRIPTORW
    FILEGROUPDESCRIPTOR* = FILEGROUPDESCRIPTORW
    LPFILEGROUPDESCRIPTOR* = LPFILEGROUPDESCRIPTORW

else:
  type
    IShellExecuteHook* = IShellExecuteHookA
    IShellLink* = IShellLinkA
    BROWSEINFO* = BROWSEINFOA

  proc SHBrowseForFolder*(P1: PBROWSEINFOA): LPITEMIDLIST {.winapi, dynlib: "shell32", importc: "SHBrowseForFolderA".}
  proc SHGetDataFromIDList*(P1: LPSHELLFOLDER, P2: LPCITEMIDLIST, P3: int32, P4: PVOID, P5: int32): HRESULT {.winapi, dynlib: "shell32", importc: "SHGetDataFromIDListA".}
  proc SHGetPathFromIDList*(P1: LPCITEMIDLIST, P2: LPSTR): BOOL {.winapi, dynlib: "shell32", importc: "SHGetPathFromIDListA".}
  proc SHGetSpecialFolderPath*(P1: HWND, P2: LPSTR, P3: int32, P4: BOOL): BOOL {.winapi, dynlib: "shell32", importc: "SHGetSpecialFolderPathA".}
  proc SHGetFolderPath*(P1: HWND, P2: int32, P3: HANDLE, P4: DWORD, P5: LPSTR): HRESULT {.winapi, dynlib: "shell32", importc: "SHGetFolderPathA".}
  proc SHCreateDirectoryEx*(P1: HWND, P2: LPCSTR, P3: LPSECURITY_ATTRIBUTES): INT {.winapi, dynlib: "shell32", importc: "SHCreateDirectoryExA".}
  proc SHGetFolderPathAndSubDir*(P1: HWND, P2: int32, P3: HANDLE, P4: DWORD, P5: LPCSTR, P6: LPSTR): HRESULT {.winapi, dynlib: "shell32", importc: "SHGetFolderPathAndSubDirA".}

  type
    FILEDESCRIPTOR* = FILEDESCRIPTORA
    LPFILEDESCRIPTOR* = LPFILEDESCRIPTORA
    FILEGROUPDESCRIPTOR* = FILEGROUPDESCRIPTORA
    LPFILEGROUPDESCRIPTOR* = LPFILEGROUPDESCRIPTORA

type
  PBROWSEINFO* = ptr BROWSEINFO
  LPBROWSEINFO* = ptr BROWSEINFO

converter winim_converter_IEnumIDList*(x: ptr IEnumIDList): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IEnumIDList, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IEnumIDList): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IEnumIDList): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc Next*(self: ptr IEnumIDList, P1: ULONG, P2: ptr LPITEMIDLIST, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumIDList, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumIDList): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumIDList, P1: ptr ptr IEnumIDList): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_IObjMgr*(x: ptr IObjMgr): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IObjMgr, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IObjMgr): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IObjMgr): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc Append*(self: ptr IObjMgr, P1: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.Append(self, P1)
proc Remove*(self: ptr IObjMgr, P1: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.Remove(self, P1)
converter winim_converter_IContextMenu*(x: ptr IContextMenu): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IContextMenu, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IContextMenu): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IContextMenu): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc QueryContextMenu*(self: ptr IContextMenu, P1: HMENU, P2: UINT, P3: UINT, P4: UINT, P5: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.QueryContextMenu(self, P1, P2, P3, P4, P5)
proc InvokeCommand*(self: ptr IContextMenu, P1: LPCMINVOKECOMMANDINFO): HRESULT {.inline, discardable.} = self.lpVtbl.InvokeCommand(self, P1)
proc GetCommandString*(self: ptr IContextMenu, P1: UINT, P2: UINT, P3: PUINT, P4: LPSTR, P5: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetCommandString(self, P1, P2, P3, P4, P5)
converter winim_converter_IContextMenu2*(x: ptr IContextMenu2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IContextMenu2*(x: ptr IContextMenu2): ptr IContextMenu = cast[ptr IContextMenu](x)
proc QueryInterface*(self: ptr IContextMenu2, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IContextMenu2): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IContextMenu2): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc QueryContextMenu*(self: ptr IContextMenu2, P1: HMENU, P2: UINT, P3: UINT, P4: UINT, P5: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.QueryContextMenu(self, P1, P2, P3, P4, P5)
proc InvokeCommand*(self: ptr IContextMenu2, P1: LPCMINVOKECOMMANDINFO): HRESULT {.inline, discardable.} = self.lpVtbl.InvokeCommand(self, P1)
proc GetCommandString*(self: ptr IContextMenu2, P1: UINT, P2: UINT, P3: PUINT, P4: LPSTR, P5: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetCommandString(self, P1, P2, P3, P4, P5)
proc HandleMenuMsg*(self: ptr IContextMenu2, P1: UINT, P2: WPARAM, P3: LPARAM): HRESULT {.inline, discardable.} = self.lpVtbl.HandleMenuMsg(self, P1, P2, P3)
converter winim_converter_IColumnProvider*(x: ptr IColumnProvider): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IColumnProvider, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IColumnProvider): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IColumnProvider): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc Initialize*(self: ptr IColumnProvider, P1: LPCSHCOLUMNINIT): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, P1)
proc GetColumnInfo*(self: ptr IColumnProvider, P1: DWORD, P2: ptr SHCOLUMNINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetColumnInfo(self, P1, P2)
proc GetItemData*(self: ptr IColumnProvider, P1: LPCSHCOLUMNID, P2: LPCSHCOLUMNDATA, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetItemData(self, P1, P2, P3)
converter winim_converter_IQueryInfo*(x: ptr IQueryInfo): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IQueryInfo, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IQueryInfo): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IQueryInfo): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetInfoTip*(self: ptr IQueryInfo, P1: DWORD, P2: ptr ptr WCHAR): HRESULT {.inline, discardable.} = self.lpVtbl.GetInfoTip(self, P1, P2)
proc GetInfoFlags*(self: ptr IQueryInfo, P1: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetInfoFlags(self, P1)
converter winim_converter_IShellExtInit*(x: ptr IShellExtInit): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IShellExtInit, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellExtInit): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellExtInit): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc Initialize*(self: ptr IShellExtInit, P1: LPCITEMIDLIST, P2: LPDATAOBJECT, P3: HKEY): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, P1, P2, P3)
converter winim_converter_IShellPropSheetExt*(x: ptr IShellPropSheetExt): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IShellPropSheetExt, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellPropSheetExt): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellPropSheetExt): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc AddPages*(self: ptr IShellPropSheetExt, P1: LPFNADDPROPSHEETPAGE, P2: LPARAM): HRESULT {.inline, discardable.} = self.lpVtbl.AddPages(self, P1, P2)
proc ReplacePage*(self: ptr IShellPropSheetExt, P1: UINT, P2: LPFNADDPROPSHEETPAGE, P3: LPARAM): HRESULT {.inline, discardable.} = self.lpVtbl.ReplacePage(self, P1, P2, P3)
converter winim_converter_IExtractIconA*(x: ptr IExtractIconA): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IExtractIconA, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IExtractIconA): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IExtractIconA): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetIconLocation*(self: ptr IExtractIconA, P1: UINT, P2: LPSTR, P3: UINT, P4: ptr int32, P5: PUINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetIconLocation(self, P1, P2, P3, P4, P5)
proc Extract*(self: ptr IExtractIconA, P1: LPCSTR, P2: UINT, P3: ptr HICON, P4: ptr HICON, P5: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.Extract(self, P1, P2, P3, P4, P5)
converter winim_converter_IExtractIconW*(x: ptr IExtractIconW): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IExtractIconW, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IExtractIconW): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IExtractIconW): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetIconLocation*(self: ptr IExtractIconW, P1: UINT, P2: LPWSTR, P3: UINT, P4: ptr int32, P5: PUINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetIconLocation(self, P1, P2, P3, P4, P5)
proc Extract*(self: ptr IExtractIconW, P1: LPCWSTR, P2: UINT, P3: ptr HICON, P4: ptr HICON, P5: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.Extract(self, P1, P2, P3, P4, P5)
converter winim_converter_IShellLinkA*(x: ptr IShellLinkA): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IShellLinkA, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellLinkA): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellLinkA): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetPath*(self: ptr IShellLinkA, P1: LPSTR, P2: int32, P3: ptr WIN32_FIND_DATAA, P4: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetPath(self, P1, P2, P3, P4)
proc GetIDList*(self: ptr IShellLinkA, P1: ptr LPITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.GetIDList(self, P1)
proc SetIDList*(self: ptr IShellLinkA, P1: LPCITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.SetIDList(self, P1)
proc GetDescription*(self: ptr IShellLinkA, P1: LPSTR, P2: int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetDescription(self, P1, P2)
proc SetDescription*(self: ptr IShellLinkA, P1: LPCSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetDescription(self, P1)
proc GetWorkingDirectory*(self: ptr IShellLinkA, P1: LPSTR, P2: int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetWorkingDirectory(self, P1, P2)
proc SetWorkingDirectory*(self: ptr IShellLinkA, P1: LPCSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetWorkingDirectory(self, P1)
proc GetArguments*(self: ptr IShellLinkA, P1: LPSTR, P2: int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetArguments(self, P1, P2)
proc SetArguments*(self: ptr IShellLinkA, P1: LPCSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetArguments(self, P1)
proc GetHotkey*(self: ptr IShellLinkA, P1: PWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetHotkey(self, P1)
proc SetHotkey*(self: ptr IShellLinkA, P1: WORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetHotkey(self, P1)
proc GetShowCmd*(self: ptr IShellLinkA, P1: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetShowCmd(self, P1)
proc SetShowCmd*(self: ptr IShellLinkA, P1: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetShowCmd(self, P1)
proc GetIconLocation*(self: ptr IShellLinkA, P1: LPSTR, P2: int32, P3: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetIconLocation(self, P1, P2, P3)
proc SetIconLocation*(self: ptr IShellLinkA, P1: LPCSTR, P2: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetIconLocation(self, P1, P2)
proc SetRelativePath*(self: ptr IShellLinkA, P1: LPCSTR, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetRelativePath(self, P1, P2)
proc Resolve*(self: ptr IShellLinkA, P1: HWND, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Resolve(self, P1, P2)
proc SetPath*(self: ptr IShellLinkA, P1: LPCSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetPath(self, P1)
converter winim_converter_IShellLinkW*(x: ptr IShellLinkW): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IShellLinkW, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellLinkW): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellLinkW): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetPath*(self: ptr IShellLinkW, P1: LPWSTR, P2: int32, P3: ptr WIN32_FIND_DATAW, P4: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetPath(self, P1, P2, P3, P4)
proc GetIDList*(self: ptr IShellLinkW, P1: ptr LPITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.GetIDList(self, P1)
proc SetIDList*(self: ptr IShellLinkW, P1: LPCITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.SetIDList(self, P1)
proc GetDescription*(self: ptr IShellLinkW, P1: LPWSTR, P2: int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetDescription(self, P1, P2)
proc SetDescription*(self: ptr IShellLinkW, P1: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetDescription(self, P1)
proc GetWorkingDirectory*(self: ptr IShellLinkW, P1: LPWSTR, P2: int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetWorkingDirectory(self, P1, P2)
proc SetWorkingDirectory*(self: ptr IShellLinkW, P1: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetWorkingDirectory(self, P1)
proc GetArguments*(self: ptr IShellLinkW, P1: LPWSTR, P2: int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetArguments(self, P1, P2)
proc SetArguments*(self: ptr IShellLinkW, P1: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetArguments(self, P1)
proc GetHotkey*(self: ptr IShellLinkW, P1: PWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetHotkey(self, P1)
proc SetHotkey*(self: ptr IShellLinkW, P1: WORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetHotkey(self, P1)
proc GetShowCmd*(self: ptr IShellLinkW, P1: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetShowCmd(self, P1)
proc SetShowCmd*(self: ptr IShellLinkW, P1: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetShowCmd(self, P1)
proc GetIconLocation*(self: ptr IShellLinkW, P1: LPWSTR, P2: int32, P3: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetIconLocation(self, P1, P2, P3)
proc SetIconLocation*(self: ptr IShellLinkW, P1: LPCWSTR, P2: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetIconLocation(self, P1, P2)
proc SetRelativePath*(self: ptr IShellLinkW, P1: LPCWSTR, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetRelativePath(self, P1, P2)
proc Resolve*(self: ptr IShellLinkW, P1: HWND, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Resolve(self, P1, P2)
proc SetPath*(self: ptr IShellLinkW, P1: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetPath(self, P1)
converter winim_converter_IShellFolder*(x: ptr IShellFolder): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IShellFolder, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellFolder): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellFolder): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc ParseDisplayName*(self: ptr IShellFolder, P1: HWND, P2: LPBC, P3: LPOLESTR, P4: PULONG, P5: ptr LPITEMIDLIST, P6: PULONG): HRESULT {.inline, discardable.} = self.lpVtbl.ParseDisplayName(self, P1, P2, P3, P4, P5, P6)
proc EnumObjects*(self: ptr IShellFolder, P1: HWND, P2: DWORD, P3: ptr LPENUMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.EnumObjects(self, P1, P2, P3)
proc BindToObject*(self: ptr IShellFolder, P1: LPCITEMIDLIST, P2: LPBC, P3: REFIID, P4: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.BindToObject(self, P1, P2, P3, P4)
proc BindToStorage*(self: ptr IShellFolder, P1: LPCITEMIDLIST, P2: LPBC, P3: REFIID, P4: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.BindToStorage(self, P1, P2, P3, P4)
proc CompareIDs*(self: ptr IShellFolder, P1: LPARAM, P2: LPCITEMIDLIST, P3: LPCITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.CompareIDs(self, P1, P2, P3)
proc CreateViewObject*(self: ptr IShellFolder, P1: HWND, P2: REFIID, P3: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.CreateViewObject(self, P1, P2, P3)
proc GetAttributesOf*(self: ptr IShellFolder, P1: UINT, P2: ptr LPCITEMIDLIST, P3: PULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetAttributesOf(self, P1, P2, P3)
proc GetUIObjectOf*(self: ptr IShellFolder, P1: HWND, P2: UINT, P3: ptr LPCITEMIDLIST, P4: REFIID, P5: PUINT, P6: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.GetUIObjectOf(self, P1, P2, P3, P4, P5, P6)
proc GetDisplayNameOf*(self: ptr IShellFolder, P1: LPCITEMIDLIST, P2: DWORD, P3: LPSTRRET): HRESULT {.inline, discardable.} = self.lpVtbl.GetDisplayNameOf(self, P1, P2, P3)
proc SetNameOf*(self: ptr IShellFolder, P1: HWND, P2: LPCITEMIDLIST, P3: LPCOLESTR, P4: DWORD, P5: ptr LPITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.SetNameOf(self, P1, P2, P3, P4, P5)
converter winim_converter_IEnumExtraSearch*(x: ptr IEnumExtraSearch): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IEnumExtraSearch, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IEnumExtraSearch): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IEnumExtraSearch): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc Next*(self: ptr IEnumExtraSearch, P1: ULONG, P2: ptr LPEXTRASEARCH, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumExtraSearch, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumExtraSearch): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumExtraSearch, P1: ptr ptr IEnumExtraSearch): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_IShellFolder2*(x: ptr IShellFolder2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IShellFolder2*(x: ptr IShellFolder2): ptr IShellFolder = cast[ptr IShellFolder](x)
proc QueryInterface*(self: ptr IShellFolder2, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellFolder2): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellFolder2): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc ParseDisplayName*(self: ptr IShellFolder2, P1: HWND, P2: LPBC, P3: LPOLESTR, P4: PULONG, P5: ptr LPITEMIDLIST, P6: PULONG): HRESULT {.inline, discardable.} = self.lpVtbl.ParseDisplayName(self, P1, P2, P3, P4, P5, P6)
proc EnumObjects*(self: ptr IShellFolder2, P1: HWND, P2: DWORD, P3: ptr LPENUMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.EnumObjects(self, P1, P2, P3)
proc BindToObject*(self: ptr IShellFolder2, P1: LPCITEMIDLIST, P2: LPBC, P3: REFIID, P4: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.BindToObject(self, P1, P2, P3, P4)
proc BindToStorage*(self: ptr IShellFolder2, P1: LPCITEMIDLIST, P2: LPBC, P3: REFIID, P4: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.BindToStorage(self, P1, P2, P3, P4)
proc CompareIDs*(self: ptr IShellFolder2, P1: LPARAM, P2: LPCITEMIDLIST, P3: LPCITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.CompareIDs(self, P1, P2, P3)
proc CreateViewObject*(self: ptr IShellFolder2, P1: HWND, P2: REFIID, P3: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.CreateViewObject(self, P1, P2, P3)
proc GetAttributesOf*(self: ptr IShellFolder2, P1: UINT, P2: ptr LPCITEMIDLIST, P3: PULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetAttributesOf(self, P1, P2, P3)
proc GetUIObjectOf*(self: ptr IShellFolder2, P1: HWND, P2: UINT, P3: ptr LPCITEMIDLIST, P4: REFIID, P5: PUINT, P6: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.GetUIObjectOf(self, P1, P2, P3, P4, P5, P6)
proc GetDisplayNameOf*(self: ptr IShellFolder2, P1: LPCITEMIDLIST, P2: DWORD, P3: LPSTRRET): HRESULT {.inline, discardable.} = self.lpVtbl.GetDisplayNameOf(self, P1, P2, P3)
proc SetNameOf*(self: ptr IShellFolder2, P1: HWND, P2: LPCITEMIDLIST, P3: LPCOLESTR, P4: DWORD, P5: ptr LPITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.SetNameOf(self, P1, P2, P3, P4, P5)
proc GetDefaultSearchGUID*(self: ptr IShellFolder2, P1: ptr GUID): HRESULT {.inline, discardable.} = self.lpVtbl.GetDefaultSearchGUID(self, P1)
proc EnumSearches*(self: ptr IShellFolder2, P1: ptr ptr IEnumExtraSearch): HRESULT {.inline, discardable.} = self.lpVtbl.EnumSearches(self, P1)
proc GetDefaultColumn*(self: ptr IShellFolder2, P1: DWORD, P2: ptr ULONG, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetDefaultColumn(self, P1, P2, P3)
proc GetDefaultColumnState*(self: ptr IShellFolder2, P1: UINT, P2: ptr SHCOLSTATEF): HRESULT {.inline, discardable.} = self.lpVtbl.GetDefaultColumnState(self, P1, P2)
proc GetDetailsEx*(self: ptr IShellFolder2, P1: LPCITEMIDLIST, P2: ptr SHCOLUMNID, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetDetailsEx(self, P1, P2, P3)
proc GetDetailsOf*(self: ptr IShellFolder2, P1: LPCITEMIDLIST, P2: UINT, P3: ptr SHELLDETAILS): HRESULT {.inline, discardable.} = self.lpVtbl.GetDetailsOf(self, P1, P2, P3)
proc MapColumnToSCID*(self: ptr IShellFolder2, P1: UINT, P2: ptr SHCOLUMNID): HRESULT {.inline, discardable.} = self.lpVtbl.MapColumnToSCID(self, P1, P2)
converter winim_converter_ICopyHook*(x: ptr ICopyHook): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr ICopyHook, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr ICopyHook): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr ICopyHook): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc CopyCallback*(self: ptr ICopyHook, P1: HWND, P2: UINT, P3: UINT, P4: LPCSTR, P5: DWORD, P6: LPCSTR, P7: DWORD): UINT {.inline, discardable.} = self.lpVtbl.CopyCallback(self, P1, P2, P3, P4, P5, P6, P7)
converter winim_converter_IFileViewerSite*(x: ptr IFileViewerSite): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IFileViewerSite, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IFileViewerSite): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IFileViewerSite): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc SetPinnedWindow*(self: ptr IFileViewerSite, P1: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.SetPinnedWindow(self, P1)
proc GetPinnedWindow*(self: ptr IFileViewerSite, P1: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.GetPinnedWindow(self, P1)
converter winim_converter_IFileViewer*(x: ptr IFileViewer): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IFileViewer, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IFileViewer): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IFileViewer): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc ShowInitialize*(self: ptr IFileViewer, P1: LPFILEVIEWERSITE): HRESULT {.inline, discardable.} = self.lpVtbl.ShowInitialize(self, P1)
proc Show*(self: ptr IFileViewer, P1: LPFVSHOWINFO): HRESULT {.inline, discardable.} = self.lpVtbl.Show(self, P1)
proc PrintTo*(self: ptr IFileViewer, P1: LPSTR, P2: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.PrintTo(self, P1, P2)
converter winim_converter_IFileSystemBindData*(x: ptr IFileSystemBindData): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IFileSystemBindData, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IFileSystemBindData): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IFileSystemBindData): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc SetFindData*(self: ptr IFileSystemBindData, P1: ptr WIN32_FIND_DATAW): HRESULT {.inline, discardable.} = self.lpVtbl.SetFindData(self, P1)
proc GetFindData*(self: ptr IFileSystemBindData, P1: ptr WIN32_FIND_DATAW): HRESULT {.inline, discardable.} = self.lpVtbl.GetFindData(self, P1)
converter winim_converter_IPersistFolder*(x: ptr IPersistFolder): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPersistFolder*(x: ptr IPersistFolder): ptr IPersist = cast[ptr IPersist](x)
proc QueryInterface*(self: ptr IPersistFolder, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IPersistFolder): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IPersistFolder): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetClassID*(self: ptr IPersistFolder, P1: ptr CLSID): HRESULT {.inline, discardable.} = self.lpVtbl.GetClassID(self, P1)
proc Initialize*(self: ptr IPersistFolder, P1: LPCITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, P1)
converter winim_converter_IPersistFolder2*(x: ptr IPersistFolder2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPersistFolder2*(x: ptr IPersistFolder2): ptr IPersistFolder = cast[ptr IPersistFolder](x)
converter winim_converter_IPersistFolder2*(x: ptr IPersistFolder2): ptr IPersist = cast[ptr IPersist](x)
proc QueryInterface*(self: ptr IPersistFolder2, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IPersistFolder2): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IPersistFolder2): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetClassID*(self: ptr IPersistFolder2, P1: ptr CLSID): HRESULT {.inline, discardable.} = self.lpVtbl.GetClassID(self, P1)
proc Initialize*(self: ptr IPersistFolder2, P1: LPCITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, P1)
proc GetCurFolder*(self: ptr IPersistFolder2, P1: ptr LPITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.GetCurFolder(self, P1)
converter winim_converter_IPersistFolder3*(x: ptr IPersistFolder3): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPersistFolder3*(x: ptr IPersistFolder3): ptr IPersistFolder2 = cast[ptr IPersistFolder2](x)
converter winim_converter_IPersistFolder3*(x: ptr IPersistFolder3): ptr IPersistFolder = cast[ptr IPersistFolder](x)
converter winim_converter_IPersistFolder3*(x: ptr IPersistFolder3): ptr IPersist = cast[ptr IPersist](x)
proc QueryInterface*(self: ptr IPersistFolder3, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IPersistFolder3): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IPersistFolder3): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetClassID*(self: ptr IPersistFolder3, P1: ptr CLSID): HRESULT {.inline, discardable.} = self.lpVtbl.GetClassID(self, P1)
proc Initialize*(self: ptr IPersistFolder3, P1: LPCITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, P1)
proc GetCurFolder*(self: ptr IPersistFolder3, P1: ptr LPITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.GetCurFolder(self, P1)
proc InitializeEx*(self: ptr IPersistFolder3, P1: ptr IBindCtx, P2: LPCITEMIDLIST, P3: ptr PERSIST_FOLDER_TARGET_INFO): HRESULT {.inline, discardable.} = self.lpVtbl.InitializeEx(self, P1, P2, P3)
proc GetFolderTargetInfo*(self: ptr IPersistFolder3, P1: ptr PERSIST_FOLDER_TARGET_INFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolderTargetInfo(self, P1)
converter winim_converter_IShellBrowser*(x: ptr IShellBrowser): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IShellBrowser*(x: ptr IShellBrowser): ptr IOleWindow = cast[ptr IOleWindow](x)
proc QueryInterface*(self: ptr IShellBrowser, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellBrowser): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellBrowser): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetWindow*(self: ptr IShellBrowser, P1: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.GetWindow(self, P1)
proc ContextSensitiveHelp*(self: ptr IShellBrowser, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.ContextSensitiveHelp(self, P1)
proc InsertMenusSB*(self: ptr IShellBrowser, P1: HMENU, P2: LPOLEMENUGROUPWIDTHS): HRESULT {.inline, discardable.} = self.lpVtbl.InsertMenusSB(self, P1, P2)
proc SetMenuSB*(self: ptr IShellBrowser, P1: HMENU, P2: HOLEMENU, P3: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.SetMenuSB(self, P1, P2, P3)
proc RemoveMenusSB*(self: ptr IShellBrowser, P1: HMENU): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveMenusSB(self, P1)
proc SetStatusTextSB*(self: ptr IShellBrowser, P1: LPCOLESTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetStatusTextSB(self, P1)
proc EnableModelessSB*(self: ptr IShellBrowser, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.EnableModelessSB(self, P1)
proc TranslateAcceleratorSB*(self: ptr IShellBrowser, P1: LPMSG, P2: WORD): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateAcceleratorSB(self, P1, P2)
proc BrowseObject*(self: ptr IShellBrowser, P1: LPCITEMIDLIST, P2: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.BrowseObject(self, P1, P2)
proc GetViewStateStream*(self: ptr IShellBrowser, P1: DWORD, P2: ptr LPSTREAM): HRESULT {.inline, discardable.} = self.lpVtbl.GetViewStateStream(self, P1, P2)
proc GetControlWindow*(self: ptr IShellBrowser, P1: UINT, P2: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.GetControlWindow(self, P1, P2)
proc SendControlMsg*(self: ptr IShellBrowser, P1: UINT, P2: UINT, P3: WPARAM, P4: LPARAM, P5: ptr LRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.SendControlMsg(self, P1, P2, P3, P4, P5)
proc QueryActiveShellView*(self: ptr IShellBrowser, P1: ptr LPSHELLVIEW): HRESULT {.inline, discardable.} = self.lpVtbl.QueryActiveShellView(self, P1)
proc OnViewWindowActive*(self: ptr IShellBrowser, P1: LPSHELLVIEW): HRESULT {.inline, discardable.} = self.lpVtbl.OnViewWindowActive(self, P1)
proc SetToolbarItems*(self: ptr IShellBrowser, P1: LPTBBUTTON, P2: UINT, P3: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetToolbarItems(self, P1, P2, P3)
converter winim_converter_IShellView*(x: ptr IShellView): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IShellView*(x: ptr IShellView): ptr IOleWindow = cast[ptr IOleWindow](x)
proc QueryInterface*(self: ptr IShellView, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellView): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellView): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetWindow*(self: ptr IShellView, P1: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.GetWindow(self, P1)
proc ContextSensitiveHelp*(self: ptr IShellView, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.ContextSensitiveHelp(self, P1)
proc TranslateAccelerator*(self: ptr IShellView, P1: LPMSG): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateAccelerator(self, P1)
proc EnableModeless*(self: ptr IShellView, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.EnableModeless(self, P1)
proc UIActivate*(self: ptr IShellView, P1: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.UIActivate(self, P1)
proc Refresh*(self: ptr IShellView): HRESULT {.inline, discardable.} = self.lpVtbl.Refresh(self)
proc CreateViewWindow*(self: ptr IShellView, P1: ptr IShellView, P2: LPCFOLDERSETTINGS, P3: LPSHELLBROWSER, P4: ptr RECT, P5: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.CreateViewWindow(self, P1, P2, P3, P4, P5)
proc DestroyViewWindow*(self: ptr IShellView): HRESULT {.inline, discardable.} = self.lpVtbl.DestroyViewWindow(self)
proc GetCurrentInfo*(self: ptr IShellView, P1: LPFOLDERSETTINGS): HRESULT {.inline, discardable.} = self.lpVtbl.GetCurrentInfo(self, P1)
proc AddPropertySheetPages*(self: ptr IShellView, P1: DWORD, P2: LPFNADDPROPSHEETPAGE, P3: LPARAM): HRESULT {.inline, discardable.} = self.lpVtbl.AddPropertySheetPages(self, P1, P2, P3)
proc SaveViewState*(self: ptr IShellView): HRESULT {.inline, discardable.} = self.lpVtbl.SaveViewState(self)
proc SelectItem*(self: ptr IShellView, P1: LPCITEMIDLIST, P2: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SelectItem(self, P1, P2)
proc GetItemObject*(self: ptr IShellView, P1: UINT, P2: REFIID, P3: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.GetItemObject(self, P1, P2, P3)
converter winim_converter_ICommDlgBrowser*(x: ptr ICommDlgBrowser): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr ICommDlgBrowser, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr ICommDlgBrowser): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr ICommDlgBrowser): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc OnDefaultCommand*(self: ptr ICommDlgBrowser, P1: ptr IShellView): HRESULT {.inline, discardable.} = self.lpVtbl.OnDefaultCommand(self, P1)
proc OnStateChange*(self: ptr ICommDlgBrowser, P1: ptr IShellView, P2: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.OnStateChange(self, P1, P2)
proc IncludeObject*(self: ptr ICommDlgBrowser, P1: ptr IShellView, P2: LPCITEMIDLIST): HRESULT {.inline, discardable.} = self.lpVtbl.IncludeObject(self, P1, P2)
converter winim_converter_IShellView2*(x: ptr IShellView2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IShellView2*(x: ptr IShellView2): ptr IShellView = cast[ptr IShellView](x)
converter winim_converter_IShellView2*(x: ptr IShellView2): ptr IOleWindow = cast[ptr IOleWindow](x)
proc QueryInterface*(self: ptr IShellView2, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellView2): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellView2): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetWindow*(self: ptr IShellView2, P1: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.GetWindow(self, P1)
proc ContextSensitiveHelp*(self: ptr IShellView2, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.ContextSensitiveHelp(self, P1)
proc TranslateAccelerator*(self: ptr IShellView2, P1: LPMSG): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateAccelerator(self, P1)
proc EnableModeless*(self: ptr IShellView2, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.EnableModeless(self, P1)
proc UIActivate*(self: ptr IShellView2, P1: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.UIActivate(self, P1)
proc Refresh*(self: ptr IShellView2): HRESULT {.inline, discardable.} = self.lpVtbl.Refresh(self)
proc CreateViewWindow*(self: ptr IShellView2, P1: ptr IShellView, P2: LPCFOLDERSETTINGS, P3: LPSHELLBROWSER, P4: ptr RECT, P5: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.CreateViewWindow(self, P1, P2, P3, P4, P5)
proc DestroyViewWindow*(self: ptr IShellView2): HRESULT {.inline, discardable.} = self.lpVtbl.DestroyViewWindow(self)
proc GetCurrentInfo*(self: ptr IShellView2, P1: LPFOLDERSETTINGS): HRESULT {.inline, discardable.} = self.lpVtbl.GetCurrentInfo(self, P1)
proc AddPropertySheetPages*(self: ptr IShellView2, P1: DWORD, P2: LPFNADDPROPSHEETPAGE, P3: LPARAM): HRESULT {.inline, discardable.} = self.lpVtbl.AddPropertySheetPages(self, P1, P2, P3)
proc SaveViewState*(self: ptr IShellView2): HRESULT {.inline, discardable.} = self.lpVtbl.SaveViewState(self)
proc SelectItem*(self: ptr IShellView2, P1: LPCITEMIDLIST, P2: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SelectItem(self, P1, P2)
proc GetItemObject*(self: ptr IShellView2, P1: UINT, P2: REFIID, P3: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.GetItemObject(self, P1, P2, P3)
proc GetView*(self: ptr IShellView2, P1: ptr SHELLVIEWID, P2: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetView(self, P1, P2)
proc CreateViewWindow2*(self: ptr IShellView2, P1: LPSV2CVW2_PARAMS): HRESULT {.inline, discardable.} = self.lpVtbl.CreateViewWindow2(self, P1)
converter winim_converter_IShellExecuteHookA*(x: ptr IShellExecuteHookA): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IShellExecuteHookA, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellExecuteHookA): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellExecuteHookA): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc Execute*(self: ptr IShellExecuteHookA, P1: LPSHELLEXECUTEINFOA): HRESULT {.inline, discardable.} = self.lpVtbl.Execute(self, P1)
converter winim_converter_IShellExecuteHookW*(x: ptr IShellExecuteHookW): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IShellExecuteHookW, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellExecuteHookW): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellExecuteHookW): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc Execute*(self: ptr IShellExecuteHookW, P1: LPSHELLEXECUTEINFOW): HRESULT {.inline, discardable.} = self.lpVtbl.Execute(self, P1)
converter winim_converter_IShellIcon*(x: ptr IShellIcon): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IShellIcon, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellIcon): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellIcon): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetIconOf*(self: ptr IShellIcon, P1: LPCITEMIDLIST, P2: UINT, P3: PINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetIconOf(self, P1, P2, P3)
converter winim_converter_IShellIconOverlayIdentifier*(x: ptr IShellIconOverlayIdentifier): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IShellIconOverlayIdentifier, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IShellIconOverlayIdentifier): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IShellIconOverlayIdentifier): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc IsMemberOf*(self: ptr IShellIconOverlayIdentifier, P1: LPCWSTR, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.IsMemberOf(self, P1, P2)
proc GetOverlayInfo*(self: ptr IShellIconOverlayIdentifier, P1: LPWSTR, P2: int32, P3: ptr int32, P4: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetOverlayInfo(self, P1, P2, P3, P4)
proc GetPriority*(self: ptr IShellIconOverlayIdentifier, P1: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetPriority(self, P1)
converter winim_converter_IDragSourceHelper*(x: ptr IDragSourceHelper): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IDragSourceHelper, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, riid, ppv)
proc AddRef*(self: ptr IDragSourceHelper): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IDragSourceHelper): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc InitializeFromBitmap*(self: ptr IDragSourceHelper, pshdi: LPSHDRAGIMAGE, pDataObject: ptr IDataObject): HRESULT {.inline, discardable.} = self.lpVtbl.InitializeFromBitmap(self, pshdi, pDataObject)
proc InitializeFromWindow*(self: ptr IDragSourceHelper, hwnd: HWND, ppt: ptr POINT, pDataObject: ptr IDataObject): HRESULT {.inline, discardable.} = self.lpVtbl.InitializeFromWindow(self, hwnd, ppt, pDataObject)
converter winim_converter_IDropTargetHelper*(x: ptr IDropTargetHelper): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IDropTargetHelper, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, riid, ppv)
proc AddRef*(self: ptr IDropTargetHelper): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IDropTargetHelper): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc DragEnter*(self: ptr IDropTargetHelper, hwndTarget: HWND, pDataObject: ptr IDataObject, ppt: ptr POINT, dwEffect: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.DragEnter(self, hwndTarget, pDataObject, ppt, dwEffect)
proc DragLeave*(self: ptr IDropTargetHelper): HRESULT {.inline, discardable.} = self.lpVtbl.DragLeave(self)
proc DragOver*(self: ptr IDropTargetHelper, ppt: ptr POINT, dwEffect: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.DragOver(self, ppt, dwEffect)
proc Drop*(self: ptr IDropTargetHelper, pDataObject: ptr IDataObject, ppt: ptr POINT, dwEffect: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Drop(self, pDataObject, ppt, dwEffect)
proc Show*(self: ptr IDropTargetHelper, fShow: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Show(self, fShow)

proc `pOleStr=`*(self: var STRRET, x: LPWSTR) = self.u1.pOleStr = x
proc pOleStr*(self: STRRET): LPWSTR = self.u1.pOleStr
proc `uOffset=`*(self: var STRRET, x: UINT) = self.u1.uOffset = x
proc uOffset*(self: STRRET): UINT = self.u1.uOffset
proc `cStr=`*(self: var STRRET, x: array[MAX_PATH, char]) = self.u1.cStr = x
proc cStr*(self: STRRET): array[MAX_PATH, char] = self.u1.cStr

# shell/shldisp.nim

const
  ACO_AUTOSUGGEST* = 0x01

type
  IAutoComplete* {.pure.} = object
    lpVtbl*: ptr IAutoCompleteVtbl
  IAutoCompleteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Init*: proc(self: ptr IAutoComplete, P1: HWND, P2: ptr IUnknown, P3: LPCOLESTR, P4: LPCOLESTR): HRESULT {.stdcall.}
    Enable*: proc(self: ptr IAutoComplete, P1: BOOL): HRESULT {.stdcall.}
  LPAUTOCOMPLETE* = ptr IAutoComplete
  IAutoComplete2* {.pure.} = object
    lpVtbl*: ptr IAutoComplete2Vtbl
  IAutoComplete2Vtbl* {.pure, inheritable.} = object of IAutoCompleteVtbl
    SetOptions*: proc(self: ptr IAutoComplete2, P1: DWORD): HRESULT {.stdcall.}
    GetOptions*: proc(self: ptr IAutoComplete2, P1: ptr DWORD): HRESULT {.stdcall.}
  LPAUTOCOMPLETE2* = ptr IAutoComplete2

converter winim_converter_IAutoComplete*(x: ptr IAutoComplete): ptr IUnknown = cast[ptr IUnknown](x)
proc Init*(self: ptr IAutoComplete, P1: HWND, P2: ptr IUnknown, P3: LPCOLESTR, P4: LPCOLESTR): HRESULT {.inline, discardable.} = self.lpVtbl.Init(self, P1, P2, P3, P4)
proc Enable*(self: ptr IAutoComplete, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Enable(self, P1)
converter winim_converter_IAutoComplete2*(x: ptr IAutoComplete2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IAutoComplete2*(x: ptr IAutoComplete2): ptr IAutoComplete = cast[ptr IAutoComplete](x)
proc SetOptions*(self: ptr IAutoComplete2, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetOptions(self, P1)
proc GetOptions*(self: ptr IAutoComplete2, P1: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetOptions(self, P1)

# shell/shlwapi.nim

const
  DLLVER_PLATFORM_WINDOWS* = 0x00000001
  DLLVER_PLATFORM_NT* = 0x00000002
  URL_DONT_ESCAPE_EXTRA_INFO* = 0x02000000
  URL_DONT_SIMPLIFY* = 0x08000000
  URL_ESCAPE_PERCENT* = 0x00001000
  URL_ESCAPE_SEGMENT_ONLY* = 0x00002000
  URL_ESCAPE_SPACES_ONLY* = 0x04000000
  URL_ESCAPE_UNSAFE* = 0x20000000
  URL_INTERNAL_PATH* = 0x00800000
  URL_PARTFLAG_KEEPSCHEME* = 0x00000001
  URL_PLUGGABLE_PROTOCOL* = 0x40000000
  CURL_UNESCAPE* = 0x10000000 # renamed from URL_UNESCAPE
  URL_UNESCAPE_HIGH_ANSI_ONLY* = 0x00400000
  CURL_UNESCAPE_INPLACE* = 0x00100000 # renamed from URL_UNESCAPE_INPLACE
  # ASSOCSTR* = enum
  ASSOCSTR_COMMAND* = 0
  ASSOCSTR_EXECUTABLE* = 1
  ASSOCSTR_FRIENDLYDOCNAME* = 2
  ASSOCSTR_FRIENDLYAPPNAME* = 3
  ASSOCSTR_NOOPEN* = 4
  ASSOCSTR_SHELLNEWVALUE* = 5
  ASSOCSTR_DDECOMMAND* = 6
  ASSOCSTR_DDEIFEXEC* = 7
  ASSOCSTR_DDEAPPLICATION* = 8
  ASSOCSTR_DDETOPIC* = 9
  # ASSOCKEY* = enum
  ASSOCKEY_SHELLEXECCLASS* = 1
  ASSOCKEY_APP* = 2
  ASSOCKEY_CLASS* = 3
  ASSOCKEY_BASECLASS* = 4
  # ASSOCDATA* = enum
  ASSOCDATA_MSIDESCRIPTOR* = 1
  ASSOCDATA_NOACTIVATEHANDLER* = 1
  ASSOCDATA_QUERYCLASSSTORE* = 2
  # SHREGDEL_FLAGS* = enum
  SHREGDEL_DEFAULT* = 0x00000000
  SHREGDEL_HKCU* = 0x00000001
  SHREGDEL_HKLM* = 0x00000010
  SHREGDEL_BOTH* = 0x00000011
  # SHREGENUM_FLAGS* = enum
  SHREGENUM_DEFAULT* = 0x00000000
  SHREGENUM_HKCU* = 0x00000001
  SHREGENUM_HKLM* = 0x00000010
  SHREGENUM_BOTH* = 0x00000011
  # URLIS*
  TURLIS_URL* = 0 # renamed from URLIS_URL
  TURLIS_OPAQUE* = 1 # renamed from URLIS_OPAQUE
  TURLIS_NOHISTORY* = 2 # renamed from URLIS_NOHISTORY
  TURLIS_FILEURL* = 3 # renamed from URLIS_FILEURL
  TURLIS_APPLIABLE* = 4 # renamed from URLIS_APPLIABLE
  TURLIS_DIRECTORY* = 5 # renamed from URLIS_DIRECTORY
  TURLIS_HASQUERY* = 6 # renamed from URLIS_HASQUERY

type
  ASSOCKEY* = int32
  ASSOCSTR* = int32
  TURLIS* = int32 # renamed from URLIS
  SHREGDEL_FLAGS* = int32
  SHREGENUM_FLAGS* = int32

type
  DLLVERSIONINFO* {.final, pure.} = object
    cbSize*: DWORD
    dwMajorVersion*: DWORD
    dwMinorVersion*: DWORD
    dwBuildNumber*: DWORD
    dwPlatformID*: DWORD
  DLLVERSIONINFO2* {.final, pure.} = object
    info1*: DLLVERSIONINFO
    dwFlags*: DWORD
    ullVersion*: ULONGLONG
  HUSKEY* = HANDLE
  PHUSKEY* = ptr HUSKEY
  DLLGETVERSIONPROC* = proc (P1: ptr DLLVERSIONINFO): HRESULT {.stdcall.}
  ASSOCF* = DWORD


proc ChrCmpIA*(P1: WORD, P2: WORD): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc ChrCmpIW*(P1: WCHAR, P2: WCHAR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc IntlStrEqWorkerA*(P1: BOOL, P2: LPCSTR, P3: LPCSTR, P4: int32): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc IntlStrEqWorkerW*(P1: BOOL, P2: LPCWSTR, P3: LPCWSTR, P4: int32): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc SHStrDupA*(P1: LPCSTR, P2: ptr LPWSTR): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc SHStrDupW*(P1: LPCWSTR, P2: ptr LPWSTR): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc StrCatA*(P1: LPSTR, P2: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrCatW*(P1: LPWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrCatBuffA*(P1: LPSTR, P2: LPCSTR, P3: int32): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrCatBuffW*(P1: LPWSTR, P2: LPCWSTR, P3: int32): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrCatChainW*(P1: LPWSTR, P2: DWORD, P3: DWORD, P4: LPCWSTR): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc StrChrA*(P1: LPCSTR, P2: WORD): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrChrW*(P1: LPCWSTR, P2: WCHAR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrChrIA*(P1: LPCSTR, P2: WORD): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrChrIW*(P1: LPCWSTR, P2: WCHAR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrCmpIW*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrCmpW*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrCpyW*(P1: LPWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrCpyNW*(P1: LPWSTR, P2: LPCWSTR, P3: int32): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrCmpNA*(P1: LPCSTR, P2: LPCSTR, P3: int32): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrCmpNW*(P1: LPCWSTR, P2: LPCWSTR, P3: int32): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrCmpNIA*(P1: LPCSTR, P2: LPCSTR, P3: int32): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrCmpNIW*(P1: LPCWSTR, P2: LPCWSTR, P3: int32): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrCSpnA*(P1: LPCSTR, P2: LPCSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrCSpnW*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrCSpnIA*(P1: LPCSTR, P2: LPCSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrCSpnIW*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrDupA*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrDupW*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrFormatByteSize64A*(P1: LONGLONG, P2: LPSTR, P3: UINT): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrFormatByteSizeA*(P1: DWORD, P2: LPSTR, P3: UINT): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrFormatByteSizeW*(P1: LONGLONG, P2: LPWSTR, P3: UINT): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrFormatKBSizeA*(P1: LONGLONG, P2: LPSTR, P3: UINT): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrFormatKBSizeW*(P1: LONGLONG, P2: LPWSTR, P3: UINT): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrFromTimeIntervalA*(P1: LPSTR, P2: UINT, P3: DWORD, P4: int32): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrFromTimeIntervalW*(P1: LPWSTR, P2: UINT, P3: DWORD, P4: int32): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrIsIntlEqualA*(P1: BOOL, P2: LPCSTR, P3: LPCSTR, P4: int32): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc StrIsIntlEqualW*(P1: BOOL, P2: LPCWSTR, P3: LPCWSTR, P4: int32): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc StrNCatA*(P1: LPSTR, P2: LPCSTR, P3: int32): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrNCatW*(P1: LPWSTR, P2: LPCWSTR, P3: int32): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrPBrkA*(P1: LPCSTR, P2: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrPBrkW*(P1: LPCWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrRChrA*(P1: LPCSTR, P2: LPCSTR, P3: WORD): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrRChrW*(P1: LPCWSTR, P2: LPCWSTR, P3: WCHAR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrRChrIA*(P1: LPCSTR, P2: LPCSTR, P3: WORD): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrRChrIW*(P1: LPCWSTR, P2: LPCWSTR, P3: WCHAR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrRStrIA*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrRStrIW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrSpnA*(P1: LPCSTR, P2: LPCSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrSpnW*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrStrA*(P1: LPCSTR, P2: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrStrIA*(P1: LPCSTR, P2: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrStrIW*(P1: LPCWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrStrW*(P1: LPCWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc StrToIntA*(P1: LPCSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrToIntW*(P1: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc StrToIntExA*(P1: LPCSTR, P2: DWORD, P3: ptr int32): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc StrToIntExW*(P1: LPCWSTR, P2: DWORD, P3: ptr int32): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc StrTrimA*(P1: LPSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc StrTrimW*(P1: LPWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathAddBackslashA*(P1: LPSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathAddBackslashW*(P1: LPWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathAddExtensionA*(P1: LPSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathAddExtensionW*(P1: LPWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathAppendA*(P1: LPSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathAppendW*(P1: LPWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathBuildRootA*(P1: LPSTR, P2: int32): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathBuildRootW*(P1: LPWSTR, P2: int32): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathCanonicalizeA*(P1: LPSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathCanonicalizeW*(P1: LPWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathCombineA*(P1: LPSTR, P2: LPCSTR, P3: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathCombineW*(P1: LPWSTR, P2: LPCWSTR, P3: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathCommonPrefixA*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc PathCommonPrefixW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc PathCompactPathA*(P1: HDC, P2: LPSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathCompactPathW*(P1: HDC, P2: LPWSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathCompactPathExA*(P1: LPSTR, P2: LPCSTR, P3: UINT, P4: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathCompactPathExW*(P1: LPWSTR, P2: LPCWSTR, P3: UINT, P4: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathCreateFromUrlA*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc PathCreateFromUrlW*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc PathFileExistsA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathFileExistsW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathFindExtensionA*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathFindExtensionW*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathFindFileNameA*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathFindFileNameW*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathFindNextComponentA*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathFindNextComponentW*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathFindOnPathA*(P1: LPSTR, P2: ptr LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathFindOnPathW*(P1: LPWSTR, P2: ptr LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathFindSuffixArrayA*(P1: LPCSTR, P2: ptr LPCSTR, P3: int32): LPCSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathFindSuffixArrayW*(P1: LPCWSTR, P2: ptr LPCWSTR, P3: int32): LPCWSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathGetArgsA*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathGetArgsW*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathGetCharTypeA*(P1: UCHAR): UINT {.winapi, dynlib: "shlwapi", importc.}
proc PathGetCharTypeW*(P1: WCHAR): UINT {.winapi, dynlib: "shlwapi", importc.}
proc PathGetDriveNumberA*(P1: LPCSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc PathGetDriveNumberW*(P1: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc PathIsContentTypeA*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsContentTypeW*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsDirectoryA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsDirectoryEmptyA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsDirectoryEmptyW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsDirectoryW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsFileSpecA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsFileSpecW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsLFNFileSpecA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsLFNFileSpecW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsNetworkPathA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsNetworkPathW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsPrefixA*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsPrefixW*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsRelativeA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsRelativeW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsRootA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsRootW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsSameRootA*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsSameRootW*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsSystemFolderA*(P1: LPCSTR, P2: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsSystemFolderW*(P1: LPCWSTR, P2: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsUNCA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsUNCServerA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsUNCServerShareA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsUNCServerShareW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsUNCServerW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsUNCW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsURLA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathIsURLW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathMakePrettyA*(P1: LPSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathMakePrettyW*(P1: LPWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathMakeSystemFolderA*(P1: LPSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathMakeSystemFolderW*(P1: LPWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathMatchSpecA*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathMatchSpecW*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathParseIconLocationA*(P1: LPSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc PathParseIconLocationW*(P1: LPWSTR): int32 {.winapi, dynlib: "shlwapi", importc.}
proc PathQuoteSpacesA*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathQuoteSpacesW*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathRelativePathToA*(P1: LPSTR, P2: LPCSTR, P3: DWORD, P4: LPCSTR, P5: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathRelativePathToW*(P1: LPWSTR, P2: LPCWSTR, P3: DWORD, P4: LPCWSTR, P5: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathRemoveArgsA*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathRemoveArgsW*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathRemoveBackslashA*(P1: LPSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathRemoveBackslashW*(P1: LPWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathRemoveBlanksA*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathRemoveBlanksW*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathRemoveExtensionA*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathRemoveExtensionW*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathRemoveFileSpecA*(P1: LPSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathRemoveFileSpecW*(P1: LPWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathRenameExtensionA*(P1: LPSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathRenameExtensionW*(P1: LPWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathSearchAndQualifyA*(P1: LPCSTR, P2: LPSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathSearchAndQualifyW*(P1: LPCWSTR, P2: LPWSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathSetDlgItemPathA*(P1: HWND, P2: int32, P3: LPCSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathSetDlgItemPathW*(P1: HWND, P2: int32, P3: LPCWSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathSkipRootA*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathSkipRootW*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc.}
proc PathStripPathA*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathStripPathW*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathStripToRootA*(P1: LPSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathStripToRootW*(P1: LPWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathUndecorateA*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathUndecorateW*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathUnExpandEnvStringsA*(P1: LPCSTR, P2: LPSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathUnExpandEnvStringsW*(P1: LPCWSTR, P2: LPWSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathUnmakeSystemFolderA*(P1: LPSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathUnmakeSystemFolderW*(P1: LPWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc PathUnquoteSpacesA*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc PathUnquoteSpacesW*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc.}
proc SHAutoComplete*(P1: HWND, P2: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc SHCreateThread*(P1: LPTHREAD_START_ROUTINE, P2: pointer, P3: DWORD, P4: LPTHREAD_START_ROUTINE): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc SHCopyKeyA*(P1: HKEY, P2: LPCSTR, P3: HKEY, P4: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHCopyKeyW*(P1: HKEY, P2: LPCWSTR, P3: HKEY, P4: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHDeleteEmptyKeyA*(P1: HKEY, P2: LPCSTR): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHDeleteEmptyKeyW*(P1: HKEY, P2: LPCWSTR): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHDeleteKeyA*(P1: HKEY, P2: LPCSTR): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHDeleteKeyW*(P1: HKEY, P2: LPCWSTR): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHEnumKeyExA*(P1: HKEY, P2: DWORD, P3: LPSTR, P4: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHEnumKeyExW*(P1: HKEY, P2: DWORD, P3: LPWSTR, P4: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHQueryInfoKeyA*(P1: HKEY, P2: LPDWORD, P3: LPDWORD, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHQueryInfoKeyW*(P1: HKEY, P2: LPDWORD, P3: LPDWORD, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHQueryValueExA*(P1: HKEY, P2: LPCSTR, P3: LPDWORD, P4: LPDWORD, P5: LPVOID, P6: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHQueryValueExW*(P1: HKEY, P2: LPCWSTR, P3: LPDWORD, P4: LPDWORD, P5: LPVOID, P6: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHGetThreadRef*(P1: ptr ptr IUnknown): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc SHSetThreadRef*(P1: ptr IUnknown): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc SHSkipJunction*(P1: ptr IBindCtx, P2: ptr CLSID): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc SHEnumValueA*(P1: HKEY, P2: DWORD, P3: LPSTR, P4: LPDWORD, P5: LPDWORD, P6: LPVOID, P7: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHEnumValueW*(P1: HKEY, P2: DWORD, P3: LPWSTR, P4: LPDWORD, P5: LPDWORD, P6: LPVOID, P7: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHGetValueA*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: LPDWORD, P5: LPVOID, P6: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHGetValueW*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: LPDWORD, P5: LPVOID, P6: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHSetValueA*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: LPCVOID, P6: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHSetValueW*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: LPCVOID, P6: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHDeleteValueA*(P1: HKEY, P2: LPCSTR, P3: LPCSTR): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHDeleteValueW*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc AssocCreate*(P1: CLSID, P2: ptr IID, P3: ptr LPVOID): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc AssocQueryKeyA*(P1: ASSOCF, P2: ASSOCKEY, P3: LPCSTR, P4: LPCSTR, P5: ptr HKEY): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc AssocQueryKeyW*(P1: ASSOCF, P2: ASSOCKEY, P3: LPCWSTR, P4: LPCWSTR, P5: ptr HKEY): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc AssocQueryStringA*(P1: ASSOCF, P2: ASSOCSTR, P3: LPCSTR, P4: LPCSTR, P5: LPSTR, P6: ptr DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc AssocQueryStringByKeyA*(P1: ASSOCF, P2: ASSOCSTR, P3: HKEY, P4: LPCSTR, P5: LPSTR, P6: ptr DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc AssocQueryStringByKeyW*(P1: ASSOCF, P2: ASSOCSTR, P3: HKEY, P4: LPCWSTR, P5: LPWSTR, P6: ptr DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc AssocQueryStringW*(P1: ASSOCF, P2: ASSOCSTR, P3: LPCWSTR, P4: LPCWSTR, P5: LPWSTR, P6: ptr DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlApplySchemeA*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlApplySchemeW*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlCanonicalizeA*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlCanonicalizeW*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlCombineA*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR, P4: LPDWORD, P5: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlCombineW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: LPDWORD, P5: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlCompareA*(P1: LPCSTR, P2: LPCSTR, P3: BOOL): int32 {.winapi, dynlib: "shlwapi", importc.}
proc UrlCompareW*(P1: LPCWSTR, P2: LPCWSTR, P3: BOOL): int32 {.winapi, dynlib: "shlwapi", importc.}
proc UrlCreateFromPathA*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlCreateFromPathW*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlEscapeA*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlEscapeW*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlGetLocationA*(P1: LPCSTR): LPCSTR {.winapi, dynlib: "shlwapi", importc.}
proc UrlGetLocationW*(P1: LPCWSTR): LPCWSTR {.winapi, dynlib: "shlwapi", importc.}
proc UrlGetPartA*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD, P5: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlGetPartW*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD, P5: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlHashA*(P1: LPCSTR, P2: LPBYTE, P3: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlHashW*(P1: LPCWSTR, P2: LPBYTE, P3: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlIsA*(P1: LPCSTR, P2: TURLIS): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc UrlIsW*(P1: LPCWSTR, P2: TURLIS): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc UrlIsNoHistoryA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc UrlIsNoHistoryW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc UrlIsOpaqueA*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc UrlIsOpaqueW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc UrlUnescapeA*(P1: LPSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc UrlUnescapeW*(P1: LPWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc SHRegCloseUSKey*(P1: HUSKEY): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHRegCreateUSKeyA*(P1: LPCSTR, P2: REGSAM, P3: HUSKEY, P4: PHUSKEY, P5: DWORD): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegCreateUSKeyW*(P1: LPCWSTR, P2: REGSAM, P3: HUSKEY, P4: PHUSKEY, P5: DWORD): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegDeleteEmptyUSKeyA*(P1: HUSKEY, P2: LPCSTR, P3: SHREGDEL_FLAGS): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegDeleteEmptyUSKeyW*(P1: HUSKEY, P2: LPCWSTR, P3: SHREGDEL_FLAGS): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegDeleteUSValueA*(P1: HUSKEY, P2: LPCSTR, P3: SHREGDEL_FLAGS): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegDeleteUSValueW*(P1: HUSKEY, P2: LPCWSTR, P3: SHREGDEL_FLAGS): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegDuplicateHKey*(P1: HKEY): HKEY {.winapi, dynlib: "shlwapi", importc.}
proc SHRegEnumUSKeyA*(P1: HUSKEY, P2: DWORD, P3: LPSTR, P4: LPDWORD, P5: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHRegEnumUSKeyW*(P1: HUSKEY, P2: DWORD, P3: LPWSTR, P4: LPDWORD, P5: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHRegEnumUSValueA*(P1: HUSKEY, P2: DWORD, P3: LPSTR, P4: LPDWORD, P5: LPDWORD, P6: LPVOID, P7: LPDWORD, P8: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHRegEnumUSValueW*(P1: HUSKEY, P2: DWORD, P3: LPWSTR, P4: LPDWORD, P5: LPDWORD, P6: LPVOID, P7: LPDWORD, P8: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHRegGetBoolUSValueA*(P1: LPCSTR, P2: LPCSTR, P3: BOOL, P4: BOOL): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc SHRegGetBoolUSValueW*(P1: LPCWSTR, P2: LPCWSTR, P3: BOOL, P4: BOOL): BOOL {.winapi, dynlib: "shlwapi", importc.}
proc SHRegGetPathA*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: LPSTR, P5: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHRegGetPathW*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: LPWSTR, P5: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHRegGetUSValueA*(P1: LPCSTR, P2: LPCSTR, P3: LPDWORD, P4: LPVOID, P5: LPDWORD, P6: BOOL, P7: LPVOID, P8: DWORD): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegGetUSValueW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPDWORD, P4: LPVOID, P5: LPDWORD, P6: BOOL, P7: LPVOID, P8: DWORD): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegOpenUSKeyA*(P1: LPCSTR, P2: REGSAM, P3: HUSKEY, P4: PHUSKEY, P5: BOOL): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegOpenUSKeyW*(P1: LPCWSTR, P2: REGSAM, P3: HUSKEY, P4: PHUSKEY, P5: BOOL): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegQueryInfoUSKeyA*(P1: HUSKEY, P2: LPDWORD, P3: LPDWORD, P4: LPDWORD, P5: LPDWORD, P6: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHRegQueryInfoUSKeyW*(P1: HUSKEY, P2: LPDWORD, P3: LPDWORD, P4: LPDWORD, P5: LPDWORD, P6: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHRegQueryUSValueA*(P1: HUSKEY, P2: LPCSTR, P3: LPDWORD, P4: LPVOID, P5: LPDWORD, P6: BOOL, P7: LPVOID, P8: DWORD): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegQueryUSValueW*(P1: HUSKEY, P2: LPCWSTR, P3: LPDWORD, P4: LPVOID, P5: LPDWORD, P6: BOOL, P7: LPVOID, P8: DWORD): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegSetPathA*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR, P5: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHRegSetPathW*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR, P5: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc.}
proc SHRegSetUSValueA*(P1: LPCSTR, P2: LPCSTR, P3: DWORD, P4: LPVOID, P5: DWORD, P6: DWORD): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegSetUSValueW*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: LPVOID, P5: DWORD, P6: DWORD): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegWriteUSValueA*(P1: HUSKEY, P2: LPCSTR, P3: DWORD, P4: LPVOID, P5: DWORD, P6: DWORD): LONG {.winapi, dynlib: "shlwapi", importc.}
proc SHRegWriteUSValueW*(P1: HUSKEY, P2: LPCWSTR, P3: DWORD, P4: LPVOID, P5: DWORD, P6: DWORD): LONG {.winapi, dynlib: "shlwapi", importc.}
proc HashData*(P1: LPBYTE, P2: DWORD, P3: LPBYTE, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc SHCreateShellPalette*(P1: HDC): HPALETTE {.winapi, dynlib: "shlwapi", importc.}
proc ColorHLSToRGB*(P1: WORD, P2: WORD, P3: WORD): COLORREF {.winapi, dynlib: "shlwapi", importc.}
proc ColorAdjustLuma*(P1: COLORREF, P2: int32, P3: BOOL): COLORREF {.winapi, dynlib: "shlwapi", importc.}
proc ColorRGBToHLS*(P1: COLORREF, P2: ptr WORD, P3: ptr WORD, P4: ptr WORD): void {.winapi, dynlib: "shlwapi", importc.}
proc MLLoadLibraryA*(P1: LPCSTR, P2: HANDLE, P3: DWORD, P4: LPCSTR, P5: BOOL): HINSTANCE {.winapi, dynlib: "shlwapi", importc.}
proc MLLoadLibraryW*(P1: LPCWSTR, P2: HANDLE, P3: DWORD, P4: LPCWSTR, P5: BOOL): HINSTANCE {.winapi, dynlib: "shlwapi", importc.}
proc DllInstall*(P1: BOOL, P2: LPCWSTR): HRESULT {.winapi, dynlib: "shell32", importc.}
proc StrRetToBufA*(P1: LPSTRRET, P2: LPCITEMIDLIST, P3: LPSTR, P4: UINT): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc StrRetToBufW*(P1: LPSTRRET, P2: LPCITEMIDLIST, P3: LPWSTR, P4: UINT): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc StrRetToStrA*(P1: LPSTRRET, P2: LPCITEMIDLIST, P3: ptr LPSTR): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc StrRetToStrW*(P1: LPSTRRET, P2: LPCITEMIDLIST, P3: ptr LPWSTR): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc SHCreateStreamOnFileA*(P1: LPCSTR, P2: DWORD, P3: ptr ptr IStream): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc SHCreateStreamOnFileW*(P1: LPCWSTR, P2: DWORD, P3: ptr ptr IStream): HRESULT {.winapi, dynlib: "shlwapi", importc.}
proc SHOpenRegStream2A*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: DWORD): ptr IStream {.winapi, dynlib: "shlwapi", importc.}
proc SHOpenRegStream2W*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD): ptr IStream {.winapi, dynlib: "shlwapi", importc.}
proc SHOpenRegStreamA*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: DWORD): ptr IStream {.winapi, dynlib: "shlwapi", importc.}
proc SHOpenRegStreamW*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD): ptr IStream {.winapi, dynlib: "shlwapi", importc.}

proc IntlStrEqNA*(pStr1: LPCSTR, pStr2: LPCSTR, nChar: int32): BOOL = IntlStrEqWorkerA(TRUE , pStr1 , pStr2 , nChar)
proc IntlStrEqNW*(pStr1: LPCWSTR, pStr2: LPCWSTR, nChar: int32): BOOL = IntlStrEqWorkerW(TRUE , pStr1 , pStr2 , nChar)
proc IntlStrEqNIA*(pStr1: LPCSTR, pStr2: LPCSTR, nChar: int32): BOOL = IntlStrEqWorkerA(FALSE , pStr1 , pStr2 , nChar)
proc IntlStrEqNIW*(pStr1: LPCWSTR, pStr2: LPCWSTR, nChar: int32): BOOL = IntlStrEqWorkerW(FALSE , pStr1 , pStr2 , nChar)
proc UrlIsFileUrlA*(pszURL: LPCSTR): BOOL = UrlIsA(pszURL , TURLIS_FILEURL)
proc UrlIsFileUrlW*(pszURL: LPCWSTR): BOOL = UrlIsW(pszURL , TURLIS_FILEURL)
proc UrlUnescapeInPlaceA*(pszUrl: LPSTR, dwFlags: DWORD): HRESULT = UrlUnescapeA(pszUrl , nil , nil , dwFlags or CURL_UNESCAPE_INPLACE)
proc UrlUnescapeInPlaceW*(pszUrl: LPWSTR, dwFlags: DWORD): HRESULT = UrlUnescapeW(pszUrl , nil , nil , dwFlags or CURL_UNESCAPE_INPLACE)

when not defined(winansi):
  proc ChrCmpI*(P1: WCHAR, P2: WCHAR): BOOL {.winapi, dynlib: "shlwapi", importc: "ChrCmpIW".}

  const
    IntlStrEqN* = IntlStrEqNW
    IntlStrEqNI* = IntlStrEqNIW

  proc IntlStrEqWorker*(P1: BOOL, P2: LPCWSTR, P3: LPCWSTR, P4: int32): BOOL {.winapi, dynlib: "shlwapi", importc: "IntlStrEqWorkerW".}
  proc SHStrDup*(P1: LPCWSTR, P2: ptr LPWSTR): HRESULT {.winapi, dynlib: "shlwapi", importc: "SHStrDupW".}
  proc StrCat*(P1: LPWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrCatW".}
  proc StrCatBuff*(P1: LPWSTR, P2: LPCWSTR, P3: int32): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrCatBuffW".}
  proc StrChr*(P1: LPCWSTR, P2: WCHAR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrChrW".}
  proc StrChrI*(P1: LPCWSTR, P2: WCHAR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrChrIW".}
  proc StrCmp*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc: "StrCmpW".}
  proc StrCmpI*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc: "StrCmpIW".}
  proc StrCmpNI*(P1: LPCWSTR, P2: LPCWSTR, P3: int32): int32 {.winapi, dynlib: "shlwapi", importc: "StrCmpNIW".}
  proc StrCmpN*(P1: LPCWSTR, P2: LPCWSTR, P3: int32): int32 {.winapi, dynlib: "shlwapi", importc: "StrCmpNW".}
  proc StrCpyN*(P1: LPWSTR, P2: LPCWSTR, P3: int32): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrCpyNW".}
  proc StrCpy*(P1: LPWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrCpyW".}
  proc StrCSpnI*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc: "StrCSpnIW".}
  proc StrCSpn*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc: "StrCSpnW".}
  proc StrDup*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrDupW".}
  proc StrFormatByteSize*(P1: LONGLONG, P2: LPWSTR, P3: UINT): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrFormatByteSizeW".}
  proc StrFormatKBSize*(P1: LONGLONG, P2: LPWSTR, P3: UINT): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrFormatKBSizeW".}
  proc StrFromTimeInterval*(P1: LPWSTR, P2: UINT, P3: DWORD, P4: int32): int32 {.winapi, dynlib: "shlwapi", importc: "StrFromTimeIntervalW".}
  proc StrIsIntlEqual*(P1: BOOL, P2: LPCWSTR, P3: LPCWSTR, P4: int32): BOOL {.winapi, dynlib: "shlwapi", importc: "StrIsIntlEqualW".}
  proc StrNCat*(P1: LPWSTR, P2: LPCWSTR, P3: int32): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrNCatW".}
  proc StrPBrk*(P1: LPCWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrPBrkW".}
  proc StrRChr*(P1: LPCWSTR, P2: LPCWSTR, P3: WCHAR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrRChrW".}
  proc StrRChrI*(P1: LPCWSTR, P2: LPCWSTR, P3: WCHAR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrRChrIW".}
  proc StrRetToBuf*(P1: LPSTRRET, P2: LPCITEMIDLIST, P3: LPWSTR, P4: UINT): HRESULT {.winapi, dynlib: "shlwapi", importc: "StrRetToBufW".}
  proc StrRetToStr*(P1: LPSTRRET, P2: LPCITEMIDLIST, P3: ptr LPWSTR): HRESULT {.winapi, dynlib: "shlwapi", importc: "StrRetToStrW".}
  proc StrRStrI*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrRStrIW".}
  proc StrSpn*(P1: LPCWSTR, P2: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc: "StrSpnW".}
  proc StrStrI*(P1: LPCWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrStrIW".}
  proc StrStr*(P1: LPCWSTR, P2: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "StrStrW".}
  proc StrToInt*(P1: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc: "StrToIntW".}
  proc StrToIntEx*(P1: LPCWSTR, P2: DWORD, P3: ptr int32): BOOL {.winapi, dynlib: "shlwapi", importc: "StrToIntExW".}
  proc StrTrim*(P1: LPWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "StrTrimW".}
  proc PathAddBackslash*(P1: LPWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "PathAddBackslashW".}
  proc PathAddExtension*(P1: LPWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathAddExtensionW".}
  proc PathAppend*(P1: LPWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathAppendW".}
  proc PathBuildRoot*(P1: LPWSTR, P2: int32): LPWSTR {.winapi, dynlib: "shlwapi", importc: "PathBuildRootW".}
  proc PathCanonicalize*(P1: LPWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathCanonicalizeW".}
  proc PathCombine*(P1: LPWSTR, P2: LPCWSTR, P3: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "PathCombineW".}
  proc PathCommonPrefix*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR): int32 {.winapi, dynlib: "shlwapi", importc: "PathCommonPrefixW".}
  proc PathCompactPath*(P1: HDC, P2: LPWSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc: "PathCompactPathW".}
  proc PathCompactPathEx*(P1: LPWSTR, P2: LPCWSTR, P3: UINT, P4: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc: "PathCompactPathExW".}
  proc PathCreateFromUrl*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "PathCreateFromUrlW".}
  proc PathFileExists*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathFileExistsW".}
  proc PathFindExtension*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "PathFindExtensionW".}
  proc PathFindFileName*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "PathFindFileNameW".}
  proc PathFindNextComponent*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "PathFindNextComponentW".}
  proc PathFindOnPath*(P1: LPWSTR, P2: ptr LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathFindOnPathW".}
  proc PathFindSuffixArray*(P1: LPCWSTR, P2: ptr LPCWSTR, P3: int32): LPCWSTR {.winapi, dynlib: "shlwapi", importc: "PathFindSuffixArrayW".}
  proc PathGetArgs*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "PathGetArgsW".}
  proc PathGetCharType*(P1: WCHAR): UINT {.winapi, dynlib: "shlwapi", importc: "PathGetCharTypeW".}
  proc PathGetDriveNumber*(P1: LPCWSTR): int32 {.winapi, dynlib: "shlwapi", importc: "PathGetDriveNumberW".}
  proc PathIsContentType*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsContentTypeW".}
  proc PathIsDirectoryEmpty*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsDirectoryEmptyW".}
  proc PathIsDirectory*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsDirectoryW".}
  proc PathIsFileSpec*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsFileSpecW".}
  proc PathIsLFNFileSpec*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsLFNFileSpecW".}
  proc PathIsNetworkPath*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsNetworkPathW".}
  proc PathIsPrefix*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsPrefixW".}
  proc PathIsRelative*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsRelativeW".}
  proc PathIsRoot*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsRootW".}
  proc PathIsSameRoot*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsSameRootW".}
  proc PathIsSystemFolder*(P1: LPCWSTR, P2: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsSystemFolderW".}
  proc PathIsUNCServerShare*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsUNCServerShareW".}
  proc PathIsUNCServer*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsUNCServerW".}
  proc PathIsUNC*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsUNCW".}
  proc PathIsURL*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsURLW".}
  proc PathMakePretty*(P1: LPWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathMakePrettyW".}
  proc PathMakeSystemFolder*(P1: LPWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathMakeSystemFolderW".}
  proc PathMatchSpec*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathMatchSpecW".}
  proc PathParseIconLocation*(P1: LPWSTR): int32 {.winapi, dynlib: "shlwapi", importc: "PathParseIconLocationW".}
  proc PathQuoteSpaces*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc: "PathQuoteSpacesW".}
  proc PathRelativePathTo*(P1: LPWSTR, P2: LPCWSTR, P3: DWORD, P4: LPCWSTR, P5: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc: "PathRelativePathToW".}
  proc PathRemoveArgs*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc: "PathRemoveArgsW".}
  proc PathRemoveBackslash*(P1: LPWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "PathRemoveBackslashW".}
  proc PathRemoveBlanks*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc: "PathRemoveBlanksW".}
  proc PathRemoveExtension*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc: "PathRemoveExtensionW".}
  proc PathRemoveFileSpec*(P1: LPWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathRemoveFileSpecW".}
  proc PathRenameExtension*(P1: LPWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathRenameExtensionW".}
  proc PathSearchAndQualify*(P1: LPCWSTR, P2: LPWSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc: "PathSearchAndQualifyW".}
  proc PathSetDlgItemPath*(P1: HWND, P2: int32, P3: LPCWSTR): void {.winapi, dynlib: "shlwapi", importc: "PathSetDlgItemPathW".}
  proc PathSkipRoot*(P1: LPCWSTR): LPWSTR {.winapi, dynlib: "shlwapi", importc: "PathSkipRootW".}
  proc PathStripPath*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc: "PathStripPathW".}
  proc PathStripToRoot*(P1: LPWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathStripToRootW".}
  proc PathUndecorate*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc: "PathUndecorateW".}
  proc PathUnExpandEnvStrings*(P1: LPCWSTR, P2: LPWSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc: "PathUnExpandEnvStringsW".}
  proc PathUnmakeSystemFolder*(P1: LPWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathUnmakeSystemFolderW".}
  proc PathUnquoteSpaces*(P1: LPWSTR): void {.winapi, dynlib: "shlwapi", importc: "PathUnquoteSpacesW".}
  proc SHCreateStreamOnFile*(P1: LPCWSTR, P2: DWORD, P3: ptr ptr IStream): HRESULT {.winapi, dynlib: "shlwapi", importc: "SHCreateStreamOnFileW".}
  proc SHOpenRegStream*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD): ptr IStream {.winapi, dynlib: "shlwapi", importc: "SHOpenRegStreamW".}
  proc SHOpenRegStream2*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD): ptr IStream {.winapi, dynlib: "shlwapi", importc: "SHOpenRegStream2W".}
  proc SHCopyKey*(P1: HKEY, P2: LPCWSTR, P3: HKEY, P4: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHCopyKeyW".}
  proc SHDeleteEmptyKey*(P1: HKEY, P2: LPCWSTR): DWORD {.winapi, dynlib: "shlwapi", importc: "SHDeleteEmptyKeyW".}
  proc SHDeleteKey*(P1: HKEY, P2: LPCWSTR): DWORD {.winapi, dynlib: "shlwapi", importc: "SHDeleteKeyW".}
  proc SHEnumKeyEx*(P1: HKEY, P2: DWORD, P3: LPWSTR, P4: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHEnumKeyExW".}
  proc SHQueryInfoKey*(P1: HKEY, P2: LPDWORD, P3: LPDWORD, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHQueryInfoKeyW".}
  proc SHQueryValueEx*(P1: HKEY, P2: LPCWSTR, P3: LPDWORD, P4: LPDWORD, P5: LPVOID, P6: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHQueryValueExW".}
  proc SHEnumValue*(P1: HKEY, P2: DWORD, P3: LPWSTR, P4: LPDWORD, P5: LPDWORD, P6: LPVOID, P7: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHEnumValueW".}
  proc SHGetValue*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: LPDWORD, P5: LPVOID, P6: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHGetValueW".}
  proc SHSetValue*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: LPCVOID, P6: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHSetValueW".}
  proc SHDeleteValue*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR): DWORD {.winapi, dynlib: "shlwapi", importc: "SHDeleteValueW".}
  proc AssocQueryKey*(P1: ASSOCF, P2: ASSOCKEY, P3: LPCWSTR, P4: LPCWSTR, P5: ptr HKEY): HRESULT {.winapi, dynlib: "shlwapi", importc: "AssocQueryKeyW".}
  proc AssocQueryStringByKey*(P1: ASSOCF, P2: ASSOCSTR, P3: HKEY, P4: LPCWSTR, P5: LPWSTR, P6: ptr DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "AssocQueryStringByKeyW".}
  proc AssocQueryString*(P1: ASSOCF, P2: ASSOCSTR, P3: LPCWSTR, P4: LPCWSTR, P5: LPWSTR, P6: ptr DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "AssocQueryStringW".}
  proc UrlApplyScheme*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlApplySchemeW".}
  proc UrlCanonicalize*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlCanonicalizeW".}
  proc UrlCombine*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: LPDWORD, P5: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlCombineW".}
  proc UrlCompare*(P1: LPCWSTR, P2: LPCWSTR, P3: BOOL): int32 {.winapi, dynlib: "shlwapi", importc: "UrlCompareW".}
  proc UrlCreateFromPath*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlCreateFromPathW".}
  proc UrlEscape*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlEscapeW".}
  proc UrlGetLocation*(P1: LPCWSTR): LPCWSTR {.winapi, dynlib: "shlwapi", importc: "UrlGetLocationW".}
  proc UrlGetPart*(P1: LPCWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD, P5: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlGetPartW".}
  proc UrlHash*(P1: LPCWSTR, P2: LPBYTE, P3: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlHashW".}
  proc UrlIs*(P1: LPCWSTR, P2: TURLIS): BOOL {.winapi, dynlib: "shlwapi", importc: "UrlIsW".}

  const
    UrlIsFileUrl* = UrlIsFileUrlW

  proc UrlIsNoHistory*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "UrlIsNoHistoryW".}
  proc UrlIsOpaque*(P1: LPCWSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "UrlIsOpaqueW".}
  proc UrlUnescape*(P1: LPWSTR, P2: LPWSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlUnescapeW".}

  const
    UrlUnescapeInPlace* = UrlUnescapeInPlaceW

  proc SHRegCreateUSKey*(P1: LPCWSTR, P2: REGSAM, P3: HUSKEY, P4: PHUSKEY, P5: DWORD): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegCreateUSKeyW".}
  proc SHRegDeleteEmptyUSKey*(P1: HUSKEY, P2: LPCWSTR, P3: SHREGDEL_FLAGS): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegDeleteEmptyUSKeyW".}
  proc SHRegDeleteUSValue*(P1: HUSKEY, P2: LPCWSTR, P3: SHREGDEL_FLAGS): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegDeleteUSValueW".}
  proc SHRegEnumUSKey*(P1: HUSKEY, P2: DWORD, P3: LPWSTR, P4: LPDWORD, P5: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc: "SHRegEnumUSKeyW".}
  proc SHRegEnumUSValue*(P1: HUSKEY, P2: DWORD, P3: LPWSTR, P4: LPDWORD, P5: LPDWORD, P6: LPVOID, P7: LPDWORD, P8: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc: "SHRegEnumUSValueW".}
  proc SHRegGetBoolUSValue*(P1: LPCWSTR, P2: LPCWSTR, P3: BOOL, P4: BOOL): BOOL {.winapi, dynlib: "shlwapi", importc: "SHRegGetBoolUSValueW".}
  proc SHRegGetPath*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: LPWSTR, P5: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHRegGetPathW".}
  proc SHRegGetUSValue*(P1: LPCWSTR, P2: LPCWSTR, P3: LPDWORD, P4: LPVOID, P5: LPDWORD, P6: BOOL, P7: LPVOID, P8: DWORD): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegGetUSValueW".}
  proc SHRegOpenUSKey*(P1: LPCWSTR, P2: REGSAM, P3: HUSKEY, P4: PHUSKEY, P5: BOOL): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegOpenUSKeyW".}
  proc SHRegQueryInfoUSKey*(P1: HUSKEY, P2: LPDWORD, P3: LPDWORD, P4: LPDWORD, P5: LPDWORD, P6: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc: "SHRegQueryInfoUSKeyW".}
  proc SHRegQueryUSValue*(P1: HUSKEY, P2: LPCWSTR, P3: LPDWORD, P4: LPVOID, P5: LPDWORD, P6: BOOL, P7: LPVOID, P8: DWORD): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegQueryUSValueW".}
  proc SHRegSetPath*(P1: HKEY, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR, P5: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHRegSetPathW".}
  proc SHRegSetUSValue*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: LPVOID, P5: DWORD, P6: DWORD): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegSetUSValueW".}
  proc SHRegWriteUSValue*(P1: HUSKEY, P2: LPCWSTR, P3: DWORD, P4: LPVOID, P5: DWORD, P6: DWORD): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegWriteUSValueW".}

else:
  proc ChrCmpI*(P1: WORD, P2: WORD): BOOL {.winapi, dynlib: "shlwapi", importc: "ChrCmpIA".}

  const
    IntlStrEqN* = IntlStrEqNA
    IntlStrEqNI* = IntlStrEqNIA

  proc IntlStrEqWorker*(P1: BOOL, P2: LPCSTR, P3: LPCSTR, P4: int32): BOOL {.winapi, dynlib: "shlwapi", importc: "IntlStrEqWorkerA".}
  proc SHStrDup*(P1: LPCSTR, P2: ptr LPWSTR): HRESULT {.winapi, dynlib: "shlwapi", importc: "SHStrDupA".}
  proc StrCatBuff*(P1: LPSTR, P2: LPCSTR, P3: int32): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrCatBuffA".}
  proc StrChr*(P1: LPCSTR, P2: WORD): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrChrA".}
  proc StrChrI*(P1: LPCSTR, P2: WORD): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrChrIA".}
  proc StrCmpNI*(P1: LPCSTR, P2: LPCSTR, P3: int32): int32 {.winapi, dynlib: "shlwapi", importc: "StrCmpNIA".}
  proc StrCmpN*(P1: LPCSTR, P2: LPCSTR, P3: int32): int32 {.winapi, dynlib: "shlwapi", importc: "StrCmpNA".}
  proc StrCSpnI*(P1: LPCSTR, P2: LPCSTR): int32 {.winapi, dynlib: "shlwapi", importc: "StrCSpnIA".}
  proc StrCSpn*(P1: LPCSTR, P2: LPCSTR): int32 {.winapi, dynlib: "shlwapi", importc: "StrCSpnA".}
  proc StrDup*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrDupA".}
  proc StrFormatByteSize*(P1: DWORD, P2: LPSTR, P3: UINT): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrFormatByteSizeA".}
  proc StrFormatKBSize*(P1: LONGLONG, P2: LPSTR, P3: UINT): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrFormatKBSizeA".}
  proc StrFromTimeInterval*(P1: LPSTR, P2: UINT, P3: DWORD, P4: int32): int32 {.winapi, dynlib: "shlwapi", importc: "StrFromTimeIntervalA".}
  proc StrIsIntlEqual*(P1: BOOL, P2: LPCSTR, P3: LPCSTR, P4: int32): BOOL {.winapi, dynlib: "shlwapi", importc: "StrIsIntlEqualA".}
  proc StrNCat*(P1: LPSTR, P2: LPCSTR, P3: int32): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrNCatA".}
  proc StrPBrk*(P1: LPCSTR, P2: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrPBrkA".}
  proc StrRChr*(P1: LPCSTR, P2: LPCSTR, P3: WORD): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrRChrA".}
  proc StrRChrI*(P1: LPCSTR, P2: LPCSTR, P3: WORD): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrRChrIA".}
  proc StrRetToBuf*(P1: LPSTRRET, P2: LPCITEMIDLIST, P3: LPSTR, P4: UINT): HRESULT {.winapi, dynlib: "shlwapi", importc: "StrRetToBufA".}
  proc StrRetToStr*(P1: LPSTRRET, P2: LPCITEMIDLIST, P3: ptr LPSTR): HRESULT {.winapi, dynlib: "shlwapi", importc: "StrRetToStrA".}
  proc StrRStrI*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrRStrIA".}
  proc StrSpn*(P1: LPCSTR, P2: LPCSTR): int32 {.winapi, dynlib: "shlwapi", importc: "StrSpnA".}
  proc StrStrI*(P1: LPCSTR, P2: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrStrIA".}
  proc StrStr*(P1: LPCSTR, P2: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "StrStrA".}
  proc StrToInt*(P1: LPCSTR): int32 {.winapi, dynlib: "shlwapi", importc: "StrToIntA".}
  proc StrToIntEx*(P1: LPCSTR, P2: DWORD, P3: ptr int32): BOOL {.winapi, dynlib: "shlwapi", importc: "StrToIntExA".}
  proc StrTrim*(P1: LPSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "StrTrimA".}
  proc PathAddBackslash*(P1: LPSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "PathAddBackslashA".}
  proc PathAddExtension*(P1: LPSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathAddExtensionA".}
  proc PathAppend*(P1: LPSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathAppendA".}
  proc PathBuildRoot*(P1: LPSTR, P2: int32): LPSTR {.winapi, dynlib: "shlwapi", importc: "PathBuildRootA".}
  proc PathCanonicalize*(P1: LPSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathCanonicalizeA".}
  proc PathCombine*(P1: LPSTR, P2: LPCSTR, P3: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "PathCombineA".}
  proc PathCommonPrefix*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR): int32 {.winapi, dynlib: "shlwapi", importc: "PathCommonPrefixA".}
  proc PathCompactPath*(P1: HDC, P2: LPSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc: "PathCompactPathA".}
  proc PathCompactPathEx*(P1: LPSTR, P2: LPCSTR, P3: UINT, P4: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc: "PathCompactPathExA".}
  proc PathCreateFromUrl*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "PathCreateFromUrlA".}
  proc PathFileExists*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathFileExistsA".}
  proc PathFindExtension*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "PathFindExtensionA".}
  proc PathFindFileName*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "PathFindFileNameA".}
  proc PathFindNextComponent*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "PathFindNextComponentA".}
  proc PathFindOnPath*(P1: LPSTR, P2: ptr LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathFindOnPathA".}
  proc PathFindSuffixArray*(P1: LPCSTR, P2: ptr LPCSTR, P3: int32): LPCSTR {.winapi, dynlib: "shlwapi", importc: "PathFindSuffixArrayA".}
  proc PathGetArgs*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "PathGetArgsA".}
  proc PathGetCharType*(P1: UCHAR): UINT {.winapi, dynlib: "shlwapi", importc: "PathGetCharTypeA".}
  proc PathGetDriveNumber*(P1: LPCSTR): int32 {.winapi, dynlib: "shlwapi", importc: "PathGetDriveNumberA".}
  proc PathIsContentType*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsContentTypeA".}
  proc PathIsDirectoryEmpty*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsDirectoryEmptyA".}
  proc PathIsDirectory*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsDirectoryA".}
  proc PathIsFileSpec*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsFileSpecA".}
  proc PathIsLFNFileSpec*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsLFNFileSpecA".}
  proc PathIsNetworkPath*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsNetworkPathA".}
  proc PathIsPrefix*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsPrefixA".}
  proc PathIsRelative*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsRelativeA".}
  proc PathIsRoot*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsRootA".}
  proc PathIsSameRoot*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsSameRootA".}
  proc PathIsSystemFolder*(P1: LPCSTR, P2: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsSystemFolderA".}
  proc PathIsUNCServerShare*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsUNCServerShareA".}
  proc PathIsUNCServer*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsUNCServerA".}
  proc PathIsUNC*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsUNCA".}
  proc PathIsURL*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathIsURLA".}
  proc PathMakePretty*(P1: LPSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathMakePrettyA".}
  proc PathMakeSystemFolder*(P1: LPSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathMakeSystemFolderA".}
  proc PathMatchSpec*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathMatchSpecA".}
  proc PathParseIconLocation*(P1: LPSTR): int32 {.winapi, dynlib: "shlwapi", importc: "PathParseIconLocationA".}
  proc PathQuoteSpaces*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc: "PathQuoteSpacesA".}
  proc PathRelativePathTo*(P1: LPSTR, P2: LPCSTR, P3: DWORD, P4: LPCSTR, P5: DWORD): BOOL {.winapi, dynlib: "shlwapi", importc: "PathRelativePathToA".}
  proc PathRemoveArgs*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc: "PathRemoveArgsA".}
  proc PathRemoveBackslash*(P1: LPSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "PathRemoveBackslashA".}
  proc PathRemoveBlanks*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc: "PathRemoveBlanksA".}
  proc PathRemoveExtension*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc: "PathRemoveExtensionA".}
  proc PathRemoveFileSpec*(P1: LPSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathRemoveFileSpecA".}
  proc PathRenameExtension*(P1: LPSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathRenameExtensionA".}
  proc PathSearchAndQualify*(P1: LPCSTR, P2: LPSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc: "PathSearchAndQualifyA".}
  proc PathSetDlgItemPath*(P1: HWND, P2: int32, P3: LPCSTR): void {.winapi, dynlib: "shlwapi", importc: "PathSetDlgItemPathA".}
  proc PathSkipRoot*(P1: LPCSTR): LPSTR {.winapi, dynlib: "shlwapi", importc: "PathSkipRootA".}
  proc PathStripPath*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc: "PathStripPathA".}
  proc PathStripToRoot*(P1: LPSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathStripToRootA".}
  proc PathUndecorate*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc: "PathUndecorateA".}
  proc PathUnExpandEnvStrings*(P1: LPCSTR, P2: LPSTR, P3: UINT): BOOL {.winapi, dynlib: "shlwapi", importc: "PathUnExpandEnvStringsA".}
  proc PathUnmakeSystemFolder*(P1: LPSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "PathUnmakeSystemFolderA".}
  proc PathUnquoteSpaces*(P1: LPSTR): void {.winapi, dynlib: "shlwapi", importc: "PathUnquoteSpacesA".}
  proc SHCreateStreamOnFile*(P1: LPCSTR, P2: DWORD, P3: ptr ptr IStream): HRESULT {.winapi, dynlib: "shlwapi", importc: "SHCreateStreamOnFileA".}
  proc SHOpenRegStream*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: DWORD): ptr IStream {.winapi, dynlib: "shlwapi", importc: "SHOpenRegStreamA".}
  proc SHOpenRegStream2*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: DWORD): ptr IStream {.winapi, dynlib: "shlwapi", importc: "SHOpenRegStream2A".}
  proc SHCopyKey*(P1: HKEY, P2: LPCSTR, P3: HKEY, P4: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHCopyKeyA".}
  proc SHDeleteEmptyKey*(P1: HKEY, P2: LPCSTR): DWORD {.winapi, dynlib: "shlwapi", importc: "SHDeleteEmptyKeyA".}
  proc SHDeleteKey*(P1: HKEY, P2: LPCSTR): DWORD {.winapi, dynlib: "shlwapi", importc: "SHDeleteKeyA".}
  proc SHEnumKeyEx*(P1: HKEY, P2: DWORD, P3: LPSTR, P4: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHEnumKeyExA".}
  proc SHQueryInfoKey*(P1: HKEY, P2: LPDWORD, P3: LPDWORD, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHQueryInfoKeyA".}
  proc SHQueryValueEx*(P1: HKEY, P2: LPCSTR, P3: LPDWORD, P4: LPDWORD, P5: LPVOID, P6: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHQueryValueExA".}
  proc SHEnumValue*(P1: HKEY, P2: DWORD, P3: LPSTR, P4: LPDWORD, P5: LPDWORD, P6: LPVOID, P7: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHEnumValueA".}
  proc SHGetValue*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: LPDWORD, P5: LPVOID, P6: LPDWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHGetValueA".}
  proc SHSetValue*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: LPCVOID, P6: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHSetValueA".}
  proc SHDeleteValue*(P1: HKEY, P2: LPCSTR, P3: LPCSTR): DWORD {.winapi, dynlib: "shlwapi", importc: "SHDeleteValueA".}
  proc AssocQueryKey*(P1: ASSOCF, P2: ASSOCKEY, P3: LPCSTR, P4: LPCSTR, P5: ptr HKEY): HRESULT {.winapi, dynlib: "shlwapi", importc: "AssocQueryKeyA".}
  proc AssocQueryStringByKey*(P1: ASSOCF, P2: ASSOCSTR, P3: HKEY, P4: LPCSTR, P5: LPSTR, P6: ptr DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "AssocQueryStringByKeyA".}
  proc AssocQueryString*(P1: ASSOCF, P2: ASSOCSTR, P3: LPCSTR, P4: LPCSTR, P5: LPSTR, P6: ptr DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "AssocQueryStringA".}
  proc UrlApplyScheme*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlApplySchemeA".}
  proc UrlCanonicalize*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlCanonicalizeA".}
  proc UrlCombine*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR, P4: LPDWORD, P5: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlCombineA".}
  proc UrlCompare*(P1: LPCSTR, P2: LPCSTR, P3: BOOL): int32 {.winapi, dynlib: "shlwapi", importc: "UrlCompareA".}
  proc UrlCreateFromPath*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlCreateFromPathA".}
  proc UrlEscape*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlEscapeA".}
  proc UrlGetLocation*(P1: LPCSTR): LPCSTR {.winapi, dynlib: "shlwapi", importc: "UrlGetLocationA".}
  proc UrlGetPart*(P1: LPCSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD, P5: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlGetPartA".}
  proc UrlHash*(P1: LPCSTR, P2: LPBYTE, P3: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlHashA".}
  proc UrlIs*(P1: LPCSTR, P2: TURLIS): BOOL {.winapi, dynlib: "shlwapi", importc: "UrlIsA".}
  proc UrlIsNoHistory*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "UrlIsNoHistoryA".}
  proc UrlIsOpaque*(P1: LPCSTR): BOOL {.winapi, dynlib: "shlwapi", importc: "UrlIsOpaqueA".}
  proc UrlUnescape*(P1: LPSTR, P2: LPSTR, P3: LPDWORD, P4: DWORD): HRESULT {.winapi, dynlib: "shlwapi", importc: "UrlUnescapeA".}

  const
    UrlUnescapeInPlace* = UrlUnescapeInPlaceA

  proc SHRegCreateUSKey*(P1: LPCSTR, P2: REGSAM, P3: HUSKEY, P4: PHUSKEY, P5: DWORD): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegCreateUSKeyA".}
  proc SHRegDeleteEmptyUSKey*(P1: HUSKEY, P2: LPCSTR, P3: SHREGDEL_FLAGS): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegDeleteEmptyUSKeyA".}
  proc SHRegDeleteUSValue*(P1: HUSKEY, P2: LPCSTR, P3: SHREGDEL_FLAGS): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegDeleteUSValueA".}
  proc SHRegEnumUSKey*(P1: HUSKEY, P2: DWORD, P3: LPSTR, P4: LPDWORD, P5: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc: "SHRegEnumUSKeyA".}
  proc SHRegEnumUSValue*(P1: HUSKEY, P2: DWORD, P3: LPSTR, P4: LPDWORD, P5: LPDWORD, P6: LPVOID, P7: LPDWORD, P8: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc: "SHRegEnumUSValueA".}
  proc SHRegGetBoolUSValue*(P1: LPCSTR, P2: LPCSTR, P3: BOOL, P4: BOOL): BOOL {.winapi, dynlib: "shlwapi", importc: "SHRegGetBoolUSValueA".}
  proc SHRegGetPath*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: LPSTR, P5: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHRegGetPathA".}
  proc SHRegGetUSValue*(P1: LPCSTR, P2: LPCSTR, P3: LPDWORD, P4: LPVOID, P5: LPDWORD, P6: BOOL, P7: LPVOID, P8: DWORD): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegGetUSValueA".}
  proc SHRegOpenUSKey*(P1: LPCSTR, P2: REGSAM, P3: HUSKEY, P4: PHUSKEY, P5: BOOL): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegOpenUSKeyA".}
  proc SHRegQueryInfoUSKey*(P1: HUSKEY, P2: LPDWORD, P3: LPDWORD, P4: LPDWORD, P5: LPDWORD, P6: SHREGENUM_FLAGS): DWORD {.winapi, dynlib: "shlwapi", importc: "SHRegQueryInfoUSKeyA".}
  proc SHRegQueryUSValue*(P1: HUSKEY, P2: LPCSTR, P3: LPDWORD, P4: LPVOID, P5: LPDWORD, P6: BOOL, P7: LPVOID, P8: DWORD): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegQueryUSValueA".}
  proc SHRegSetPath*(P1: HKEY, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR, P5: DWORD): DWORD {.winapi, dynlib: "shlwapi", importc: "SHRegSetPathA".}
  proc SHRegSetUSValue*(P1: LPCSTR, P2: LPCSTR, P3: DWORD, P4: LPVOID, P5: DWORD, P6: DWORD): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegSetUSValueA".}
  proc SHRegWriteUSValue*(P1: HUSKEY, P2: LPCSTR, P3: DWORD, P4: LPVOID, P5: DWORD, P6: DWORD): LONG {.winapi, dynlib: "shlwapi", importc: "SHRegWriteUSValueA".}

const
  StrToLong* = StrToInt


# objext/uuid_ext.nim

const
  IID_IExecuteCommand* = DEFINE_GUID(0x7f9185b0'u32, 0xcb92, 0x43c5, [0x80'u8, 0xa9, 0x92, 0x27, 0x7a, 0x4f, 0x7b, 0x54])
  IID_IShellTaskScheduler* = DEFINE_GUID(0x6ccb7be0'u32, 0x6807, 0x11d0, [0xb8'u8, 0x10, 0x00, 0xc0, 0x4f, 0xd7, 0x06, 0xec])
  IID_IQueryCodePage* = DEFINE_GUID(0xc7b236ce'u32, 0xee80, 0x11d0, [0x98'u8, 0x5f, 0x00, 0x60, 0x08, 0x05, 0x93, 0x82])
  IID_IEnumFullIDList* = DEFINE_GUID(0xd0191542'u32, 0x7954, 0x4908, [0xbc'u8, 0x06, 0xb2, 0x36, 0x0b, 0xbe, 0x45, 0xba])
  IID_IObjectWithFolderEnumMode* = DEFINE_GUID(0x6a9d9026'u32, 0x0e6e, 0x464c, [0xb0'u8, 0x00, 0x42, 0xec, 0xc0, 0x7d, 0xe6, 0x73])
  IID_IParseAndCreateItem* = DEFINE_GUID(0x67efed0e'u32, 0xe827, 0x4408, [0xb4'u8, 0x93, 0x78, 0xf3, 0x98, 0x2b, 0x68, 0x5c])
  IID_IFolderViewOptions* = DEFINE_GUID(0x3cc974d2'u32, 0xb302, 0x4d36, [0xad'u8, 0x3e, 0x06, 0xd9, 0x3f, 0x69, 0x5d, 0x3f])
  IID_IShellView3* = DEFINE_GUID(0xec39fa88'u32, 0xf8af, 0x41c5, [0x84'u8, 0x21, 0x38, 0xbe, 0xd2, 0x8f, 0x46, 0x73])
  IID_ISearchBoxInfo* = DEFINE_GUID(0x6af6e03f'u32, 0xd664, 0x4ef4, [0x96'u8, 0x26, 0xf7, 0xe0, 0xed, 0x36, 0x75, 0x5e])
  IID_IFolderView2* = DEFINE_GUID(0x1af3a467'u32, 0x214f, 0x4298, [0x90'u8, 0x8e, 0x06, 0xb0, 0x3e, 0x0b, 0x39, 0xf9])
  IID_IFolderViewSettings* = DEFINE_GUID(0xae8c987d'u32, 0x8797, 0x4ed3, [0xbe'u8, 0x72, 0x2a, 0x47, 0xdd, 0x93, 0x8d, 0xb0])
  IID_IPreviewHandlerVisuals* = DEFINE_GUID(0x196bf9a5'u32, 0xb346, 0x4ef0, [0xaa'u8, 0x1e, 0x5d, 0xcd, 0xb7, 0x67, 0x68, 0xb1])
  IID_IVisualProperties* = DEFINE_GUID(0xe693cf68'u32, 0xd967, 0x4112, [0x87'u8, 0x63, 0x99, 0x17, 0x2a, 0xee, 0x5e, 0x5a])
  IID_ICommDlgBrowser3* = DEFINE_GUID(0xc8ad25a1'u32, 0x3294, 0x41ee, [0x81'u8, 0x65, 0x71, 0x17, 0x4b, 0xd0, 0x1c, 0x57])
  IID_IColumnManager* = DEFINE_GUID(0xd8ec27bb'u32, 0x3f3b, 0x4042, [0xb1'u8, 0x0a, 0x4a, 0xcf, 0xd9, 0x24, 0xd4, 0x53])
  IID_IInputObject2* = DEFINE_GUID(0x6915c085'u32, 0x510b, 0x44cd, [0x94'u8, 0xaf, 0x28, 0xdf, 0xa5, 0x6c, 0xf9, 0x2b])
  IID_IShellItem* = DEFINE_GUID(0x43826d1e'u32, 0xe718, 0x42ee, [0xbc'u8, 0x55, 0xa1, 0xe2, 0x61, 0xc3, 0x7b, 0xfe])
  IID_IShellItem2* = DEFINE_GUID(0x7e9fb0d3'u32, 0x919f, 0x4307, [0xab'u8, 0x2e, 0x9b, 0x18, 0x60, 0x31, 0x0c, 0x93])
  IID_IShellItemImageFactory* = DEFINE_GUID(0xbcc18b79'u32, 0xba16, 0x442f, [0x80'u8, 0xc4, 0x8a, 0x59, 0xc3, 0x0c, 0x46, 0x3b])
  IID_IUserAccountChangeCallback* = DEFINE_GUID(0xa561e69a'u32, 0xb4b8, 0x4113, [0x91'u8, 0xa5, 0x64, 0xc6, 0xbc, 0xca, 0x34, 0x30])
  IID_IEnumShellItems* = DEFINE_GUID(0x70629033'u32, 0xe363, 0x4a28, [0xa5'u8, 0x67, 0x0d, 0xb7, 0x80, 0x06, 0xe6, 0xd7])
  IID_ITransferAdviseSink* = DEFINE_GUID(0xd594d0d8'u32, 0x8da7, 0x457b, [0xb3'u8, 0xb4, 0xce, 0x5d, 0xba, 0xac, 0x0b, 0x88])
  IID_ITransferSource* = DEFINE_GUID(0x00adb003'u32, 0xbde9, 0x45c6, [0x8e'u8, 0x29, 0xd0, 0x9f, 0x93, 0x53, 0xe1, 0x08])
  IID_IEnumResources* = DEFINE_GUID(0x2dd81fe3'u32, 0xa83c, 0x4da9, [0xa3'u8, 0x30, 0x47, 0x24, 0x9d, 0x34, 0x5b, 0xa1])
  IID_IShellItemResources* = DEFINE_GUID(0xff5693be'u32, 0x2ce0, 0x4d48, [0xb5'u8, 0xc5, 0x40, 0x81, 0x7d, 0x1a, 0xcd, 0xb9])
  IID_ITransferDestination* = DEFINE_GUID(0x48addd32'u32, 0x3ca5, 0x4124, [0xab'u8, 0xe3, 0xb5, 0xa7, 0x25, 0x31, 0xb2, 0x07])
  IID_IStreamAsync* = DEFINE_GUID(0xfe0b6665'u32, 0xe0ca, 0x49b9, [0xa1'u8, 0x78, 0x2b, 0x5c, 0xb4, 0x8d, 0x92, 0xa5])
  IID_IStreamUnbufferedInfo* = DEFINE_GUID(0x8a68fdda'u32, 0x1fdc, 0x4c20, [0x8c'u8, 0xeb, 0x41, 0x66, 0x43, 0xb5, 0xa6, 0x25])
  IID_IFileOperationProgressSink* = DEFINE_GUID(0x04b0f1a7'u32, 0x9490, 0x44bc, [0x96'u8, 0xe1, 0x42, 0x96, 0xa3, 0x12, 0x52, 0xe2])
  IID_IShellItemArray* = DEFINE_GUID(0xb63ea76d'u32, 0x1f85, 0x456f, [0xa1'u8, 0x9c, 0x48, 0x15, 0x9e, 0xfa, 0x85, 0x8b])
  IID_IInitializeWithItem* = DEFINE_GUID(0x7f73be3f'u32, 0xfb79, 0x493c, [0xa6'u8, 0xc7, 0x7e, 0xe1, 0x4e, 0x24, 0x58, 0x41])
  IID_IObjectWithSelection* = DEFINE_GUID(0x1c9cd5bb'u32, 0x98e9, 0x4491, [0xa6'u8, 0x0f, 0x31, 0xaa, 0xcc, 0x72, 0xb8, 0x3c])
  IID_IObjectWithBackReferences* = DEFINE_GUID(0x321a6a6a'u32, 0xd61f, 0x4bf3, [0x97'u8, 0xae, 0x14, 0xbe, 0x29, 0x86, 0xbb, 0x36])
  IID_IDragSourceHelper2* = DEFINE_GUID(0x83e07d0d'u32, 0x0c5f, 0x4163, [0xbf'u8, 0x1a, 0x60, 0xb2, 0x74, 0x05, 0x1e, 0x40])
  IID_IHWEventHandler2* = DEFINE_GUID(0xcfcc809f'u32, 0x295d, 0x42e8, [0x9f'u8, 0xfc, 0x42, 0x4b, 0x33, 0xc4, 0x87, 0xe6])
  IID_IDynamicHWHandler* = DEFINE_GUID(0xdc2601d7'u32, 0x059e, 0x42fc, [0xa0'u8, 0x9d, 0x2a, 0xfd, 0x21, 0xb6, 0xd5, 0xf7])
  IID_IObjectWithCancelEvent* = DEFINE_GUID(0xf279b885'u32, 0x0ae9, 0x4b85, [0xac'u8, 0x06, 0xdd, 0xec, 0xf9, 0x40, 0x89, 0x41])
  IID_IUserNotificationCallback* = DEFINE_GUID(0x19108294'u32, 0x0441, 0x4aff, [0x80'u8, 0x13, 0xfa, 0x0a, 0x73, 0x0b, 0x0b, 0xea])
  IID_IUserNotification2* = DEFINE_GUID(0x215913cc'u32, 0x57eb, 0x4fab, [0xab'u8, 0x5a, 0xe5, 0xfa, 0x7b, 0xea, 0x2a, 0x6c])
  IID_ISearchFolderItemFactory* = DEFINE_GUID(0xa0ffbc28'u32, 0x5482, 0x4366, [0xbe'u8, 0x27, 0x3e, 0x81, 0xe7, 0x8e, 0x06, 0xc2])
  IID_IThumbnailHandlerFactory* = DEFINE_GUID(0xe35b4b2e'u32, 0x00da, 0x4bc1, [0x9f'u8, 0x13, 0x38, 0xbc, 0x11, 0xf5, 0xd4, 0x17])
  IID_IParentAndItem* = DEFINE_GUID(0xb3a4b685'u32, 0xb685, 0x4805, [0x99'u8, 0xd9, 0x5d, 0xea, 0xd2, 0x87, 0x32, 0x36])
  IID_IDeskBandInfo* = DEFINE_GUID(0x77e425fc'u32, 0xcbf9, 0x4307, [0xba'u8, 0x6a, 0xbb, 0x57, 0x27, 0x74, 0x56, 0x61])
  IID_IDeskBand2* = DEFINE_GUID(0x79d16de4'u32, 0xabee, 0x4021, [0x8d'u8, 0x9d, 0x91, 0x69, 0xb2, 0x61, 0xd6, 0x57])
  IID_ITaskbarList3* = DEFINE_GUID(0xea1afb91'u32, 0x9e28, 0x4b86, [0x90'u8, 0xe9, 0x9e, 0x9f, 0x8a, 0x5e, 0xef, 0xaf])
  IID_ITaskbarList4* = DEFINE_GUID(0xc43dc798'u32, 0x95d1, 0x4bea, [0x90'u8, 0x30, 0xbb, 0x99, 0xe2, 0x98, 0x3a, 0x1a])
  IID_IStartMenuPinnedList* = DEFINE_GUID(0x4cd19ada'u32, 0x25a5, 0x4a32, [0xb3'u8, 0xb7, 0x34, 0x7b, 0xee, 0x5b, 0xe3, 0x6b])
  IID_IExplorerBrowserEvents* = DEFINE_GUID(0x361bbdc7'u32, 0xe6ee, 0x4e13, [0xbe'u8, 0x58, 0x58, 0xe2, 0x24, 0x0c, 0x81, 0x0f])
  IID_IExplorerBrowser* = DEFINE_GUID(0xdfd3b6b5'u32, 0xc10c, 0x4be9, [0x85'u8, 0xf6, 0xa6, 0x69, 0x69, 0xf4, 0x02, 0xf6])
  IID_IAccessibleObject* = DEFINE_GUID(0x95a391c5'u32, 0x9ed4, 0x4c28, [0x84'u8, 0x01, 0xab, 0x9e, 0x06, 0x71, 0x9e, 0x11])
  IID_IResultsFolder* = DEFINE_GUID(0x96e5ae6d'u32, 0x6ae1, 0x4b1c, [0x90'u8, 0x0c, 0xc6, 0x48, 0x0e, 0xaa, 0x88, 0x28])
  IID_IEnumObjects* = DEFINE_GUID(0x2c1c7e2e'u32, 0x2d0e, 0x4059, [0x83'u8, 0x1e, 0x1e, 0x6f, 0x82, 0x33, 0x5c, 0x2e])
  IID_IOperationsProgressDialog* = DEFINE_GUID(0x0c9fb851'u32, 0xe5c9, 0x43eb, [0xa3'u8, 0x70, 0xf0, 0x67, 0x7b, 0x13, 0x87, 0x4c])
  IID_IIOCancelInformation* = DEFINE_GUID(0xf5b0bf81'u32, 0x8cb5, 0x4b1b, [0x94'u8, 0x49, 0x1a, 0x15, 0x9e, 0x0c, 0x73, 0x3c])
  IID_IFileOperation* = DEFINE_GUID(0x947aab5f'u32, 0x0a5c, 0x4c13, [0xb4'u8, 0xd6, 0x4b, 0xf7, 0x83, 0x6f, 0xc9, 0xf8])
  IID_IObjectProvider* = DEFINE_GUID(0xa6087428'u32, 0x3be3, 0x4d73, [0xb3'u8, 0x08, 0x7c, 0x04, 0xa5, 0x40, 0xbf, 0x1a])
  IID_INamespaceWalkCB* = DEFINE_GUID(0xd92995f8'u32, 0xcf5e, 0x4a76, [0xbf'u8, 0x59, 0xea, 0xd3, 0x9e, 0xa2, 0xb9, 0x7e])
  IID_INamespaceWalkCB2* = DEFINE_GUID(0x7ac7492b'u32, 0xc38e, 0x438a, [0x87'u8, 0xdb, 0x68, 0x73, 0x78, 0x44, 0xff, 0x70])
  IID_INamespaceWalk* = DEFINE_GUID(0x57ced8a7'u32, 0x3f4a, 0x432c, [0x93'u8, 0x50, 0x30, 0xf2, 0x44, 0x83, 0xf7, 0x4f])
  IID_IBandSite* = DEFINE_GUID(0x4cf504b0'u32, 0xde96, 0x11d0, [0x8b'u8, 0x3f, 0x00, 0xa0, 0xc9, 0x11, 0xe8, 0xe5])
  IID_IModalWindow* = DEFINE_GUID(0xb4db1657'u32, 0x70d7, 0x485e, [0x8e'u8, 0x3e, 0x6f, 0xcb, 0x5a, 0x5c, 0x18, 0x02])
  IID_ICDBurnExt* = DEFINE_GUID(0x2271dcca'u32, 0x74fc, 0x4414, [0x8f'u8, 0xb7, 0xc5, 0x6b, 0x05, 0xac, 0xe2, 0xd7])
  IID_IContextMenuSite* = DEFINE_GUID(0x0811aebe'u32, 0x0b87, 0x4c54, [0x9e'u8, 0x72, 0x54, 0x8c, 0xf6, 0x49, 0x01, 0x6b])
  IID_IEnumReadyCallback* = DEFINE_GUID(0x61e00d45'u32, 0x8fff, 0x4e60, [0x92'u8, 0x4e, 0x65, 0x37, 0xb6, 0x16, 0x12, 0xdd])
  IID_IEnumerableView* = DEFINE_GUID(0x8c8bf236'u32, 0x1aec, 0x495f, [0x98'u8, 0x94, 0x91, 0xd5, 0x7c, 0x3c, 0x68, 0x6f])
  IID_IInsertItem* = DEFINE_GUID(0xd2b57227'u32, 0x3d23, 0x4b95, [0x93'u8, 0xc0, 0x49, 0x2b, 0xd4, 0x54, 0xc3, 0x56])
  IID_IMenuBand* = DEFINE_GUID(0x568804cd'u32, 0xcbd7, 0x11d0, [0x98'u8, 0x16, 0x00, 0xc0, 0x4f, 0xd9, 0x19, 0x72])
  IID_IFolderBandPriv* = DEFINE_GUID(0x47c01f95'u32, 0xe185, 0x412c, [0xb5'u8, 0xc5, 0x4f, 0x27, 0xdf, 0x96, 0x5a, 0xea])
  IID_IRegTreeItem* = DEFINE_GUID(0xa9521922'u32, 0x0812, 0x4d44, [0x9e'u8, 0xc3, 0x7f, 0xd3, 0x8c, 0x72, 0x6f, 0x3d])
  IID_IImageRecompress* = DEFINE_GUID(0x505f1513'u32, 0x6b3e, 0x4892, [0xa2'u8, 0x72, 0x59, 0xf8, 0x88, 0x9a, 0x4d, 0x3e])
  IID_IDeskBar* = DEFINE_GUID(0xeb0fe173'u32, 0x1a3a, 0x11d0, [0x89'u8, 0xb3, 0x00, 0xa0, 0xc9, 0x0a, 0x90, 0xac])
  IID_IMenuPopup* = DEFINE_GUID(0xd1e7afeb'u32, 0x6a2e, 0x11d0, [0x8c'u8, 0x78, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0xb4])
  IID_IFileIsInUse* = DEFINE_GUID(0x64a1cbf0'u32, 0x3a1a, 0x4461, [0x91'u8, 0x58, 0x37, 0x69, 0x69, 0x69, 0x39, 0x50])
  IID_IFileDialogEvents* = DEFINE_GUID(0x973510db'u32, 0x7d7f, 0x452b, [0x89'u8, 0x75, 0x74, 0xa8, 0x58, 0x28, 0xd3, 0x54])
  IID_IFileDialog* = DEFINE_GUID(0x42f85136'u32, 0xdb7e, 0x439c, [0x85'u8, 0xf1, 0xe4, 0x07, 0x5d, 0x13, 0x5f, 0xc8])
  IID_IFileSaveDialog* = DEFINE_GUID(0x84bccd23'u32, 0x5fde, 0x4cdb, [0xae'u8, 0xa4, 0xaf, 0x64, 0xb8, 0x3d, 0x78, 0xab])
  IID_IFileOpenDialog* = DEFINE_GUID(0xd57c7288'u32, 0xd4ad, 0x4768, [0xbe'u8, 0x02, 0x9d, 0x96, 0x95, 0x32, 0xd9, 0x60])
  IID_IFileDialogCustomize* = DEFINE_GUID(0xe6fdd21a'u32, 0x163f, 0x4975, [0x9c'u8, 0x8c, 0xa6, 0x9f, 0x1b, 0xa3, 0x70, 0x34])
  IID_IFileDialogControlEvents* = DEFINE_GUID(0x36116642'u32, 0xd713, 0x4b97, [0x9b'u8, 0x83, 0x74, 0x84, 0xa9, 0xd0, 0x04, 0x33])
  IID_IFileDialog2* = DEFINE_GUID(0x61744fc7'u32, 0x85b5, 0x4791, [0xa9'u8, 0xb0, 0x27, 0x22, 0x76, 0x30, 0x9b, 0x13])
  IID_IApplicationAssociationRegistration* = DEFINE_GUID(0x4e530b0a'u32, 0xe611, 0x4c77, [0xa3'u8, 0xac, 0x90, 0x31, 0xd0, 0x22, 0x28, 0x1b])
  IID_IApplicationAssociationRegistrationUI* = DEFINE_GUID(0x1f76a169'u32, 0xf994, 0x40ac, [0x8f'u8, 0xc8, 0x09, 0x59, 0xe8, 0x87, 0x47, 0x10])
  IID_IBrowserFrameOptions* = DEFINE_GUID(0x10df43c8'u32, 0x1dbe, 0x11d3, [0x8b'u8, 0x34, 0x00, 0x60, 0x97, 0xdf, 0x5b, 0xd4])
  IID_INewWindowManager* = DEFINE_GUID(0xd2bc4c84'u32, 0x3f72, 0x4a52, [0xa6'u8, 0x04, 0x7b, 0xcb, 0xf3, 0x98, 0x2c, 0xbb])
  IID_IAttachmentExecute* = DEFINE_GUID(0x73db1241'u32, 0x1e85, 0x4581, [0x8e'u8, 0x4f, 0xa8, 0x1e, 0x1d, 0x0f, 0x8c, 0x57])
  IID_IShellMenuCallback* = DEFINE_GUID(0x4ca300a1'u32, 0x9b8d, 0x11d1, [0x8b'u8, 0x22, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0xd0])
  IID_IShellMenu* = DEFINE_GUID(0xee1f7637'u32, 0xe138, 0x11d1, [0x83'u8, 0x79, 0x00, 0xc0, 0x4f, 0xd9, 0x18, 0xd0])
  IID_IShellRunDll* = DEFINE_GUID(0xfce4bde0'u32, 0x4b68, 0x4b80, [0x8e'u8, 0x9c, 0x74, 0x26, 0x31, 0x5a, 0x73, 0x88])
  IID_IKnownFolder* = DEFINE_GUID(0x3aa7af7e'u32, 0x9b36, 0x420c, [0xa8'u8, 0xe3, 0xf7, 0x7d, 0x46, 0x74, 0xa4, 0x88])
  IID_IKnownFolderManager* = DEFINE_GUID(0x8be2d872'u32, 0x86aa, 0x4d47, [0xb7'u8, 0x76, 0x32, 0xcc, 0xa4, 0x0c, 0x70, 0x18])
  IID_ISharingConfigurationManager* = DEFINE_GUID(0xb4cd448a'u32, 0x9c86, 0x4466, [0x92'u8, 0x01, 0x2e, 0x62, 0x10, 0x5b, 0x87, 0xae])
  IID_IPreviousVersionsInfo* = DEFINE_GUID(0x76e54780'u32, 0xad74, 0x48e3, [0xa6'u8, 0x95, 0x3b, 0xa9, 0xa0, 0xaf, 0xf1, 0x0d])
  IID_IRelatedItem* = DEFINE_GUID(0xa73ce67a'u32, 0x8ab1, 0x44f1, [0x8d'u8, 0x43, 0xd2, 0xfc, 0xbf, 0x6b, 0x1c, 0xd0])
  IID_IIdentityName* = DEFINE_GUID(0x7d903fca'u32, 0xd6f9, 0x4810, [0x83'u8, 0x32, 0x94, 0x6c, 0x01, 0x77, 0xe2, 0x47])
  IID_IDelegateItem* = DEFINE_GUID(0x3c5a1c94'u32, 0xc951, 0x4cb7, [0xbb'u8, 0x6d, 0x3b, 0x93, 0xf3, 0x0c, 0xce, 0x93])
  IID_ICurrentItem* = DEFINE_GUID(0x240a7174'u32, 0xd653, 0x4a1d, [0xa6'u8, 0xd3, 0xd4, 0x94, 0x3c, 0xfb, 0xfe, 0x3d])
  IID_ITransferMediumItem* = DEFINE_GUID(0x77f295d5'u32, 0x2d6f, 0x4e19, [0xb8'u8, 0xae, 0x32, 0x2f, 0x3e, 0x72, 0x1a, 0xb5])
  IID_IUseToBrowseItem* = DEFINE_GUID(0x05edda5c'u32, 0x98a3, 0x4717, [0x8a'u8, 0xdb, 0xc5, 0xe7, 0xda, 0x99, 0x1e, 0xb1])
  IID_IDisplayItem* = DEFINE_GUID(0xc6fd5997'u32, 0x9f6b, 0x4888, [0x87'u8, 0x03, 0x94, 0xe8, 0x0e, 0x8c, 0xde, 0x3f])
  IID_IViewStateIdentityItem* = DEFINE_GUID(0x9d264146'u32, 0xa94f, 0x4195, [0x9f'u8, 0x9f, 0x3b, 0xb1, 0x2c, 0xe0, 0xc9, 0x55])
  IID_IPreviewItem* = DEFINE_GUID(0x36149969'u32, 0x0a8f, 0x49c8, [0x8b'u8, 0x00, 0x4a, 0xec, 0xb2, 0x02, 0x22, 0xfb])
  IID_IDestinationStreamFactory* = DEFINE_GUID(0x8a87781b'u32, 0x39a7, 0x4a1f, [0xaa'u8, 0xb3, 0xa3, 0x9b, 0x9c, 0x34, 0xa7, 0xd9])
  IID_INewMenuClient* = DEFINE_GUID(0xdcb07fdc'u32, 0x3bb5, 0x451c, [0x90'u8, 0xbe, 0x96, 0x66, 0x44, 0xfe, 0xd7, 0xb0])
  SID_SCommandBarState* = DEFINE_GUID(0xB99EAA5C'u32, 0x3850, 0x4400, [0xBC'u8, 0x33, 0x2C, 0xE5, 0x34, 0x04, 0x8B, 0xF8])
  IID_IInitializeWithBindCtx* = DEFINE_GUID(0x71c0d2bc'u32, 0x726d, 0x45cc, [0xa6'u8, 0xc0, 0x2e, 0x31, 0xc1, 0xdb, 0x21, 0x59])
  IID_IShellItemFilter* = DEFINE_GUID(0x2659b475'u32, 0xeeb8, 0x48b7, [0x8f'u8, 0x07, 0xb3, 0x78, 0x81, 0x0f, 0x48, 0xcf])
  IID_INameSpaceTreeControl* = DEFINE_GUID(0x028212a3'u32, 0xb627, 0x47e9, [0x88'u8, 0x56, 0xc1, 0x42, 0x65, 0x55, 0x4e, 0x4f])
  IID_INameSpaceTreeControl2* = DEFINE_GUID(0x7cc7aed8'u32, 0x290e, 0x49bc, [0x89'u8, 0x45, 0xc1, 0x40, 0x1c, 0xc9, 0x30, 0x6c])
  IID_INameSpaceTreeControlEvents* = DEFINE_GUID(0x93d77985'u32, 0xb3d8, 0x4484, [0x83'u8, 0x18, 0x67, 0x2c, 0xdd, 0xa0, 0x02, 0xce])
  IID_INameSpaceTreeControlDropHandler* = DEFINE_GUID(0xf9c665d6'u32, 0xc2f2, 0x4c19, [0xbf'u8, 0x33, 0x83, 0x22, 0xd7, 0x35, 0x2f, 0x51])
  IID_INameSpaceTreeAccessible* = DEFINE_GUID(0x71f312de'u32, 0x43ed, 0x4190, [0x84'u8, 0x77, 0xe9, 0x53, 0x6b, 0x82, 0x35, 0x0b])
  IID_INameSpaceTreeControlCustomDraw* = DEFINE_GUID(0x2d3ba758'u32, 0x33ee, 0x42d5, [0xbb'u8, 0x7b, 0x5f, 0x34, 0x31, 0xd8, 0x6c, 0x78])
  IID_INameSpaceTreeControlFolderCapabilities* = DEFINE_GUID(0xe9701183'u32, 0xe6b3, 0x4ff2, [0x85'u8, 0x68, 0x81, 0x36, 0x15, 0xfe, 0xc7, 0xbe])
  IID_IPreviewHandler* = DEFINE_GUID(0x8895b1c6'u32, 0xb41f, 0x4c1c, [0xa5'u8, 0x62, 0x0d, 0x56, 0x42, 0x50, 0x83, 0x6f])
  IID_IPreviewHandlerFrame* = DEFINE_GUID(0xfec87aaf'u32, 0x35f9, 0x447a, [0xad'u8, 0xb7, 0x20, 0x23, 0x44, 0x91, 0x40, 0x1a])
  IID_ITrayDeskBand* = DEFINE_GUID(0x6d67e846'u32, 0x5b9c, 0x4db8, [0x9c'u8, 0xbc, 0xdd, 0xe1, 0x2f, 0x42, 0x54, 0xf1])
  IID_IBandHost* = DEFINE_GUID(0xb9075c7c'u32, 0xd48e, 0x403f, [0xab'u8, 0x99, 0xd6, 0xc7, 0x7a, 0x10, 0x84, 0xac])
  IID_IExplorerPaneVisibility* = DEFINE_GUID(0xe07010ec'u32, 0xbc17, 0x44c0, [0x97'u8, 0xb0, 0x46, 0xc7, 0xc9, 0x5b, 0x9e, 0xdc])
  IID_IContextMenuCB* = DEFINE_GUID(0x3409e930'u32, 0x5a39, 0x11d1, [0x83'u8, 0xfa, 0x00, 0xa0, 0xc9, 0x0d, 0xc8, 0x49])
  IID_IDefaultExtractIconInit* = DEFINE_GUID(0x41ded17d'u32, 0xd6b3, 0x4261, [0x99'u8, 0x7d, 0x88, 0xc6, 0x0e, 0x4b, 0x1d, 0x58])
  IID_IExplorerCommand* = DEFINE_GUID(0xa08ce4d0'u32, 0xfa25, 0x44ab, [0xb5'u8, 0x7c, 0xc7, 0xb1, 0xc3, 0x23, 0xe0, 0xb9])
  IID_IExplorerCommandState* = DEFINE_GUID(0xbddacb60'u32, 0x7657, 0x47ae, [0x84'u8, 0x45, 0xd2, 0x3e, 0x1a, 0xcf, 0x82, 0xae])
  IID_IInitializeCommand* = DEFINE_GUID(0x85075acf'u32, 0x231f, 0x40ea, [0x96'u8, 0x10, 0xd2, 0x6b, 0x7b, 0x58, 0xf6, 0x38])
  IID_IEnumExplorerCommand* = DEFINE_GUID(0xa88826f8'u32, 0x186f, 0x4987, [0xaa'u8, 0xde, 0xea, 0x0c, 0xef, 0x8f, 0xbf, 0xe8])
  IID_IExplorerCommandProvider* = DEFINE_GUID(0x64961751'u32, 0x0835, 0x43c0, [0x8f'u8, 0xfe, 0xd5, 0x76, 0x86, 0x53, 0x0e, 0x64])
  IID_IInitializeNetworkFolder* = DEFINE_GUID(0x6e0f9881'u32, 0x42a8, 0x4f2a, [0x97'u8, 0xf8, 0x8a, 0xf4, 0xe0, 0x26, 0xd9, 0x2d])
  IID_IOpenControlPanel* = DEFINE_GUID(0xd11ad862'u32, 0x66de, 0x4df4, [0xbf'u8, 0x6c, 0x1f, 0x56, 0x21, 0x99, 0x6a, 0xf1])
  IID_IComputerInfoChangeNotify* = DEFINE_GUID(0x0df60d92'u32, 0x6818, 0x46d6, [0xb3'u8, 0x58, 0xd6, 0x61, 0x70, 0xdd, 0xe4, 0x66])
  IID_IFileSystemBindData2* = DEFINE_GUID(0x3acf075f'u32, 0x71db, 0x4afa, [0x81'u8, 0xf0, 0x3f, 0xc4, 0xfd, 0xf2, 0xa5, 0xb8])
  IID_ICustomDestinationList* = DEFINE_GUID(0x6332debf'u32, 0x87b5, 0x4670, [0x90'u8, 0xc0, 0x5e, 0x57, 0xb4, 0x08, 0xa4, 0x9e])
  IID_IApplicationDestinations* = DEFINE_GUID(0x12337d35'u32, 0x94c6, 0x48a0, [0xbc'u8, 0xe7, 0x6a, 0x9c, 0x69, 0xd4, 0xd6, 0x00])
  IID_IApplicationDocumentLists* = DEFINE_GUID(0x3c594f9f'u32, 0x9f30, 0x47a1, [0x97'u8, 0x9a, 0xc9, 0xe8, 0x3d, 0x3d, 0x0a, 0x06])
  IID_IObjectWithAppUserModelID* = DEFINE_GUID(0x36db0196'u32, 0x9665, 0x46d1, [0x9b'u8, 0xa7, 0xd3, 0x70, 0x9e, 0xec, 0xf9, 0xed])
  IID_IObjectWithProgID* = DEFINE_GUID(0x71e806fb'u32, 0x8dee, 0x46fc, [0xbf'u8, 0x8c, 0x77, 0x48, 0xa8, 0xa1, 0xae, 0x13])
  IID_IUpdateIDList* = DEFINE_GUID(0x6589b6d2'u32, 0x5f8d, 0x4b9e, [0xb7'u8, 0xe0, 0x23, 0xcd, 0xd9, 0x71, 0x7d, 0x8c])
  IID_IDesktopGadget* = DEFINE_GUID(0xc1646bc4'u32, 0xf298, 0x4f91, [0xa2'u8, 0x04, 0xeb, 0x2d, 0xd1, 0x70, 0x9d, 0x1a])
  IID_IDesktopWallpaper* = DEFINE_GUID(0xb92b56a9'u32, 0x8b55, 0x4e14, [0x9a'u8, 0x89, 0x01, 0x99, 0xbb, 0xb6, 0xf9, 0x3b])
  IID_IHomeGroup* = DEFINE_GUID(0x7a3bd1d9'u32, 0x35a9, 0x4fb3, [0xa4'u8, 0x67, 0xf4, 0x8c, 0xac, 0x35, 0xe2, 0xd0])
  IID_IInitializeWithPropertyStore* = DEFINE_GUID(0xc3e12eb5'u32, 0x7d8d, 0x44f8, [0xb6'u8, 0xdd, 0x0e, 0x77, 0xb3, 0x4d, 0x6d, 0xe4])
  IID_IOpenSearchSource* = DEFINE_GUID(0xf0ee7333'u32, 0xe6fc, 0x479b, [0x9f'u8, 0x25, 0xa8, 0x60, 0xc2, 0x34, 0xa3, 0x8e])
  IID_IShellLibrary* = DEFINE_GUID(0x11a66efa'u32, 0x382e, 0x451a, [0x92'u8, 0x34, 0x1e, 0x0e, 0x12, 0xef, 0x30, 0x85])
  IID_IPlaybackManagerEvents* = DEFINE_GUID(0x385cfb7d'u32, 0x4e0c, 0x4106, [0x91'u8, 0x2e, 0x8c, 0xfb, 0x4c, 0x19, 0x1f, 0x45])
  IID_IPlaybackManager* = DEFINE_GUID(0x0f3c1b01'u32, 0x8199, 0x4173, [0xba'u8, 0x78, 0x98, 0x58, 0x82, 0x26, 0x6f, 0x7a])
  IID_IDefaultFolderMenuInitialize* = DEFINE_GUID(0x7690aa79'u32, 0xf8fc, 0x4615, [0xa3'u8, 0x27, 0x36, 0xf7, 0xd1, 0x8f, 0x5d, 0x91])
  IID_IApplicationActivationManager* = DEFINE_GUID(0x2e941141'u32, 0x7f97, 0x4756, [0xba'u8, 0x1d, 0x9d, 0xec, 0xde, 0x89, 0x4a, 0x3d])
  CLSID_DesktopWallpaper* = DEFINE_GUID(0xc2cf3110'u32, 0x460e, 0x4fc1, [0xb9'u8, 0xd0, 0x8a, 0x1c, 0x0c, 0x9c, 0xc4, 0xbd])
  CLSID_StartMenuPin* = DEFINE_GUID(0xa2a9545d'u32, 0xa0c2, 0x42b4, [0x97'u8, 0x08, 0xa0, 0xb2, 0xba, 0xdd, 0x77, 0xc8])
  CLSID_ExplorerBrowser* = DEFINE_GUID(0x71f96385'u32, 0xddd6, 0x48d3, [0xa0'u8, 0xc1, 0xae, 0x06, 0xe8, 0xb0, 0x55, 0xfb])
  CLSID_ImageRecompress* = DEFINE_GUID(0x6e33091c'u32, 0xd2f8, 0x4740, [0xb5'u8, 0x5e, 0x2e, 0x11, 0xd1, 0x47, 0x7a, 0x2c])
  CLSID_TrayBandSiteService* = DEFINE_GUID(0xf60ad0a0'u32, 0xe5e1, 0x45cb, [0xb5'u8, 0x1a, 0xe1, 0x5b, 0x9f, 0x8b, 0x29, 0x34])
  CLSID_TrayDeskBand* = DEFINE_GUID(0xe6442437'u32, 0x6c68, 0x4f52, [0x94'u8, 0xdd, 0x2c, 0xfe, 0xd2, 0x67, 0xef, 0xb9])
  CLSID_AttachmentServices* = DEFINE_GUID(0x4125dd96'u32, 0xe03a, 0x4103, [0x8f'u8, 0x70, 0xe0, 0x59, 0x7d, 0x80, 0x3b, 0x9c])
  CLSID_DocPropShellExtension* = DEFINE_GUID(0x883373c3'u32, 0xbf89, 0x11d1, [0xbe'u8, 0x35, 0x08, 0x00, 0x36, 0xb1, 0x1a, 0x03])
  CLSID_ShellItem* = DEFINE_GUID(0x9ac9fbe1'u32, 0xe0a2, 0x4ad6, [0xb4'u8, 0xee, 0xe2, 0x12, 0x01, 0x3e, 0xa9, 0x17])
  CLSID_NamespaceWalker* = DEFINE_GUID(0x72eb61e0'u32, 0x8672, 0x4303, [0x91'u8, 0x75, 0xf2, 0xe4, 0xc6, 0x8b, 0x2e, 0x7c])
  CLSID_FileOperation* = DEFINE_GUID(0x3ad05575'u32, 0x8857, 0x4850, [0x92'u8, 0x77, 0x11, 0xb8, 0x5b, 0xdb, 0x8e, 0x09])
  CLSID_FileOpenDialog* = DEFINE_GUID(0xdc1c5a9c'u32, 0xe88a, 0x4dde, [0xa5'u8, 0xa1, 0x60, 0xf8, 0x2a, 0x20, 0xae, 0xf7])
  CLSID_FileSaveDialog* = DEFINE_GUID(0xc0b4e2f3'u32, 0xba21, 0x4773, [0x8d'u8, 0xba, 0x33, 0x5e, 0xc9, 0x46, 0xeb, 0x8b])
  CLSID_KnownFolderManager* = DEFINE_GUID(0x4df0c730'u32, 0xdf9d, 0x4ae3, [0x91'u8, 0x53, 0xaa, 0x6b, 0x82, 0xe9, 0x79, 0x5a])
  CLSID_FSCopyHandler* = DEFINE_GUID(0xd197380a'u32, 0x0a79, 0x4dc8, [0xa0'u8, 0x33, 0xed, 0x88, 0x2c, 0x2f, 0xa1, 0x4b])
  CLSID_SharingConfigurationManager* = DEFINE_GUID(0x49f371e1'u32, 0x8c5c, 0x4d9c, [0x9a'u8, 0x3b, 0x54, 0xa6, 0x82, 0x7f, 0x51, 0x3c])
  CLSID_PreviousVersions* = DEFINE_GUID(0x596ab062'u32, 0xb4d2, 0x4215, [0x9f'u8, 0x74, 0xe9, 0x10, 0x9b, 0x0a, 0x81, 0x53])
  CLSID_NetworkConnections* = DEFINE_GUID(0x7007acc7'u32, 0x3202, 0x11d1, [0xaa'u8, 0xd2, 0x00, 0x80, 0x5f, 0xc1, 0x27, 0x0e])
  CLSID_NamespaceTreeControl* = DEFINE_GUID(0xae054212'u32, 0x3535, 0x4430, [0x83'u8, 0xed, 0xd5, 0x01, 0xaa, 0x66, 0x80, 0xe6])
  CLSID_IENamespaceTreeControl* = DEFINE_GUID(0xace52d03'u32, 0xe5cd, 0x4b20, [0x82'u8, 0xff, 0xe7, 0x1b, 0x11, 0xbe, 0xae, 0x1d])
  CLSID_ScheduledTasks* = DEFINE_GUID(0xd6277990'u32, 0x4c6a, 0x11cf, [0x8d'u8, 0x87, 0x00, 0xaa, 0x00, 0x60, 0xf5, 0xbf])
  CLSID_ApplicationAssociationRegistration* = DEFINE_GUID(0x591209c7'u32, 0x767b, 0x42b2, [0x9f'u8, 0xba, 0x44, 0xee, 0x46, 0x15, 0xf2, 0xc7])
  CLSID_ApplicationAssociationRegistrationUI* = DEFINE_GUID(0x1968106d'u32, 0xf3b5, 0x44cf, [0x89'u8, 0x0e, 0x11, 0x6f, 0xcb, 0x9e, 0xce, 0xf1])
  CLSID_SearchFolderItemFactory* = DEFINE_GUID(0x14010e02'u32, 0xbbbd, 0x41f0, [0x88'u8, 0xe3, 0xed, 0xa3, 0x71, 0x21, 0x65, 0x84])
  CLSID_OpenControlPanel* = DEFINE_GUID(0x06622d85'u32, 0x6856, 0x4460, [0x8d'u8, 0xe1, 0xa8, 0x19, 0x21, 0xb4, 0x1c, 0x4b])
  CLSID_MailRecipient* = DEFINE_GUID(0x9e56be60'u32, 0xc50f, 0x11cf, [0x9a'u8, 0x2c, 0x00, 0xa0, 0xc9, 0x0a, 0x90, 0xce])
  CLSID_NetworkExplorerFolder* = DEFINE_GUID(0xf02c1a0d'u32, 0xbe21, 0x4350, [0x88'u8, 0xb0, 0x73, 0x67, 0xfc, 0x96, 0xef, 0x3c])
  CLSID_DestinationList* = DEFINE_GUID(0x77f10cf0'u32, 0x3db5, 0x4966, [0xb5'u8, 0x20, 0xb7, 0xc5, 0x4f, 0xd3, 0x5e, 0xd6])
  CLSID_ApplicationDestinations* = DEFINE_GUID(0x86c14003'u32, 0x4d6b, 0x4ef3, [0xa7'u8, 0xb4, 0x05, 0x06, 0x66, 0x3b, 0x2e, 0x68])
  CLSID_ApplicationDocumentLists* = DEFINE_GUID(0x86bec222'u32, 0x30f2, 0x47e0, [0x9f'u8, 0x25, 0x60, 0xd1, 0x1c, 0xd7, 0x5c, 0x28])
  CLSID_HomeGroup* = DEFINE_GUID(0xde77ba04'u32, 0x3c92, 0x4d11, [0xa1'u8, 0xa5, 0x42, 0x35, 0x2a, 0x53, 0xe0, 0xe3])
  CLSID_ShellLibrary* = DEFINE_GUID(0xd9b3211d'u32, 0xe57f, 0x4426, [0xaa'u8, 0xef, 0x30, 0xa8, 0x06, 0xad, 0xd3, 0x97])
  CLSID_AppStartupLink* = DEFINE_GUID(0x273eb5e7'u32, 0x88b0, 0x4843, [0xbf'u8, 0xef, 0xe2, 0xc8, 0x1d, 0x43, 0xaa, 0xe5])
  CLSID_EnumerableObjectCollection* = DEFINE_GUID(0x2d3468c1'u32, 0x36a7, 0x43b6, [0xac'u8, 0x24, 0xd3, 0xf0, 0x2f, 0xd9, 0x60, 0x7a])
  CLSID_DesktopGadget* = DEFINE_GUID(0x924ccc1b'u32, 0x6562, 0x4c85, [0x86'u8, 0x57, 0xd1, 0x77, 0x92, 0x52, 0x22, 0xb6])
  CLSID_PlaybackManager* = DEFINE_GUID(0x29dfa654'u32, 0xa97f, 0x47f0, [0xbf'u8, 0x26, 0x9e, 0x41, 0xfb, 0x94, 0x88, 0xd9])
  CLSID_AccessibilityDockingService* = DEFINE_GUID(0x29ce1d46'u32, 0xb481, 0x4aa0, [0xa0'u8, 0x8a, 0xd3, 0xeb, 0xc8, 0xac, 0xa4, 0x02])
  CLSID_FrameworkInputPane* = DEFINE_GUID(0xd5120aa3'u32, 0x46ba, 0x44c5, [0x82'u8, 0x2d, 0xca, 0x80, 0x92, 0xc1, 0xfc, 0x72])
  CLSID_DefFolderMenu* = DEFINE_GUID(0xc63382be'u32, 0x7933, 0x48d0, [0x9a'u8, 0xc8, 0x85, 0xfb, 0x46, 0xbe, 0x2f, 0xdd])
  CLSID_AppVisibility* = DEFINE_GUID(0x7e5fe3d9'u32, 0x985f, 0x4908, [0x91'u8, 0xf9, 0xee, 0x19, 0xf9, 0xfd, 0x15, 0x14])
  CLSID_AppShellVerbHandler* = DEFINE_GUID(0x4ed3a719'u32, 0xcea8, 0x4bd9, [0x91'u8, 0x0d, 0xe2, 0x52, 0xf9, 0x97, 0xaf, 0xc2])
  CLSID_ExecuteUnknown* = DEFINE_GUID(0xe44e9428'u32, 0xbdbc, 0x4987, [0xa0'u8, 0x99, 0x40, 0xdc, 0x8f, 0xd2, 0x55, 0xe7])
  CLSID_PackageDebugSettings* = DEFINE_GUID(0xb1aec16f'u32, 0x2383, 0x4852, [0xb0'u8, 0xe9, 0x8f, 0x0b, 0x1d, 0xc6, 0x6b, 0x4d])
  CLSID_ApplicationActivationManager* = DEFINE_GUID(0x45ba127d'u32, 0x10a8, 0x46ea, [0x8a'u8, 0xb7, 0x56, 0xea, 0x90, 0x78, 0x94, 0x3c])
  CLSID_ApplicationDesignModeSettings* = DEFINE_GUID(0x958a6fb5'u32, 0xdcb2, 0x4faf, [0xaa'u8, 0xfd, 0x7f, 0xb0, 0x54, 0xad, 0x1a, 0x3b])
  CLSID_ExecuteFolder* = DEFINE_GUID(0x11dbb47c'u32, 0xa525, 0x400b, [0x9e'u8, 0x80, 0xa5, 0x46, 0x15, 0xa0, 0x90, 0xc0])
  IID_IAssocHandlerInvoker* = DEFINE_GUID(0x92218cab'u32, 0xecaa, 0x4335, [0x81'u8, 0x33, 0x80, 0x7f, 0xd2, 0x34, 0xc2, 0xee])
  IID_IAssocHandler* = DEFINE_GUID(0xf04061ac'u32, 0x1659, 0x4a3f, [0xa9'u8, 0x54, 0x77, 0x5a, 0xa5, 0x7f, 0xc0, 0x83])
  IID_IEnumAssocHandlers* = DEFINE_GUID(0x973810ae'u32, 0x9599, 0x4b88, [0x9e'u8, 0x4d, 0x6e, 0xe9, 0x8c, 0x95, 0x52, 0xda])
  IID_IDataObjectProvider* = DEFINE_GUID(0x3d25f6d6'u32, 0x4b2a, 0x433c, [0x91'u8, 0x84, 0x7c, 0x33, 0xad, 0x35, 0xd0, 0x01])
  IID_IDataTransferManagerInterop* = DEFINE_GUID(0x3a3dcd6c'u32, 0x3eab, 0x43dc, [0xbc'u8, 0xde, 0x45, 0x67, 0x1c, 0xe8, 0x00, 0xc8])
  IID_IFrameworkInputPaneHandler* = DEFINE_GUID(0x226c537b'u32, 0x1e76, 0x4d9e, [0xa7'u8, 0x60, 0x33, 0xdb, 0x29, 0x92, 0x2f, 0x18])
  IID_IFrameworkInputPane* = DEFINE_GUID(0x5752238b'u32, 0x24f0, 0x495a, [0x82'u8, 0xf1, 0x2f, 0xd5, 0x93, 0x05, 0x67, 0x96])
  IID_ISearchableApplication* = DEFINE_GUID(0x08922f8d'u32, 0x243a, 0x49e3, [0xa4'u8, 0x95, 0xbd, 0x4f, 0x9c, 0xf8, 0xab, 0x9e])
  IID_IAccessibilityDockingServiceCallback* = DEFINE_GUID(0x157733fd'u32, 0xa592, 0x42e5, [0xb5'u8, 0x94, 0x24, 0x84, 0x68, 0xc5, 0xa8, 0x1b])
  IID_IAccessibilityDockingService* = DEFINE_GUID(0x8849dc22'u32, 0xcedf, 0x4c95, [0x99'u8, 0x8d, 0x05, 0x14, 0x19, 0xdd, 0x3f, 0x76])
  IID_IAppVisibilityEvents* = DEFINE_GUID(0x6584ce6b'u32, 0x7d82, 0x49c2, [0x89'u8, 0xc9, 0xc6, 0xbc, 0x02, 0xba, 0x8c, 0x38])
  IID_IAppVisibility* = DEFINE_GUID(0x2246ea2d'u32, 0xcaea, 0x4444, [0xa3'u8, 0xc4, 0x6d, 0xe8, 0x27, 0xe4, 0x43, 0x13])
  IID_IPackageExecutionStateChangeNotification* = DEFINE_GUID(0x1bb12a62'u32, 0x2ad8, 0x432b, [0x8c'u8, 0xcf, 0x0c, 0x2c, 0x52, 0xaf, 0xcd, 0x5b])
  IID_IPackageDebugSettings* = DEFINE_GUID(0xf27c3930'u32, 0x8029, 0x4ad1, [0x94'u8, 0xe3, 0x3d, 0xba, 0x41, 0x78, 0x10, 0xc1])
  IID_IExecuteCommandApplicationHostEnvironment* = DEFINE_GUID(0x18b21aa9'u32, 0xe184, 0x4ff0, [0x9f'u8, 0x5e, 0xf8, 0x82, 0xd0, 0x37, 0x71, 0xb3])
  IID_IExecuteCommandHost* = DEFINE_GUID(0x4b6832a2'u32, 0x5f04, 0x4c9d, [0xb8'u8, 0x9d, 0x72, 0x7a, 0x15, 0xd1, 0x03, 0xe7])
  IID_IApplicationDesignModeSettings* = DEFINE_GUID(0x2a3dee9a'u32, 0xe31d, 0x46d6, [0x85'u8, 0x08, 0xbc, 0xc5, 0x97, 0xdb, 0x35, 0x57])
  IID_IInitializeWithWindow* = DEFINE_GUID(0x3e68d4bd'u32, 0x7135, 0x4d10, [0x80'u8, 0x18, 0x9f, 0xb6, 0xd9, 0xf3, 0x3f, 0xa1])
  IID_IHandlerInfo* = DEFINE_GUID(0x997706ef'u32, 0xf880, 0x453b, [0x81'u8, 0x18, 0x39, 0xe1, 0xa2, 0xd2, 0x65, 0x5a])
  IID_IHandlerActivationHost* = DEFINE_GUID(0x35094a87'u32, 0x8bb1, 0x4237, [0x96'u8, 0xc6, 0xc4, 0x17, 0xee, 0xbd, 0xb0, 0x78])
  SID_ShellExecuteNamedPropertyStore* = DEFINE_GUID(0xeb84ada2'u32, 0x00ff, 0x4992, [0x83'u8, 0x24, 0xed, 0x5c, 0xe0, 0x61, 0xcb, 0x29])

# objext/ocidl.nim

const
  # QACONTAINERFLAGS* = enum
  QACONTAINER_SHOWHATCHING* = 1
  QACONTAINER_SHOWGRABHANDLES* = 2
  QACONTAINER_USERMODE* = 4
  QACONTAINER_DISPLAYASDEFAULT* = 8
  QACONTAINER_UIDEAD* = 16
  QACONTAINER_AUTOCLIP* = 32
  QACONTAINER_MESSAGEREFLECT* = 64
  QACONTAINER_SUPPORTSMNEMONICS* = 128
  # READYSTATE* = enum
  READYSTATE_UNINITIALIZED* = 0
  READYSTATE_LOADING* = 1
  READYSTATE_LOADED* = 2
  READYSTATE_INTERACTIVE* = 3
  READYSTATE_COMPLETE* = 4
  # PROPBAG2_TYPE* = enum
  PROPBAG2_TYPE_UNDEFINED* = 0
  PROPBAG2_TYPE_DATA* = 1
  PROPBAG2_TYPE_URL* = 2
  PROPBAG2_TYPE_OBJECT* = 3
  PROPBAG2_TYPE_STREAM* = 4
  PROPBAG2_TYPE_STORAGE* = 5
  PROPBAG2_TYPE_MONIKER* = 6

type
  IBindHost* {.pure.} = object
    lpVtbl*: ptr IBindHostVtbl
  IBindHostVtbl* {.pure, inheritable.} = object of IUnknownVtbl
  IServiceProvider* {.pure.} = object
    lpVtbl*: ptr IServiceProviderVtbl
  IServiceProviderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    QueryService*: proc(self: ptr IServiceProvider, P1: REFGUID, P2: REFIID, P3: ptr pointer): HRESULT {.stdcall.}
  TEXTMETRICOLE* = TEXTMETRICW
  LPTEXTMETRICOLE* = ptr TEXTMETRICOLE
  OLE_COLOR* = DWORD
  OLE_HANDLE* = UINT
  OLE_XPOS_HIMETRIC* = int32
  OLE_YPOS_HIMETRIC* = int32
  OLE_XSIZE_HIMETRIC* = int32
  OLE_YSIZE_HIMETRIC* = int32
  READYSTATE* = int32
  PROPBAG2_TYPE* = int32
  PROPBAG2* {.final, pure.} = object
    dwType*: DWORD
    vt*: VARTYPE
    cfType*: CLIPFORMAT
    dwHint*: DWORD
    pstrName*: LPOLESTR
    clsid*: CLSID
  QACONTAINER* {.final, pure.} = object
    cbSize*: ULONG
    pClientSite*: ptr IOleClientSite
    pAdviseSink*: ptr IAdviseSinkEx
    pPropertyNotifySink*: ptr IPropertyNotifySink
    pUnkEventSink*: ptr IUnknown
    dwAmbientFlags*: DWORD
    colorFore*: OLE_COLOR
    colorBack*: OLE_COLOR
    pFont*: ptr IFont
    pUndoMgr*: ptr IOleUndoManager
    dwAppearance*: DWORD
    lcid*: LONG
    hpal*: HPALETTE
    pBindHost*: ptr IBindHost
    pOleControlSite*: ptr IOleControlSite
    pServiceProvider*: ptr IServiceProvider
  QACONTROL* {.final, pure.} = object
    cbSize*: ULONG
    dwMiscStatus*: DWORD
    dwViewStatus*: DWORD
    dwEventCookie*: DWORD
    dwPropNotifyCookie*: DWORD
    dwPointerActivationPolicy*: DWORD
  POINTF* {.final, pure.} = object
    x*: float32
    y*: float32
  LPPOINTF* = ptr POINTF
  CONTROLINFO* {.final, pure.} = object
    cb*: ULONG
    hAccel*: HACCEL
    cAccel*: USHORT
    dwFlags*: DWORD
  LPCONTROLINFO* = ptr CONTROLINFO
  CONNECTDATA* {.final, pure.} = object
    pUnk*: LPUNKNOWN
    dwCookie*: DWORD
  LPCONNECTDATA* = ptr CONNECTDATA
  LICINFO* {.final, pure.} = object
    cbLicInfo*: int32
    fRuntimeKeyAvail*: BOOL
    fLicVerified*: BOOL
  LPLICINFO* = ptr LICINFO
  CAUUID* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr GUID
  LPCAUUID* = ptr CAUUID
  CALPOLESTR* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr LPOLESTR
  LPCALPOLESTR* = ptr CALPOLESTR
  CADWORD* {.final, pure.} = object
    cElems*: ULONG
    pElems*: ptr DWORD
  LPCADWORD* = ptr CADWORD
  PROPPAGEINFO* {.final, pure.} = object
    cb*: ULONG
    pszTitle*: LPOLESTR
    size*: SIZE
    pszDocString*: LPOLESTR
    pszHelpFile*: LPOLESTR
    dwHelpContext*: DWORD
  LPPROPPAGEINFO* = ptr PROPPAGEINFO
  IOleControl* {.pure.} = object
    lpVtbl*: ptr IOleControlVtbl
  IOleControlVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetControlInfo*: proc(self: ptr IOleControl, P1: LPCONTROLINFO): HRESULT {.stdcall.}
    OnMnemonic*: proc(self: ptr IOleControl, P1: LPMSG): HRESULT {.stdcall.}
    OnAmbientPropertyChange*: proc(self: ptr IOleControl, P1: DISPID): HRESULT {.stdcall.}
    FreezeEvents*: proc(self: ptr IOleControl, P1: BOOL): HRESULT {.stdcall.}
  IOleControlSite* {.pure.} = object
    lpVtbl*: ptr IOleControlSiteVtbl
  IOleControlSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnControlInfoChanged*: proc(self: ptr IOleControlSite): HRESULT {.stdcall.}
    LockInPlaceActive*: proc(self: ptr IOleControlSite, P1: BOOL): HRESULT {.stdcall.}
    GetExtendedControl*: proc(self: ptr IOleControlSite, P1: ptr LPDISPATCH): HRESULT {.stdcall.}
    TransformCoords*: proc(self: ptr IOleControlSite, P1: ptr POINTL, P2: ptr POINTF, P3: DWORD): HRESULT {.stdcall.}
    TranslateAccelerator*: proc(self: ptr IOleControlSite, P1: LPMSG, P2: DWORD): HRESULT {.stdcall.}
    OnFocus*: proc(self: ptr IOleControlSite, P1: BOOL): HRESULT {.stdcall.}
    ShowPropertyFrame*: proc(self: ptr IOleControlSite): HRESULT {.stdcall.}
  ISimpleFrameSite* {.pure.} = object
    lpVtbl*: ptr ISimpleFrameSiteVtbl
  ISimpleFrameSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    PreMessageFilter*: proc(self: ptr ISimpleFrameSite, P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM, P5: ptr LRESULT, P6: PDWORD): HRESULT {.stdcall.}
    PostMessageFilter*: proc(self: ptr ISimpleFrameSite, P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM, P5: ptr LRESULT, P6: DWORD): HRESULT {.stdcall.}
  IErrorLog* {.pure.} = object
    lpVtbl*: ptr IErrorLogVtbl
  IErrorLogVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AddError*: proc(self: ptr IErrorLog, P1: LPCOLESTR, P2: LPEXCEPINFO): HRESULT {.stdcall.}
  LPERRORLOG* = ptr IErrorLog
  IPropertyBag* {.pure.} = object
    lpVtbl*: ptr IPropertyBagVtbl
  IPropertyBagVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Read*: proc(self: ptr IPropertyBag, P1: LPCOLESTR, P2: LPVARIANT, P3: LPERRORLOG): HRESULT {.stdcall.}
    Write*: proc(self: ptr IPropertyBag, P1: LPCOLESTR, P2: LPVARIANT): HRESULT {.stdcall.}
  LPPROPERTYBAG* = ptr IPropertyBag
  IPropertyBag2* {.pure.} = object
    lpVtbl*: ptr IPropertyBag2Vtbl
  IPropertyBag2Vtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Read*: proc(self: ptr IPropertyBag2, P1: ULONG, P2: ptr PROPBAG2, P3: LPERRORLOG, P4: ptr VARIANT, P5: ptr HRESULT): HRESULT {.stdcall.}
    Write*: proc(self: ptr IPropertyBag2, P1: ULONG, P2: ptr PROPBAG2, P3: ptr VARIANT): HRESULT {.stdcall.}
    CountProperties*: proc(self: ptr IPropertyBag2, P1: ptr ULONG): HRESULT {.stdcall.}
    GetPropertyInfo*: proc(self: ptr IPropertyBag2, P1: ULONG, P2: ULONG, P3: ptr PROPBAG2, P4: ptr ULONG): HRESULT {.stdcall.}
    LoadObject*: proc(self: ptr IPropertyBag2, P1: LPCOLESTR, P2: DWORD, P3: ptr IUnknown, P4: LPERRORLOG): HRESULT {.stdcall.}
  LPPROPERTYBAG2* = ptr IPropertyBag2
  IPersistPropertyBag* {.pure.} = object
    lpVtbl*: ptr IPersistPropertyBagVtbl
  IPersistPropertyBagVtbl* {.pure, inheritable.} = object of IPersistVtbl
    InitNew*: proc(self: ptr IPersistPropertyBag): HRESULT {.stdcall.}
    Load*: proc(self: ptr IPersistPropertyBag, P1: LPPROPERTYBAG, P2: LPERRORLOG): HRESULT {.stdcall.}
    Save*: proc(self: ptr IPersistPropertyBag, P1: LPPROPERTYBAG, P2: BOOL, P3: BOOL): HRESULT {.stdcall.}
  IPersistPropertyBag2* {.pure.} = object
    lpVtbl*: ptr IPersistPropertyBag2Vtbl
  IPersistPropertyBag2Vtbl* {.pure, inheritable.} = object of IPersistVtbl
    InitNew*: proc(self: ptr IPersistPropertyBag2): HRESULT {.stdcall.}
    Load*: proc(self: ptr IPersistPropertyBag2, P1: LPPROPERTYBAG2, P2: LPERRORLOG): HRESULT {.stdcall.}
    Save*: proc(self: ptr IPersistPropertyBag2, P1: LPPROPERTYBAG2, P2: BOOL, P3: BOOL): HRESULT {.stdcall.}
    IsDirty*: proc(self: ptr IPersistPropertyBag2): HRESULT {.stdcall.}
  IPersistStreamInit* {.pure.} = object
    lpVtbl*: ptr IPersistStreamInitVtbl
  IPersistStreamInitVtbl* {.pure, inheritable.} = object of IPersistVtbl
    IsDirty*: proc(self: ptr IPersistStreamInit): HRESULT {.stdcall.}
    Load*: proc(self: ptr IPersistStreamInit, P1: LPSTREAM): HRESULT {.stdcall.}
    Save*: proc(self: ptr IPersistStreamInit, P1: LPSTREAM, P2: BOOL): HRESULT {.stdcall.}
    GetSizeMax*: proc(self: ptr IPersistStreamInit, P1: PULARGE_INTEGER): HRESULT {.stdcall.}
    InitNew*: proc(self: ptr IPersistStreamInit): HRESULT {.stdcall.}
  IPersistMemory* {.pure.} = object
    lpVtbl*: ptr IPersistMemoryVtbl
  IPersistMemoryVtbl* {.pure, inheritable.} = object of IPersistVtbl
    IsDirty*: proc(self: ptr IPersistMemory): HRESULT {.stdcall.}
    Load*: proc(self: ptr IPersistMemory, P1: PVOID, P2: ULONG): HRESULT {.stdcall.}
    Save*: proc(self: ptr IPersistMemory, P1: PVOID, P2: BOOL, P3: ULONG): HRESULT {.stdcall.}
    GetSizeMax*: proc(self: ptr IPersistMemory, P1: PULONG): HRESULT {.stdcall.}
    InitNew*: proc(self: ptr IPersistMemory): HRESULT {.stdcall.}
  IPropertyNotifySink* {.pure.} = object
    lpVtbl*: ptr IPropertyNotifySinkVtbl
  IPropertyNotifySinkVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnChanged*: proc(self: ptr IPropertyNotifySink, P1: DISPID): HRESULT {.stdcall.}
    OnRequestEdit*: proc(self: ptr IPropertyNotifySink, P1: DISPID): HRESULT {.stdcall.}
  IProvideClassInfo* {.pure.} = object
    lpVtbl*: ptr IProvideClassInfoVtbl
  IProvideClassInfoVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetClassInfo*: proc(self: ptr IProvideClassInfo, P1: ptr LPTYPEINFO): HRESULT {.stdcall.}
  IProvideClassInfo2* {.pure.} = object
    lpVtbl*: ptr IProvideClassInfo2Vtbl
  IProvideClassInfo2Vtbl* {.pure, inheritable.} = object of IProvideClassInfoVtbl
    GetGUID*: proc(self: ptr IProvideClassInfo2, P1: DWORD, P2: ptr GUID): HRESULT {.stdcall.}
  IConnectionPointContainer* {.pure.} = object
    lpVtbl*: ptr IConnectionPointContainerVtbl
  IConnectionPointContainerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    EnumConnectionPoints*: proc(self: ptr IConnectionPointContainer, P1: ptr LPENUMCONNECTIONPOINTS): HRESULT {.stdcall.}
    FindConnectionPoint*: proc(self: ptr IConnectionPointContainer, P1: REFIID, P2: ptr LPCONNECTIONPOINT): HRESULT {.stdcall.}
  IEnumConnectionPoints* {.pure.} = object
    lpVtbl*: ptr IEnumConnectionPointsVtbl
  IEnumConnectionPointsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumConnectionPoints, P1: ULONG, P2: ptr LPCONNECTIONPOINT, P3: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumConnectionPoints, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumConnectionPoints): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumConnectionPoints, P1: ptr LPENUMCONNECTIONPOINTS): HRESULT {.stdcall.}
  LPENUMCONNECTIONPOINTS* = ptr IEnumConnectionPoints
  IConnectionPoint* {.pure.} = object
    lpVtbl*: ptr IConnectionPointVtbl
  IConnectionPointVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetConnectionInterface*: proc(self: ptr IConnectionPoint, P1: ptr IID): HRESULT {.stdcall.}
    GetConnectionPointContainer*: proc(self: ptr IConnectionPoint, P1: ptr ptr IConnectionPointContainer): HRESULT {.stdcall.}
    Advise*: proc(self: ptr IConnectionPoint, P1: LPUNKNOWN, P2: PDWORD): HRESULT {.stdcall.}
    Unadvise*: proc(self: ptr IConnectionPoint, P1: DWORD): HRESULT {.stdcall.}
    EnumConnections*: proc(self: ptr IConnectionPoint, P1: ptr LPENUMCONNECTIONS): HRESULT {.stdcall.}
  LPCONNECTIONPOINT* = ptr IConnectionPoint
  IEnumConnections* {.pure.} = object
    lpVtbl*: ptr IEnumConnectionsVtbl
  IEnumConnectionsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumConnections, P1: ULONG, P2: LPCONNECTDATA, P3: PULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumConnections, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumConnections): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumConnections, P1: ptr LPENUMCONNECTIONS): HRESULT {.stdcall.}
  LPENUMCONNECTIONS* = ptr IEnumConnections
  IClassFactory2* {.pure.} = object
    lpVtbl*: ptr IClassFactory2Vtbl
  IClassFactory2Vtbl* {.pure, inheritable.} = object of IClassFactoryVtbl
    GetLicInfo*: proc(self: ptr IClassFactory2, P1: LPLICINFO): HRESULT {.stdcall.}
    RequestLicKey*: proc(self: ptr IClassFactory2, P1: DWORD, P2: ptr BSTR): HRESULT {.stdcall.}
    CreateInstanceLic*: proc(self: ptr IClassFactory2, P1: LPUNKNOWN, P2: LPUNKNOWN, P3: REFIID, P4: BSTR, P5: ptr PVOID): HRESULT {.stdcall.}
  ISpecifyPropertyPages* {.pure.} = object
    lpVtbl*: ptr ISpecifyPropertyPagesVtbl
  ISpecifyPropertyPagesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetPages*: proc(self: ptr ISpecifyPropertyPages, P1: ptr CAUUID): HRESULT {.stdcall.}
  IPerPropertyBrowsing* {.pure.} = object
    lpVtbl*: ptr IPerPropertyBrowsingVtbl
  IPerPropertyBrowsingVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetDisplayString*: proc(self: ptr IPerPropertyBrowsing, P1: DISPID, P2: ptr BSTR): HRESULT {.stdcall.}
    MapPropertyToPage*: proc(self: ptr IPerPropertyBrowsing, P1: DISPID, P2: LPCLSID): HRESULT {.stdcall.}
    GetPredefinedStrings*: proc(self: ptr IPerPropertyBrowsing, P1: DISPID, P2: ptr CALPOLESTR, P3: ptr CADWORD): HRESULT {.stdcall.}
    GetPredefinedValue*: proc(self: ptr IPerPropertyBrowsing, P1: DISPID, P2: DWORD, P3: ptr VARIANT): HRESULT {.stdcall.}
  IPropertyPageSite* {.pure.} = object
    lpVtbl*: ptr IPropertyPageSiteVtbl
  IPropertyPageSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnStatusChange*: proc(self: ptr IPropertyPageSite, P1: DWORD): HRESULT {.stdcall.}
    GetLocaleID*: proc(self: ptr IPropertyPageSite, P1: ptr LCID): HRESULT {.stdcall.}
    GetPageContainer*: proc(self: ptr IPropertyPageSite, P1: ptr LPUNKNOWN): HRESULT {.stdcall.}
    TranslateAccelerator*: proc(self: ptr IPropertyPageSite, P1: LPMSG): HRESULT {.stdcall.}
  LPPROPERTYPAGESITE* = ptr IPropertyPageSite
  IPropertyPage* {.pure.} = object
    lpVtbl*: ptr IPropertyPageVtbl
  IPropertyPageVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetPageSite*: proc(self: ptr IPropertyPage, P1: LPPROPERTYPAGESITE): HRESULT {.stdcall.}
    Activate*: proc(self: ptr IPropertyPage, P1: HWND, P2: LPCRECT, P3: BOOL): HRESULT {.stdcall.}
    Deactivate*: proc(self: ptr IPropertyPage): HRESULT {.stdcall.}
    GetPageInfo*: proc(self: ptr IPropertyPage, P1: LPPROPPAGEINFO): HRESULT {.stdcall.}
    SetObjects*: proc(self: ptr IPropertyPage, P1: ULONG, P2: ptr LPUNKNOWN): HRESULT {.stdcall.}
    Show*: proc(self: ptr IPropertyPage, P1: UINT): HRESULT {.stdcall.}
    Move*: proc(self: ptr IPropertyPage, P1: LPCRECT): HRESULT {.stdcall.}
    IsPageDirty*: proc(self: ptr IPropertyPage): HRESULT {.stdcall.}
    Apply*: proc(self: ptr IPropertyPage): HRESULT {.stdcall.}
    Help*: proc(self: ptr IPropertyPage, P1: LPCOLESTR): HRESULT {.stdcall.}
    TranslateAccelerator*: proc(self: ptr IPropertyPage, P1: LPMSG): HRESULT {.stdcall.}
  IPropertyPage2* {.pure.} = object
    lpVtbl*: ptr IPropertyPage2Vtbl
  IPropertyPage2Vtbl* {.pure, inheritable.} = object of IPropertyPageVtbl
    EditProperty*: proc(self: ptr IPropertyPage2, P1: DISPID): HRESULT {.stdcall.}
  IFont* {.pure.} = object
    lpVtbl*: ptr IFontVtbl
  IFontVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    get_Name*: proc(self: ptr IFont, P1: ptr BSTR): HRESULT {.stdcall.}
    put_Name*: proc(self: ptr IFont, P1: BSTR): HRESULT {.stdcall.}
    get_Size*: proc(self: ptr IFont, P1: ptr CY): HRESULT {.stdcall.}
    put_Size*: proc(self: ptr IFont, P1: CY): HRESULT {.stdcall.}
    get_Bold*: proc(self: ptr IFont, P1: ptr BOOL): HRESULT {.stdcall.}
    put_Bold*: proc(self: ptr IFont, P1: BOOL): HRESULT {.stdcall.}
    get_Italic*: proc(self: ptr IFont, P1: ptr BOOL): HRESULT {.stdcall.}
    put_Italic*: proc(self: ptr IFont, P1: BOOL): HRESULT {.stdcall.}
    get_Underline*: proc(self: ptr IFont, P1: ptr BOOL): HRESULT {.stdcall.}
    put_Underline*: proc(self: ptr IFont, P1: BOOL): HRESULT {.stdcall.}
    get_Strikethrough*: proc(self: ptr IFont, P1: ptr BOOL): HRESULT {.stdcall.}
    put_Strikethrough*: proc(self: ptr IFont, P1: BOOL): HRESULT {.stdcall.}
    get_Weight*: proc(self: ptr IFont, P1: ptr int16): HRESULT {.stdcall.}
    put_Weight*: proc(self: ptr IFont, P1: int16): HRESULT {.stdcall.}
    get_Charset*: proc(self: ptr IFont, P1: ptr int16): HRESULT {.stdcall.}
    put_Charset*: proc(self: ptr IFont, P1: int16): HRESULT {.stdcall.}
    get_hFont*: proc(self: ptr IFont, P1: ptr HFONT): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IFont, P1: ptr ptr IFont): HRESULT {.stdcall.}
    IsEqual*: proc(self: ptr IFont, P1: ptr IFont): HRESULT {.stdcall.}
    SetRatio*: proc(self: ptr IFont, P1: int32, P2: int32): HRESULT {.stdcall.}
    QueryTextMetrics*: proc(self: ptr IFont, P1: LPTEXTMETRICOLE): HRESULT {.stdcall.}
    AddRefHfont*: proc(self: ptr IFont, P1: HFONT): HRESULT {.stdcall.}
    ReleaseHfont*: proc(self: ptr IFont, P1: HFONT): HRESULT {.stdcall.}
    SetHdc*: proc(self: ptr IFont, P1: HDC): HRESULT {.stdcall.}
  LPFONT* = ptr IFont
  IFontDisp* {.pure.} = object
    lpVtbl*: ptr IFontDispVtbl
  IFontDispVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  LPFONTDISP* = ptr IFontDisp
  IPicture* {.pure.} = object
    lpVtbl*: ptr IPictureVtbl
  IPictureVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    get_Handle*: proc(self: ptr IPicture, P1: ptr OLE_HANDLE): HRESULT {.stdcall.}
    get_hPal*: proc(self: ptr IPicture, P1: ptr OLE_HANDLE): HRESULT {.stdcall.}
    get_Type*: proc(self: ptr IPicture, P1: ptr int16): HRESULT {.stdcall.}
    get_Width*: proc(self: ptr IPicture, P1: ptr OLE_XSIZE_HIMETRIC): HRESULT {.stdcall.}
    get_Height*: proc(self: ptr IPicture, P1: ptr OLE_YSIZE_HIMETRIC): HRESULT {.stdcall.}
    Render*: proc(self: ptr IPicture, P1: HDC, P2: int32, P3: int32, P4: int32, P5: int32, P6: OLE_XPOS_HIMETRIC, P7: OLE_YPOS_HIMETRIC, P8: OLE_XSIZE_HIMETRIC, P9: OLE_YSIZE_HIMETRIC, P10: LPCRECT): HRESULT {.stdcall.}
    set_hPal*: proc(self: ptr IPicture, P1: OLE_HANDLE): HRESULT {.stdcall.}
    get_CurDC*: proc(self: ptr IPicture, P1: ptr HDC): HRESULT {.stdcall.}
    SelectPicture*: proc(self: ptr IPicture, P1: HDC, P2: ptr HDC, P3: ptr OLE_HANDLE): HRESULT {.stdcall.}
    get_KeepOriginalFormat*: proc(self: ptr IPicture, P1: ptr BOOL): HRESULT {.stdcall.}
    put_KeepOriginalFormat*: proc(self: ptr IPicture, P1: BOOL): HRESULT {.stdcall.}
    PictureChanged*: proc(self: ptr IPicture): HRESULT {.stdcall.}
    SaveAsFile*: proc(self: ptr IPicture, P1: LPSTREAM, P2: BOOL, P3: ptr LONG): HRESULT {.stdcall.}
    get_Attributes*: proc(self: ptr IPicture, P1: PDWORD): HRESULT {.stdcall.}
  IPictureDisp* {.pure.} = object
    lpVtbl*: ptr IPictureDispVtbl
  IPictureDispVtbl* {.pure, inheritable.} = object of IDispatchVtbl
  IOleInPlaceSiteEx* {.pure.} = object
    lpVtbl*: ptr IOleInPlaceSiteExVtbl
  IOleInPlaceSiteExVtbl* {.pure, inheritable.} = object of IOleInPlaceSiteVtbl
    OnInPlaceActivateEx*: proc(self: ptr IOleInPlaceSiteEx, P1: ptr BOOL, P2: DWORD): HRESULT {.stdcall.}
    OnInPlaceDeactivateEx*: proc(self: ptr IOleInPlaceSiteEx, P1: BOOL): HRESULT {.stdcall.}
    RequestUIActivate*: proc(self: ptr IOleInPlaceSiteEx): HRESULT {.stdcall.}
  IObjectWithSite* {.pure.} = object
    lpVtbl*: ptr IObjectWithSiteVtbl
  IObjectWithSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetSite*: proc(self: ptr IObjectWithSite, P1: ptr IUnknown): HRESULT {.stdcall.}
    GetSite*: proc(self: ptr IObjectWithSite, P1: REFIID, P2: ptr pointer): HRESULT {.stdcall.}
  IOleInPlaceSiteWindowless* {.pure.} = object
    lpVtbl*: ptr IOleInPlaceSiteWindowlessVtbl
  IOleInPlaceSiteWindowlessVtbl* {.pure, inheritable.} = object of IOleInPlaceSiteExVtbl
    CanWindowlessActivate*: proc(self: ptr IOleInPlaceSiteWindowless): HRESULT {.stdcall.}
    GetCapture*: proc(self: ptr IOleInPlaceSiteWindowless): HRESULT {.stdcall.}
    SetCapture*: proc(self: ptr IOleInPlaceSiteWindowless, P1: BOOL): HRESULT {.stdcall.}
    GetFocus*: proc(self: ptr IOleInPlaceSiteWindowless): HRESULT {.stdcall.}
    SetFocus*: proc(self: ptr IOleInPlaceSiteWindowless, P1: BOOL): HRESULT {.stdcall.}
    GetDC*: proc(self: ptr IOleInPlaceSiteWindowless, P1: LPCRECT, P2: DWORD, P3: ptr HDC): HRESULT {.stdcall.}
    ReleaseDC*: proc(self: ptr IOleInPlaceSiteWindowless, P1: HDC): HRESULT {.stdcall.}
    InvalidateRect*: proc(self: ptr IOleInPlaceSiteWindowless, P1: LPCRECT, P2: BOOL): HRESULT {.stdcall.}
    InvalidateRgn*: proc(self: ptr IOleInPlaceSiteWindowless, P1: HRGN, P2: BOOL): HRESULT {.stdcall.}
    ScrollRect*: proc(self: ptr IOleInPlaceSiteWindowless, P1: INT, P2: INT, P3: LPCRECT, P4: LPCRECT): HRESULT {.stdcall.}
    AdjustRect*: proc(self: ptr IOleInPlaceSiteWindowless, P1: LPCRECT): HRESULT {.stdcall.}
    OnDefWindowMessage*: proc(self: ptr IOleInPlaceSiteWindowless, P1: UINT, P2: WPARAM, P3: LPARAM, P4: ptr LRESULT): HRESULT {.stdcall.}
  IAdviseSinkEx* {.pure.} = object
    lpVtbl*: ptr IAdviseSinkExVtbl
  IAdviseSinkExVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnDataChange*: proc(self: ptr IAdviseSinkEx, P1: ptr FORMATETC, P2: ptr STGMEDIUM): void {.stdcall.}
    OnViewChange*: proc(self: ptr IAdviseSinkEx, P1: DWORD, P2: LONG): void {.stdcall.}
    OnRename*: proc(self: ptr IAdviseSinkEx, P1: ptr IMoniker): void {.stdcall.}
    OnSave*: proc(self: ptr IAdviseSinkEx): void {.stdcall.}
    OnClose*: proc(self: ptr IAdviseSinkEx): void {.stdcall.}
    OnViewStatusChange*: proc(self: ptr IAdviseSinkEx, P1: DWORD): HRESULT {.stdcall.}
  IPointerInactive* {.pure.} = object
    lpVtbl*: ptr IPointerInactiveVtbl
  IPointerInactiveVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetActivationPolicy*: proc(self: ptr IPointerInactive, P1: ptr DWORD): HRESULT {.stdcall.}
    OnInactiveMouseMove*: proc(self: ptr IPointerInactive, P1: LPCRECT, P2: LONG, P3: LONG, P4: DWORD): HRESULT {.stdcall.}
    OnInactiveSetCursor*: proc(self: ptr IPointerInactive, P1: LPCRECT, P2: LONG, P3: LONG, P4: DWORD, P5: BOOL): HRESULT {.stdcall.}
  IOleUndoUnit* {.pure.} = object
    lpVtbl*: ptr IOleUndoUnitVtbl
  IOleUndoUnitVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Do*: proc(self: ptr IOleUndoUnit, P1: LPOLEUNDOMANAGER): HRESULT {.stdcall.}
    GetDescription*: proc(self: ptr IOleUndoUnit, P1: ptr BSTR): HRESULT {.stdcall.}
    GetUnitType*: proc(self: ptr IOleUndoUnit, P1: ptr CLSID, P2: ptr LONG): HRESULT {.stdcall.}
    OnNextAdd*: proc(self: ptr IOleUndoUnit): HRESULT {.stdcall.}
  IOleParentUndoUnit* {.pure.} = object
    lpVtbl*: ptr IOleParentUndoUnitVtbl
  IOleParentUndoUnitVtbl* {.pure, inheritable.} = object of IOleUndoUnitVtbl
    Open*: proc(self: ptr IOleParentUndoUnit, P1: ptr IOleParentUndoUnit): HRESULT {.stdcall.}
    Close*: proc(self: ptr IOleParentUndoUnit, P1: ptr IOleParentUndoUnit, P2: BOOL): HRESULT {.stdcall.}
    Add*: proc(self: ptr IOleParentUndoUnit, P1: ptr IOleUndoUnit): HRESULT {.stdcall.}
    FindUnit*: proc(self: ptr IOleParentUndoUnit, P1: ptr IOleUndoUnit): HRESULT {.stdcall.}
    GetParentState*: proc(self: ptr IOleParentUndoUnit, P1: ptr DWORD): HRESULT {.stdcall.}
  IEnumOleUndoUnits* {.pure.} = object
    lpVtbl*: ptr IEnumOleUndoUnitsVtbl
  IEnumOleUndoUnitsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumOleUndoUnits, P1: ULONG, P2: ptr ptr IOleUndoUnit, P3: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumOleUndoUnits, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumOleUndoUnits): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumOleUndoUnits, P1: ptr ptr IEnumOleUndoUnits): HRESULT {.stdcall.}
  IOleUndoManager* {.pure.} = object
    lpVtbl*: ptr IOleUndoManagerVtbl
  IOleUndoManagerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Open*: proc(self: ptr IOleUndoManager, P1: ptr IOleParentUndoUnit): HRESULT {.stdcall.}
    Close*: proc(self: ptr IOleUndoManager, P1: ptr IOleParentUndoUnit, P2: BOOL): HRESULT {.stdcall.}
    Add*: proc(self: ptr IOleUndoManager, P1: ptr IOleUndoUnit): HRESULT {.stdcall.}
    GetOpenParentState*: proc(self: ptr IOleUndoManager, P1: ptr DWORD): HRESULT {.stdcall.}
    DiscardFrom*: proc(self: ptr IOleUndoManager, P1: ptr IOleUndoUnit): HRESULT {.stdcall.}
    UndoTo*: proc(self: ptr IOleUndoManager, P1: ptr IOleUndoUnit): HRESULT {.stdcall.}
    RedoTo*: proc(self: ptr IOleUndoManager, P1: ptr IOleUndoUnit): HRESULT {.stdcall.}
    EnumUndoable*: proc(self: ptr IOleUndoManager, P1: ptr ptr IEnumOleUndoUnits): HRESULT {.stdcall.}
    EnumRedoable*: proc(self: ptr IOleUndoManager, P1: ptr ptr IEnumOleUndoUnits): HRESULT {.stdcall.}
    GetLastUndoDescription*: proc(self: ptr IOleUndoManager, P1: ptr BSTR): HRESULT {.stdcall.}
    GetLastRedoDescription*: proc(self: ptr IOleUndoManager, P1: ptr BSTR): HRESULT {.stdcall.}
    Enable*: proc(self: ptr IOleUndoManager, P1: BOOL): HRESULT {.stdcall.}
  LPOLEUNDOMANAGER* = ptr IOleUndoManager
  IQuickActivate* {.pure.} = object
    lpVtbl*: ptr IQuickActivateVtbl
  IQuickActivateVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    QuickActivate*: proc(self: ptr IQuickActivate, P1: ptr QACONTAINER, P2: ptr QACONTROL): HRESULT {.stdcall.}
    SetContentExtent*: proc(self: ptr IQuickActivate, P1: LPSIZEL): HRESULT {.stdcall.}
    GetContentExtent*: proc(self: ptr IQuickActivate, P1: LPSIZEL): HRESULT {.stdcall.}

converter winim_converter_IBindHost*(x: ptr IBindHost): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IServiceProvider*(x: ptr IServiceProvider): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryService*(self: ptr IServiceProvider, P1: REFGUID, P2: REFIID, P3: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.QueryService(self, P1, P2, P3)
converter winim_converter_IOleControl*(x: ptr IOleControl): ptr IUnknown = cast[ptr IUnknown](x)
proc GetControlInfo*(self: ptr IOleControl, P1: LPCONTROLINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetControlInfo(self, P1)
proc OnMnemonic*(self: ptr IOleControl, P1: LPMSG): HRESULT {.inline, discardable.} = self.lpVtbl.OnMnemonic(self, P1)
proc OnAmbientPropertyChange*(self: ptr IOleControl, P1: DISPID): HRESULT {.inline, discardable.} = self.lpVtbl.OnAmbientPropertyChange(self, P1)
proc FreezeEvents*(self: ptr IOleControl, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.FreezeEvents(self, P1)
converter winim_converter_IOleControlSite*(x: ptr IOleControlSite): ptr IUnknown = cast[ptr IUnknown](x)
proc OnControlInfoChanged*(self: ptr IOleControlSite): HRESULT {.inline, discardable.} = self.lpVtbl.OnControlInfoChanged(self)
proc LockInPlaceActive*(self: ptr IOleControlSite, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.LockInPlaceActive(self, P1)
proc GetExtendedControl*(self: ptr IOleControlSite, P1: ptr LPDISPATCH): HRESULT {.inline, discardable.} = self.lpVtbl.GetExtendedControl(self, P1)
proc TransformCoords*(self: ptr IOleControlSite, P1: ptr POINTL, P2: ptr POINTF, P3: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.TransformCoords(self, P1, P2, P3)
proc TranslateAccelerator*(self: ptr IOleControlSite, P1: LPMSG, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateAccelerator(self, P1, P2)
proc OnFocus*(self: ptr IOleControlSite, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.OnFocus(self, P1)
proc ShowPropertyFrame*(self: ptr IOleControlSite): HRESULT {.inline, discardable.} = self.lpVtbl.ShowPropertyFrame(self)
converter winim_converter_ISimpleFrameSite*(x: ptr ISimpleFrameSite): ptr IUnknown = cast[ptr IUnknown](x)
proc PreMessageFilter*(self: ptr ISimpleFrameSite, P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM, P5: ptr LRESULT, P6: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.PreMessageFilter(self, P1, P2, P3, P4, P5, P6)
proc PostMessageFilter*(self: ptr ISimpleFrameSite, P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM, P5: ptr LRESULT, P6: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.PostMessageFilter(self, P1, P2, P3, P4, P5, P6)
converter winim_converter_IErrorLog*(x: ptr IErrorLog): ptr IUnknown = cast[ptr IUnknown](x)
proc AddError*(self: ptr IErrorLog, P1: LPCOLESTR, P2: LPEXCEPINFO): HRESULT {.inline, discardable.} = self.lpVtbl.AddError(self, P1, P2)
converter winim_converter_IPropertyBag*(x: ptr IPropertyBag): ptr IUnknown = cast[ptr IUnknown](x)
proc Read*(self: ptr IPropertyBag, P1: LPCOLESTR, P2: LPVARIANT, P3: LPERRORLOG): HRESULT {.inline, discardable.} = self.lpVtbl.Read(self, P1, P2, P3)
proc Write*(self: ptr IPropertyBag, P1: LPCOLESTR, P2: LPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.Write(self, P1, P2)
converter winim_converter_IPropertyBag2*(x: ptr IPropertyBag2): ptr IUnknown = cast[ptr IUnknown](x)
proc Read*(self: ptr IPropertyBag2, P1: ULONG, P2: ptr PROPBAG2, P3: LPERRORLOG, P4: ptr VARIANT, P5: ptr HRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.Read(self, P1, P2, P3, P4, P5)
proc Write*(self: ptr IPropertyBag2, P1: ULONG, P2: ptr PROPBAG2, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.Write(self, P1, P2, P3)
proc CountProperties*(self: ptr IPropertyBag2, P1: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.CountProperties(self, P1)
proc GetPropertyInfo*(self: ptr IPropertyBag2, P1: ULONG, P2: ULONG, P3: ptr PROPBAG2, P4: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyInfo(self, P1, P2, P3, P4)
proc LoadObject*(self: ptr IPropertyBag2, P1: LPCOLESTR, P2: DWORD, P3: ptr IUnknown, P4: LPERRORLOG): HRESULT {.inline, discardable.} = self.lpVtbl.LoadObject(self, P1, P2, P3, P4)
converter winim_converter_IPersistPropertyBag*(x: ptr IPersistPropertyBag): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPersistPropertyBag*(x: ptr IPersistPropertyBag): ptr IPersist = cast[ptr IPersist](x)
proc InitNew*(self: ptr IPersistPropertyBag): HRESULT {.inline, discardable.} = self.lpVtbl.InitNew(self)
proc Load*(self: ptr IPersistPropertyBag, P1: LPPROPERTYBAG, P2: LPERRORLOG): HRESULT {.inline, discardable.} = self.lpVtbl.Load(self, P1, P2)
proc Save*(self: ptr IPersistPropertyBag, P1: LPPROPERTYBAG, P2: BOOL, P3: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Save(self, P1, P2, P3)
converter winim_converter_IPersistPropertyBag2*(x: ptr IPersistPropertyBag2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPersistPropertyBag2*(x: ptr IPersistPropertyBag2): ptr IPersist = cast[ptr IPersist](x)
proc InitNew*(self: ptr IPersistPropertyBag2): HRESULT {.inline, discardable.} = self.lpVtbl.InitNew(self)
proc Load*(self: ptr IPersistPropertyBag2, P1: LPPROPERTYBAG2, P2: LPERRORLOG): HRESULT {.inline, discardable.} = self.lpVtbl.Load(self, P1, P2)
proc Save*(self: ptr IPersistPropertyBag2, P1: LPPROPERTYBAG2, P2: BOOL, P3: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Save(self, P1, P2, P3)
proc IsDirty*(self: ptr IPersistPropertyBag2): HRESULT {.inline, discardable.} = self.lpVtbl.IsDirty(self)
converter winim_converter_IPersistStreamInit*(x: ptr IPersistStreamInit): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPersistStreamInit*(x: ptr IPersistStreamInit): ptr IPersist = cast[ptr IPersist](x)
proc IsDirty*(self: ptr IPersistStreamInit): HRESULT {.inline, discardable.} = self.lpVtbl.IsDirty(self)
proc Load*(self: ptr IPersistStreamInit, P1: LPSTREAM): HRESULT {.inline, discardable.} = self.lpVtbl.Load(self, P1)
proc Save*(self: ptr IPersistStreamInit, P1: LPSTREAM, P2: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Save(self, P1, P2)
proc GetSizeMax*(self: ptr IPersistStreamInit, P1: PULARGE_INTEGER): HRESULT {.inline, discardable.} = self.lpVtbl.GetSizeMax(self, P1)
proc InitNew*(self: ptr IPersistStreamInit): HRESULT {.inline, discardable.} = self.lpVtbl.InitNew(self)
converter winim_converter_IPersistMemory*(x: ptr IPersistMemory): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPersistMemory*(x: ptr IPersistMemory): ptr IPersist = cast[ptr IPersist](x)
proc IsDirty*(self: ptr IPersistMemory): HRESULT {.inline, discardable.} = self.lpVtbl.IsDirty(self)
proc Load*(self: ptr IPersistMemory, P1: PVOID, P2: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Load(self, P1, P2)
proc Save*(self: ptr IPersistMemory, P1: PVOID, P2: BOOL, P3: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Save(self, P1, P2, P3)
proc GetSizeMax*(self: ptr IPersistMemory, P1: PULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetSizeMax(self, P1)
proc InitNew*(self: ptr IPersistMemory): HRESULT {.inline, discardable.} = self.lpVtbl.InitNew(self)
converter winim_converter_IPropertyNotifySink*(x: ptr IPropertyNotifySink): ptr IUnknown = cast[ptr IUnknown](x)
proc OnChanged*(self: ptr IPropertyNotifySink, P1: DISPID): HRESULT {.inline, discardable.} = self.lpVtbl.OnChanged(self, P1)
proc OnRequestEdit*(self: ptr IPropertyNotifySink, P1: DISPID): HRESULT {.inline, discardable.} = self.lpVtbl.OnRequestEdit(self, P1)
converter winim_converter_IProvideClassInfo*(x: ptr IProvideClassInfo): ptr IUnknown = cast[ptr IUnknown](x)
proc GetClassInfo*(self: ptr IProvideClassInfo, P1: ptr LPTYPEINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetClassInfo(self, P1)
converter winim_converter_IProvideClassInfo2*(x: ptr IProvideClassInfo2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IProvideClassInfo2*(x: ptr IProvideClassInfo2): ptr IProvideClassInfo = cast[ptr IProvideClassInfo](x)
proc GetGUID*(self: ptr IProvideClassInfo2, P1: DWORD, P2: ptr GUID): HRESULT {.inline, discardable.} = self.lpVtbl.GetGUID(self, P1, P2)
converter winim_converter_IConnectionPointContainer*(x: ptr IConnectionPointContainer): ptr IUnknown = cast[ptr IUnknown](x)
proc EnumConnectionPoints*(self: ptr IConnectionPointContainer, P1: ptr LPENUMCONNECTIONPOINTS): HRESULT {.inline, discardable.} = self.lpVtbl.EnumConnectionPoints(self, P1)
proc FindConnectionPoint*(self: ptr IConnectionPointContainer, P1: REFIID, P2: ptr LPCONNECTIONPOINT): HRESULT {.inline, discardable.} = self.lpVtbl.FindConnectionPoint(self, P1, P2)
converter winim_converter_IEnumConnectionPoints*(x: ptr IEnumConnectionPoints): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumConnectionPoints, P1: ULONG, P2: ptr LPCONNECTIONPOINT, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumConnectionPoints, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumConnectionPoints): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumConnectionPoints, P1: ptr LPENUMCONNECTIONPOINTS): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_IConnectionPoint*(x: ptr IConnectionPoint): ptr IUnknown = cast[ptr IUnknown](x)
proc GetConnectionInterface*(self: ptr IConnectionPoint, P1: ptr IID): HRESULT {.inline, discardable.} = self.lpVtbl.GetConnectionInterface(self, P1)
proc GetConnectionPointContainer*(self: ptr IConnectionPoint, P1: ptr ptr IConnectionPointContainer): HRESULT {.inline, discardable.} = self.lpVtbl.GetConnectionPointContainer(self, P1)
proc Advise*(self: ptr IConnectionPoint, P1: LPUNKNOWN, P2: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Advise(self, P1, P2)
proc Unadvise*(self: ptr IConnectionPoint, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Unadvise(self, P1)
proc EnumConnections*(self: ptr IConnectionPoint, P1: ptr LPENUMCONNECTIONS): HRESULT {.inline, discardable.} = self.lpVtbl.EnumConnections(self, P1)
converter winim_converter_IEnumConnections*(x: ptr IEnumConnections): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumConnections, P1: ULONG, P2: LPCONNECTDATA, P3: PULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumConnections, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumConnections): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumConnections, P1: ptr LPENUMCONNECTIONS): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_IClassFactory2*(x: ptr IClassFactory2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IClassFactory2*(x: ptr IClassFactory2): ptr IClassFactory = cast[ptr IClassFactory](x)
proc GetLicInfo*(self: ptr IClassFactory2, P1: LPLICINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetLicInfo(self, P1)
proc RequestLicKey*(self: ptr IClassFactory2, P1: DWORD, P2: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.RequestLicKey(self, P1, P2)
proc CreateInstanceLic*(self: ptr IClassFactory2, P1: LPUNKNOWN, P2: LPUNKNOWN, P3: REFIID, P4: BSTR, P5: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.CreateInstanceLic(self, P1, P2, P3, P4, P5)
converter winim_converter_ISpecifyPropertyPages*(x: ptr ISpecifyPropertyPages): ptr IUnknown = cast[ptr IUnknown](x)
proc GetPages*(self: ptr ISpecifyPropertyPages, P1: ptr CAUUID): HRESULT {.inline, discardable.} = self.lpVtbl.GetPages(self, P1)
converter winim_converter_IPerPropertyBrowsing*(x: ptr IPerPropertyBrowsing): ptr IUnknown = cast[ptr IUnknown](x)
proc GetDisplayString*(self: ptr IPerPropertyBrowsing, P1: DISPID, P2: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetDisplayString(self, P1, P2)
proc MapPropertyToPage*(self: ptr IPerPropertyBrowsing, P1: DISPID, P2: LPCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.MapPropertyToPage(self, P1, P2)
proc GetPredefinedStrings*(self: ptr IPerPropertyBrowsing, P1: DISPID, P2: ptr CALPOLESTR, P3: ptr CADWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetPredefinedStrings(self, P1, P2, P3)
proc GetPredefinedValue*(self: ptr IPerPropertyBrowsing, P1: DISPID, P2: DWORD, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetPredefinedValue(self, P1, P2, P3)
converter winim_converter_IPropertyPageSite*(x: ptr IPropertyPageSite): ptr IUnknown = cast[ptr IUnknown](x)
proc OnStatusChange*(self: ptr IPropertyPageSite, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OnStatusChange(self, P1)
proc GetLocaleID*(self: ptr IPropertyPageSite, P1: ptr LCID): HRESULT {.inline, discardable.} = self.lpVtbl.GetLocaleID(self, P1)
proc GetPageContainer*(self: ptr IPropertyPageSite, P1: ptr LPUNKNOWN): HRESULT {.inline, discardable.} = self.lpVtbl.GetPageContainer(self, P1)
proc TranslateAccelerator*(self: ptr IPropertyPageSite, P1: LPMSG): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateAccelerator(self, P1)
converter winim_converter_IPropertyPage*(x: ptr IPropertyPage): ptr IUnknown = cast[ptr IUnknown](x)
proc SetPageSite*(self: ptr IPropertyPage, P1: LPPROPERTYPAGESITE): HRESULT {.inline, discardable.} = self.lpVtbl.SetPageSite(self, P1)
proc Activate*(self: ptr IPropertyPage, P1: HWND, P2: LPCRECT, P3: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Activate(self, P1, P2, P3)
proc Deactivate*(self: ptr IPropertyPage): HRESULT {.inline, discardable.} = self.lpVtbl.Deactivate(self)
proc GetPageInfo*(self: ptr IPropertyPage, P1: LPPROPPAGEINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetPageInfo(self, P1)
proc SetObjects*(self: ptr IPropertyPage, P1: ULONG, P2: ptr LPUNKNOWN): HRESULT {.inline, discardable.} = self.lpVtbl.SetObjects(self, P1, P2)
proc Show*(self: ptr IPropertyPage, P1: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.Show(self, P1)
proc Move*(self: ptr IPropertyPage, P1: LPCRECT): HRESULT {.inline, discardable.} = self.lpVtbl.Move(self, P1)
proc IsPageDirty*(self: ptr IPropertyPage): HRESULT {.inline, discardable.} = self.lpVtbl.IsPageDirty(self)
proc Apply*(self: ptr IPropertyPage): HRESULT {.inline, discardable.} = self.lpVtbl.Apply(self)
proc Help*(self: ptr IPropertyPage, P1: LPCOLESTR): HRESULT {.inline, discardable.} = self.lpVtbl.Help(self, P1)
proc TranslateAccelerator*(self: ptr IPropertyPage, P1: LPMSG): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateAccelerator(self, P1)
converter winim_converter_IPropertyPage2*(x: ptr IPropertyPage2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPropertyPage2*(x: ptr IPropertyPage2): ptr IPropertyPage = cast[ptr IPropertyPage](x)
proc EditProperty*(self: ptr IPropertyPage2, P1: DISPID): HRESULT {.inline, discardable.} = self.lpVtbl.EditProperty(self, P1)
converter winim_converter_IFont*(x: ptr IFont): ptr IUnknown = cast[ptr IUnknown](x)
proc get_Name*(self: ptr IFont, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_Name(self, P1)
proc put_Name*(self: ptr IFont, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_Name(self, P1)
proc get_Size*(self: ptr IFont, P1: ptr CY): HRESULT {.inline, discardable.} = self.lpVtbl.get_Size(self, P1)
proc put_Size*(self: ptr IFont, P1: CY): HRESULT {.inline, discardable.} = self.lpVtbl.put_Size(self, P1)
proc get_Bold*(self: ptr IFont, P1: ptr BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_Bold(self, P1)
proc put_Bold*(self: ptr IFont, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_Bold(self, P1)
proc get_Italic*(self: ptr IFont, P1: ptr BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_Italic(self, P1)
proc put_Italic*(self: ptr IFont, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_Italic(self, P1)
proc get_Underline*(self: ptr IFont, P1: ptr BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_Underline(self, P1)
proc put_Underline*(self: ptr IFont, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_Underline(self, P1)
proc get_Strikethrough*(self: ptr IFont, P1: ptr BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_Strikethrough(self, P1)
proc put_Strikethrough*(self: ptr IFont, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_Strikethrough(self, P1)
proc get_Weight*(self: ptr IFont, P1: ptr int16): HRESULT {.inline, discardable.} = self.lpVtbl.get_Weight(self, P1)
proc put_Weight*(self: ptr IFont, P1: int16): HRESULT {.inline, discardable.} = self.lpVtbl.put_Weight(self, P1)
proc get_Charset*(self: ptr IFont, P1: ptr int16): HRESULT {.inline, discardable.} = self.lpVtbl.get_Charset(self, P1)
proc put_Charset*(self: ptr IFont, P1: int16): HRESULT {.inline, discardable.} = self.lpVtbl.put_Charset(self, P1)
proc get_hFont*(self: ptr IFont, P1: ptr HFONT): HRESULT {.inline, discardable.} = self.lpVtbl.get_hFont(self, P1)
proc Clone*(self: ptr IFont, P1: ptr ptr IFont): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
proc IsEqual*(self: ptr IFont, P1: ptr IFont): HRESULT {.inline, discardable.} = self.lpVtbl.IsEqual(self, P1)
proc SetRatio*(self: ptr IFont, P1: int32, P2: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetRatio(self, P1, P2)
proc QueryTextMetrics*(self: ptr IFont, P1: LPTEXTMETRICOLE): HRESULT {.inline, discardable.} = self.lpVtbl.QueryTextMetrics(self, P1)
proc AddRefHfont*(self: ptr IFont, P1: HFONT): HRESULT {.inline, discardable.} = self.lpVtbl.AddRefHfont(self, P1)
proc ReleaseHfont*(self: ptr IFont, P1: HFONT): HRESULT {.inline, discardable.} = self.lpVtbl.ReleaseHfont(self, P1)
proc SetHdc*(self: ptr IFont, P1: HDC): HRESULT {.inline, discardable.} = self.lpVtbl.SetHdc(self, P1)
converter winim_converter_IFontDisp*(x: ptr IFontDisp): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IFontDisp*(x: ptr IFontDisp): ptr IDispatch = cast[ptr IDispatch](x)
converter winim_converter_IPicture*(x: ptr IPicture): ptr IUnknown = cast[ptr IUnknown](x)
proc get_Handle*(self: ptr IPicture, P1: ptr OLE_HANDLE): HRESULT {.inline, discardable.} = self.lpVtbl.get_Handle(self, P1)
proc get_hPal*(self: ptr IPicture, P1: ptr OLE_HANDLE): HRESULT {.inline, discardable.} = self.lpVtbl.get_hPal(self, P1)
proc get_Type*(self: ptr IPicture, P1: ptr int16): HRESULT {.inline, discardable.} = self.lpVtbl.get_Type(self, P1)
proc get_Width*(self: ptr IPicture, P1: ptr OLE_XSIZE_HIMETRIC): HRESULT {.inline, discardable.} = self.lpVtbl.get_Width(self, P1)
proc get_Height*(self: ptr IPicture, P1: ptr OLE_YSIZE_HIMETRIC): HRESULT {.inline, discardable.} = self.lpVtbl.get_Height(self, P1)
proc Render*(self: ptr IPicture, P1: HDC, P2: int32, P3: int32, P4: int32, P5: int32, P6: OLE_XPOS_HIMETRIC, P7: OLE_YPOS_HIMETRIC, P8: OLE_XSIZE_HIMETRIC, P9: OLE_YSIZE_HIMETRIC, P10: LPCRECT): HRESULT {.inline, discardable.} = self.lpVtbl.Render(self, P1, P2, P3, P4, P5, P6, P7, P8, P9, P10)
proc set_hPal*(self: ptr IPicture, P1: OLE_HANDLE): HRESULT {.inline, discardable.} = self.lpVtbl.set_hPal(self, P1)
proc get_CurDC*(self: ptr IPicture, P1: ptr HDC): HRESULT {.inline, discardable.} = self.lpVtbl.get_CurDC(self, P1)
proc SelectPicture*(self: ptr IPicture, P1: HDC, P2: ptr HDC, P3: ptr OLE_HANDLE): HRESULT {.inline, discardable.} = self.lpVtbl.SelectPicture(self, P1, P2, P3)
proc get_KeepOriginalFormat*(self: ptr IPicture, P1: ptr BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_KeepOriginalFormat(self, P1)
proc put_KeepOriginalFormat*(self: ptr IPicture, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_KeepOriginalFormat(self, P1)
proc PictureChanged*(self: ptr IPicture): HRESULT {.inline, discardable.} = self.lpVtbl.PictureChanged(self)
proc SaveAsFile*(self: ptr IPicture, P1: LPSTREAM, P2: BOOL, P3: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.SaveAsFile(self, P1, P2, P3)
proc get_Attributes*(self: ptr IPicture, P1: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.get_Attributes(self, P1)
converter winim_converter_IPictureDisp*(x: ptr IPictureDisp): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPictureDisp*(x: ptr IPictureDisp): ptr IDispatch = cast[ptr IDispatch](x)
converter winim_converter_IOleInPlaceSiteEx*(x: ptr IOleInPlaceSiteEx): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IOleInPlaceSiteEx*(x: ptr IOleInPlaceSiteEx): ptr IOleInPlaceSite = cast[ptr IOleInPlaceSite](x)
proc OnInPlaceActivateEx*(self: ptr IOleInPlaceSiteEx, P1: ptr BOOL, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OnInPlaceActivateEx(self, P1, P2)
proc OnInPlaceDeactivateEx*(self: ptr IOleInPlaceSiteEx, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.OnInPlaceDeactivateEx(self, P1)
proc RequestUIActivate*(self: ptr IOleInPlaceSiteEx): HRESULT {.inline, discardable.} = self.lpVtbl.RequestUIActivate(self)
converter winim_converter_IObjectWithSite*(x: ptr IObjectWithSite): ptr IUnknown = cast[ptr IUnknown](x)
proc SetSite*(self: ptr IObjectWithSite, P1: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.SetSite(self, P1)
proc GetSite*(self: ptr IObjectWithSite, P1: REFIID, P2: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetSite(self, P1, P2)
converter winim_converter_IOleInPlaceSiteWindowless*(x: ptr IOleInPlaceSiteWindowless): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IOleInPlaceSiteWindowless*(x: ptr IOleInPlaceSiteWindowless): ptr IOleInPlaceSiteEx = cast[ptr IOleInPlaceSiteEx](x)
converter winim_converter_IOleInPlaceSiteWindowless*(x: ptr IOleInPlaceSiteWindowless): ptr IOleInPlaceSite = cast[ptr IOleInPlaceSite](x)
proc CanWindowlessActivate*(self: ptr IOleInPlaceSiteWindowless): HRESULT {.inline, discardable.} = self.lpVtbl.CanWindowlessActivate(self)
proc GetCapture*(self: ptr IOleInPlaceSiteWindowless): HRESULT {.inline, discardable.} = self.lpVtbl.GetCapture(self)
proc SetCapture*(self: ptr IOleInPlaceSiteWindowless, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetCapture(self, P1)
proc GetFocus*(self: ptr IOleInPlaceSiteWindowless): HRESULT {.inline, discardable.} = self.lpVtbl.GetFocus(self)
proc SetFocus*(self: ptr IOleInPlaceSiteWindowless, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetFocus(self, P1)
proc GetDC*(self: ptr IOleInPlaceSiteWindowless, P1: LPCRECT, P2: DWORD, P3: ptr HDC): HRESULT {.inline, discardable.} = self.lpVtbl.GetDC(self, P1, P2, P3)
proc ReleaseDC*(self: ptr IOleInPlaceSiteWindowless, P1: HDC): HRESULT {.inline, discardable.} = self.lpVtbl.ReleaseDC(self, P1)
proc InvalidateRect*(self: ptr IOleInPlaceSiteWindowless, P1: LPCRECT, P2: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.InvalidateRect(self, P1, P2)
proc InvalidateRgn*(self: ptr IOleInPlaceSiteWindowless, P1: HRGN, P2: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.InvalidateRgn(self, P1, P2)
proc ScrollRect*(self: ptr IOleInPlaceSiteWindowless, P1: INT, P2: INT, P3: LPCRECT, P4: LPCRECT): HRESULT {.inline, discardable.} = self.lpVtbl.ScrollRect(self, P1, P2, P3, P4)
proc AdjustRect*(self: ptr IOleInPlaceSiteWindowless, P1: LPCRECT): HRESULT {.inline, discardable.} = self.lpVtbl.AdjustRect(self, P1)
proc OnDefWindowMessage*(self: ptr IOleInPlaceSiteWindowless, P1: UINT, P2: WPARAM, P3: LPARAM, P4: ptr LRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.OnDefWindowMessage(self, P1, P2, P3, P4)
converter winim_converter_IAdviseSinkEx*(x: ptr IAdviseSinkEx): ptr IUnknown = cast[ptr IUnknown](x)
proc OnDataChange*(self: ptr IAdviseSinkEx, P1: ptr FORMATETC, P2: ptr STGMEDIUM): void {.inline, discardable.} = self.lpVtbl.OnDataChange(self, P1, P2)
proc OnViewChange*(self: ptr IAdviseSinkEx, P1: DWORD, P2: LONG): void {.inline, discardable.} = self.lpVtbl.OnViewChange(self, P1, P2)
proc OnRename*(self: ptr IAdviseSinkEx, P1: ptr IMoniker): void {.inline, discardable.} = self.lpVtbl.OnRename(self, P1)
proc OnSave*(self: ptr IAdviseSinkEx): void {.inline, discardable.} = self.lpVtbl.OnSave(self)
proc OnClose*(self: ptr IAdviseSinkEx): void {.inline, discardable.} = self.lpVtbl.OnClose(self)
proc OnViewStatusChange*(self: ptr IAdviseSinkEx, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OnViewStatusChange(self, P1)
converter winim_converter_IPointerInactive*(x: ptr IPointerInactive): ptr IUnknown = cast[ptr IUnknown](x)
proc GetActivationPolicy*(self: ptr IPointerInactive, P1: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetActivationPolicy(self, P1)
proc OnInactiveMouseMove*(self: ptr IPointerInactive, P1: LPCRECT, P2: LONG, P3: LONG, P4: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OnInactiveMouseMove(self, P1, P2, P3, P4)
proc OnInactiveSetCursor*(self: ptr IPointerInactive, P1: LPCRECT, P2: LONG, P3: LONG, P4: DWORD, P5: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.OnInactiveSetCursor(self, P1, P2, P3, P4, P5)
converter winim_converter_IOleUndoUnit*(x: ptr IOleUndoUnit): ptr IUnknown = cast[ptr IUnknown](x)
proc Do*(self: ptr IOleUndoUnit, P1: LPOLEUNDOMANAGER): HRESULT {.inline, discardable.} = self.lpVtbl.Do(self, P1)
proc GetDescription*(self: ptr IOleUndoUnit, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetDescription(self, P1)
proc GetUnitType*(self: ptr IOleUndoUnit, P1: ptr CLSID, P2: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetUnitType(self, P1, P2)
proc OnNextAdd*(self: ptr IOleUndoUnit): HRESULT {.inline, discardable.} = self.lpVtbl.OnNextAdd(self)
converter winim_converter_IOleParentUndoUnit*(x: ptr IOleParentUndoUnit): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IOleParentUndoUnit*(x: ptr IOleParentUndoUnit): ptr IOleUndoUnit = cast[ptr IOleUndoUnit](x)
proc Open*(self: ptr IOleParentUndoUnit, P1: ptr IOleParentUndoUnit): HRESULT {.inline, discardable.} = self.lpVtbl.Open(self, P1)
proc Close*(self: ptr IOleParentUndoUnit, P1: ptr IOleParentUndoUnit, P2: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Close(self, P1, P2)
proc Add*(self: ptr IOleParentUndoUnit, P1: ptr IOleUndoUnit): HRESULT {.inline, discardable.} = self.lpVtbl.Add(self, P1)
proc FindUnit*(self: ptr IOleParentUndoUnit, P1: ptr IOleUndoUnit): HRESULT {.inline, discardable.} = self.lpVtbl.FindUnit(self, P1)
proc GetParentState*(self: ptr IOleParentUndoUnit, P1: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetParentState(self, P1)
converter winim_converter_IEnumOleUndoUnits*(x: ptr IEnumOleUndoUnits): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumOleUndoUnits, P1: ULONG, P2: ptr ptr IOleUndoUnit, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumOleUndoUnits, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumOleUndoUnits): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumOleUndoUnits, P1: ptr ptr IEnumOleUndoUnits): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_IOleUndoManager*(x: ptr IOleUndoManager): ptr IUnknown = cast[ptr IUnknown](x)
proc Open*(self: ptr IOleUndoManager, P1: ptr IOleParentUndoUnit): HRESULT {.inline, discardable.} = self.lpVtbl.Open(self, P1)
proc Close*(self: ptr IOleUndoManager, P1: ptr IOleParentUndoUnit, P2: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Close(self, P1, P2)
proc Add*(self: ptr IOleUndoManager, P1: ptr IOleUndoUnit): HRESULT {.inline, discardable.} = self.lpVtbl.Add(self, P1)
proc GetOpenParentState*(self: ptr IOleUndoManager, P1: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetOpenParentState(self, P1)
proc DiscardFrom*(self: ptr IOleUndoManager, P1: ptr IOleUndoUnit): HRESULT {.inline, discardable.} = self.lpVtbl.DiscardFrom(self, P1)
proc UndoTo*(self: ptr IOleUndoManager, P1: ptr IOleUndoUnit): HRESULT {.inline, discardable.} = self.lpVtbl.UndoTo(self, P1)
proc RedoTo*(self: ptr IOleUndoManager, P1: ptr IOleUndoUnit): HRESULT {.inline, discardable.} = self.lpVtbl.RedoTo(self, P1)
proc EnumUndoable*(self: ptr IOleUndoManager, P1: ptr ptr IEnumOleUndoUnits): HRESULT {.inline, discardable.} = self.lpVtbl.EnumUndoable(self, P1)
proc EnumRedoable*(self: ptr IOleUndoManager, P1: ptr ptr IEnumOleUndoUnits): HRESULT {.inline, discardable.} = self.lpVtbl.EnumRedoable(self, P1)
proc GetLastUndoDescription*(self: ptr IOleUndoManager, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetLastUndoDescription(self, P1)
proc GetLastRedoDescription*(self: ptr IOleUndoManager, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetLastRedoDescription(self, P1)
proc Enable*(self: ptr IOleUndoManager, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Enable(self, P1)
converter winim_converter_IQuickActivate*(x: ptr IQuickActivate): ptr IUnknown = cast[ptr IUnknown](x)
proc QuickActivate*(self: ptr IQuickActivate, P1: ptr QACONTAINER, P2: ptr QACONTROL): HRESULT {.inline, discardable.} = self.lpVtbl.QuickActivate(self, P1, P2)
proc SetContentExtent*(self: ptr IQuickActivate, P1: LPSIZEL): HRESULT {.inline, discardable.} = self.lpVtbl.SetContentExtent(self, P1)
proc GetContentExtent*(self: ptr IQuickActivate, P1: LPSIZEL): HRESULT {.inline, discardable.} = self.lpVtbl.GetContentExtent(self, P1)

# objext/docobj.nim

const
  OLECMDERR_E_UNKNOWNGROUP* = -2147221244
  OLECMDERR_E_CANCELED* = -2147221245
  OLECMDERR_E_NOHELP* = -2147221246
  OLECMDERR_E_DISABLED* = -2147221247
  OLECMDERR_E_NOTSUPPORTED* = -2147221248
  # OLECMDID* = enum
  OLECMDID_OPEN* = 1
  OLECMDID_NEW* = 2
  OLECMDID_SAVE* = 3
  OLECMDID_SAVEAS* = 4
  OLECMDID_SAVECOPYAS* = 5
  OLECMDID_PRINT* = 6
  OLECMDID_PRINTPREVIEW* = 7
  OLECMDID_PAGESETUP* = 8
  OLECMDID_SPELL* = 9
  OLECMDID_PROPERTIES* = 10
  OLECMDID_CUT* = 11
  OLECMDID_COPY* = 12
  OLECMDID_PASTE* = 13
  OLECMDID_PASTESPECIAL* = 14
  OLECMDID_UNDO* = 15
  OLECMDID_REDO* = 16
  OLECMDID_SELECTALL* = 17
  OLECMDID_CLEARSELECTION* = 18
  OLECMDID_ZOOM* = 19
  OLECMDID_GETZOOMRANGE* = 20
  OLECMDID_UPDATECOMMANDS* = 21
  OLECMDID_REFRESH* = 22
  OLECMDID_STOP* = 23
  OLECMDID_HIDETOOLBARS* = 24
  OLECMDID_SETPROGRESSMAX* = 25
  OLECMDID_SETPROGRESSPOS* = 26
  OLECMDID_SETPROGRESSTEXT* = 27
  OLECMDID_SETTITLE* = 28
  OLECMDID_SETDOWNLOADSTATE* = 29
  OLECMDID_STOPDOWNLOAD* = 30
  # OLECMDF* = enum
  OLECMDF_SUPPORTED* = 1
  OLECMDF_ENABLED* = 2
  OLECMDF_LATCHED* = 4
  OLECMDF_NINCHED* = 8
  # OLECMDEXECOPT* = enum
  OLECMDEXECOPT_DODEFAULT* = 0
  OLECMDEXECOPT_PROMPTUSER* = 1
  OLECMDEXECOPT_DONTPROMPTUSER* = 2
  OLECMDEXECOPT_SHOWHELP* = 3

type
  OLECMDID* = int32
  OLECMDF* = int32
  OLECMDEXECOPT* = int32
  OLECMDTEXT* {.final, pure.} = object
    cmdtextf*: DWORD
    cwActual*: ULONG
    cwBuf*: ULONG
    rgwz*: array[1, uint16]
  OLECMD* {.final, pure.} = object
    cmdID*: ULONG
    cmdf*: DWORD
  LPOLEINPLACESITE* = ptr IOleInPlaceSite
  LPENUMOLEDOCUMENTVIEWS* = ptr IEnumOleDocumentViews
  IOleDocumentView* {.pure.} = object
    lpVtbl*: ptr IOleDocumentViewVtbl
  IOleDocumentViewVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetInPlaceSite*: proc(self: ptr IOleDocumentView, P1: LPOLEINPLACESITE): HRESULT {.stdcall.}
    GetInPlaceSite*: proc(self: ptr IOleDocumentView, P1: ptr LPOLEINPLACESITE): HRESULT {.stdcall.}
    GetDocument*: proc(self: ptr IOleDocumentView, P1: ptr ptr IUnknown): HRESULT {.stdcall.}
    SetRect*: proc(self: ptr IOleDocumentView, P1: LPRECT): HRESULT {.stdcall.}
    GetRect*: proc(self: ptr IOleDocumentView, P1: LPRECT): HRESULT {.stdcall.}
    SetRectComplex*: proc(self: ptr IOleDocumentView, P1: LPRECT, P2: LPRECT, P3: LPRECT, P4: LPRECT): HRESULT {.stdcall.}
    Show*: proc(self: ptr IOleDocumentView, P1: BOOL): HRESULT {.stdcall.}
    UIActivate*: proc(self: ptr IOleDocumentView, P1: BOOL): HRESULT {.stdcall.}
    Open*: proc(self: ptr IOleDocumentView): HRESULT {.stdcall.}
    Close*: proc(self: ptr IOleDocumentView, P1: DWORD): HRESULT {.stdcall.}
    SaveViewState*: proc(self: ptr IOleDocumentView, P1: ptr IStream): HRESULT {.stdcall.}
    ApplyViewState*: proc(self: ptr IOleDocumentView, P1: ptr IStream): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IOleDocumentView, P1: LPOLEINPLACESITE, P2: ptr ptr IOleDocumentView): HRESULT {.stdcall.}
  IEnumOleDocumentViews* {.pure.} = object
    lpVtbl*: ptr IEnumOleDocumentViewsVtbl
  IEnumOleDocumentViewsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumOleDocumentViews, P1: ULONG, P2: ptr IOleDocumentView, P3: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumOleDocumentViews, P1: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumOleDocumentViews): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumOleDocumentViews, P1: ptr ptr IEnumOleDocumentViews): HRESULT {.stdcall.}
  IOleDocument* {.pure.} = object
    lpVtbl*: ptr IOleDocumentVtbl
  IOleDocumentVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CreateView*: proc(self: ptr IOleDocument, P1: LPOLEINPLACESITE, P2: ptr IStream, P3: DWORD, P4: ptr ptr IOleDocumentView): HRESULT {.stdcall.}
    GetDocMiscStatus*: proc(self: ptr IOleDocument, P1: ptr DWORD): HRESULT {.stdcall.}
    EnumViews*: proc(self: ptr IOleDocument, P1: ptr LPENUMOLEDOCUMENTVIEWS, P2: ptr ptr IOleDocumentView): HRESULT {.stdcall.}
  IOleCommandTarget* {.pure.} = object
    lpVtbl*: ptr IOleCommandTargetVtbl
  IOleCommandTargetVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    QueryStatus*: proc(self: ptr IOleCommandTarget, P1: ptr GUID, P2: ULONG, P3: ptr OLECMD, P4: ptr OLECMDTEXT): HRESULT {.stdcall.}
    Exec*: proc(self: ptr IOleCommandTarget, P1: ptr GUID, P2: DWORD, P3: DWORD, P4: ptr VARIANTARG, P5: ptr VARIANTARG): HRESULT {.stdcall.}
  IOleDocumentSite* {.pure.} = object
    lpVtbl*: ptr IOleDocumentSiteVtbl
  IOleDocumentSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ActivateMe*: proc(self: ptr IOleDocumentSite, P1: ptr IOleDocumentView): HRESULT {.stdcall.}

converter winim_converter_IOleDocumentView*(x: ptr IOleDocumentView): ptr IUnknown = cast[ptr IUnknown](x)
proc SetInPlaceSite*(self: ptr IOleDocumentView, P1: LPOLEINPLACESITE): HRESULT {.inline, discardable.} = self.lpVtbl.SetInPlaceSite(self, P1)
proc GetInPlaceSite*(self: ptr IOleDocumentView, P1: ptr LPOLEINPLACESITE): HRESULT {.inline, discardable.} = self.lpVtbl.GetInPlaceSite(self, P1)
proc GetDocument*(self: ptr IOleDocumentView, P1: ptr ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.GetDocument(self, P1)
proc SetRect*(self: ptr IOleDocumentView, P1: LPRECT): HRESULT {.inline, discardable.} = self.lpVtbl.SetRect(self, P1)
proc GetRect*(self: ptr IOleDocumentView, P1: LPRECT): HRESULT {.inline, discardable.} = self.lpVtbl.GetRect(self, P1)
proc SetRectComplex*(self: ptr IOleDocumentView, P1: LPRECT, P2: LPRECT, P3: LPRECT, P4: LPRECT): HRESULT {.inline, discardable.} = self.lpVtbl.SetRectComplex(self, P1, P2, P3, P4)
proc Show*(self: ptr IOleDocumentView, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Show(self, P1)
proc UIActivate*(self: ptr IOleDocumentView, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.UIActivate(self, P1)
proc Open*(self: ptr IOleDocumentView): HRESULT {.inline, discardable.} = self.lpVtbl.Open(self)
proc Close*(self: ptr IOleDocumentView, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Close(self, P1)
proc SaveViewState*(self: ptr IOleDocumentView, P1: ptr IStream): HRESULT {.inline, discardable.} = self.lpVtbl.SaveViewState(self, P1)
proc ApplyViewState*(self: ptr IOleDocumentView, P1: ptr IStream): HRESULT {.inline, discardable.} = self.lpVtbl.ApplyViewState(self, P1)
proc Clone*(self: ptr IOleDocumentView, P1: LPOLEINPLACESITE, P2: ptr ptr IOleDocumentView): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1, P2)
converter winim_converter_IEnumOleDocumentViews*(x: ptr IEnumOleDocumentViews): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumOleDocumentViews, P1: ULONG, P2: ptr IOleDocumentView, P3: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, P1, P2, P3)
proc Skip*(self: ptr IEnumOleDocumentViews, P1: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, P1)
proc Reset*(self: ptr IEnumOleDocumentViews): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumOleDocumentViews, P1: ptr ptr IEnumOleDocumentViews): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, P1)
converter winim_converter_IOleDocument*(x: ptr IOleDocument): ptr IUnknown = cast[ptr IUnknown](x)
proc CreateView*(self: ptr IOleDocument, P1: LPOLEINPLACESITE, P2: ptr IStream, P3: DWORD, P4: ptr ptr IOleDocumentView): HRESULT {.inline, discardable.} = self.lpVtbl.CreateView(self, P1, P2, P3, P4)
proc GetDocMiscStatus*(self: ptr IOleDocument, P1: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetDocMiscStatus(self, P1)
proc EnumViews*(self: ptr IOleDocument, P1: ptr LPENUMOLEDOCUMENTVIEWS, P2: ptr ptr IOleDocumentView): HRESULT {.inline, discardable.} = self.lpVtbl.EnumViews(self, P1, P2)
converter winim_converter_IOleCommandTarget*(x: ptr IOleCommandTarget): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryStatus*(self: ptr IOleCommandTarget, P1: ptr GUID, P2: ULONG, P3: ptr OLECMD, P4: ptr OLECMDTEXT): HRESULT {.inline, discardable.} = self.lpVtbl.QueryStatus(self, P1, P2, P3, P4)
proc Exec*(self: ptr IOleCommandTarget, P1: ptr GUID, P2: DWORD, P3: DWORD, P4: ptr VARIANTARG, P5: ptr VARIANTARG): HRESULT {.inline, discardable.} = self.lpVtbl.Exec(self, P1, P2, P3, P4, P5)
converter winim_converter_IOleDocumentSite*(x: ptr IOleDocumentSite): ptr IUnknown = cast[ptr IUnknown](x)
proc ActivateMe*(self: ptr IOleDocumentSite, P1: ptr IOleDocumentView): HRESULT {.inline, discardable.} = self.lpVtbl.ActivateMe(self, P1)

# objext/exdisp.nim

const
  # BrowserNavConstants* = enum
  navOpenInNewWindow* = 0x01
  navNoHistory* = 0x02
  navNoReadFromCache* = 0x04
  navNoWriteTocache* = 0x08
  navAllowAutosearch* = 0x10
  navBrowserBar* = 0x20
  navHyperLink* = 0x40

type
  IWebBrowser* {.pure.} = object
    lpVtbl*: ptr IWebBrowserVtbl
  IWebBrowserVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    GoBack*: proc(self: ptr IWebBrowser): HRESULT {.stdcall.}
    GoForward*: proc(self: ptr IWebBrowser): HRESULT {.stdcall.}
    GoHome*: proc(self: ptr IWebBrowser): HRESULT {.stdcall.}
    GoSearch*: proc(self: ptr IWebBrowser): HRESULT {.stdcall.}
    Navigate*: proc(self: ptr IWebBrowser, P1: BSTR, P2: ptr VARIANT, P3: ptr VARIANT, P4: ptr VARIANT, P5: ptr VARIANT): HRESULT {.stdcall.}
    Refresh*: proc(self: ptr IWebBrowser): HRESULT {.stdcall.}
    Refresh2*: proc(self: ptr IWebBrowser, P1: ptr VARIANT): HRESULT {.stdcall.}
    Stop*: proc(self: ptr IWebBrowser): HRESULT {.stdcall.}
    get_Application*: proc(self: ptr IWebBrowser, ppDisp: ptr IDispatch): HRESULT {.stdcall.}
    get_Parent*: proc(self: ptr IWebBrowser, ppDisp: ptr IDispatch): HRESULT {.stdcall.}
    get_Container*: proc(self: ptr IWebBrowser, ppDisp: ptr IDispatch): HRESULT {.stdcall.}
    get_Document*: proc(self: ptr IWebBrowser, ppDisp: ptr IDispatch): HRESULT {.stdcall.}
    get_TopLevelContainer*: proc(self: ptr IWebBrowser, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_Type*: proc(self: ptr IWebBrowser, P1: ptr BSTR): HRESULT {.stdcall.}
    get_Left*: proc(self: ptr IWebBrowser, P1: ptr LONG): HRESULT {.stdcall.}
    put_Left*: proc(self: ptr IWebBrowser, P1: LONG): HRESULT {.stdcall.}
    get_Top*: proc(self: ptr IWebBrowser, P1: ptr LONG): HRESULT {.stdcall.}
    put_Top*: proc(self: ptr IWebBrowser, P1: LONG): HRESULT {.stdcall.}
    get_Width*: proc(self: ptr IWebBrowser, P1: ptr LONG): HRESULT {.stdcall.}
    put_Width*: proc(self: ptr IWebBrowser, P1: LONG): HRESULT {.stdcall.}
    get_Height*: proc(self: ptr IWebBrowser, P1: ptr LONG): HRESULT {.stdcall.}
    put_Height*: proc(self: ptr IWebBrowser, P1: LONG): HRESULT {.stdcall.}
    get_LocationName*: proc(self: ptr IWebBrowser, P1: ptr BSTR): HRESULT {.stdcall.}
    get_LocationURL*: proc(self: ptr IWebBrowser, P1: ptr BSTR): HRESULT {.stdcall.}
    get_Busy*: proc(self: ptr IWebBrowser, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IWebBrowserApp* {.pure.} = object
    lpVtbl*: ptr IWebBrowserAppVtbl
  IWebBrowserAppVtbl* {.pure, inheritable.} = object of IWebBrowserVtbl
    Quit*: proc(self: ptr IWebBrowserApp): HRESULT {.stdcall.}
    ClientToWindow*: proc(self: ptr IWebBrowserApp, P1: ptr int32, P2: ptr int32): HRESULT {.stdcall.}
    PutProperty*: proc(self: ptr IWebBrowserApp, P1: BSTR, P2: VARIANT): HRESULT {.stdcall.}
    GetProperty*: proc(self: ptr IWebBrowserApp, P1: BSTR, P2: ptr VARIANT): HRESULT {.stdcall.}
    get_Name*: proc(self: ptr IWebBrowserApp, P1: ptr BSTR): HRESULT {.stdcall.}
    get_HWND*: proc(self: ptr IWebBrowserApp, P1: ptr LONG): HRESULT {.stdcall.}
    get_FullName*: proc(self: ptr IWebBrowserApp, P1: ptr BSTR): HRESULT {.stdcall.}
    get_Path*: proc(self: ptr IWebBrowserApp, P1: ptr BSTR): HRESULT {.stdcall.}
    get_Visible*: proc(self: ptr IWebBrowserApp, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_Visible*: proc(self: ptr IWebBrowserApp, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_StatusBar*: proc(self: ptr IWebBrowserApp, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_StatusBar*: proc(self: ptr IWebBrowserApp, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_StatusText*: proc(self: ptr IWebBrowserApp, P1: ptr BSTR): HRESULT {.stdcall.}
    put_StatusText*: proc(self: ptr IWebBrowserApp, P1: BSTR): HRESULT {.stdcall.}
    get_ToolBar*: proc(self: ptr IWebBrowserApp, P1: ptr int32): HRESULT {.stdcall.}
    put_ToolBar*: proc(self: ptr IWebBrowserApp, P1: int32): HRESULT {.stdcall.}
    get_MenuBar*: proc(self: ptr IWebBrowserApp, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_MenuBar*: proc(self: ptr IWebBrowserApp, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_FullScreen*: proc(self: ptr IWebBrowserApp, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_FullScreen*: proc(self: ptr IWebBrowserApp, P1: VARIANT_BOOL): HRESULT {.stdcall.}
  IWebBrowser2* {.pure.} = object
    lpVtbl*: ptr IWebBrowser2Vtbl
  IWebBrowser2Vtbl* {.pure, inheritable.} = object of IWebBrowserAppVtbl
    Navigate2*: proc(self: ptr IWebBrowser2, P1: ptr VARIANT, P2: ptr VARIANT, P3: ptr VARIANT, P4: ptr VARIANT, P5: ptr VARIANT): HRESULT {.stdcall.}
    QueryStatusWB*: proc(self: ptr IWebBrowser2, P1: OLECMDID, P2: ptr OLECMDF): HRESULT {.stdcall.}
    ExecWB*: proc(self: ptr IWebBrowser2, P1: OLECMDID, P2: OLECMDEXECOPT, P3: ptr VARIANT, P4: ptr VARIANT): HRESULT {.stdcall.}
    ShowBrowserBar*: proc(self: ptr IWebBrowser2, P1: ptr VARIANT, P2: ptr VARIANT, P3: ptr VARIANT): HRESULT {.stdcall.}
    get_ReadyState*: proc(self: ptr IWebBrowser2, P1: ptr READYSTATE): HRESULT {.stdcall.}
    get_Offline*: proc(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_Offline*: proc(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_Silent*: proc(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_Silent*: proc(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_RegistaerAsBrowser*: proc(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_RegisterAsBrowser*: proc(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_RegistaerAsDropTarget*: proc(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_RegisterAsDropTarget*: proc(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_TheaterMode*: proc(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_TheaterMode*: proc(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_AddressBar*: proc(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_AddressBar*: proc(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_Resizable*: proc(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_Resizable*: proc(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.stdcall.}
  DWebBrowserEvents2* {.pure.} = object
    lpVtbl*: ptr DWebBrowserEvents2Vtbl
  DWebBrowserEvents2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    StatusTextChange*: proc(self: ptr DWebBrowserEvents2, P1: BSTR): void {.stdcall.}
    ProgressChange*: proc(self: ptr DWebBrowserEvents2, P1: LONG, P2: LONG): void {.stdcall.}
    CommandStateChange*: proc(self: ptr DWebBrowserEvents2, P1: LONG, P2: VARIANT_BOOL): void {.stdcall.}
    DownloadBegin*: proc(self: ptr DWebBrowserEvents2): void {.stdcall.}
    DownloadComplete*: proc(self: ptr DWebBrowserEvents2): void {.stdcall.}
    TitleChange*: proc(self: ptr DWebBrowserEvents2, P1: BSTR): void {.stdcall.}
    PropertyChange*: proc(self: ptr DWebBrowserEvents2, P1: BSTR): void {.stdcall.}
    BeforeNavigate2*: proc(self: ptr DWebBrowserEvents2, pDisp: IDispatch, P2: ptr VARIANT, P3: ptr VARIANT, P4: ptr VARIANT, P5: ptr VARIANT, P6: ptr VARIANT, P7: ptr VARIANT_BOOL): void {.stdcall.}
    NewWindow2*: proc(self: ptr DWebBrowserEvents2, ppDisp: ptr IDispatch, P2: ptr VARIANT_BOOL): void {.stdcall.}
    NavigateComplete*: proc(self: ptr DWebBrowserEvents2, pDisp: IDispatch, P2: ptr VARIANT): void {.stdcall.}
    DocumentComplete*: proc(self: ptr DWebBrowserEvents2, pDisp: IDispatch, P2: ptr VARIANT): void {.stdcall.}
    OnQuit*: proc(self: ptr DWebBrowserEvents2): void {.stdcall.}
    OnVisible*: proc(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.stdcall.}
    OnToolBar*: proc(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.stdcall.}
    OnMenuBar*: proc(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.stdcall.}
    OnStatusBar*: proc(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.stdcall.}
    OnFullScreen*: proc(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.stdcall.}
    OnTheaterMode*: proc(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.stdcall.}
    WindowSetResizable*: proc(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.stdcall.}
    WindowSetLeft*: proc(self: ptr DWebBrowserEvents2, P1: LONG): void {.stdcall.}
    WindowSetTop*: proc(self: ptr DWebBrowserEvents2, P1: LONG): void {.stdcall.}
    WindowSetWidth*: proc(self: ptr DWebBrowserEvents2, P1: LONG): void {.stdcall.}
    WindowSetHeight*: proc(self: ptr DWebBrowserEvents2, P1: LONG): void {.stdcall.}
    WindowClosing*: proc(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL, P2: ptr VARIANT_BOOL): void {.stdcall.}
    ClientToHostWindow*: proc(self: ptr DWebBrowserEvents2, P1: ptr LONG, P2: ptr LONG): void {.stdcall.}
    SetSecureLockIcon*: proc(self: ptr DWebBrowserEvents2, P1: LONG): void {.stdcall.}
    FileDownload*: proc(self: ptr DWebBrowserEvents2, P1: ptr VARIANT_BOOL): void {.stdcall.}

converter winim_converter_IWebBrowser*(x: ptr IWebBrowser): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IWebBrowser*(x: ptr IWebBrowser): ptr IDispatch = cast[ptr IDispatch](x)
proc GoBack*(self: ptr IWebBrowser): HRESULT {.inline, discardable.} = self.lpVtbl.GoBack(self)
proc GoForward*(self: ptr IWebBrowser): HRESULT {.inline, discardable.} = self.lpVtbl.GoForward(self)
proc GoHome*(self: ptr IWebBrowser): HRESULT {.inline, discardable.} = self.lpVtbl.GoHome(self)
proc GoSearch*(self: ptr IWebBrowser): HRESULT {.inline, discardable.} = self.lpVtbl.GoSearch(self)
proc Navigate*(self: ptr IWebBrowser, P1: BSTR, P2: ptr VARIANT, P3: ptr VARIANT, P4: ptr VARIANT, P5: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.Navigate(self, P1, P2, P3, P4, P5)
proc Refresh*(self: ptr IWebBrowser): HRESULT {.inline, discardable.} = self.lpVtbl.Refresh(self)
proc Refresh2*(self: ptr IWebBrowser, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.Refresh2(self, P1)
proc Stop*(self: ptr IWebBrowser): HRESULT {.inline, discardable.} = self.lpVtbl.Stop(self)
proc get_Application*(self: ptr IWebBrowser, ppDisp: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.get_Application(self, ppDisp)
proc get_Parent*(self: ptr IWebBrowser, ppDisp: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.get_Parent(self, ppDisp)
proc get_Container*(self: ptr IWebBrowser, ppDisp: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.get_Container(self, ppDisp)
proc get_Document*(self: ptr IWebBrowser, ppDisp: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.get_Document(self, ppDisp)
proc get_TopLevelContainer*(self: ptr IWebBrowser, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_TopLevelContainer(self, P1)
proc get_Type*(self: ptr IWebBrowser, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_Type(self, P1)
proc get_Left*(self: ptr IWebBrowser, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_Left(self, P1)
proc put_Left*(self: ptr IWebBrowser, P1: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.put_Left(self, P1)
proc get_Top*(self: ptr IWebBrowser, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_Top(self, P1)
proc put_Top*(self: ptr IWebBrowser, P1: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.put_Top(self, P1)
proc get_Width*(self: ptr IWebBrowser, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_Width(self, P1)
proc put_Width*(self: ptr IWebBrowser, P1: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.put_Width(self, P1)
proc get_Height*(self: ptr IWebBrowser, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_Height(self, P1)
proc put_Height*(self: ptr IWebBrowser, P1: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.put_Height(self, P1)
proc get_LocationName*(self: ptr IWebBrowser, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_LocationName(self, P1)
proc get_LocationURL*(self: ptr IWebBrowser, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_LocationURL(self, P1)
proc get_Busy*(self: ptr IWebBrowser, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_Busy(self, P1)
converter winim_converter_IWebBrowserApp*(x: ptr IWebBrowserApp): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IWebBrowserApp*(x: ptr IWebBrowserApp): ptr IWebBrowser = cast[ptr IWebBrowser](x)
converter winim_converter_IWebBrowserApp*(x: ptr IWebBrowserApp): ptr IDispatch = cast[ptr IDispatch](x)
proc Quit*(self: ptr IWebBrowserApp): HRESULT {.inline, discardable.} = self.lpVtbl.Quit(self)
proc ClientToWindow*(self: ptr IWebBrowserApp, P1: ptr int32, P2: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.ClientToWindow(self, P1, P2)
proc PutProperty*(self: ptr IWebBrowserApp, P1: BSTR, P2: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.PutProperty(self, P1, P2)
proc GetProperty*(self: ptr IWebBrowserApp, P1: BSTR, P2: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetProperty(self, P1, P2)
proc get_Name*(self: ptr IWebBrowserApp, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_Name(self, P1)
proc get_HWND*(self: ptr IWebBrowserApp, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_HWND(self, P1)
proc get_FullName*(self: ptr IWebBrowserApp, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_FullName(self, P1)
proc get_Path*(self: ptr IWebBrowserApp, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_Path(self, P1)
proc get_Visible*(self: ptr IWebBrowserApp, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_Visible(self, P1)
proc put_Visible*(self: ptr IWebBrowserApp, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_Visible(self, P1)
proc get_StatusBar*(self: ptr IWebBrowserApp, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_StatusBar(self, P1)
proc put_StatusBar*(self: ptr IWebBrowserApp, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_StatusBar(self, P1)
proc get_StatusText*(self: ptr IWebBrowserApp, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_StatusText(self, P1)
proc put_StatusText*(self: ptr IWebBrowserApp, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_StatusText(self, P1)
proc get_ToolBar*(self: ptr IWebBrowserApp, P1: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.get_ToolBar(self, P1)
proc put_ToolBar*(self: ptr IWebBrowserApp, P1: int32): HRESULT {.inline, discardable.} = self.lpVtbl.put_ToolBar(self, P1)
proc get_MenuBar*(self: ptr IWebBrowserApp, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_MenuBar(self, P1)
proc put_MenuBar*(self: ptr IWebBrowserApp, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_MenuBar(self, P1)
proc get_FullScreen*(self: ptr IWebBrowserApp, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_FullScreen(self, P1)
proc put_FullScreen*(self: ptr IWebBrowserApp, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_FullScreen(self, P1)
converter winim_converter_IWebBrowser2*(x: ptr IWebBrowser2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IWebBrowser2*(x: ptr IWebBrowser2): ptr IWebBrowserApp = cast[ptr IWebBrowserApp](x)
converter winim_converter_IWebBrowser2*(x: ptr IWebBrowser2): ptr IWebBrowser = cast[ptr IWebBrowser](x)
converter winim_converter_IWebBrowser2*(x: ptr IWebBrowser2): ptr IDispatch = cast[ptr IDispatch](x)
proc Navigate2*(self: ptr IWebBrowser2, P1: ptr VARIANT, P2: ptr VARIANT, P3: ptr VARIANT, P4: ptr VARIANT, P5: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.Navigate2(self, P1, P2, P3, P4, P5)
proc QueryStatusWB*(self: ptr IWebBrowser2, P1: OLECMDID, P2: ptr OLECMDF): HRESULT {.inline, discardable.} = self.lpVtbl.QueryStatusWB(self, P1, P2)
proc ExecWB*(self: ptr IWebBrowser2, P1: OLECMDID, P2: OLECMDEXECOPT, P3: ptr VARIANT, P4: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.ExecWB(self, P1, P2, P3, P4)
proc ShowBrowserBar*(self: ptr IWebBrowser2, P1: ptr VARIANT, P2: ptr VARIANT, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.ShowBrowserBar(self, P1, P2, P3)
proc get_ReadyState*(self: ptr IWebBrowser2, P1: ptr READYSTATE): HRESULT {.inline, discardable.} = self.lpVtbl.get_ReadyState(self, P1)
proc get_Offline*(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_Offline(self, P1)
proc put_Offline*(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_Offline(self, P1)
proc get_Silent*(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_Silent(self, P1)
proc put_Silent*(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_Silent(self, P1)
proc get_RegistaerAsBrowser*(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_RegistaerAsBrowser(self, P1)
proc put_RegisterAsBrowser*(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_RegisterAsBrowser(self, P1)
proc get_RegistaerAsDropTarget*(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_RegistaerAsDropTarget(self, P1)
proc put_RegisterAsDropTarget*(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_RegisterAsDropTarget(self, P1)
proc get_TheaterMode*(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_TheaterMode(self, P1)
proc put_TheaterMode*(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_TheaterMode(self, P1)
proc get_AddressBar*(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_AddressBar(self, P1)
proc put_AddressBar*(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_AddressBar(self, P1)
proc get_Resizable*(self: ptr IWebBrowser2, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_Resizable(self, P1)
proc put_Resizable*(self: ptr IWebBrowser2, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_Resizable(self, P1)
converter winim_converter_DWebBrowserEvents2*(x: ptr DWebBrowserEvents2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_DWebBrowserEvents2*(x: ptr DWebBrowserEvents2): ptr IDispatch = cast[ptr IDispatch](x)
proc StatusTextChange*(self: ptr DWebBrowserEvents2, P1: BSTR): void {.inline, discardable.} = self.lpVtbl.StatusTextChange(self, P1)
proc ProgressChange*(self: ptr DWebBrowserEvents2, P1: LONG, P2: LONG): void {.inline, discardable.} = self.lpVtbl.ProgressChange(self, P1, P2)
proc CommandStateChange*(self: ptr DWebBrowserEvents2, P1: LONG, P2: VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.CommandStateChange(self, P1, P2)
proc DownloadBegin*(self: ptr DWebBrowserEvents2): void {.inline, discardable.} = self.lpVtbl.DownloadBegin(self)
proc DownloadComplete*(self: ptr DWebBrowserEvents2): void {.inline, discardable.} = self.lpVtbl.DownloadComplete(self)
proc TitleChange*(self: ptr DWebBrowserEvents2, P1: BSTR): void {.inline, discardable.} = self.lpVtbl.TitleChange(self, P1)
proc PropertyChange*(self: ptr DWebBrowserEvents2, P1: BSTR): void {.inline, discardable.} = self.lpVtbl.PropertyChange(self, P1)
proc BeforeNavigate2*(self: ptr DWebBrowserEvents2, pDisp: IDispatch, P2: ptr VARIANT, P3: ptr VARIANT, P4: ptr VARIANT, P5: ptr VARIANT, P6: ptr VARIANT, P7: ptr VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.BeforeNavigate2(self, pDisp, P2, P3, P4, P5, P6, P7)
proc NewWindow2*(self: ptr DWebBrowserEvents2, ppDisp: ptr IDispatch, P2: ptr VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.NewWindow2(self, ppDisp, P2)
proc NavigateComplete*(self: ptr DWebBrowserEvents2, pDisp: IDispatch, P2: ptr VARIANT): void {.inline, discardable.} = self.lpVtbl.NavigateComplete(self, pDisp, P2)
proc DocumentComplete*(self: ptr DWebBrowserEvents2, pDisp: IDispatch, P2: ptr VARIANT): void {.inline, discardable.} = self.lpVtbl.DocumentComplete(self, pDisp, P2)
proc OnQuit*(self: ptr DWebBrowserEvents2): void {.inline, discardable.} = self.lpVtbl.OnQuit(self)
proc OnVisible*(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.OnVisible(self, P1)
proc OnToolBar*(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.OnToolBar(self, P1)
proc OnMenuBar*(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.OnMenuBar(self, P1)
proc OnStatusBar*(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.OnStatusBar(self, P1)
proc OnFullScreen*(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.OnFullScreen(self, P1)
proc OnTheaterMode*(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.OnTheaterMode(self, P1)
proc WindowSetResizable*(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.WindowSetResizable(self, P1)
proc WindowSetLeft*(self: ptr DWebBrowserEvents2, P1: LONG): void {.inline, discardable.} = self.lpVtbl.WindowSetLeft(self, P1)
proc WindowSetTop*(self: ptr DWebBrowserEvents2, P1: LONG): void {.inline, discardable.} = self.lpVtbl.WindowSetTop(self, P1)
proc WindowSetWidth*(self: ptr DWebBrowserEvents2, P1: LONG): void {.inline, discardable.} = self.lpVtbl.WindowSetWidth(self, P1)
proc WindowSetHeight*(self: ptr DWebBrowserEvents2, P1: LONG): void {.inline, discardable.} = self.lpVtbl.WindowSetHeight(self, P1)
proc WindowClosing*(self: ptr DWebBrowserEvents2, P1: VARIANT_BOOL, P2: ptr VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.WindowClosing(self, P1, P2)
proc ClientToHostWindow*(self: ptr DWebBrowserEvents2, P1: ptr LONG, P2: ptr LONG): void {.inline, discardable.} = self.lpVtbl.ClientToHostWindow(self, P1, P2)
proc SetSecureLockIcon*(self: ptr DWebBrowserEvents2, P1: LONG): void {.inline, discardable.} = self.lpVtbl.SetSecureLockIcon(self, P1)
proc FileDownload*(self: ptr DWebBrowserEvents2, P1: ptr VARIANT_BOOL): void {.inline, discardable.} = self.lpVtbl.FileDownload(self, P1)

# objext/mshtml.nim

type
  IHTMLStyleSheet* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleSheetVtbl
  IHTMLStyleSheetVtbl* {.pure, inheritable.} = object
  LPHTMLSTYLE* = IHTMLStyle
  LPHTMLSTYLESHEET* = IHTMLStyleSheet
  IHTMLLocation* {.pure.} = object
    lpVtbl*: ptr IHTMLLocationVtbl
  IHTMLLocationVtbl* {.pure, inheritable.} = object
  LPHTMLLOCATION* = IHTMLLocation
  IHTMLFramesCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLFramesCollectionVtbl
  IHTMLFramesCollectionVtbl* {.pure, inheritable.} = object
  LPHTMLFRAMESCOLLECTION* = IHTMLFramesCollection
  IHTMLStyleSheetsCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleSheetsCollectionVtbl
  IHTMLStyleSheetsCollectionVtbl* {.pure, inheritable.} = object
  LPHTMLSTYLESHEETSCOLLECTION* = IHTMLStyleSheetsCollection
  IHTMLStyle* {.pure.} = object
    lpVtbl*: ptr IHTMLStyleVtbl
  IHTMLStyleVtbl* {.pure, inheritable.} = object
  IHTMLFiltersCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLFiltersCollectionVtbl
  IHTMLFiltersCollectionVtbl* {.pure, inheritable.} = object
  LPHTMLFILTERSCOLLECTION* = IHTMLFiltersCollection
  IOmHistory* {.pure.} = object
    lpVtbl*: ptr IOmHistoryVtbl
  IOmHistoryVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_length*: proc(self: ptr IOmHistory, p: ptr int16): HRESULT {.stdcall.}
    back*: proc(self: ptr IOmHistory, P1: ptr VARIANT): HRESULT {.stdcall.}
    forward*: proc(self: ptr IOmHistory, P1: ptr VARIANT): HRESULT {.stdcall.}
    go*: proc(self: ptr IOmHistory, P1: ptr VARIANT): HRESULT {.stdcall.}
  LPOMHISTORY* = ptr IOmHistory
  IOmNavigator* {.pure.} = object
    lpVtbl*: ptr IOmNavigatorVtbl
  IOmNavigatorVtbl* {.pure, inheritable.} = object
  LPOMNAVIGATOR* = IOmNavigator
  IHTMLImageElementFactory* {.pure.} = object
    lpVtbl*: ptr IHTMLImageElementFactoryVtbl
  IHTMLImageElementFactoryVtbl* {.pure, inheritable.} = object
  LPHTMLIMAGEELEMENTFACTORY* = IHTMLImageElementFactory
  IHTMLEventObj* {.pure.} = object
    lpVtbl*: ptr IHTMLEventObjVtbl
  IHTMLEventObjVtbl* {.pure, inheritable.} = object
  LPHTMLEVENTOBJ* = IHTMLEventObj
  IHTMLScreen* {.pure.} = object
    lpVtbl*: ptr IHTMLScreenVtbl
  IHTMLScreenVtbl* {.pure, inheritable.} = object
  LPHTMLSCREEN* = IHTMLScreen
  IHTMLOptionElementFactory* {.pure.} = object
    lpVtbl*: ptr IHTMLOptionElementFactoryVtbl
  IHTMLOptionElementFactoryVtbl* {.pure, inheritable.} = object
  LPHTMLOPTIONELEMENTFACTORY* = IHTMLOptionElementFactory
  IHTMLLinkElement* {.pure.} = object
    lpVtbl*: ptr IHTMLLinkElementVtbl
  IHTMLLinkElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_href*: proc(self: ptr IHTMLLinkElement, P1: BSTR): HRESULT {.stdcall.}
    get_href*: proc(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_rel*: proc(self: ptr IHTMLLinkElement, P1: BSTR): HRESULT {.stdcall.}
    get_rel*: proc(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_rev*: proc(self: ptr IHTMLLinkElement, P1: BSTR): HRESULT {.stdcall.}
    get_rev*: proc(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_type*: proc(self: ptr IHTMLLinkElement, P1: BSTR): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.stdcall.}
    get_readyState*: proc(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_onreadystatechange*: proc(self: ptr IHTMLLinkElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onreadystatechange*: proc(self: ptr IHTMLLinkElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onload*: proc(self: ptr IHTMLLinkElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onload*: proc(self: ptr IHTMLLinkElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onerror*: proc(self: ptr IHTMLLinkElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onerror*: proc(self: ptr IHTMLLinkElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    get_styleSheet*: proc(self: ptr IHTMLLinkElement, P1: ptr LPHTMLSTYLESHEET): HRESULT {.stdcall.}
    put_disabled*: proc(self: ptr IHTMLLinkElement, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_disabled*: proc(self: ptr IHTMLLinkElement, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_media*: proc(self: ptr IHTMLLinkElement, P1: BSTR): HRESULT {.stdcall.}
    get_media*: proc(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.stdcall.}
  LPHTMLLINKELEMENT* = ptr IHTMLLinkElement
  IHTMLImgElement* {.pure.} = object
    lpVtbl*: ptr IHTMLImgElementVtbl
  IHTMLImgElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_isMap*: proc(self: ptr IHTMLImgElement, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_isMap*: proc(self: ptr IHTMLImgElement, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_useMap*: proc(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.stdcall.}
    get_useMap*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    get_mimeType*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    get_fileSize*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    get_fileCreatedDate*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    get_fileModifiedDate*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    get_fileUpdatedDate*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    get_protocol*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    get_href*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    get_nameProp*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_border*: proc(self: ptr IHTMLImgElement, P1: VARIANT): HRESULT {.stdcall.}
    get_border*: proc(self: ptr IHTMLImgElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_vspace*: proc(self: ptr IHTMLImgElement, P1: LONG): HRESULT {.stdcall.}
    get_vspace*: proc(self: ptr IHTMLImgElement, P1: ptr LONG): HRESULT {.stdcall.}
    put_hspace*: proc(self: ptr IHTMLImgElement, P1: LONG): HRESULT {.stdcall.}
    get_hspace*: proc(self: ptr IHTMLImgElement, P1: ptr LONG): HRESULT {.stdcall.}
    put_alt*: proc(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.stdcall.}
    get_alt*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_src*: proc(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.stdcall.}
    get_src*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_lowsrc*: proc(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.stdcall.}
    get_lowsrc*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_vrml*: proc(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.stdcall.}
    get_vrml*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_dynsrc*: proc(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.stdcall.}
    get_dynsrc*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    get_readyState*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    get_complete*: proc(self: ptr IHTMLImgElement, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_loop*: proc(self: ptr IHTMLImgElement, P1: VARIANT): HRESULT {.stdcall.}
    get_loop*: proc(self: ptr IHTMLImgElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_align*: proc(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.stdcall.}
    get_align*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_onload*: proc(self: ptr IHTMLImgElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onload*: proc(self: ptr IHTMLImgElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onerror*: proc(self: ptr IHTMLImgElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onerror*: proc(self: ptr IHTMLImgElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onabort*: proc(self: ptr IHTMLImgElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onabort*: proc(self: ptr IHTMLImgElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_width*: proc(self: ptr IHTMLImgElement, P1: LONG): HRESULT {.stdcall.}
    get_width*: proc(self: ptr IHTMLImgElement, P1: ptr LONG): HRESULT {.stdcall.}
    put_height*: proc(self: ptr IHTMLImgElement, P1: LONG): HRESULT {.stdcall.}
    get_height*: proc(self: ptr IHTMLImgElement, P1: ptr LONG): HRESULT {.stdcall.}
    put_start*: proc(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.stdcall.}
    get_start*: proc(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.stdcall.}
  LPHTMLIMGELEMENT* = ptr IHTMLImgElement
  IHTMLElementCollection* {.pure.} = object
    lpVtbl*: ptr IHTMLElementCollectionVtbl
  IHTMLElementCollectionVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    toString*: proc(self: ptr IHTMLElementCollection, P1: ptr BSTR): HRESULT {.stdcall.}
    put_length*: proc(self: ptr IHTMLElementCollection, P1: LONG): HRESULT {.stdcall.}
    get_length*: proc(self: ptr IHTMLElementCollection, P1: ptr LONG): HRESULT {.stdcall.}
    get_newEnum*: proc(self: ptr IHTMLElementCollection, P1: ptr IUnknown): HRESULT {.stdcall.}
    item*: proc(self: ptr IHTMLElementCollection, P1: VARIANT, P2: VARIANT, pDisp: ptr IDispatch): HRESULT {.stdcall.}
    tags*: proc(self: ptr IHTMLElementCollection, P1: VARIANT, pdisp: ptr IDispatch): HRESULT {.stdcall.}
  LPHTMLELEMENTCOLLECTION* = ptr IHTMLElementCollection
  IHTMLDocument* {.pure.} = object
    lpVtbl*: ptr IHTMLDocumentVtbl
  IHTMLDocumentVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_Script*: proc(self: ptr IHTMLDocument, P1: ptr IDispatch): HRESULT {.stdcall.}
  IHTMLDocument2* {.pure.} = object
    lpVtbl*: ptr IHTMLDocument2Vtbl
  IHTMLDocument2Vtbl* {.pure, inheritable.} = object of IHTMLDocumentVtbl
    get_all*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.stdcall.}
    get_body*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENT): HRESULT {.stdcall.}
    get_activeElement*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENT): HRESULT {.stdcall.}
    get_images*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.stdcall.}
    get_applets*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.stdcall.}
    get_links*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.stdcall.}
    get_forms*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.stdcall.}
    get_anchors*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.stdcall.}
    put_title*: proc(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.stdcall.}
    get_title*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_scripts*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.stdcall.}
    put_designMode*: proc(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.stdcall.}
    get_designMode*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_selection*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLSELECTIONOBJECT): HRESULT {.stdcall.}
    get_readyState*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_frames*: proc(self: ptr IHTMLDocument2, P1: ptr IHTMLFramesCollection2): HRESULT {.stdcall.}
    get_embeds*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.stdcall.}
    get_plugins*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.stdcall.}
    put_alinkColor*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_alinkColor*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_bgColor*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_bgColor*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_fgColor*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_fgColor*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_linkColor*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_linkColor*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_vlinkColor*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_vlinkColor*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    get_referrer*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_location*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLLOCATION): HRESULT {.stdcall.}
    get_lastModified*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    put_url*: proc(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.stdcall.}
    get_url*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    put_domain*: proc(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.stdcall.}
    get_domain*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    put_cookie*: proc(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.stdcall.}
    get_cookie*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    put_expands*: proc(self: ptr IHTMLDocument2, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_expands*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_charset*: proc(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.stdcall.}
    get_charset*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    put_defaultCharset*: proc(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.stdcall.}
    get_defaultCharset*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_mimeType*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_fileSize*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_fileCreatedDate*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_fileModifiedDate*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_fileUpdatedDate*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_security*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_protocol*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_nameProp*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    write*: proc(self: ptr IHTMLDocument2, P1: ptr SAFEARRAY): HRESULT {.stdcall.}
    writeln*: proc(self: ptr IHTMLDocument2, P1: ptr SAFEARRAY): HRESULT {.stdcall.}
    open*: proc(self: ptr IHTMLDocument2, P1: BSTR, P2: VARIANT, P3: VARIANT, P4: VARIANT, P5: ptr IDispatch): HRESULT {.stdcall.}
    close*: proc(self: ptr IHTMLDocument2): HRESULT {.stdcall.}
    clear*: proc(self: ptr IHTMLDocument2): HRESULT {.stdcall.}
    queryCommandSupported*: proc(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandEnabled*: proc(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandState*: proc(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandIndeterm*: proc(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandText*: proc(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr BSTR): HRESULT {.stdcall.}
    queryCommandValue*: proc(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT): HRESULT {.stdcall.}
    execCommand*: proc(self: ptr IHTMLDocument2, P1: BSTR, P2: VARIANT_BOOL, P3: VARIANT, P4: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    execCommandShowHelp*: proc(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    createElement*: proc(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr LPHTMLELEMENT): HRESULT {.stdcall.}
    put_onhelp*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onhelp*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onclick*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onclick*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_ondblclick*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_ondblclick*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onkeyup*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onkeyup*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onkeydown*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onkeydown*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onkeypress*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onkeypress*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseup*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onmouseup*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onmousedown*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onmousedown*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onmousemove*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onmousemove*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseout*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onmouseout*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseover*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onmouseover*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onreadystatechange*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onreadystatechange*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onafterupdate*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onafterupdate*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onrowexit*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onrowexit*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onrowenter*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onrowenter*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_ondragstart*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_ondragstart*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onselectstart*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onselectstart*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    elementFromPoint*: proc(self: ptr IHTMLDocument2, P1: LONG, P2: LONG, P3: ptr LPHTMLELEMENT): HRESULT {.stdcall.}
    get_parentWindow*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLWINDOW2): HRESULT {.stdcall.}
    get_styleSheets*: proc(self: ptr IHTMLDocument2, P1: ptr LPHTMLSTYLESHEETSCOLLECTION): HRESULT {.stdcall.}
    put_onbeforeupdate*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onbeforeupdate*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onerrorupdate*: proc(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.stdcall.}
    get_onerrorupdate*: proc(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.stdcall.}
    toString*: proc(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.stdcall.}
    createStyleSheet*: proc(self: ptr IHTMLDocument2, P1: BSTR, P2: LONG, P3: ptr LPHTMLSTYLESHEET): HRESULT {.stdcall.}
  IHTMLSelectionObject* {.pure.} = object
    lpVtbl*: ptr IHTMLSelectionObjectVtbl
  IHTMLSelectionObjectVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    createRange*: proc(self: ptr IHTMLSelectionObject, P1: ptr IDispatch): HRESULT {.stdcall.}
    empty*: proc(self: ptr IHTMLSelectionObject): HRESULT {.stdcall.}
    clear*: proc(self: ptr IHTMLSelectionObject): HRESULT {.stdcall.}
    get_type*: proc(self: ptr IHTMLSelectionObject, P1: ptr BSTR): HRESULT {.stdcall.}
  LPHTMLSELECTIONOBJECT* = ptr IHTMLSelectionObject
  IHTMLTxtRange* {.pure.} = object
    lpVtbl*: ptr IHTMLTxtRangeVtbl
  IHTMLTxtRangeVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_htmlText*: proc(self: ptr IHTMLTxtRange, P1: ptr BSTR): HRESULT {.stdcall.}
    put_text*: proc(self: ptr IHTMLTxtRange, P1: BSTR): HRESULT {.stdcall.}
    get_text*: proc(self: ptr IHTMLTxtRange, P1: ptr BSTR): HRESULT {.stdcall.}
    parentElement*: proc(self: ptr IHTMLTxtRange, P1: ptr LPHTMLELEMENT): HRESULT {.stdcall.}
    duplicate*: proc(self: ptr IHTMLTxtRange, P1: ptr IHTMLTxtRange): HRESULT {.stdcall.}
    inRange*: proc(self: ptr IHTMLTxtRange, P1: IHTMLTxtRange, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    isEqual*: proc(self: ptr IHTMLTxtRange, P1: IHTMLTxtRange, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    scrollIntoView*: proc(self: ptr IHTMLTxtRange, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    collapse*: proc(self: ptr IHTMLTxtRange, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    expand*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    move*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: LONG, P3: ptr LONG): HRESULT {.stdcall.}
    moveStart*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: LONG, P3: ptr LONG): HRESULT {.stdcall.}
    moveEnd*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: LONG, P3: ptr LONG): HRESULT {.stdcall.}
    select*: proc(self: ptr IHTMLTxtRange): HRESULT {.stdcall.}
    pasteHTML*: proc(self: ptr IHTMLTxtRange, P1: BSTR): HRESULT {.stdcall.}
    moveToElementText*: proc(self: ptr IHTMLTxtRange, P1: LPHTMLELEMENT): HRESULT {.stdcall.}
    setEndPoint*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: IHTMLTxtRange): HRESULT {.stdcall.}
    compareEndPoints*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: IHTMLTxtRange, P3: ptr LONG): HRESULT {.stdcall.}
    findText*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: LONG, P3: LONG, P4: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    moveToPoint*: proc(self: ptr IHTMLTxtRange, P1: LONG, P2: LONG): HRESULT {.stdcall.}
    getBookmark*: proc(self: ptr IHTMLTxtRange, P1: ptr BSTR): HRESULT {.stdcall.}
    moveToBookbark*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandSupported*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandEnabled*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandState*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandIndeterm*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    queryCommandText*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr BSTR): HRESULT {.stdcall.}
    queryCommandValue*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT): HRESULT {.stdcall.}
    execCommand*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: VARIANT_BOOL, P3: VARIANT, P4: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    execCommandShowHelp*: proc(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IHTMLElement* {.pure.} = object
    lpVtbl*: ptr IHTMLElementVtbl
  IHTMLElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    setAttribute*: proc(self: ptr IHTMLElement, P1: BSTR, P2: VARIANT, P3: LONG): HRESULT {.stdcall.}
    getAttribute*: proc(self: ptr IHTMLElement, P1: BSTR, P2: LONG, P3: ptr VARIANT): HRESULT {.stdcall.}
    removeAttribute*: proc(self: ptr IHTMLElement, P1: BSTR, P2: LONG, P3: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_className*: proc(self: ptr IHTMLElement, P1: BSTR): HRESULT {.stdcall.}
    get_className*: proc(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.stdcall.}
    put_id*: proc(self: ptr IHTMLElement, P1: BSTR): HRESULT {.stdcall.}
    get_id*: proc(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.stdcall.}
    get_tagName*: proc(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.stdcall.}
    get_parentElement*: proc(self: ptr IHTMLElement, P1: ptr LPHTMLELEMENT): HRESULT {.stdcall.}
    get_style*: proc(self: ptr IHTMLElement, P1: ptr LPHTMLSTYLE): HRESULT {.stdcall.}
    put_onhelp*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onhelp*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onclick*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onclick*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_ondblclick*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_ondblclick*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onkeydown*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onkeydown*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onkeyup*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onkeyup*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onkeypress*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onkeypress*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseout*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onmouseout*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseover*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onmouseover*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onmousemove*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onmousemove*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onmousedown*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onmousedown*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onmouseup*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onmouseup*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    get_document*: proc(self: ptr IHTMLElement, P1: ptr IDispatch): HRESULT {.stdcall.}
    put_title*: proc(self: ptr IHTMLElement, P1: BSTR): HRESULT {.stdcall.}
    get_title*: proc(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.stdcall.}
    put_language*: proc(self: ptr IHTMLElement, P1: BSTR): HRESULT {.stdcall.}
    get_language*: proc(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.stdcall.}
    put_onselectstart*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onselectstart*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    scrollIntoView*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    contains*: proc(self: ptr IHTMLElement, P1: LPHTMLELEMENT, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    get_source3Index*: proc(self: ptr IHTMLElement, P1: ptr LONG): HRESULT {.stdcall.}
    get_recordNumber*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_lang*: proc(self: ptr IHTMLElement, P1: BSTR): HRESULT {.stdcall.}
    get_lang*: proc(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.stdcall.}
    get_offsetLeft*: proc(self: ptr IHTMLElement, P1: ptr LONG): HRESULT {.stdcall.}
    get_offsetTop*: proc(self: ptr IHTMLElement, P1: ptr LONG): HRESULT {.stdcall.}
    get_offsetWidth*: proc(self: ptr IHTMLElement, P1: ptr LONG): HRESULT {.stdcall.}
    get_offsetHeight*: proc(self: ptr IHTMLElement, P1: ptr LONG): HRESULT {.stdcall.}
    get_offsetParent*: proc(self: ptr IHTMLElement, P1: ptr LPHTMLELEMENT): HRESULT {.stdcall.}
    put_innerHTML*: proc(self: ptr IHTMLElement, P1: BSTR): HRESULT {.stdcall.}
    get_innerHTML*: proc(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.stdcall.}
    put_innerText*: proc(self: ptr IHTMLElement, P1: BSTR): HRESULT {.stdcall.}
    get_innerText*: proc(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.stdcall.}
    put_outerHTML*: proc(self: ptr IHTMLElement, P1: BSTR): HRESULT {.stdcall.}
    get_outerHTML*: proc(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.stdcall.}
    put_outerText*: proc(self: ptr IHTMLElement, P1: BSTR): HRESULT {.stdcall.}
    get_outerText*: proc(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.stdcall.}
    insertAdjacentHTML*: proc(self: ptr IHTMLElement, P1: BSTR, P2: BSTR): HRESULT {.stdcall.}
    insertAdjacentText*: proc(self: ptr IHTMLElement, P1: BSTR, P2: BSTR): HRESULT {.stdcall.}
    get_parentTextEdit*: proc(self: ptr IHTMLElement, P1: ptr LPHTMLELEMENT): HRESULT {.stdcall.}
    isTextEdit*: proc(self: ptr IHTMLElement, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    click*: proc(self: ptr IHTMLElement): HRESULT {.stdcall.}
    get_filters*: proc(self: ptr IHTMLElement, P1: ptr LPHTMLFILTERSCOLLECTION): HRESULT {.stdcall.}
    put_ondragstart*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_ondragstart*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    toString*: proc(self: ptr IHTMLElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_onbeforeupdate*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onbeforeupdate*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onafterupdate*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onafterupdate*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onerrorupdate*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onerrorupdate*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onrowexit*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onrowexit*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onrowenter*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onrowenter*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_ondatasetchanged*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_ondatasetchanged*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_ondataavailable*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_ondataavailable*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_ondatasetcomplete*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_ondatasetcomplete*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onfilterchange*: proc(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onfilterchange*: proc(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    get_children*: proc(self: ptr IHTMLElement, P1: ptr IDispatch): HRESULT {.stdcall.}
    get_all*: proc(self: ptr IHTMLElement, P1: ptr IDispatch): HRESULT {.stdcall.}
  LPHTMLELEMENT* = ptr IHTMLElement
  IHTMLFramesCollection2* {.pure.} = object
    lpVtbl*: ptr IHTMLFramesCollection2Vtbl
  IHTMLFramesCollection2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    item*: proc(self: ptr IHTMLFramesCollection2, P1: ptr VARIANT, P2: ptr VARIANT): HRESULT {.stdcall.}
    get_length*: proc(self: ptr IHTMLFramesCollection2, P1: ptr LONG): HRESULT {.stdcall.}
  IHTMLWindow2* {.pure.} = object
    lpVtbl*: ptr IHTMLWindow2Vtbl
  IHTMLWindow2Vtbl* {.pure, inheritable.} = object of IHTMLFramesCollection2Vtbl
    get_frames*: proc(self: ptr IHTMLWindow2, P1: ptr IHTMLFramesCollection2): HRESULT {.stdcall.}
    put_defaultStatus*: proc(self: ptr IHTMLWindow2, P1: BSTR): HRESULT {.stdcall.}
    get_defaultStatus*: proc(self: ptr IHTMLWindow2, P1: ptr BSTR): HRESULT {.stdcall.}
    put_status*: proc(self: ptr IHTMLWindow2, P1: BSTR): HRESULT {.stdcall.}
    get_status*: proc(self: ptr IHTMLWindow2, P1: ptr BSTR): HRESULT {.stdcall.}
    setTimeout*: proc(self: ptr IHTMLWindow2, P1: BSTR, P2: LONG, P3: ptr VARIANT, P4: ptr LONG): HRESULT {.stdcall.}
    clearTimeout*: proc(self: ptr IHTMLWindow2, P1: LONG): HRESULT {.stdcall.}
    alert*: proc(self: ptr IHTMLWindow2, P1: BSTR): HRESULT {.stdcall.}
    confirm*: proc(self: ptr IHTMLWindow2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    prompt*: proc(self: ptr IHTMLWindow2, P1: BSTR, P2: BSTR, P3: ptr VARIANT): HRESULT {.stdcall.}
    get_Image*: proc(self: ptr IHTMLWindow2, P1: ptr LPHTMLIMAGEELEMENTFACTORY): HRESULT {.stdcall.}
    get_location*: proc(self: ptr IHTMLWindow2, P1: ptr LPHTMLLOCATION): HRESULT {.stdcall.}
    get_history*: proc(self: ptr IHTMLWindow2, P1: ptr LPOMHISTORY): HRESULT {.stdcall.}
    close*: proc(self: ptr IHTMLWindow2): HRESULT {.stdcall.}
    put_opener*: proc(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.stdcall.}
    get_opener*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.stdcall.}
    get_navigator*: proc(self: ptr IHTMLWindow2, P1: ptr LPOMNAVIGATOR): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLWindow2, P1: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLWindow2, P1: ptr BSTR): HRESULT {.stdcall.}
    get_parent*: proc(self: ptr IHTMLWindow2, P1: ptr LPHTMLWINDOW2): HRESULT {.stdcall.}
    open*: proc(self: ptr IHTMLWindow2, P1: BSTR, P2: BSTR, P3: BSTR, P4: VARIANT_BOOL, P5: ptr LPHTMLWINDOW2): HRESULT {.stdcall.}
    get_self*: proc(self: ptr IHTMLWindow2, P1: ptr LPHTMLWINDOW2): HRESULT {.stdcall.}
    get_top*: proc(self: ptr IHTMLWindow2, P1: ptr LPHTMLWINDOW2): HRESULT {.stdcall.}
    get_window*: proc(self: ptr IHTMLWindow2, P1: ptr LPHTMLWINDOW2): HRESULT {.stdcall.}
    navigate*: proc(self: ptr IHTMLWindow2, P1: BSTR): HRESULT {.stdcall.}
    put_onfocus*: proc(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.stdcall.}
    get_onfocus*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onblur*: proc(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.stdcall.}
    get_onblur*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onload*: proc(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.stdcall.}
    get_onload*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onbeforeunload*: proc(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.stdcall.}
    get_onbeforeunload*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onunload*: proc(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.stdcall.}
    get_onunload*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onhelp*: proc(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.stdcall.}
    get_onhelp*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onerror*: proc(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.stdcall.}
    get_onerror*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onresize*: proc(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.stdcall.}
    get_onresize*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onscroll*: proc(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.stdcall.}
    get_onscroll*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.stdcall.}
    get_document*: proc(self: ptr IHTMLWindow2, P1: ptr IHTMLDocument2): HRESULT {.stdcall.}
    get_event*: proc(self: ptr IHTMLWindow2, P1: ptr LPHTMLEVENTOBJ): HRESULT {.stdcall.}
    get_newEnum*: proc(self: ptr IHTMLWindow2, P1: ptr IUnknown): HRESULT {.stdcall.}
    showModalDialog*: proc(self: ptr IHTMLWindow2, P1: BSTR, P2: ptr VARIANT, P3: ptr VARIANT, P4: ptr VARIANT): HRESULT {.stdcall.}
    showHelp*: proc(self: ptr IHTMLWindow2, P1: BSTR, P2: VARIANT, P3: BSTR): HRESULT {.stdcall.}
    get_screen*: proc(self: ptr IHTMLWindow2, P1: ptr LPHTMLSCREEN): HRESULT {.stdcall.}
    get_Option*: proc(self: ptr IHTMLWindow2, P1: ptr LPHTMLOPTIONELEMENTFACTORY): HRESULT {.stdcall.}
    focus*: proc(self: ptr IHTMLWindow2): HRESULT {.stdcall.}
    get_closed*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    blur*: proc(self: ptr IHTMLWindow2): HRESULT {.stdcall.}
    scroll*: proc(self: ptr IHTMLWindow2, P1: int64, P2: int64): HRESULT {.stdcall.}
    get_clientInformation*: proc(self: ptr IHTMLWindow2, P1: ptr LPOMNAVIGATOR): HRESULT {.stdcall.}
    setInterval*: proc(self: ptr IHTMLWindow2, P1: BSTR, P2: int64, P3: ptr VARIANT, P4: ptr int64): HRESULT {.stdcall.}
    clearInterval*: proc(self: ptr IHTMLWindow2, P1: int64): HRESULT {.stdcall.}
    put_offscreenBuffering*: proc(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.stdcall.}
    get_offscreenBuffering*: proc(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.stdcall.}
    execScript*: proc(self: ptr IHTMLWindow2, P1: BSTR, P2: BSTR, P3: ptr VARIANT): HRESULT {.stdcall.}
    toString*: proc(self: ptr IHTMLWindow2, P1: ptr BSTR): HRESULT {.stdcall.}
    scrollBy*: proc(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.stdcall.}
    scrollTo*: proc(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.stdcall.}
    moveTo*: proc(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.stdcall.}
    moveBy*: proc(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.stdcall.}
    resizeTo*: proc(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.stdcall.}
    resizeBy*: proc(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.stdcall.}
    get_external*: proc(self: ptr IHTMLWindow2, P1: ptr IDispatch): HRESULT {.stdcall.}
  LPHTMLWINDOW2* = ptr IHTMLWindow2
  IHTMLFrameBase* {.pure.} = object
    lpVtbl*: ptr IHTMLFrameBaseVtbl
  IHTMLFrameBaseVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_src*: proc(self: ptr IHTMLFrameBase, P1: BSTR): HRESULT {.stdcall.}
    get_src*: proc(self: ptr IHTMLFrameBase, P1: ptr BSTR): HRESULT {.stdcall.}
    put_name*: proc(self: ptr IHTMLFrameBase, P1: BSTR): HRESULT {.stdcall.}
    get_name*: proc(self: ptr IHTMLFrameBase, P1: ptr BSTR): HRESULT {.stdcall.}
    put_border*: proc(self: ptr IHTMLFrameBase, P1: VARIANT): HRESULT {.stdcall.}
    get_border*: proc(self: ptr IHTMLFrameBase, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_frameBorder*: proc(self: ptr IHTMLFrameBase, P1: BSTR): HRESULT {.stdcall.}
    get_frameBorder*: proc(self: ptr IHTMLFrameBase, P1: ptr BSTR): HRESULT {.stdcall.}
    put_frameSpacing*: proc(self: ptr IHTMLFrameBase, P1: VARIANT): HRESULT {.stdcall.}
    get_frameSpacing*: proc(self: ptr IHTMLFrameBase, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_marginWidth*: proc(self: ptr IHTMLFrameBase, P1: VARIANT): HRESULT {.stdcall.}
    get_marginWidth*: proc(self: ptr IHTMLFrameBase, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_marginHeight*: proc(self: ptr IHTMLFrameBase, P1: VARIANT): HRESULT {.stdcall.}
    get_marginHeight*: proc(self: ptr IHTMLFrameBase, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_noResize*: proc(self: ptr IHTMLFrameBase, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_noResize*: proc(self: ptr IHTMLFrameBase, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_scrolling*: proc(self: ptr IHTMLFrameBase, P1: BSTR): HRESULT {.stdcall.}
    get_scrolling*: proc(self: ptr IHTMLFrameBase, P1: ptr BSTR): HRESULT {.stdcall.}
  IHTMLFrameBase2* {.pure.} = object
    lpVtbl*: ptr IHTMLFrameBase2Vtbl
  IHTMLFrameBase2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_contentWindow*: proc(self: ptr IHTMLFrameBase2, P1: ptr IHTMLWindow2): HRESULT {.stdcall.}
    put_onload*: proc(self: ptr IHTMLFrameBase2, P1: VARIANT): HRESULT {.stdcall.}
    get_onload*: proc(self: ptr IHTMLFrameBase2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onreadystatechange*: proc(self: ptr IHTMLFrameBase2, P1: VARIANT): HRESULT {.stdcall.}
    get_onreadystatechange*: proc(self: ptr IHTMLFrameBase2, P1: ptr VARIANT): HRESULT {.stdcall.}
    get_readyState*: proc(self: ptr IHTMLFrameBase2, P1: ptr BSTR): HRESULT {.stdcall.}
    put_allowTransparency*: proc(self: ptr IHTMLFrameBase2, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_allowTransparency*: proc(self: ptr IHTMLFrameBase2, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
  IHTMLFrameBase3* {.pure.} = object
    lpVtbl*: ptr IHTMLFrameBase3Vtbl
  IHTMLFrameBase3Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_longDesc*: proc(self: ptr IHTMLFrameBase3, P1: BSTR): HRESULT {.stdcall.}
    get_longDesc*: proc(self: ptr IHTMLFrameBase3, P1: ptr BSTR): HRESULT {.stdcall.}
  IHTMLBodyElement* {.pure.} = object
    lpVtbl*: ptr IHTMLBodyElementVtbl
  IHTMLBodyElementVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_background*: proc(self: ptr IHTMLBodyElement, P1: BSTR): HRESULT {.stdcall.}
    get_background*: proc(self: ptr IHTMLBodyElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_bgProperties*: proc(self: ptr IHTMLBodyElement, P1: BSTR): HRESULT {.stdcall.}
    get_bgProperties*: proc(self: ptr IHTMLBodyElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_leftMargin*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_leftMargin*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_topMargin*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_topMargin*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_rightMargin*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_rightMargin*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_bottomMargin*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_bottomMargin*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_noWrap*: proc(self: ptr IHTMLBodyElement, P1: VARIANT_BOOL): HRESULT {.stdcall.}
    get_noWrap*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT_BOOL): HRESULT {.stdcall.}
    put_bgColor*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_bgColor*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_text*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_text*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_link*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_link*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_vLink*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_vLink*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_aLink*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_aLink*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onload*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onload*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onunload*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onunload*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_scroll*: proc(self: ptr IHTMLBodyElement, P1: BSTR): HRESULT {.stdcall.}
    get_scroll*: proc(self: ptr IHTMLBodyElement, P1: ptr BSTR): HRESULT {.stdcall.}
    put_onselect*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onselect*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onbeforeunload*: proc(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.stdcall.}
    get_onbeforeunload*: proc(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.stdcall.}
    createTextRange*: proc(self: ptr IHTMLBodyElement, P1: ptr IHTMLTxtRange): HRESULT {.stdcall.}
  IHTMLBodyElement2* {.pure.} = object
    lpVtbl*: ptr IHTMLBodyElement2Vtbl
  IHTMLBodyElement2Vtbl* {.pure, inheritable.} = object of IDispatchVtbl
    put_onbeforeprint*: proc(self: ptr IHTMLBodyElement2, P1: VARIANT): HRESULT {.stdcall.}
    get_onbeforeprint*: proc(self: ptr IHTMLBodyElement2, P1: ptr VARIANT): HRESULT {.stdcall.}
    put_onafterprint*: proc(self: ptr IHTMLBodyElement2, P1: VARIANT): HRESULT {.stdcall.}
    get_onafterprint*: proc(self: ptr IHTMLBodyElement2, P1: ptr VARIANT): HRESULT {.stdcall.}

converter winim_converter_IHTMLStyleSheet*(x: ptr IHTMLStyleSheet): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLLocation*(x: ptr IHTMLLocation): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLFramesCollection*(x: ptr IHTMLFramesCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLStyleSheetsCollection*(x: ptr IHTMLStyleSheetsCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLStyle*(x: ptr IHTMLStyle): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLFiltersCollection*(x: ptr IHTMLFiltersCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IOmHistory*(x: ptr IOmHistory): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IOmHistory*(x: ptr IOmHistory): ptr IDispatch = cast[ptr IDispatch](x)
proc get_length*(self: ptr IOmHistory, p: ptr int16): HRESULT {.inline, discardable.} = self.lpVtbl.get_length(self, p)
proc back*(self: ptr IOmHistory, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.back(self, P1)
proc forward*(self: ptr IOmHistory, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.forward(self, P1)
proc go*(self: ptr IOmHistory, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.go(self, P1)
converter winim_converter_IOmNavigator*(x: ptr IOmNavigator): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLImageElementFactory*(x: ptr IHTMLImageElementFactory): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLEventObj*(x: ptr IHTMLEventObj): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLScreen*(x: ptr IHTMLScreen): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLOptionElementFactory*(x: ptr IHTMLOptionElementFactory): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLLinkElement*(x: ptr IHTMLLinkElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLLinkElement*(x: ptr IHTMLLinkElement): ptr IDispatch = cast[ptr IDispatch](x)
proc put_href*(self: ptr IHTMLLinkElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_href(self, P1)
proc get_href*(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_href(self, P1)
proc put_rel*(self: ptr IHTMLLinkElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_rel(self, P1)
proc get_rel*(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_rel(self, P1)
proc put_rev*(self: ptr IHTMLLinkElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_rev(self, P1)
proc get_rev*(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_rev(self, P1)
proc put_type*(self: ptr IHTMLLinkElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_type(self, P1)
proc get_type*(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_type(self, P1)
proc get_readyState*(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_readyState(self, P1)
proc put_onreadystatechange*(self: ptr IHTMLLinkElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onreadystatechange(self, P1)
proc get_onreadystatechange*(self: ptr IHTMLLinkElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onreadystatechange(self, P1)
proc put_onload*(self: ptr IHTMLLinkElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onload(self, P1)
proc get_onload*(self: ptr IHTMLLinkElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onload(self, P1)
proc put_onerror*(self: ptr IHTMLLinkElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onerror(self, P1)
proc get_onerror*(self: ptr IHTMLLinkElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onerror(self, P1)
proc get_styleSheet*(self: ptr IHTMLLinkElement, P1: ptr LPHTMLSTYLESHEET): HRESULT {.inline, discardable.} = self.lpVtbl.get_styleSheet(self, P1)
proc put_disabled*(self: ptr IHTMLLinkElement, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_disabled(self, P1)
proc get_disabled*(self: ptr IHTMLLinkElement, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_disabled(self, P1)
proc put_media*(self: ptr IHTMLLinkElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_media(self, P1)
proc get_media*(self: ptr IHTMLLinkElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_media(self, P1)
converter winim_converter_IHTMLImgElement*(x: ptr IHTMLImgElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLImgElement*(x: ptr IHTMLImgElement): ptr IDispatch = cast[ptr IDispatch](x)
proc put_isMap*(self: ptr IHTMLImgElement, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_isMap(self, P1)
proc get_isMap*(self: ptr IHTMLImgElement, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_isMap(self, P1)
proc put_useMap*(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_useMap(self, P1)
proc get_useMap*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_useMap(self, P1)
proc get_mimeType*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_mimeType(self, P1)
proc get_fileSize*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_fileSize(self, P1)
proc get_fileCreatedDate*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_fileCreatedDate(self, P1)
proc get_fileModifiedDate*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_fileModifiedDate(self, P1)
proc get_fileUpdatedDate*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_fileUpdatedDate(self, P1)
proc get_protocol*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_protocol(self, P1)
proc get_href*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_href(self, P1)
proc get_nameProp*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_nameProp(self, P1)
proc put_border*(self: ptr IHTMLImgElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_border(self, P1)
proc get_border*(self: ptr IHTMLImgElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_border(self, P1)
proc put_vspace*(self: ptr IHTMLImgElement, P1: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.put_vspace(self, P1)
proc get_vspace*(self: ptr IHTMLImgElement, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_vspace(self, P1)
proc put_hspace*(self: ptr IHTMLImgElement, P1: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.put_hspace(self, P1)
proc get_hspace*(self: ptr IHTMLImgElement, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_hspace(self, P1)
proc put_alt*(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_alt(self, P1)
proc get_alt*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_alt(self, P1)
proc put_src*(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_src(self, P1)
proc get_src*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_src(self, P1)
proc put_lowsrc*(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_lowsrc(self, P1)
proc get_lowsrc*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_lowsrc(self, P1)
proc put_vrml*(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_vrml(self, P1)
proc get_vrml*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_vrml(self, P1)
proc put_dynsrc*(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_dynsrc(self, P1)
proc get_dynsrc*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_dynsrc(self, P1)
proc get_readyState*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_readyState(self, P1)
proc get_complete*(self: ptr IHTMLImgElement, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_complete(self, P1)
proc put_loop*(self: ptr IHTMLImgElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_loop(self, P1)
proc get_loop*(self: ptr IHTMLImgElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_loop(self, P1)
proc put_align*(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_align(self, P1)
proc get_align*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_align(self, P1)
proc put_onload*(self: ptr IHTMLImgElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onload(self, P1)
proc get_onload*(self: ptr IHTMLImgElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onload(self, P1)
proc put_onerror*(self: ptr IHTMLImgElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onerror(self, P1)
proc get_onerror*(self: ptr IHTMLImgElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onerror(self, P1)
proc put_onabort*(self: ptr IHTMLImgElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onabort(self, P1)
proc get_onabort*(self: ptr IHTMLImgElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onabort(self, P1)
proc put_name*(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_name(self, P1)
proc get_name*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_name(self, P1)
proc put_width*(self: ptr IHTMLImgElement, P1: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.put_width(self, P1)
proc get_width*(self: ptr IHTMLImgElement, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_width(self, P1)
proc put_height*(self: ptr IHTMLImgElement, P1: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.put_height(self, P1)
proc get_height*(self: ptr IHTMLImgElement, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_height(self, P1)
proc put_start*(self: ptr IHTMLImgElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_start(self, P1)
proc get_start*(self: ptr IHTMLImgElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_start(self, P1)
converter winim_converter_IHTMLElementCollection*(x: ptr IHTMLElementCollection): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLElementCollection*(x: ptr IHTMLElementCollection): ptr IDispatch = cast[ptr IDispatch](x)
proc toString*(self: ptr IHTMLElementCollection, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.toString(self, P1)
proc put_length*(self: ptr IHTMLElementCollection, P1: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.put_length(self, P1)
proc get_length*(self: ptr IHTMLElementCollection, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_length(self, P1)
proc get_newEnum*(self: ptr IHTMLElementCollection, P1: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.get_newEnum(self, P1)
proc item*(self: ptr IHTMLElementCollection, P1: VARIANT, P2: VARIANT, pDisp: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.item(self, P1, P2, pDisp)
proc tags*(self: ptr IHTMLElementCollection, P1: VARIANT, pdisp: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.tags(self, P1, pdisp)
converter winim_converter_IHTMLDocument*(x: ptr IHTMLDocument): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLDocument*(x: ptr IHTMLDocument): ptr IDispatch = cast[ptr IDispatch](x)
proc get_Script*(self: ptr IHTMLDocument, P1: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.get_Script(self, P1)
converter winim_converter_IHTMLDocument2*(x: ptr IHTMLDocument2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLDocument2*(x: ptr IHTMLDocument2): ptr IHTMLDocument = cast[ptr IHTMLDocument](x)
converter winim_converter_IHTMLDocument2*(x: ptr IHTMLDocument2): ptr IDispatch = cast[ptr IDispatch](x)
proc get_all*(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.inline, discardable.} = self.lpVtbl.get_all(self, P1)
proc get_body*(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENT): HRESULT {.inline, discardable.} = self.lpVtbl.get_body(self, P1)
proc get_activeElement*(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENT): HRESULT {.inline, discardable.} = self.lpVtbl.get_activeElement(self, P1)
proc get_images*(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.inline, discardable.} = self.lpVtbl.get_images(self, P1)
proc get_applets*(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.inline, discardable.} = self.lpVtbl.get_applets(self, P1)
proc get_links*(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.inline, discardable.} = self.lpVtbl.get_links(self, P1)
proc get_forms*(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.inline, discardable.} = self.lpVtbl.get_forms(self, P1)
proc get_anchors*(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.inline, discardable.} = self.lpVtbl.get_anchors(self, P1)
proc put_title*(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_title(self, P1)
proc get_title*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_title(self, P1)
proc get_scripts*(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.inline, discardable.} = self.lpVtbl.get_scripts(self, P1)
proc put_designMode*(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_designMode(self, P1)
proc get_designMode*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_designMode(self, P1)
proc get_selection*(self: ptr IHTMLDocument2, P1: ptr LPHTMLSELECTIONOBJECT): HRESULT {.inline, discardable.} = self.lpVtbl.get_selection(self, P1)
proc get_readyState*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_readyState(self, P1)
proc get_frames*(self: ptr IHTMLDocument2, P1: ptr IHTMLFramesCollection2): HRESULT {.inline, discardable.} = self.lpVtbl.get_frames(self, P1)
proc get_embeds*(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.inline, discardable.} = self.lpVtbl.get_embeds(self, P1)
proc get_plugins*(self: ptr IHTMLDocument2, P1: ptr LPHTMLELEMENTCOLLECTION): HRESULT {.inline, discardable.} = self.lpVtbl.get_plugins(self, P1)
proc put_alinkColor*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_alinkColor(self, P1)
proc get_alinkColor*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_alinkColor(self, P1)
proc put_bgColor*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_bgColor(self, P1)
proc get_bgColor*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_bgColor(self, P1)
proc put_fgColor*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_fgColor(self, P1)
proc get_fgColor*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_fgColor(self, P1)
proc put_linkColor*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_linkColor(self, P1)
proc get_linkColor*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_linkColor(self, P1)
proc put_vlinkColor*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_vlinkColor(self, P1)
proc get_vlinkColor*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_vlinkColor(self, P1)
proc get_referrer*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_referrer(self, P1)
proc get_location*(self: ptr IHTMLDocument2, P1: ptr LPHTMLLOCATION): HRESULT {.inline, discardable.} = self.lpVtbl.get_location(self, P1)
proc get_lastModified*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_lastModified(self, P1)
proc put_url*(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_url(self, P1)
proc get_url*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_url(self, P1)
proc put_domain*(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_domain(self, P1)
proc get_domain*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_domain(self, P1)
proc put_cookie*(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_cookie(self, P1)
proc get_cookie*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_cookie(self, P1)
proc put_expands*(self: ptr IHTMLDocument2, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_expands(self, P1)
proc get_expands*(self: ptr IHTMLDocument2, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_expands(self, P1)
proc put_charset*(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_charset(self, P1)
proc get_charset*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_charset(self, P1)
proc put_defaultCharset*(self: ptr IHTMLDocument2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_defaultCharset(self, P1)
proc get_defaultCharset*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_defaultCharset(self, P1)
proc get_mimeType*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_mimeType(self, P1)
proc get_fileSize*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_fileSize(self, P1)
proc get_fileCreatedDate*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_fileCreatedDate(self, P1)
proc get_fileModifiedDate*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_fileModifiedDate(self, P1)
proc get_fileUpdatedDate*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_fileUpdatedDate(self, P1)
proc get_security*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_security(self, P1)
proc get_protocol*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_protocol(self, P1)
proc get_nameProp*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_nameProp(self, P1)
proc write*(self: ptr IHTMLDocument2, P1: ptr SAFEARRAY): HRESULT {.inline, discardable.} = self.lpVtbl.write(self, P1)
proc writeln*(self: ptr IHTMLDocument2, P1: ptr SAFEARRAY): HRESULT {.inline, discardable.} = self.lpVtbl.writeln(self, P1)
proc open*(self: ptr IHTMLDocument2, P1: BSTR, P2: VARIANT, P3: VARIANT, P4: VARIANT, P5: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.open(self, P1, P2, P3, P4, P5)
proc close*(self: ptr IHTMLDocument2): HRESULT {.inline, discardable.} = self.lpVtbl.close(self)
proc clear*(self: ptr IHTMLDocument2): HRESULT {.inline, discardable.} = self.lpVtbl.clear(self)
proc queryCommandSupported*(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandSupported(self, P1, P2)
proc queryCommandEnabled*(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandEnabled(self, P1, P2)
proc queryCommandState*(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandState(self, P1, P2)
proc queryCommandIndeterm*(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandIndeterm(self, P1, P2)
proc queryCommandText*(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandText(self, P1, P2)
proc queryCommandValue*(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandValue(self, P1, P2)
proc execCommand*(self: ptr IHTMLDocument2, P1: BSTR, P2: VARIANT_BOOL, P3: VARIANT, P4: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.execCommand(self, P1, P2, P3, P4)
proc execCommandShowHelp*(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.execCommandShowHelp(self, P1, P2)
proc createElement*(self: ptr IHTMLDocument2, P1: BSTR, P2: ptr LPHTMLELEMENT): HRESULT {.inline, discardable.} = self.lpVtbl.createElement(self, P1, P2)
proc put_onhelp*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onhelp(self, P1)
proc get_onhelp*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onhelp(self, P1)
proc put_onclick*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onclick(self, P1)
proc get_onclick*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onclick(self, P1)
proc put_ondblclick*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_ondblclick(self, P1)
proc get_ondblclick*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_ondblclick(self, P1)
proc put_onkeyup*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onkeyup(self, P1)
proc get_onkeyup*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onkeyup(self, P1)
proc put_onkeydown*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onkeydown(self, P1)
proc get_onkeydown*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onkeydown(self, P1)
proc put_onkeypress*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onkeypress(self, P1)
proc get_onkeypress*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onkeypress(self, P1)
proc put_onmouseup*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onmouseup(self, P1)
proc get_onmouseup*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onmouseup(self, P1)
proc put_onmousedown*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onmousedown(self, P1)
proc get_onmousedown*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onmousedown(self, P1)
proc put_onmousemove*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onmousemove(self, P1)
proc get_onmousemove*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onmousemove(self, P1)
proc put_onmouseout*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onmouseout(self, P1)
proc get_onmouseout*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onmouseout(self, P1)
proc put_onmouseover*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onmouseover(self, P1)
proc get_onmouseover*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onmouseover(self, P1)
proc put_onreadystatechange*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onreadystatechange(self, P1)
proc get_onreadystatechange*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onreadystatechange(self, P1)
proc put_onafterupdate*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onafterupdate(self, P1)
proc get_onafterupdate*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onafterupdate(self, P1)
proc put_onrowexit*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onrowexit(self, P1)
proc get_onrowexit*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onrowexit(self, P1)
proc put_onrowenter*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onrowenter(self, P1)
proc get_onrowenter*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onrowenter(self, P1)
proc put_ondragstart*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_ondragstart(self, P1)
proc get_ondragstart*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_ondragstart(self, P1)
proc put_onselectstart*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onselectstart(self, P1)
proc get_onselectstart*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onselectstart(self, P1)
proc elementFromPoint*(self: ptr IHTMLDocument2, P1: LONG, P2: LONG, P3: ptr LPHTMLELEMENT): HRESULT {.inline, discardable.} = self.lpVtbl.elementFromPoint(self, P1, P2, P3)
proc get_parentWindow*(self: ptr IHTMLDocument2, P1: ptr LPHTMLWINDOW2): HRESULT {.inline, discardable.} = self.lpVtbl.get_parentWindow(self, P1)
proc get_styleSheets*(self: ptr IHTMLDocument2, P1: ptr LPHTMLSTYLESHEETSCOLLECTION): HRESULT {.inline, discardable.} = self.lpVtbl.get_styleSheets(self, P1)
proc put_onbeforeupdate*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onbeforeupdate(self, P1)
proc get_onbeforeupdate*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onbeforeupdate(self, P1)
proc put_onerrorupdate*(self: ptr IHTMLDocument2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onerrorupdate(self, P1)
proc get_onerrorupdate*(self: ptr IHTMLDocument2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onerrorupdate(self, P1)
proc toString*(self: ptr IHTMLDocument2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.toString(self, P1)
proc createStyleSheet*(self: ptr IHTMLDocument2, P1: BSTR, P2: LONG, P3: ptr LPHTMLSTYLESHEET): HRESULT {.inline, discardable.} = self.lpVtbl.createStyleSheet(self, P1, P2, P3)
converter winim_converter_IHTMLSelectionObject*(x: ptr IHTMLSelectionObject): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLSelectionObject*(x: ptr IHTMLSelectionObject): ptr IDispatch = cast[ptr IDispatch](x)
proc createRange*(self: ptr IHTMLSelectionObject, P1: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.createRange(self, P1)
proc empty*(self: ptr IHTMLSelectionObject): HRESULT {.inline, discardable.} = self.lpVtbl.empty(self)
proc clear*(self: ptr IHTMLSelectionObject): HRESULT {.inline, discardable.} = self.lpVtbl.clear(self)
proc get_type*(self: ptr IHTMLSelectionObject, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_type(self, P1)
converter winim_converter_IHTMLTxtRange*(x: ptr IHTMLTxtRange): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLTxtRange*(x: ptr IHTMLTxtRange): ptr IDispatch = cast[ptr IDispatch](x)
proc get_htmlText*(self: ptr IHTMLTxtRange, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_htmlText(self, P1)
proc put_text*(self: ptr IHTMLTxtRange, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_text(self, P1)
proc get_text*(self: ptr IHTMLTxtRange, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_text(self, P1)
proc parentElement*(self: ptr IHTMLTxtRange, P1: ptr LPHTMLELEMENT): HRESULT {.inline, discardable.} = self.lpVtbl.parentElement(self, P1)
proc duplicate*(self: ptr IHTMLTxtRange, P1: ptr IHTMLTxtRange): HRESULT {.inline, discardable.} = self.lpVtbl.duplicate(self, P1)
proc inRange*(self: ptr IHTMLTxtRange, P1: IHTMLTxtRange, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.inRange(self, P1, P2)
proc isEqual*(self: ptr IHTMLTxtRange, P1: IHTMLTxtRange, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.isEqual(self, P1, P2)
proc scrollIntoView*(self: ptr IHTMLTxtRange, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.scrollIntoView(self, P1)
proc collapse*(self: ptr IHTMLTxtRange, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.collapse(self, P1)
proc expand*(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.expand(self, P1, P2)
proc move*(self: ptr IHTMLTxtRange, P1: BSTR, P2: LONG, P3: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.move(self, P1, P2, P3)
proc moveStart*(self: ptr IHTMLTxtRange, P1: BSTR, P2: LONG, P3: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.moveStart(self, P1, P2, P3)
proc moveEnd*(self: ptr IHTMLTxtRange, P1: BSTR, P2: LONG, P3: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.moveEnd(self, P1, P2, P3)
proc select*(self: ptr IHTMLTxtRange): HRESULT {.inline, discardable.} = self.lpVtbl.select(self)
proc pasteHTML*(self: ptr IHTMLTxtRange, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.pasteHTML(self, P1)
proc moveToElementText*(self: ptr IHTMLTxtRange, P1: LPHTMLELEMENT): HRESULT {.inline, discardable.} = self.lpVtbl.moveToElementText(self, P1)
proc setEndPoint*(self: ptr IHTMLTxtRange, P1: BSTR, P2: IHTMLTxtRange): HRESULT {.inline, discardable.} = self.lpVtbl.setEndPoint(self, P1, P2)
proc compareEndPoints*(self: ptr IHTMLTxtRange, P1: BSTR, P2: IHTMLTxtRange, P3: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.compareEndPoints(self, P1, P2, P3)
proc findText*(self: ptr IHTMLTxtRange, P1: BSTR, P2: LONG, P3: LONG, P4: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.findText(self, P1, P2, P3, P4)
proc moveToPoint*(self: ptr IHTMLTxtRange, P1: LONG, P2: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.moveToPoint(self, P1, P2)
proc getBookmark*(self: ptr IHTMLTxtRange, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.getBookmark(self, P1)
proc moveToBookbark*(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.moveToBookbark(self, P1, P2)
proc queryCommandSupported*(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandSupported(self, P1, P2)
proc queryCommandEnabled*(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandEnabled(self, P1, P2)
proc queryCommandState*(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandState(self, P1, P2)
proc queryCommandIndeterm*(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandIndeterm(self, P1, P2)
proc queryCommandText*(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandText(self, P1, P2)
proc queryCommandValue*(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.queryCommandValue(self, P1, P2)
proc execCommand*(self: ptr IHTMLTxtRange, P1: BSTR, P2: VARIANT_BOOL, P3: VARIANT, P4: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.execCommand(self, P1, P2, P3, P4)
proc execCommandShowHelp*(self: ptr IHTMLTxtRange, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.execCommandShowHelp(self, P1, P2)
converter winim_converter_IHTMLElement*(x: ptr IHTMLElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLElement*(x: ptr IHTMLElement): ptr IDispatch = cast[ptr IDispatch](x)
proc setAttribute*(self: ptr IHTMLElement, P1: BSTR, P2: VARIANT, P3: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.setAttribute(self, P1, P2, P3)
proc getAttribute*(self: ptr IHTMLElement, P1: BSTR, P2: LONG, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.getAttribute(self, P1, P2, P3)
proc removeAttribute*(self: ptr IHTMLElement, P1: BSTR, P2: LONG, P3: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.removeAttribute(self, P1, P2, P3)
proc put_className*(self: ptr IHTMLElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_className(self, P1)
proc get_className*(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_className(self, P1)
proc put_id*(self: ptr IHTMLElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_id(self, P1)
proc get_id*(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_id(self, P1)
proc get_tagName*(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_tagName(self, P1)
proc get_parentElement*(self: ptr IHTMLElement, P1: ptr LPHTMLELEMENT): HRESULT {.inline, discardable.} = self.lpVtbl.get_parentElement(self, P1)
proc get_style*(self: ptr IHTMLElement, P1: ptr LPHTMLSTYLE): HRESULT {.inline, discardable.} = self.lpVtbl.get_style(self, P1)
proc put_onhelp*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onhelp(self, P1)
proc get_onhelp*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onhelp(self, P1)
proc put_onclick*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onclick(self, P1)
proc get_onclick*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onclick(self, P1)
proc put_ondblclick*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_ondblclick(self, P1)
proc get_ondblclick*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_ondblclick(self, P1)
proc put_onkeydown*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onkeydown(self, P1)
proc get_onkeydown*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onkeydown(self, P1)
proc put_onkeyup*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onkeyup(self, P1)
proc get_onkeyup*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onkeyup(self, P1)
proc put_onkeypress*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onkeypress(self, P1)
proc get_onkeypress*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onkeypress(self, P1)
proc put_onmouseout*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onmouseout(self, P1)
proc get_onmouseout*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onmouseout(self, P1)
proc put_onmouseover*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onmouseover(self, P1)
proc get_onmouseover*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onmouseover(self, P1)
proc put_onmousemove*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onmousemove(self, P1)
proc get_onmousemove*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onmousemove(self, P1)
proc put_onmousedown*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onmousedown(self, P1)
proc get_onmousedown*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onmousedown(self, P1)
proc put_onmouseup*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onmouseup(self, P1)
proc get_onmouseup*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onmouseup(self, P1)
proc get_document*(self: ptr IHTMLElement, P1: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.get_document(self, P1)
proc put_title*(self: ptr IHTMLElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_title(self, P1)
proc get_title*(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_title(self, P1)
proc put_language*(self: ptr IHTMLElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_language(self, P1)
proc get_language*(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_language(self, P1)
proc put_onselectstart*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onselectstart(self, P1)
proc get_onselectstart*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onselectstart(self, P1)
proc scrollIntoView*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.scrollIntoView(self, P1)
proc contains*(self: ptr IHTMLElement, P1: LPHTMLELEMENT, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.contains(self, P1, P2)
proc get_source3Index*(self: ptr IHTMLElement, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_source3Index(self, P1)
proc get_recordNumber*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_recordNumber(self, P1)
proc put_lang*(self: ptr IHTMLElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_lang(self, P1)
proc get_lang*(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_lang(self, P1)
proc get_offsetLeft*(self: ptr IHTMLElement, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_offsetLeft(self, P1)
proc get_offsetTop*(self: ptr IHTMLElement, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_offsetTop(self, P1)
proc get_offsetWidth*(self: ptr IHTMLElement, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_offsetWidth(self, P1)
proc get_offsetHeight*(self: ptr IHTMLElement, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_offsetHeight(self, P1)
proc get_offsetParent*(self: ptr IHTMLElement, P1: ptr LPHTMLELEMENT): HRESULT {.inline, discardable.} = self.lpVtbl.get_offsetParent(self, P1)
proc put_innerHTML*(self: ptr IHTMLElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_innerHTML(self, P1)
proc get_innerHTML*(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_innerHTML(self, P1)
proc put_innerText*(self: ptr IHTMLElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_innerText(self, P1)
proc get_innerText*(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_innerText(self, P1)
proc put_outerHTML*(self: ptr IHTMLElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_outerHTML(self, P1)
proc get_outerHTML*(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_outerHTML(self, P1)
proc put_outerText*(self: ptr IHTMLElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_outerText(self, P1)
proc get_outerText*(self: ptr IHTMLElement, P1: var BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_outerText(self, P1)
proc insertAdjacentHTML*(self: ptr IHTMLElement, P1: BSTR, P2: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.insertAdjacentHTML(self, P1, P2)
proc insertAdjacentText*(self: ptr IHTMLElement, P1: BSTR, P2: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.insertAdjacentText(self, P1, P2)
proc get_parentTextEdit*(self: ptr IHTMLElement, P1: ptr LPHTMLELEMENT): HRESULT {.inline, discardable.} = self.lpVtbl.get_parentTextEdit(self, P1)
proc isTextEdit*(self: ptr IHTMLElement, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.isTextEdit(self, P1)
proc click*(self: ptr IHTMLElement): HRESULT {.inline, discardable.} = self.lpVtbl.click(self)
proc get_filters*(self: ptr IHTMLElement, P1: ptr LPHTMLFILTERSCOLLECTION): HRESULT {.inline, discardable.} = self.lpVtbl.get_filters(self, P1)
proc put_ondragstart*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_ondragstart(self, P1)
proc get_ondragstart*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_ondragstart(self, P1)
proc toString*(self: ptr IHTMLElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.toString(self, P1)
proc put_onbeforeupdate*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onbeforeupdate(self, P1)
proc get_onbeforeupdate*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onbeforeupdate(self, P1)
proc put_onafterupdate*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onafterupdate(self, P1)
proc get_onafterupdate*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onafterupdate(self, P1)
proc put_onerrorupdate*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onerrorupdate(self, P1)
proc get_onerrorupdate*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onerrorupdate(self, P1)
proc put_onrowexit*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onrowexit(self, P1)
proc get_onrowexit*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onrowexit(self, P1)
proc put_onrowenter*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onrowenter(self, P1)
proc get_onrowenter*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onrowenter(self, P1)
proc put_ondatasetchanged*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_ondatasetchanged(self, P1)
proc get_ondatasetchanged*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_ondatasetchanged(self, P1)
proc put_ondataavailable*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_ondataavailable(self, P1)
proc get_ondataavailable*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_ondataavailable(self, P1)
proc put_ondatasetcomplete*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_ondatasetcomplete(self, P1)
proc get_ondatasetcomplete*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_ondatasetcomplete(self, P1)
proc put_onfilterchange*(self: ptr IHTMLElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onfilterchange(self, P1)
proc get_onfilterchange*(self: ptr IHTMLElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onfilterchange(self, P1)
proc get_children*(self: ptr IHTMLElement, P1: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.get_children(self, P1)
proc get_all*(self: ptr IHTMLElement, P1: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.get_all(self, P1)
converter winim_converter_IHTMLFramesCollection2*(x: ptr IHTMLFramesCollection2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLFramesCollection2*(x: ptr IHTMLFramesCollection2): ptr IDispatch = cast[ptr IDispatch](x)
proc item*(self: ptr IHTMLFramesCollection2, P1: ptr VARIANT, P2: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.item(self, P1, P2)
proc get_length*(self: ptr IHTMLFramesCollection2, P1: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.get_length(self, P1)
converter winim_converter_IHTMLWindow2*(x: ptr IHTMLWindow2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLWindow2*(x: ptr IHTMLWindow2): ptr IHTMLFramesCollection2 = cast[ptr IHTMLFramesCollection2](x)
converter winim_converter_IHTMLWindow2*(x: ptr IHTMLWindow2): ptr IDispatch = cast[ptr IDispatch](x)
proc get_frames*(self: ptr IHTMLWindow2, P1: ptr IHTMLFramesCollection2): HRESULT {.inline, discardable.} = self.lpVtbl.get_frames(self, P1)
proc put_defaultStatus*(self: ptr IHTMLWindow2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_defaultStatus(self, P1)
proc get_defaultStatus*(self: ptr IHTMLWindow2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_defaultStatus(self, P1)
proc put_status*(self: ptr IHTMLWindow2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_status(self, P1)
proc get_status*(self: ptr IHTMLWindow2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_status(self, P1)
proc setTimeout*(self: ptr IHTMLWindow2, P1: BSTR, P2: LONG, P3: ptr VARIANT, P4: ptr LONG): HRESULT {.inline, discardable.} = self.lpVtbl.setTimeout(self, P1, P2, P3, P4)
proc clearTimeout*(self: ptr IHTMLWindow2, P1: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.clearTimeout(self, P1)
proc alert*(self: ptr IHTMLWindow2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.alert(self, P1)
proc confirm*(self: ptr IHTMLWindow2, P1: BSTR, P2: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.confirm(self, P1, P2)
proc prompt*(self: ptr IHTMLWindow2, P1: BSTR, P2: BSTR, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.prompt(self, P1, P2, P3)
proc get_Image*(self: ptr IHTMLWindow2, P1: ptr LPHTMLIMAGEELEMENTFACTORY): HRESULT {.inline, discardable.} = self.lpVtbl.get_Image(self, P1)
proc get_location*(self: ptr IHTMLWindow2, P1: ptr LPHTMLLOCATION): HRESULT {.inline, discardable.} = self.lpVtbl.get_location(self, P1)
proc get_history*(self: ptr IHTMLWindow2, P1: ptr LPOMHISTORY): HRESULT {.inline, discardable.} = self.lpVtbl.get_history(self, P1)
proc close*(self: ptr IHTMLWindow2): HRESULT {.inline, discardable.} = self.lpVtbl.close(self)
proc put_opener*(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_opener(self, P1)
proc get_opener*(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_opener(self, P1)
proc get_navigator*(self: ptr IHTMLWindow2, P1: ptr LPOMNAVIGATOR): HRESULT {.inline, discardable.} = self.lpVtbl.get_navigator(self, P1)
proc put_name*(self: ptr IHTMLWindow2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_name(self, P1)
proc get_name*(self: ptr IHTMLWindow2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_name(self, P1)
proc get_parent*(self: ptr IHTMLWindow2, P1: ptr LPHTMLWINDOW2): HRESULT {.inline, discardable.} = self.lpVtbl.get_parent(self, P1)
proc open*(self: ptr IHTMLWindow2, P1: BSTR, P2: BSTR, P3: BSTR, P4: VARIANT_BOOL, P5: ptr LPHTMLWINDOW2): HRESULT {.inline, discardable.} = self.lpVtbl.open(self, P1, P2, P3, P4, P5)
proc get_self*(self: ptr IHTMLWindow2, P1: ptr LPHTMLWINDOW2): HRESULT {.inline, discardable.} = self.lpVtbl.get_self(self, P1)
proc get_top*(self: ptr IHTMLWindow2, P1: ptr LPHTMLWINDOW2): HRESULT {.inline, discardable.} = self.lpVtbl.get_top(self, P1)
proc get_window*(self: ptr IHTMLWindow2, P1: ptr LPHTMLWINDOW2): HRESULT {.inline, discardable.} = self.lpVtbl.get_window(self, P1)
proc navigate*(self: ptr IHTMLWindow2, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.navigate(self, P1)
proc put_onfocus*(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onfocus(self, P1)
proc get_onfocus*(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onfocus(self, P1)
proc put_onblur*(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onblur(self, P1)
proc get_onblur*(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onblur(self, P1)
proc put_onload*(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onload(self, P1)
proc get_onload*(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onload(self, P1)
proc put_onbeforeunload*(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onbeforeunload(self, P1)
proc get_onbeforeunload*(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onbeforeunload(self, P1)
proc put_onunload*(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onunload(self, P1)
proc get_onunload*(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onunload(self, P1)
proc put_onhelp*(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onhelp(self, P1)
proc get_onhelp*(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onhelp(self, P1)
proc put_onerror*(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onerror(self, P1)
proc get_onerror*(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onerror(self, P1)
proc put_onresize*(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onresize(self, P1)
proc get_onresize*(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onresize(self, P1)
proc put_onscroll*(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onscroll(self, P1)
proc get_onscroll*(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onscroll(self, P1)
proc get_document*(self: ptr IHTMLWindow2, P1: ptr IHTMLDocument2): HRESULT {.inline, discardable.} = self.lpVtbl.get_document(self, P1)
proc get_event*(self: ptr IHTMLWindow2, P1: ptr LPHTMLEVENTOBJ): HRESULT {.inline, discardable.} = self.lpVtbl.get_event(self, P1)
proc get_newEnum*(self: ptr IHTMLWindow2, P1: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.get_newEnum(self, P1)
proc showModalDialog*(self: ptr IHTMLWindow2, P1: BSTR, P2: ptr VARIANT, P3: ptr VARIANT, P4: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.showModalDialog(self, P1, P2, P3, P4)
proc showHelp*(self: ptr IHTMLWindow2, P1: BSTR, P2: VARIANT, P3: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.showHelp(self, P1, P2, P3)
proc get_screen*(self: ptr IHTMLWindow2, P1: ptr LPHTMLSCREEN): HRESULT {.inline, discardable.} = self.lpVtbl.get_screen(self, P1)
proc get_Option*(self: ptr IHTMLWindow2, P1: ptr LPHTMLOPTIONELEMENTFACTORY): HRESULT {.inline, discardable.} = self.lpVtbl.get_Option(self, P1)
proc focus*(self: ptr IHTMLWindow2): HRESULT {.inline, discardable.} = self.lpVtbl.focus(self)
proc get_closed*(self: ptr IHTMLWindow2, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_closed(self, P1)
proc blur*(self: ptr IHTMLWindow2): HRESULT {.inline, discardable.} = self.lpVtbl.blur(self)
proc scroll*(self: ptr IHTMLWindow2, P1: int64, P2: int64): HRESULT {.inline, discardable.} = self.lpVtbl.scroll(self, P1, P2)
proc get_clientInformation*(self: ptr IHTMLWindow2, P1: ptr LPOMNAVIGATOR): HRESULT {.inline, discardable.} = self.lpVtbl.get_clientInformation(self, P1)
proc setInterval*(self: ptr IHTMLWindow2, P1: BSTR, P2: int64, P3: ptr VARIANT, P4: ptr int64): HRESULT {.inline, discardable.} = self.lpVtbl.setInterval(self, P1, P2, P3, P4)
proc clearInterval*(self: ptr IHTMLWindow2, P1: int64): HRESULT {.inline, discardable.} = self.lpVtbl.clearInterval(self, P1)
proc put_offscreenBuffering*(self: ptr IHTMLWindow2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_offscreenBuffering(self, P1)
proc get_offscreenBuffering*(self: ptr IHTMLWindow2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_offscreenBuffering(self, P1)
proc execScript*(self: ptr IHTMLWindow2, P1: BSTR, P2: BSTR, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.execScript(self, P1, P2, P3)
proc toString*(self: ptr IHTMLWindow2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.toString(self, P1)
proc scrollBy*(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.scrollBy(self, P1, P2)
proc scrollTo*(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.scrollTo(self, P1, P2)
proc moveTo*(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.moveTo(self, P1, P2)
proc moveBy*(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.moveBy(self, P1, P2)
proc resizeTo*(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.resizeTo(self, P1, P2)
proc resizeBy*(self: ptr IHTMLWindow2, P1: LONG, P2: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.resizeBy(self, P1, P2)
proc get_external*(self: ptr IHTMLWindow2, P1: ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.get_external(self, P1)
converter winim_converter_IHTMLFrameBase*(x: ptr IHTMLFrameBase): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLFrameBase*(x: ptr IHTMLFrameBase): ptr IDispatch = cast[ptr IDispatch](x)
proc put_src*(self: ptr IHTMLFrameBase, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_src(self, P1)
proc get_src*(self: ptr IHTMLFrameBase, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_src(self, P1)
proc put_name*(self: ptr IHTMLFrameBase, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_name(self, P1)
proc get_name*(self: ptr IHTMLFrameBase, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_name(self, P1)
proc put_border*(self: ptr IHTMLFrameBase, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_border(self, P1)
proc get_border*(self: ptr IHTMLFrameBase, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_border(self, P1)
proc put_frameBorder*(self: ptr IHTMLFrameBase, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_frameBorder(self, P1)
proc get_frameBorder*(self: ptr IHTMLFrameBase, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_frameBorder(self, P1)
proc put_frameSpacing*(self: ptr IHTMLFrameBase, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_frameSpacing(self, P1)
proc get_frameSpacing*(self: ptr IHTMLFrameBase, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_frameSpacing(self, P1)
proc put_marginWidth*(self: ptr IHTMLFrameBase, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_marginWidth(self, P1)
proc get_marginWidth*(self: ptr IHTMLFrameBase, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_marginWidth(self, P1)
proc put_marginHeight*(self: ptr IHTMLFrameBase, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_marginHeight(self, P1)
proc get_marginHeight*(self: ptr IHTMLFrameBase, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_marginHeight(self, P1)
proc put_noResize*(self: ptr IHTMLFrameBase, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_noResize(self, P1)
proc get_noResize*(self: ptr IHTMLFrameBase, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_noResize(self, P1)
proc put_scrolling*(self: ptr IHTMLFrameBase, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_scrolling(self, P1)
proc get_scrolling*(self: ptr IHTMLFrameBase, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_scrolling(self, P1)
converter winim_converter_IHTMLFrameBase2*(x: ptr IHTMLFrameBase2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLFrameBase2*(x: ptr IHTMLFrameBase2): ptr IDispatch = cast[ptr IDispatch](x)
proc get_contentWindow*(self: ptr IHTMLFrameBase2, P1: ptr IHTMLWindow2): HRESULT {.inline, discardable.} = self.lpVtbl.get_contentWindow(self, P1)
proc put_onload*(self: ptr IHTMLFrameBase2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onload(self, P1)
proc get_onload*(self: ptr IHTMLFrameBase2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onload(self, P1)
proc put_onreadystatechange*(self: ptr IHTMLFrameBase2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onreadystatechange(self, P1)
proc get_onreadystatechange*(self: ptr IHTMLFrameBase2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onreadystatechange(self, P1)
proc get_readyState*(self: ptr IHTMLFrameBase2, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_readyState(self, P1)
proc put_allowTransparency*(self: ptr IHTMLFrameBase2, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_allowTransparency(self, P1)
proc get_allowTransparency*(self: ptr IHTMLFrameBase2, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_allowTransparency(self, P1)
converter winim_converter_IHTMLFrameBase3*(x: ptr IHTMLFrameBase3): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLFrameBase3*(x: ptr IHTMLFrameBase3): ptr IDispatch = cast[ptr IDispatch](x)
proc put_longDesc*(self: ptr IHTMLFrameBase3, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_longDesc(self, P1)
proc get_longDesc*(self: ptr IHTMLFrameBase3, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_longDesc(self, P1)
converter winim_converter_IHTMLBodyElement*(x: ptr IHTMLBodyElement): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLBodyElement*(x: ptr IHTMLBodyElement): ptr IDispatch = cast[ptr IDispatch](x)
proc put_background*(self: ptr IHTMLBodyElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_background(self, P1)
proc get_background*(self: ptr IHTMLBodyElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_background(self, P1)
proc put_bgProperties*(self: ptr IHTMLBodyElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_bgProperties(self, P1)
proc get_bgProperties*(self: ptr IHTMLBodyElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_bgProperties(self, P1)
proc put_leftMargin*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_leftMargin(self, P1)
proc get_leftMargin*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_leftMargin(self, P1)
proc put_topMargin*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_topMargin(self, P1)
proc get_topMargin*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_topMargin(self, P1)
proc put_rightMargin*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_rightMargin(self, P1)
proc get_rightMargin*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_rightMargin(self, P1)
proc put_bottomMargin*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_bottomMargin(self, P1)
proc get_bottomMargin*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_bottomMargin(self, P1)
proc put_noWrap*(self: ptr IHTMLBodyElement, P1: VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.put_noWrap(self, P1)
proc get_noWrap*(self: ptr IHTMLBodyElement, P1: ptr VARIANT_BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.get_noWrap(self, P1)
proc put_bgColor*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_bgColor(self, P1)
proc get_bgColor*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_bgColor(self, P1)
proc put_text*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_text(self, P1)
proc get_text*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_text(self, P1)
proc put_link*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_link(self, P1)
proc get_link*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_link(self, P1)
proc put_vLink*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_vLink(self, P1)
proc get_vLink*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_vLink(self, P1)
proc put_aLink*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_aLink(self, P1)
proc get_aLink*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_aLink(self, P1)
proc put_onload*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onload(self, P1)
proc get_onload*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onload(self, P1)
proc put_onunload*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onunload(self, P1)
proc get_onunload*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onunload(self, P1)
proc put_scroll*(self: ptr IHTMLBodyElement, P1: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_scroll(self, P1)
proc get_scroll*(self: ptr IHTMLBodyElement, P1: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_scroll(self, P1)
proc put_onselect*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onselect(self, P1)
proc get_onselect*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onselect(self, P1)
proc put_onbeforeunload*(self: ptr IHTMLBodyElement, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onbeforeunload(self, P1)
proc get_onbeforeunload*(self: ptr IHTMLBodyElement, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onbeforeunload(self, P1)
proc createTextRange*(self: ptr IHTMLBodyElement, P1: ptr IHTMLTxtRange): HRESULT {.inline, discardable.} = self.lpVtbl.createTextRange(self, P1)
converter winim_converter_IHTMLBodyElement2*(x: ptr IHTMLBodyElement2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHTMLBodyElement2*(x: ptr IHTMLBodyElement2): ptr IDispatch = cast[ptr IDispatch](x)
proc put_onbeforeprint*(self: ptr IHTMLBodyElement2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onbeforeprint(self, P1)
proc get_onbeforeprint*(self: ptr IHTMLBodyElement2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onbeforeprint(self, P1)
proc put_onafterprint*(self: ptr IHTMLBodyElement2, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.put_onafterprint(self, P1)
proc get_onafterprint*(self: ptr IHTMLBodyElement2, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_onafterprint(self, P1)

# objext/objsafe.nim

const
  INTERFACESAFE_FOR_UNTRUSTED_CALLER* = 1
  INTERFACESAFE_FOR_UNTRUSTED_DATA* = 2

type
  IObjectSafety* {.pure.} = object
    lpVtbl*: ptr IObjectSafetyVtbl
  IObjectSafetyVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetInterfaceSafetyOptions*: proc(self: ptr IObjectSafety, P1: REFIID, P2: ptr DWORD, P3: ptr DWORD): HRESULT {.stdcall.}
    SetInterfaceSafetyOptions*: proc(self: ptr IObjectSafety, P1: REFIID, P2: DWORD, P3: DWORD): HRESULT {.stdcall.}

converter winim_converter_IObjectSafety*(x: ptr IObjectSafety): ptr IUnknown = cast[ptr IUnknown](x)
proc GetInterfaceSafetyOptions*(self: ptr IObjectSafety, P1: REFIID, P2: ptr DWORD, P3: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetInterfaceSafetyOptions(self, P1, P2, P3)
proc SetInterfaceSafetyOptions*(self: ptr IObjectSafety, P1: REFIID, P2: DWORD, P3: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetInterfaceSafetyOptions(self, P1, P2, P3)

# objext/ole.nim

type
  OLE_LPCSTR* = LPCSTR

const
  OT_LINK* = 1
  OT_EMBEDDED* = 2
  OT_STATIC* = 3
  OLEVERB_PRIMARY* = 0
  OF_SET* = 1
  OF_GET* = 2
  OF_HANDLER* = 4
  # OLESTATUS* = enum
  ole_ok* = 0
  ole_wait_for_release* = 1
  ole_busy* = 2
  ole_error_protect_only* = 3
  ole_error_memory* = 4
  ole_error_stream* = 5
  ole_error_static* = 6
  ole_error_blank* = 7
  ole_error_draw* = 8
  ole_error_metafile* = 9
  ole_error_abort* = 10
  ole_error_clipboard* = 11
  ole_error_format* = 12
  ole_error_object* = 13
  ole_error_option* = 14
  ole_error_protocol* = 15
  ole_error_address* = 16
  ole_error_not_equal* = 17
  ole_error_handle* = 18
  ole_error_generic* = 19
  ole_error_class* = 20
  ole_error_syntax* = 21
  ole_error_datatype* = 22
  ole_error_palette* = 23
  ole_error_not_link* = 24
  ole_error_not_empty* = 25
  ole_error_size* = 26
  ole_error_drive* = 27
  ole_error_network* = 28
  ole_error_name* = 29
  ole_error_template* = 30
  ole_error_new* = 31
  ole_error_edit* = 32
  ole_error_open* = 33
  ole_error_not_open* = 34
  ole_error_launch* = 35
  ole_error_comm* = 36
  ole_error_terminate* = 37
  ole_error_command* = 38
  ole_error_show* = 39
  ole_error_doverb* = 40
  ole_error_advise_native* = 41
  ole_error_advise_pict* = 42
  ole_error_advise_rename* = 43
  ole_error_poke_native* = 44
  ole_error_request_native* = 45
  ole_error_request_pict* = 46
  ole_error_server_blocked* = 47
  ole_error_registration* = 48
  ole_error_already_registered* = 49
  ole_error_task* = 50
  ole_error_outofdate* = 51
  ole_error_cant_update_client* = 52
  ole_error_update* = 53
  ole_error_setdata_format* = 54
  ole_error_static_from_other_os* = 55
  ole_error_file_ver* = 56
  ole_warn_delete_data* = 1000
  # OLE_NOTIFICATION* = enum
  ole_changed* = 0
  ole_saved* = 1
  ole_closed* = 2
  ole_renamed* = 3
  ole_query_paint* = 4
  ole_release* = 5
  ole_query_retry* = 6
  # OLE_RELEASE_METHOD* = enum
  ole_none* = 0
  ole_delete* = 1
  ole_lnkpaste* = 2
  ole_embpaste* = 3
  ole_show* = 4
  ole_run* = 5
  ole_activate* = 6
  ole_update* = 7
  ole_close* = 8
  ole_reconnect* = 9
  ole_setupdateoptions* = 10
  ole_serverunlaunch* = 11
  ole_loadfromstream* = 12
  ole_setdata* = 13
  ole_requestdata* = 14
  ole_other* = 15
  ole_create* = 16
  ole_createfromtemplate* = 17
  ole_createlinkfromfile* = 18
  ole_copyfromlnk* = 19
  ole_createfromfile* = 20
  ole_createinvisible* = 21
  # OLEOPT_RENDER* = enum
  olerender_none* = 0
  olerender_draw* = 1
  olerender_format* = 2
  # OLEOPT_UPDATE* = enum
  oleupdate_always* = 0
  oleupdate_onsave* = 1
  oleupdate_oncall* = 2
  oleupdate_onclose* = 3
  # OLE_SERVER_USE* = enum
  OLE_SERVER_MULTI* = 0
  OLE_SERVER_SINGLE* = 1

type
  OLETARGETDEVICE* {.final, pure.} = object
    otdDeviceNameOffset*: USHORT
    otdDriverNameOffset*: USHORT
    otdPortNameOffset*: USHORT
    otdExtDevmodeOffset*: USHORT
    otdExtDevmodeSize*: USHORT
    otdEnvironmentOffset*: USHORT
    otdEnvironmentSize*: USHORT
    otdData*: array[1, BYTE]
  LPOLETARGETDEVICE* = ptr OLETARGETDEVICE
  OLESTATUS* = int32
  OLE_NOTIFICATION* = int32
  OLE_RELEASE_METHOD* = int32
  OLEOPT_RENDER* = int32
  OLECLIPFORMAT* = WORD
  OLEOPT_UPDATE* = int32
  HOBJECT* = HANDLE
  LHSERVER* = LONG
  LHCLIENTDOC* = LONG
  LHSERVERDOC* = LONG
  OLEOBJECTVTBL* {.final, pure.} = object
    QueryProtocol*: proc (P1: POLEOBJECT, P2: OLE_LPCSTR): pointer {.stdcall.}
    Release*: proc (P1: POLEOBJECT): OLESTATUS {.stdcall.}
    Show*: proc (P1: POLEOBJECT, P2: BOOL): OLESTATUS {.stdcall.}
    DoVerb*: proc (P1: POLEOBJECT, P2: UINT, P3: BOOL, P4: BOOL): OLESTATUS {.stdcall.}
    GetData*: proc (P1: POLEOBJECT, P2: OLECLIPFORMAT, P3: ptr HANDLE): OLESTATUS {.stdcall.}
    SetData*: proc (P1: POLEOBJECT, P2: OLECLIPFORMAT, P3: HANDLE): OLESTATUS {.stdcall.}
    SetTargetDevice*: proc (P1: POLEOBJECT, P2: HGLOBAL): OLESTATUS {.stdcall.}
    SetBounds*: proc (P1: POLEOBJECT, P2: ptr RECT): OLESTATUS {.stdcall.}
    EnumFormats*: proc (P1: POLEOBJECT, P2: OLECLIPFORMAT): OLECLIPFORMAT {.stdcall.}
    SetColorScheme*: proc (P1: POLEOBJECT, P2: ptr LOGPALETTE): OLESTATUS {.stdcall.}
    Delete*: proc (P1: POLEOBJECT): OLESTATUS {.stdcall.}
    SetHostNames*: proc (P1: POLEOBJECT, P2: OLE_LPCSTR, P3: OLE_LPCSTR): OLESTATUS {.stdcall.}
    SaveToStream*: proc (P1: POLEOBJECT, P2: LPOLESTREAM): OLESTATUS {.stdcall.}
    Clone*: proc (P1: POLEOBJECT, P2: LPOLECLIENT, P3: LHCLIENTDOC, P4: OLE_LPCSTR, P5: ptr POLEOBJECT): OLESTATUS {.stdcall.}
    CopyFromLink*: proc (P1: POLEOBJECT, P2: LPOLECLIENT, P3: LHCLIENTDOC, P4: OLE_LPCSTR, P5: ptr POLEOBJECT): OLESTATUS {.stdcall.}
    Equal*: proc (P1: POLEOBJECT, P2: POLEOBJECT): OLESTATUS {.stdcall.}
    CopyToClipboard*: proc (P1: POLEOBJECT): OLESTATUS {.stdcall.}
    Draw*: proc (P1: POLEOBJECT, P2: HDC, P3: ptr RECT, P4: ptr RECT, P5: HDC): OLESTATUS {.stdcall.}
    Activate*: proc (P1: POLEOBJECT, P2: UINT, P3: BOOL, P4: BOOL, P5: HWND, P6: ptr RECT): OLESTATUS {.stdcall.}
    Execute*: proc (P1: POLEOBJECT, P2: HGLOBAL, P3: UINT): OLESTATUS {.stdcall.}
    Close*: proc (P1: POLEOBJECT): OLESTATUS {.stdcall.}
    Update*: proc (P1: POLEOBJECT): OLESTATUS {.stdcall.}
    Reconnect*: proc (P1: POLEOBJECT): OLESTATUS {.stdcall.}
    ObjectConvert*: proc (P1: POLEOBJECT, P2: OLE_LPCSTR, P3: LPOLECLIENT, P4: LHCLIENTDOC, P5: OLE_LPCSTR, P6: POLEOBJECT): OLESTATUS {.stdcall.}
    GetLinkUpdateOptions*: proc (P1: POLEOBJECT, P2: ptr OLEOPT_UPDATE): OLESTATUS {.stdcall.}
    SetLinkUpdateOptions*: proc (P1: POLEOBJECT, P2: OLEOPT_UPDATE): OLESTATUS {.stdcall.}
    Rename*: proc (P1: POLEOBJECT, P2: OLE_LPCSTR): OLESTATUS {.stdcall.}
    QueryName*: proc (P1: POLEOBJECT, P2: LPSTR, P3: ptr UINT): OLESTATUS {.stdcall.}
    QueryType*: proc (P1: POLEOBJECT, P2: ptr LONG): OLESTATUS {.stdcall.}
    QueryBounds*: proc (P1: POLEOBJECT, P2: ptr RECT): OLESTATUS {.stdcall.}
    QuerySize*: proc (P1: POLEOBJECT, P2: ptr DWORD): OLESTATUS {.stdcall.}
    QueryOpen*: proc (P1: POLEOBJECT): OLESTATUS {.stdcall.}
    QueryOutOfDate*: proc (P1: POLEOBJECT): OLESTATUS {.stdcall.}
    QueryReleaseStatus*: proc (P1: POLEOBJECT): OLESTATUS {.stdcall.}
    QueryReleaseError*: proc (P1: POLEOBJECT): OLESTATUS {.stdcall.}
    QueryReleaseMethod*: proc (P1: POLEOBJECT): OLE_RELEASE_METHOD {.stdcall.}
    RequestData*: proc (P1: POLEOBJECT, P2: OLECLIPFORMAT): OLESTATUS {.stdcall.}
    ObjectLong*: proc (P1: POLEOBJECT, P2: UINT, P3: ptr LONG): OLESTATUS {.stdcall.}
    ChangeData*: proc (P1: POLEOBJECT, P2: HANDLE, P3: LPOLECLIENT, P4: BOOL): OLESTATUS {.stdcall.}
  LPOLEOBJECTVTBL* = ptr OLEOBJECTVTBL
  OLEOBJECT* {.final, pure.} = object
    lpvtbl*: LPOLEOBJECTVTBL
  POLEOBJECT* = ptr OLEOBJECT # renamed from LPOLEOBJECT
  OLECLIENTVTBL* {.final, pure.} = object
    CallBack*: proc (P1: LPOLECLIENT, P2: OLE_NOTIFICATION, P3: POLEOBJECT): int {.stdcall.}
  LPOLECLIENTVTBL* = ptr OLECLIENTVTBL
  OLECLIENT* {.final, pure.} = object
    lpvtbl*: LPOLECLIENTVTBL
  LPOLECLIENT* = ptr OLECLIENT
  OLESTREAMVTBL* {.final, pure.} = object
     Get*: proc (P1: LPOLESTREAM, P2: pointer, P3: DWORD): DWORD {.stdcall.}
     Put*: proc (P1: LPOLESTREAM, P2: pointer, P3: DWORD): DWORD {.stdcall.}
  LPOLESTREAMVTBL* = ptr OLESTREAMVTBL
  OLESTREAM* {.final, pure.} = object
    lpstbl*: LPOLESTREAMVTBL
  LPOLESTREAM* = ptr OLESTREAM
  OLE_SERVER_USE* = int32
  OLESERVERVTBL* {.final, pure.} = object
    Open*: proc (P1: LPOLESERVER, P2: LHSERVERDOC, P3: OLE_LPCSTR, P4: ptr LPOLESERVERDOC): OLESTATUS {.stdcall.}
    Create*: proc (P1: LPOLESERVER, P2: LHSERVERDOC, P3: OLE_LPCSTR, P4: OLE_LPCSTR, P5: ptr LPOLESERVERDOC): OLESTATUS {.stdcall.}
    CreateFromTemplate*: proc (P1: LPOLESERVER, P2: LHSERVERDOC, P3: OLE_LPCSTR, P4: OLE_LPCSTR, P5: OLE_LPCSTR, P6: ptr LPOLESERVERDOC): OLESTATUS {.stdcall.}
    Edit*: proc (P1: LPOLESERVER, P2: LHSERVERDOC, P3: OLE_LPCSTR, P4: OLE_LPCSTR, P5: ptr LPOLESERVERDOC): OLESTATUS {.stdcall.}
    Exit*: proc (P1: LPOLESERVER): OLESTATUS {.stdcall.}
    Release*: proc (P1: LPOLESERVER): OLESTATUS {.stdcall.}
    Execute*: proc (P1: LPOLESERVER, P2: HGLOBAL): OLESTATUS {.stdcall.}
  LPOLESERVERVTBL* = ptr OLESERVERVTBL
  OLESERVER* {.final, pure.} = object
    lpvtbl*: LPOLESERVERVTBL
  LPOLESERVER* = ptr OLESERVER
  OLESERVERDOCVTBL* {.final, pure.} = object
    Save*: proc (P1: LPOLESERVERDOC): OLESTATUS {.stdcall.}
    Close*: proc (P1: LPOLESERVERDOC): OLESTATUS {.stdcall.}
    SetHostNames*: proc (P1: LPOLESERVERDOC, P2: OLE_LPCSTR, P3: OLE_LPCSTR): OLESTATUS {.stdcall.}
    SetDocDimensions*: proc (P1: LPOLESERVERDOC, P2: ptr RECT): OLESTATUS {.stdcall.}
    GetObject*: proc (P1: LPOLESERVERDOC, P2: OLE_LPCSTR, P3: ptr POLEOBJECT, P4: LPOLECLIENT): OLESTATUS {.stdcall.}
    Release*: proc (P1: LPOLESERVERDOC): OLESTATUS {.stdcall.}
    SetColorScheme*: proc (P1: LPOLESERVERDOC, P2: ptr LOGPALETTE): OLESTATUS {.stdcall.}
    Execute*: proc (P1: LPOLESERVERDOC, P2: HGLOBAL): OLESTATUS {.stdcall.}
  LPOLESERVERDOCVTBL* = ptr OLESERVERDOCVTBL
  OLESERVERDOC* {.final, pure.} = object
    lpvtbl*: LPOLESERVERDOCVTBL
  LPOLESERVERDOC* = ptr OLESERVERDOC

proc OleDelete*(P1: POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRelease*(P1: POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleSaveToStream*(P1: POLEOBJECT, P2: LPOLESTREAM): OLESTATUS {.winapi, dynlib: "ole32", importc.}
proc OleEqual*(P1: POLEOBJECT, P2: POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleCopyToClipboard*(P1: POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleSetHostNames*(P1: POLEOBJECT, P2: LPCSTR, P3: LPCSTR): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleSetTargetDevice*(P1: POLEOBJECT, P2: HGLOBAL): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleSetBounds*(P1: POLEOBJECT, P2: LPCRECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleSetColorScheme*(P1: POLEOBJECT, P2: ptr LOGPALETTE): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleQueryBounds*(P1: POLEOBJECT, P2: ptr RECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleQuerySize*(P1: POLEOBJECT, P2: ptr DWORD): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleDraw*(P1: POLEOBJECT, P2: HDC, P3: LPCRECT, P4: LPCRECT, P5: HDC): OLESTATUS {.winapi, dynlib: "ole32", importc.}
proc OleQueryOpen*(P1: POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleActivate*(P1: POLEOBJECT, P2: UINT, P3: BOOL, P4: BOOL, P5: HWND, P6: LPCRECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleExecute*(P1: POLEOBJECT, P2: HGLOBAL, P3: UINT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleClose*(P1: POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleUpdate*(P1: POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleReconnect*(P1: POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleGetLinkUpdateOptions*(P1: POLEOBJECT, P2: ptr OLEOPT_UPDATE): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleSetLinkUpdateOptions*(P1: POLEOBJECT, P2: OLEOPT_UPDATE): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleQueryProtocol*(P1: POLEOBJECT, P2: LPCSTR): pointer {.winapi, dynlib: "olecli32", importc.}
proc OleQueryReleaseStatus*(P1: POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleQueryReleaseError*(P1: POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleQueryReleaseMethod*(P1: POLEOBJECT): OLE_RELEASE_METHOD {.winapi, dynlib: "olecli32", importc.}
proc OleQueryType*(P1: POLEOBJECT, P2: ptr LONG): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleQueryClientVersion*(): DWORD {.winapi, dynlib: "olecli32", importc.}
proc OleQueryServerVersion*(): DWORD {.winapi, dynlib: "olecli32", importc.}
proc OleEnumFormats*(P1: POLEOBJECT, P2: OLECLIPFORMAT): OLECLIPFORMAT {.winapi, dynlib: "olecli32", importc.}
proc OleGetData*(P1: POLEOBJECT, P2: OLECLIPFORMAT, P3: ptr HANDLE): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleSetData*(P1: POLEOBJECT, P2: OLECLIPFORMAT, P3: HANDLE): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleQueryOutOfDate*(P1: POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRequestData*(P1: POLEOBJECT, P2: OLECLIPFORMAT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleQueryLinkFromClip*(P1: LPCSTR, P2: OLEOPT_RENDER, P3: OLECLIPFORMAT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleQueryCreateFromClip*(P1: LPCSTR, P2: OLEOPT_RENDER, P3: OLECLIPFORMAT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleCreateFromClip*(P1: LPCSTR, P2: LPOLECLIENT, P3: LHCLIENTDOC, P4: LPCSTR, P5: ptr POLEOBJECT, P6: OLEOPT_RENDER, P7: OLECLIPFORMAT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleCreateLinkFromClip*(P1: LPCSTR, P2: LPOLECLIENT, P3: LHCLIENTDOC, P4: LPCSTR, P5: ptr POLEOBJECT, P6: OLEOPT_RENDER, P7: OLECLIPFORMAT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleCreateFromFile*(P1: LPCSTR, P2: LPOLECLIENT, P3: LPCSTR, P4: LPCSTR, P5: LHCLIENTDOC, P6: LPCSTR, P7: ptr POLEOBJECT, P8: OLEOPT_RENDER, P9: OLECLIPFORMAT): OLESTATUS {.winapi, dynlib: "ole32", importc.}
proc OleCreateLinkFromFile*(P1: LPCSTR, P2: LPOLECLIENT, P3: LPCSTR, P4: LPCSTR, P5: LPCSTR, P6: LHCLIENTDOC, P7: LPCSTR, P8: ptr POLEOBJECT, P9: OLEOPT_RENDER, P10: OLECLIPFORMAT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleLoadFromStream*(P1: LPOLESTREAM, P2: LPCSTR, P3: LPOLECLIENT, P4: LHCLIENTDOC, P5: LPCSTR, P6: ptr POLEOBJECT): OLESTATUS {.winapi, dynlib: "ole32", importc.}
proc OleCreate*(P1: LPCSTR, P2: LPOLECLIENT, P3: LPCSTR, P4: LHCLIENTDOC, P5: LPCSTR, P6: ptr POLEOBJECT, P7: OLEOPT_RENDER, P8: OLECLIPFORMAT): OLESTATUS {.winapi, dynlib: "ole32", importc.}
proc OleCreateInvisible*(P1: LPCSTR, P2: LPOLECLIENT, P3: LPCSTR, P4: LHCLIENTDOC, P5: LPCSTR, P6: ptr POLEOBJECT, P7: OLEOPT_RENDER, P8: OLECLIPFORMAT, P9: BOOL): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleCreateFromTemplate*(P1: LPCSTR, P2: LPOLECLIENT, P3: LPCSTR, P4: LHCLIENTDOC, P5: LPCSTR, P6: ptr POLEOBJECT, P7: OLEOPT_RENDER, P8: OLECLIPFORMAT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleClone*(P1: POLEOBJECT, P2: LPOLECLIENT, P3: LHCLIENTDOC, P4: LPCSTR, P5: ptr POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleCopyFromLink*(P1: POLEOBJECT, P2: LPCSTR, P3: LPOLECLIENT, P4: LHCLIENTDOC, P5: LPCSTR, P6: ptr POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleObjectConvert*(P1: POLEOBJECT, P2: LPCSTR, P3: LPOLECLIENT, P4: LHCLIENTDOC, P5: LPCSTR, P6: ptr POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRename*(P1: POLEOBJECT, P2: LPCSTR): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleQueryName*(P1: POLEOBJECT, P2: LPSTR, P3: ptr UINT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRevokeObject*(P1: LPOLECLIENT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleIsDcMeta*(P1: HDC): BOOL {.winapi, dynlib: "olecli32", importc.}
proc OleRegisterClientDoc*(P1: LPCSTR, P2: LPCSTR, P3: LONG, P4: ptr LHCLIENTDOC): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRevokeClientDoc*(P1: LHCLIENTDOC): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRenameClientDoc*(P1: LHCLIENTDOC, P2: LPCSTR): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRevertClientDoc*(P1: LHCLIENTDOC): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleSavedClientDoc*(P1: LHCLIENTDOC): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleEnumObjects*(P1: LHCLIENTDOC, P2: ptr POLEOBJECT): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRegisterServer*(P1: LPCSTR, P2: LPOLESERVER, P3: ptr LHSERVER, P4: HINSTANCE, P5: OLE_SERVER_USE): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRevokeServer*(P1: LHSERVER): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleBlockServer*(P1: LHSERVER): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleUnblockServer*(P1: LHSERVER, P2: ptr BOOL): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleLockServer*(P1: POLEOBJECT, P2: ptr LHSERVER): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleUnlockServer*(P1: LHSERVER): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRegisterServerDoc*(P1: LHSERVER, P2: LPCSTR, P3: LPOLESERVERDOC, P4: ptr LHSERVERDOC): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRevokeServerDoc*(P1: LHSERVERDOC): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRenameServerDoc*(P1: LHSERVERDOC, P2: LPCSTR): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleRevertServerDoc*(P1: LHSERVERDOC): OLESTATUS {.winapi, dynlib: "olecli32", importc.}
proc OleSavedServerDoc*(P1: LHSERVERDOC): OLESTATUS {.winapi, dynlib: "olecli32", importc.}

# objext/ole2.nim

const
  E_DRAW* = VIEW_E_DRAW
  DATA_E_FORMATETC* = DV_E_FORMATETC
  OLEIVERB_PRIMARY* = 0
  OLEIVERB_SHOW* = -1
  OLEIVERB_OPEN* = -2
  OLEIVERB_HIDE* = -3
  OLEIVERB_UIACTIVATE* = -4
  OLEIVERB_INPLACEACTIVATE* = -5
  OLEIVERB_DISCARDUNDOSTATE* = -6
  EMBDHLP_INPROC_HANDLER* = 0x0000
  EMBDHLP_INPROC_SERVER* = 0x0001
  EMBDHLP_CREATENOW* = 0x00000000
  EMBDHLP_DELAYCREATE* = 0x00010000

# proc CreateDataAdviseHolder*(P1: ptr LPDATAADVISEHOLDER): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleBuildVersion*(): DWORD {.winapi, dynlib: "ole32", importc.}
proc ReadClassStg*(P1: LPSTORAGE, P2: ptr CLSID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc WriteClassStg*(P1: LPSTORAGE, P2: REFCLSID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc ReadClassStm*(P1: LPSTREAM, P2: ptr CLSID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc WriteClassStm*(P1: LPSTREAM, P2: REFCLSID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc WriteFmtUserTypeStg*(P1: LPSTORAGE, P2: CLIPFORMAT, P3: LPOLESTR): HRESULT {.winapi, dynlib: "ole32", importc.}
proc ReadFmtUserTypeStg*(P1: LPSTORAGE, P2: ptr CLIPFORMAT, P3: ptr LPOLESTR): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleInitialize*(P1: PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleUninitialize*(): void {.winapi, dynlib: "ole32", importc.}
proc OleQueryLinkFromData*(P1: LPDATAOBJECT): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleQueryCreateFromData*(P1: LPDATAOBJECT): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleCreate*(P1: REFCLSID, P2: REFIID, P3: DWORD, P4: LPFORMATETC, P5: LPOLECLIENTSITE, P6: LPSTORAGE, P7: ptr PVOID): HRESULT {.winapi, dynlib: "olecli32", importc.}
proc OleCreateFromData*(P1: LPDATAOBJECT, P2: REFIID, P3: DWORD, P4: LPFORMATETC, P5: LPOLECLIENTSITE, P6: LPSTORAGE, P7: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleCreateLinkFromData*(P1: LPDATAOBJECT, P2: REFIID, P3: DWORD, P4: LPFORMATETC, P5: LPOLECLIENTSITE, P6: LPSTORAGE, P7: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleCreateStaticFromData*(P1: LPDATAOBJECT, P2: REFIID, P3: DWORD, P4: LPFORMATETC, P5: LPOLECLIENTSITE, P6: LPSTORAGE, P7: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleCreateLink*(P1: LPMONIKER, P2: REFIID, P3: DWORD, P4: LPFORMATETC, P5: LPOLECLIENTSITE, P6: LPSTORAGE, P7: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleCreateLinkToFile*(P1: LPCOLESTR, P2: REFIID, P3: DWORD, P4: LPFORMATETC, P5: LPOLECLIENTSITE, P6: LPSTORAGE, P7: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleCreateFromFile*(P1: REFCLSID, P2: LPCOLESTR, P3: REFIID, P4: DWORD, P5: LPFORMATETC, P6: LPOLECLIENTSITE, P7: LPSTORAGE, P8: ptr PVOID): HRESULT {.winapi, dynlib: "olecli32", importc.}
proc OleLoad*(P1: LPSTORAGE, P2: REFIID, P3: LPOLECLIENTSITE, P4: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleSave*(P1: LPPERSISTSTORAGE, P2: LPSTORAGE, P3: BOOL): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleLoadFromStream*(P1: LPSTREAM, P2: REFIID, P3: ptr PVOID): HRESULT {.winapi, dynlib: "olecli32", importc.}
proc OleSaveToStream*(P1: LPPERSISTSTREAM, P2: LPSTREAM): HRESULT {.winapi, dynlib: "olecli32", importc.}
proc OleSetContainedObject*(P1: LPUNKNOWN, P2: BOOL): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleNoteObjectVisible*(P1: LPUNKNOWN, P2: BOOL): HRESULT {.winapi, dynlib: "ole32", importc.}
proc RegisterDragDrop*(P1: HWND, P2: LPDROPTARGET): HRESULT {.winapi, dynlib: "ole32", importc.}
proc RevokeDragDrop*(P1: HWND): HRESULT {.winapi, dynlib: "ole32", importc.}
proc DoDragDrop*(P1: LPDATAOBJECT, P2: LPDROPSOURCE, P3: DWORD, P4: PDWORD): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleSetClipboard*(P1: LPDATAOBJECT): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleGetClipboard*(P1: ptr LPDATAOBJECT): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleFlushClipboard*(): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleIsCurrentClipboard*(P1: LPDATAOBJECT): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleCreateMenuDescriptor*(P1: HMENU, P2: LPOLEMENUGROUPWIDTHS): HOLEMENU {.winapi, dynlib: "ole32", importc.}
proc OleSetMenuDescriptor*(P1: HOLEMENU, P2: HWND, P3: HWND, P4: LPOLEINPLACEFRAME, P5: LPOLEINPLACEACTIVEOBJECT): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleDestroyMenuDescriptor*(P1: HOLEMENU): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleTranslateAccelerator*(P1: LPOLEINPLACEFRAME, P2: LPOLEINPLACEFRAMEINFO, P3: LPMSG): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleDuplicateData*(P1: HANDLE, P2: CLIPFORMAT, P3: UINT): HANDLE {.winapi, dynlib: "ole32", importc.}
proc OleDraw*(P1: LPUNKNOWN, P2: DWORD, P3: HDC, P4: LPCRECT): HRESULT {.winapi, dynlib: "olecli32", importc.}
proc OleRun*(P1: LPUNKNOWN): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleIsRunning*(P1: LPOLEOBJECT): BOOL {.winapi, dynlib: "ole32", importc.}
proc OleLockRunning*(P1: LPUNKNOWN, P2: BOOL, P3: BOOL): HRESULT {.winapi, dynlib: "ole32", importc.}
proc ReleaseStgMedium*(P1: LPSTGMEDIUM): void {.winapi, dynlib: "ole32", importc.}
proc CreateOleAdviseHolder*(P1: ptr LPOLEADVISEHOLDER): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleCreateDefaultHandler*(P1: REFCLSID, P2: LPUNKNOWN, P3: REFIID, P4: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleCreateEmbeddingHelper*(P1: REFCLSID, P2: LPUNKNOWN, P3: DWORD, P4: LPCLASSFACTORY, P5: REFIID, P6: ptr PVOID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc IsAccelerator*(P1: HACCEL, P2: int32, P3: LPMSG, P4: ptr WORD): BOOL {.winapi, dynlib: "ole32", importc.}
proc OleGetIconOfFile*(P1: LPOLESTR, P2: BOOL): HGLOBAL {.winapi, dynlib: "ole32", importc.}
proc OleGetIconOfClass*(P1: REFCLSID, P2: LPOLESTR, P3: BOOL): HGLOBAL {.winapi, dynlib: "ole32", importc.}
proc OleMetafilePictFromIconAndLabel*(P1: HICON, P2: LPOLESTR, P3: LPOLESTR, P4: UINT): HGLOBAL {.winapi, dynlib: "ole32", importc.}
proc OleRegGetUserType*(P1: REFCLSID, P2: DWORD, P3: ptr LPOLESTR): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleRegGetMiscStatus*(P1: REFCLSID, P2: DWORD, P3: ptr DWORD): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleRegEnumFormatEtc*(P1: REFCLSID, P2: DWORD, P3: ptr LPENUMFORMATETC): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleRegEnumVerbs*(P1: REFCLSID, P2: ptr LPENUMOLEVERB): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleConvertOLESTREAMToIStorage*(P1: LPOLESTREAM, P2: LPSTORAGE, P3: ptr DVTARGETDEVICE): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleConvertIStorageToOLESTREAM*(P1: LPSTORAGE, P2: LPOLESTREAM): HRESULT {.winapi, dynlib: "ole32", importc.}
proc GetHGlobalFromILockBytes*(P1: LPLOCKBYTES, P2: ptr HGLOBAL): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CreateILockBytesOnHGlobal*(P1: HGLOBAL, P2: BOOL, P3: ptr LPLOCKBYTES): HRESULT {.winapi, dynlib: "ole32", importc.}
proc GetHGlobalFromStream*(P1: LPSTREAM, P2: ptr HGLOBAL): HRESULT {.winapi, dynlib: "ole32", importc.}
proc CreateStreamOnHGlobal*(P1: HGLOBAL, P2: BOOL, P3: ptr LPSTREAM): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleDoAutoConvert*(P1: LPSTORAGE, P2: LPCLSID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleGetAutoConvert*(P1: REFCLSID, P2: LPCLSID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleSetAutoConvert*(P1: REFCLSID, P2: REFCLSID): HRESULT {.winapi, dynlib: "ole32", importc.}
proc GetConvertStg*(P1: LPSTORAGE): HRESULT {.winapi, dynlib: "ole32", importc.}
proc SetConvertStg*(P1: LPSTORAGE, P2: BOOL): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleConvertIStorageToOLESTREAMEx*(P1: LPSTORAGE, P2: CLIPFORMAT, P3: LONG, P4: LONG, P5: DWORD, P6: LPSTGMEDIUM, P7: LPOLESTREAM): HRESULT {.winapi, dynlib: "ole32", importc.}
proc OleConvertOLESTREAMToIStorageEx*(P1: LPOLESTREAM, P2: LPSTORAGE, P3: ptr CLIPFORMAT, P4: ptr LONG, P5: ptr LONG, P6: ptr DWORD, P7: LPSTGMEDIUM): HRESULT {.winapi, dynlib: "ole32", importc.}

# objext/oleacc.nim
const
  # SELFLAG* = enum
  SELFLAG_NONE* = 0
  SELFLAG_TAKEFOCUS* = 1
  SELFLAG_TAKESELECTION* = 2
  SELFLAG_EXTENDSELECTION* = 4
  SELFLAG_ADDSELECTION* = 8
  SELFLAG_REMOVESELECTION* = 16

const
  DISPID_ACC_PARENT* = -5000
  DISPID_ACC_CHILDCOUNT* = -5001
  DISPID_ACC_CHILD* = -5002
  DISPID_ACC_NAME* = -5003
  DISPID_ACC_VALUE* = -5004
  DISPID_ACC_DESCRIPTION* = -5005
  DISPID_ACC_ROLE* = -5006
  DISPID_ACC_STATE* = -5007
  DISPID_ACC_HELP* = -5008
  DISPID_ACC_HELPTOPIC* = -5009
  DISPID_ACC_KEYBOARDSHORTCUT* = -5010
  DISPID_ACC_FOCUS* = -5011
  DISPID_ACC_SELECTION* = -5012
  DISPID_ACC_DEFAULTACTION* = -5013
  DISPID_ACC_SELECT* = -5014
  DISPID_ACC_LOCATION* = -5015
  DISPID_ACC_NAVIGATE* = -5016
  DISPID_ACC_HITTEST* = -5017
  DISPID_ACC_DODEFAULTACTION* = -5018
  NAVDIR_UP* = 1
  NAVDIR_DOWN* = 2
  NAVDIR_LEFT* = 3
  NAVDIR_RIGHT* = 4
  NAVDIR_NEXT* = 5
  NAVDIR_PREVIOUS* = 6
  NAVDIR_FIRSTCHILD* = 7
  NAVDIR_LASTCHILD* = 8
  ROLE_SYSTEM_TITLEBAR* = 1
  ROLE_SYSTEM_MENUBAR* = 2
  ROLE_SYSTEM_SCROLLBAR* = 3
  ROLE_SYSTEM_GRIP* = 4
  ROLE_SYSTEM_SOUND* = 5
  ROLE_SYSTEM_CURSOR* = 6
  ROLE_SYSTEM_CARET* = 7
  ROLE_SYSTEM_ALERT* = 8
  ROLE_SYSTEM_WINDOW* = 9
  ROLE_SYSTEM_CLIENT* = 10
  ROLE_SYSTEM_MENUPOPUP* = 11
  ROLE_SYSTEM_MENUITEM* = 12
  ROLE_SYSTEM_TOOLTIP* = 13
  ROLE_SYSTEM_APPLICATION* = 14
  ROLE_SYSTEM_DOCUMENT* = 15
  ROLE_SYSTEM_PANE* = 16
  ROLE_SYSTEM_CHART* = 17
  ROLE_SYSTEM_DIALOG* = 18
  ROLE_SYSTEM_BORDER* = 19
  ROLE_SYSTEM_GROUPING* = 20
  ROLE_SYSTEM_SEPARATOR* = 21
  ROLE_SYSTEM_TOOLBAR* = 22
  ROLE_SYSTEM_STATUSBAR* = 23
  ROLE_SYSTEM_TABLE* = 24
  ROLE_SYSTEM_COLUMNHEADER* = 25
  ROLE_SYSTEM_ROWHEADER* = 26
  ROLE_SYSTEM_COLUMN* = 27
  ROLE_SYSTEM_ROW* = 28
  ROLE_SYSTEM_CELL* = 29
  ROLE_SYSTEM_LINK* = 30
  ROLE_SYSTEM_HELPBALLOON* = 31
  ROLE_SYSTEM_CHARACTER* = 32
  ROLE_SYSTEM_LIST* = 33
  ROLE_SYSTEM_LISTITEM* = 34
  ROLE_SYSTEM_OUTLINE* = 35
  ROLE_SYSTEM_OUTLINEITEM* = 36
  ROLE_SYSTEM_PAGETAB* = 37
  ROLE_SYSTEM_PROPERTYPAGE* = 38
  ROLE_SYSTEM_INDICATOR* = 39
  ROLE_SYSTEM_GRAPHIC* = 40
  ROLE_SYSTEM_STATICTEXT* = 41
  ROLE_SYSTEM_TEXT* = 42
  ROLE_SYSTEM_PUSHBUTTON* = 43
  ROLE_SYSTEM_CHECKBUTTON* = 44
  ROLE_SYSTEM_RADIOBUTTON* = 45
  ROLE_SYSTEM_COMBOBOX* = 46
  ROLE_SYSTEM_DROPLIST* = 47
  ROLE_SYSTEM_PROGRESSBAR* = 48
  ROLE_SYSTEM_DIAL* = 49
  ROLE_SYSTEM_HOTKEYFIELD* = 50
  ROLE_SYSTEM_SLIDER* = 51
  ROLE_SYSTEM_SPINBUTTON* = 52
  ROLE_SYSTEM_DIAGRAM* = 53
  ROLE_SYSTEM_ANIMATION* = 54
  ROLE_SYSTEM_EQUATION* = 55
  ROLE_SYSTEM_BUTTONDROPDOWN* = 56
  ROLE_SYSTEM_BUTTONMENU* = 57
  ROLE_SYSTEM_BUTTONDROPDOWNGRID* = 58
  ROLE_SYSTEM_WHITESPACE* = 59
  ROLE_SYSTEM_PAGETABLIST* = 60
  ROLE_SYSTEM_CLOCK* = 61
  STATE_SYSTEM_UNAVAILABLE* = 0x00000001
  STATE_SYSTEM_SELECTED* = 0x00000002
  STATE_SYSTEM_FOCUSED* = 0x00000004
  STATE_SYSTEM_PRESSED* = 0x00000008
  STATE_SYSTEM_CHECKED* = 0x00000010
  STATE_SYSTEM_MIXED* = 0x00000020
  STATE_SYSTEM_READONLY* = 0x00000040
  STATE_SYSTEM_HOTTRACKED* = 0x00000080
  STATE_SYSTEM_DEFAULT* = 0x00000100
  STATE_SYSTEM_EXPANDED* = 0x00000200
  STATE_SYSTEM_COLLAPSED* = 0x00000400
  STATE_SYSTEM_BUSY* = 0x00000800
  STATE_SYSTEM_FLOATING* = 0x00001000
  STATE_SYSTEM_MARQUEED* = 0x00002000
  STATE_SYSTEM_ANIMATED* = 0x00004000
  STATE_SYSTEM_INVISIBLE* = 0x00008000
  STATE_SYSTEM_OFFSCREEN* = 0x00010000
  STATE_SYSTEM_SIZEABLE* = 0x00020000
  STATE_SYSTEM_MOVEABLE* = 0x00040000
  STATE_SYSTEM_SELFVOICING* = 0x00080000
  STATE_SYSTEM_FOCUSABLE* = 0x00100000
  STATE_SYSTEM_SELECTABLE* = 0x00200000
  STATE_SYSTEM_LINKED* = 0x00400000
  STATE_SYSTEM_TRAVERSED* = 0x00800000
  STATE_SYSTEM_MULTISELECTABLE* = 0x01000000
  STATE_SYSTEM_EXTSELECTABLE* = 0x02000000
  STATE_SYSTEM_ALERT_LOW* = 0x04000000
  STATE_SYSTEM_ALERT_MEDIUM* = 0x08000000
  STATE_SYSTEM_ALERT_HIGH* = 0x10000000
  STATE_SYSTEM_VALID* = 0x1fffffff

type
  SELFLAG* = int32

const
  SELFLAG_VALID* = 0x0000001F

type
  IAccessible* {.pure.} = object
    lpVtbl*: ptr IAccessibleVtbl
  IAccessibleVtbl* {.pure, inheritable.} = object of IDispatchVtbl
    get_accParent*: proc(self: ptr IAccessible, P1: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_accChildCount*: proc(self: ptr IAccessible, P1: ptr int32): HRESULT {.stdcall.}
    get_accChild*: proc(self: ptr IAccessible, P1: VARIANT, P2: ptr ptr IDispatch): HRESULT {.stdcall.}
    get_accName*: proc(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.stdcall.}
    get_accValue*: proc(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.stdcall.}
    get_accDescription*: proc(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.stdcall.}
    get_accRole*: proc(self: ptr IAccessible, P1: VARIANT, P2: ptr VARIANT): HRESULT {.stdcall.}
    get_accState*: proc(self: ptr IAccessible, P1: VARIANT, P2: ptr VARIANT): HRESULT {.stdcall.}
    get_accHelp*: proc(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.stdcall.}
    get_accHelpTopic*: proc(self: ptr IAccessible, P1: ptr BSTR, P2: VARIANT, P3: ptr int32): HRESULT {.stdcall.}
    get_accKeyboardShortcut*: proc(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.stdcall.}
    get_accFocus*: proc(self: ptr IAccessible, P1: ptr VARIANT): HRESULT {.stdcall.}
    get_accSelection*: proc(self: ptr IAccessible, P1: ptr VARIANT): HRESULT {.stdcall.}
    get_accDefaultAction*: proc(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.stdcall.}
    accSelect*: proc(self: ptr IAccessible, P1: int32, P2: VARIANT): HRESULT {.stdcall.}
    accLocation*: proc(self: ptr IAccessible, P1: ptr int32, P2: ptr int32, P3: ptr int32, P4: ptr int32, P5: VARIANT): HRESULT {.stdcall.}
    accNavigate*: proc(self: ptr IAccessible, P1: int32, P2: VARIANT, P3: ptr VARIANT): HRESULT {.stdcall.}
    accHitTest*: proc(self: ptr IAccessible, P1: int32, P2: int32, P3: ptr VARIANT): HRESULT {.stdcall.}
    accDoDefaultAction*: proc(self: ptr IAccessible, P1: VARIANT): HRESULT {.stdcall.}
    put_accName*: proc(self: ptr IAccessible, P1: VARIANT, P2: BSTR): HRESULT {.stdcall.}
    put_accValue*: proc(self: ptr IAccessible, P1: VARIANT, P2: BSTR): HRESULT {.stdcall.}
  LPACCESSIBLE* = ptr IAccessible

proc AccessibleChildren*(P1: ptr IAccessible, P2: LONG, P3: LONG, P4: ptr VARIANT, P5: ptr LONG): HRESULT {.winapi, dynlib: "oleacc", importc.}
proc AccessibleObjectFromEvent*(P1: HWND, P2: DWORD, P3: DWORD, P4: ptr IAccessible, P5: ptr VARIANT): HRESULT {.winapi, dynlib: "oleacc", importc.}
proc AccessibleObjectFromPoint*(P1: POINT, P2: ptr ptr IAccessible, P3: ptr VARIANT): HRESULT {.winapi, dynlib: "oleacc", importc.}
proc AccessibleObjectFromWindow*(P1: HWND, P2: DWORD, P3: REFIID, P4: ptr pointer): HRESULT {.winapi, dynlib: "oleacc", importc.}
proc CreateStdAccessibleObject*(P1: HWND, P2: LONG, P3: REFIID, P4: ptr pointer): HRESULT {.winapi, dynlib: "oleacc", importc.}
proc CreateStdAccessibleProxyA*(P1: HWND, P2: LPCSTR, P3: LONG, P4: REFIID, P5: ptr pointer): HRESULT {.winapi, dynlib: "oleacc", importc.}
proc CreateStdAccessibleProxyW*(P1: HWND, P2: LPCWSTR, P3: LONG, P4: REFIID, P5: ptr pointer): HRESULT {.winapi, dynlib: "oleacc", importc.}
proc GetOleaccVersionInfo*(P1: ptr DWORD, P2: ptr DWORD): void {.winapi, dynlib: "oleacc", importc.}
proc GetRoleTextA*(P1: DWORD, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "oleacc", importc.}
proc GetRoleTextW*(P1: DWORD, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "oleacc", importc.}
proc GetStateTextA*(P1: DWORD, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "oleacc", importc.}
proc GetStateTextW*(P1: DWORD, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "oleacc", importc.}
proc LresultFromObject*(P1: REFIID, P2: WPARAM, P3: LPUNKNOWN): LRESULT {.winapi, dynlib: "oleacc", importc.}
proc ObjectFromLresult*(P1: LRESULT, P2: REFIID, P3: WPARAM, P4: ptr pointer): HRESULT {.winapi, dynlib: "oleacc", importc.}
proc WindowFromAccessibleObject*(P1: ptr IAccessible, P2: ptr HWND): HRESULT {.winapi, dynlib: "oleacc", importc.}

when not defined(winansi):
  proc CreateStdAccessibleProxy*(P1: HWND, P2: LPCWSTR, P3: LONG, P4: REFIID, P5: ptr pointer): HRESULT {.winapi, dynlib: "oleacc", importc: "CreateStdAccessibleProxyW".}
  proc GetRoleText*(P1: DWORD, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "oleacc", importc: "GetRoleTextW".}
  proc GetStateText*(P1: DWORD, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "oleacc", importc: "GetStateTextW".}

else:
  proc CreateStdAccessibleProxy*(P1: HWND, P2: LPCSTR, P3: LONG, P4: REFIID, P5: ptr pointer): HRESULT {.winapi, dynlib: "oleacc", importc: "CreateStdAccessibleProxyA".}
  proc GetRoleText*(P1: DWORD, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "oleacc", importc: "GetRoleTextA".}
  proc GetStateText*(P1: DWORD, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "oleacc", importc: "GetStateTextA".}

converter winim_converter_IAccessible*(x: ptr IAccessible): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IAccessible*(x: ptr IAccessible): ptr IDispatch = cast[ptr IDispatch](x)
proc get_accParent*(self: ptr IAccessible, P1: ptr ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.get_accParent(self, P1)
proc get_accChildCount*(self: ptr IAccessible, P1: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.get_accChildCount(self, P1)
proc get_accChild*(self: ptr IAccessible, P1: VARIANT, P2: ptr ptr IDispatch): HRESULT {.inline, discardable.} = self.lpVtbl.get_accChild(self, P1, P2)
proc get_accName*(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_accName(self, P1, P2)
proc get_accValue*(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_accValue(self, P1, P2)
proc get_accDescription*(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_accDescription(self, P1, P2)
proc get_accRole*(self: ptr IAccessible, P1: VARIANT, P2: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_accRole(self, P1, P2)
proc get_accState*(self: ptr IAccessible, P1: VARIANT, P2: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_accState(self, P1, P2)
proc get_accHelp*(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_accHelp(self, P1, P2)
proc get_accHelpTopic*(self: ptr IAccessible, P1: ptr BSTR, P2: VARIANT, P3: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.get_accHelpTopic(self, P1, P2, P3)
proc get_accKeyboardShortcut*(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_accKeyboardShortcut(self, P1, P2)
proc get_accFocus*(self: ptr IAccessible, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_accFocus(self, P1)
proc get_accSelection*(self: ptr IAccessible, P1: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.get_accSelection(self, P1)
proc get_accDefaultAction*(self: ptr IAccessible, P1: VARIANT, P2: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.get_accDefaultAction(self, P1, P2)
proc accSelect*(self: ptr IAccessible, P1: int32, P2: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.accSelect(self, P1, P2)
proc accLocation*(self: ptr IAccessible, P1: ptr int32, P2: ptr int32, P3: ptr int32, P4: ptr int32, P5: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.accLocation(self, P1, P2, P3, P4, P5)
proc accNavigate*(self: ptr IAccessible, P1: int32, P2: VARIANT, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.accNavigate(self, P1, P2, P3)
proc accHitTest*(self: ptr IAccessible, P1: int32, P2: int32, P3: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.accHitTest(self, P1, P2, P3)
proc accDoDefaultAction*(self: ptr IAccessible, P1: VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.accDoDefaultAction(self, P1)
proc put_accName*(self: ptr IAccessible, P1: VARIANT, P2: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_accName(self, P1, P2)
proc put_accValue*(self: ptr IAccessible, P1: VARIANT, P2: BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.put_accValue(self, P1, P2)

# objext/oleauto.nim

const
  STDOLE_MAJORVERNUM* = 1
  STDOLE_MINORVERNUM* = 0
  STDOLE_LCID* = 0
  VARIANT_NOVALUEPROP* = 0x01
  VARIANT_ALPHABOOL* = 0x02
  VARIANT_NOUSEOVERRIDE* = 0x04
  VARIANT_LOCALBOOL* = 0x08
  VAR_TIMEVALUEONLY* = 0x0001
  VAR_DATEVALUEONLY* = 0x0002
  VAR_VALIDDATE* = 0x0004
  VAR_CALENDAR_HIJRI* = 0x0008
  VAR_LOCALBOOL* = 0x0010
  VAR_FORMAT_NOSUBSTITUTE* = 0x0020
  VAR_FOURDIGITYEARS* = 0x0040
  VAR_CALENDAR_THAI* = 0x0080
  VAR_CALENDAR_GREGORIAN* = 0x0100
  MEMBERID_NIL* = DISPID_UNKNOWN
  ID_DEFAULTINST* = -2
  DISPATCH_METHOD* = 1
  DISPATCH_PROPERTYGET* = 2
  DISPATCH_PROPERTYPUT* = 4
  DISPATCH_PROPERTYPUTREF* = 8
  ACTIVEOBJECT_STRONG* = 0
  ACTIVEOBJECT_WEAK* = 1
  VARCMP_LT* = 0
  VARCMP_EQ* = 1
  VARCMP_GT* = 2
  VARCMP_NULL* = 3
  LOCALE_USE_NLS* = 0x10000000
  VARIANT_NOUSEROVERRIDE* = 0x04
  VARIANT_CALENDAR_HIJRI* = 0x08
  VARIANT_CALENDAR_THAI* = 0x20
  VARIANT_CALENDAR_GREGORIAN* = 0x40
  VARIANT_USE_NLS* = 0x80
  NUMPRS_LEADING_WHITE* = 0x00001
  NUMPRS_TRAILING_WHITE* = 0x00002
  NUMPRS_LEADING_PLUS* = 0x00004
  NUMPRS_TRAILING_PLUS* = 0x00008
  NUMPRS_LEADING_MINUS* = 0x00010
  NUMPRS_TRAILING_MINUS* = 0x00020
  NUMPRS_HEX_OCT* = 0x00040
  NUMPRS_PARENS* = 0x00080
  NUMPRS_DECIMAL* = 0x00100
  NUMPRS_THOUSANDS* = 0x00200
  NUMPRS_CURRENCY* = 0x00400
  NUMPRS_EXPONENT* = 0x00800
  NUMPRS_USE_ALL* = 0x01000
  NUMPRS_STD* = 0x01FFF
  NUMPRS_NEG* = 0x10000
  NUMPRS_INEXACT* = 0x20000
  VTBIT_I1* = 1  shl  VT_I1
  VTBIT_UI1* = 1  shl  VT_UI1
  VTBIT_I2* = 1  shl  VT_I2
  VTBIT_UI2* = 1  shl  VT_UI2
  VTBIT_I4* = 1  shl  VT_I4
  VTBIT_UI4* = 1  shl  VT_UI4
  VTBIT_I8* = 1  shl  VT_I8
  VTBIT_UI8* = 1  shl  VT_UI8
  VTBIT_R4* = 1  shl  VT_R4
  VTBIT_R8* = 1  shl  VT_R8
  VTBIT_CY* = 1  shl  VT_CY
  VTBIT_DECIMAL* = 1  shl  VT_DECIMAL
  # REGKIND* = enum
  REGKIND_DEFAULT* = 0
  REGKIND_REGISTER* = 1
  REGKIND_NONE* = 2

type
  REGKIND* = int32
  PARAMDATA* {.final, pure.} = object
    szName*: ptr OLECHAR
    vt*: VARTYPE
  LPPARAMDATA* = ptr PARAMDATA
  METHODDATA* {.final, pure.} = object
    szName*: ptr OLECHAR
    ppdata*: ptr PARAMDATA
    dispid*: DISPID
    iMeth*: UINT
    cc*: CALLCONV
    cArgs*: UINT
    wFlags*: WORD
    vtReturn*: VARTYPE
  LPMETHODDATA* = ptr METHODDATA
  INTERFACEDATA* {.final, pure.} = object
    pmethdata*: ptr METHODDATA
    cMembers*: UINT
  LPINTERFACEDATA* = ptr INTERFACEDATA
  UDATE* {.final, pure.} = object
    st*: SYSTEMTIME
    wDayOfYear*: USHORT
  NUMPARSE* {.final, pure.} = object
    cDig*: int32
    dwInFlags*: uint32
    dwOutFlags*: uint32
    cchUsed*: int32
    nBaseShift*: int32
    nPwr10*: int32
  ICreateTypeInfo* {.pure.} = object
    lpVtbl*: ptr ICreateTypeInfoVtbl
  ICreateTypeInfoVtbl* {.pure, inheritable.} = object
  ICreateTypeInfo2* {.pure.} = object
    lpVtbl*: ptr ICreateTypeInfo2Vtbl
  ICreateTypeInfo2Vtbl* {.pure, inheritable.} = object
  ICreateTypeLib* {.pure.} = object
    lpVtbl*: ptr ICreateTypeLibVtbl
  ICreateTypeLibVtbl* {.pure, inheritable.} = object
  ICreateTypeLib2* {.pure.} = object
    lpVtbl*: ptr ICreateTypeLib2Vtbl
  ICreateTypeLib2Vtbl* {.pure, inheritable.} = object
  LPCREATETYPEINFO* = ptr ICreateTypeInfo
  LPCREATETYPEINFO2* = ptr ICreateTypeInfo2
  LPCREATETYPELIB* = ptr ICreateTypeLib
  LPCREATETYPELIB2* = ptr ICreateTypeLib2

proc SysAllocString*(P1: ptr OLECHAR): BSTR {.winapi, dynlib: "oleaut32", importc.}
proc SysReAllocString*(P1: ptr BSTR, P2: ptr OLECHAR): int32 {.winapi, dynlib: "oleaut32", importc.}
proc SysAllocStringLen*(P1: ptr OLECHAR, P2: uint32): BSTR {.winapi, dynlib: "oleaut32", importc.}
proc SysReAllocStringLen*(P1: ptr BSTR, P2: ptr OLECHAR, P3: uint32): int32 {.winapi, dynlib: "oleaut32", importc.}
proc SysFreeString*(P1: BSTR): void {.winapi, dynlib: "oleaut32", importc.}
proc SysStringLen*(P1: BSTR): uint32 {.winapi, dynlib: "oleaut32", importc.}
proc SysStringByteLen*(P1: BSTR): uint32 {.winapi, dynlib: "oleaut32", importc.}
proc SysAllocStringByteLen*(P1: cstring, P2: uint32): BSTR {.winapi, dynlib: "oleaut32", importc.}
proc DosDateTimeToVariantTime*(P1: uint16, P2: uint16, P3: ptr float64): int32 {.winapi, dynlib: "oleaut32", importc.}
proc VariantTimeToDosDateTime*(P1: float64, P2: ptr uint16, P3: ptr uint16): int32 {.winapi, dynlib: "oleaut32", importc.}
proc VariantTimeToSystemTime*(P1: float64, P2: LPSYSTEMTIME): int32 {.winapi, dynlib: "oleaut32", importc.}
proc SystemTimeToVariantTime*(P1: LPSYSTEMTIME, P2: ptr float64): int32 {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromUdate*(P1: ptr UDATE, P2: ULONG, P3: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromUdateEx*(P1: ptr UDATE, P2: LCID, P3: ULONG, P4: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUdateFromDate*(P1: DATE, P2: ULONG, P3: ptr UDATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayAllocDescriptor*(P1: uint32, P2: ptr ptr SAFEARRAY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayAllocData*(P1: ptr SAFEARRAY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayCreate*(P1: VARTYPE, P2: uint32, P3: ptr SAFEARRAYBOUND): ptr SAFEARRAY {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayDestroyDescriptor*(P1: ptr SAFEARRAY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayDestroyData*(P1: ptr SAFEARRAY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayDestroy*(P1: ptr SAFEARRAY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayRedim*(P1: ptr SAFEARRAY, P2: ptr SAFEARRAYBOUND): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayGetDim*(P1: ptr SAFEARRAY): uint32 {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayGetElemsize*(P1: ptr SAFEARRAY): uint32 {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayGetUBound*(P1: ptr SAFEARRAY, P2: uint32, P3: ptr int32): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayGetLBound*(P1: ptr SAFEARRAY, P2: uint32, P3: ptr int32): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayLock*(P1: ptr SAFEARRAY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayUnlock*(P1: ptr SAFEARRAY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayAccessData*(P1: ptr SAFEARRAY, P2: ptr pointer): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayUnaccessData*(P1: ptr SAFEARRAY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayGetElement*(P1: ptr SAFEARRAY, P2: ptr int32, P3: pointer): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayPutElement*(P1: ptr SAFEARRAY, P2: ptr int32, P3: pointer): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayCopy*(P1: ptr SAFEARRAY, P2: ptr ptr SAFEARRAY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayPtrOfIndex*(P1: ptr SAFEARRAY, P2: ptr int32, P3: ptr pointer): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayCreateVector*(P1: VARTYPE, P2: LONG, P3: ULONG): ptr SAFEARRAY {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayCreateVectorEx*(P1: VARTYPE, P2: LONG, P3: ULONG, P4: LPVOID): ptr SAFEARRAY {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayAllocDescriptorEx*(P1: VARTYPE, P2: UINT, P3: ptr ptr SAFEARRAY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayGetVartype*(P1: ptr SAFEARRAY, P2: ptr VARTYPE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArraySetRecordInfo*(P1: ptr SAFEARRAY, P2: ptr IRecordInfo): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayGetRecordInfo*(P1: ptr SAFEARRAY, P2: ptr ptr IRecordInfo): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArraySetIID*(P1: ptr SAFEARRAY, P2: REFGUID): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SafeArrayGetIID*(P1: ptr SAFEARRAY, P2: ptr GUID): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VariantInit*(P1: ptr VARIANTARG): void {.winapi, dynlib: "oleaut32", importc.}
proc VariantClear*(P1: ptr VARIANTARG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VariantCopy*(P1: ptr VARIANTARG, P2: ptr VARIANTARG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VariantCopyInd*(P1: ptr VARIANT, P2: ptr VARIANTARG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VariantChangeType*(P1: ptr VARIANTARG, P2: ptr VARIANTARG, P3: uint16, P4: VARTYPE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VariantChangeTypeEx*(P1: ptr VARIANTARG, P2: ptr VARIANTARG, P3: LCID, P4: uint16, P5: VARTYPE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc LHashValOfNameSysA*(P1: SYSKIND, P2: LCID, P3: cstring): ULONG {.winapi, dynlib: "oleaut32", importc.}
proc LHashValOfNameSys*(P1: SYSKIND, P2: LCID, P3: ptr OLECHAR): ULONG {.winapi, dynlib: "oleaut32", importc.}
proc LoadTypeLib*(P1: ptr OLECHAR, P2: ptr LPTYPELIB): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc LoadTypeLibEx*(P1: LPCOLESTR, P2: REGKIND, P3: ptr LPTYPELIB): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc LoadRegTypeLib*(P1: REFGUID, P2: WORD, P3: WORD, P4: LCID, P5: ptr LPTYPELIB): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc QueryPathOfRegTypeLib*(P1: REFGUID, P2: uint16, P3: uint16, P4: LCID, P5: LPBSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc RegisterTypeLib*(P1: LPTYPELIB, P2: ptr OLECHAR, P3: ptr OLECHAR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc UnRegisterTypeLib*(P1: REFGUID, P2: WORD, P3: WORD, P4: LCID, P5: SYSKIND): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc CreateTypeLib*(P1: SYSKIND, P2: ptr OLECHAR, P3: ptr LPCREATETYPELIB): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc DispGetParam*(P1: ptr DISPPARAMS, P2: UINT, P3: VARTYPE, P4: ptr VARIANT, P5: ptr UINT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc DispGetIDsOfNames*(P1: LPTYPEINFO, P2: ptr ptr OLECHAR, P3: UINT, P4: ptr DISPID): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc DispInvoke*(P1: pointer, P2: LPTYPEINFO, P3: DISPID, P4: WORD, P5: ptr DISPPARAMS, P6: ptr VARIANT, P7: ptr EXCEPINFO, P8: ptr UINT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc CreateDispTypeInfo*(P1: ptr INTERFACEDATA, P2: LCID, P3: ptr LPTYPEINFO): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc CreateStdDispatch*(P1: ptr IUnknown, P2: pointer, P3: LPTYPEINFO, P4: ptr ptr IUnknown): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc RegisterActiveObject*(P1: ptr IUnknown, P2: REFCLSID, P3: DWORD, P4: ptr DWORD): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc RevokeActiveObject*(P1: DWORD, P2: pointer): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc GetActiveObject*(P1: REFCLSID, P2: pointer, P3: ptr ptr IUnknown): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc SetErrorInfo*(P1: uint32, P2: LPERRORINFO): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc GetErrorInfo*(P1: uint32, P2: ptr LPERRORINFO): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc CreateErrorInfo*(P1: ptr LPCREATEERRORINFO): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OaBuildVersion*(): uint32 {.winapi, dynlib: "oleaut32", importc.}
proc VectorFromBstr*(P1: BSTR, P2: ptr ptr SAFEARRAY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc BstrFromVector*(P1: ptr SAFEARRAY, P2: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarParseNumFromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr NUMPARSE, P5: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarNumFromParseNum*(P1: ptr NUMPARSE, P2: ptr BYTE, P3: ULONG, P4: ptr VARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarAdd*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarSub*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarMul*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDiv*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromI2*(P1: SHORT, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromI4*(P1: LONG, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromI8*(P1: LONG64, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromR4*(P1: FLOAT, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromR8*(P1: DOUBLE, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromDate*(P1: DATE, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromBool*(P1: VARIANT_BOOL, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromI1*(P1: int8, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromUI2*(P1: USHORT, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromUI4*(P1: ULONG, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromUI8*(P1: ULONG64, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromCy*(P1: CY, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromDec*(P1: ptr DECIMAL, P2: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI1FromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr BYTE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromUI1*(P1: BYTE, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromI4*(P1: LONG, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromI8*(P1: LONG64, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromR4*(P1: FLOAT, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromR8*(P1: DOUBLE, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromDate*(P1: DATE, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromBool*(P1: VARIANT_BOOL, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromI1*(P1: int8, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromUI2*(P1: USHORT, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromUI4*(P1: ULONG, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromUI8*(P1: ULONG64, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromCy*(P1: CY, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromDec*(P1: ptr DECIMAL, P2: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI2FromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr SHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromUI1*(P1: BYTE, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromI2*(P1: SHORT, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromI8*(P1: LONG64, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromR4*(P1: FLOAT, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromR8*(P1: DOUBLE, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromDate*(P1: DATE, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromBool*(P1: VARIANT_BOOL, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromI1*(P1: int8, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromUI2*(P1: USHORT, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromUI4*(P1: ULONG, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromUI8*(P1: ULONG64, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromCy*(P1: CY, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromDec*(P1: ptr DECIMAL, P2: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI4FromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr LONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromUI1*(P1: BYTE, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromI2*(P1: SHORT, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromI4*(P1: LONG, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromR4*(P1: FLOAT, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromR8*(P1: DOUBLE, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromDate*(P1: DATE, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromBool*(P1: VARIANT_BOOL, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromI1*(P1: int8, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromUI2*(P1: USHORT, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromUI4*(P1: ULONG, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromUI8*(P1: ULONG64, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromDec*(pdecIn: ptr DECIMAL, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromInt*(intIn: INT, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromCy*(P1: CY, P2: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI8FromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr LONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromUI1*(P1: BYTE, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromI2*(P1: SHORT, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromI4*(P1: LONG, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromI8*(P1: LONG64, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromR8*(P1: DOUBLE, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromDate*(P1: DATE, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromBool*(P1: VARIANT_BOOL, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromI1*(P1: int8, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromUI2*(P1: USHORT, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromUI4*(P1: ULONG, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromUI8*(P1: ULONG64, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromCy*(P1: CY, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromDec*(P1: ptr DECIMAL, P2: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4FromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr FLOAT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromUI1*(P1: BYTE, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromI2*(P1: SHORT, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromI4*(P1: LONG, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromI8*(P1: LONG64, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromR4*(P1: FLOAT, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromDate*(P1: DATE, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromBool*(P1: VARIANT_BOOL, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromI1*(P1: int8, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromUI2*(P1: USHORT, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromUI4*(P1: ULONG, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromUI8*(P1: ULONG64, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromCy*(P1: CY, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromDec*(P1: ptr DECIMAL, P2: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8FromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromUI1*(P1: BYTE, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromI2*(P1: SHORT, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromI4*(P1: LONG, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromI8*(P1: LONG64, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromR4*(P1: FLOAT, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromR8*(P1: DOUBLE, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromI1*(P1: int8, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromUI2*(P1: USHORT, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromUI4*(P1: ULONG, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromUI8*(P1: ULONG64, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromBool*(P1: VARIANT_BOOL, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromCy*(P1: CY, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromDec*(P1: ptr DECIMAL, P2: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDateFromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr DATE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromUI1*(P1: BYTE, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromI2*(sIn: SHORT, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromI4*(P1: LONG, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromI8*(P1: LONG64, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromR4*(P1: FLOAT, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromR8*(P1: DOUBLE, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromDate*(P1: DATE, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromBool*(P1: VARIANT_BOOL, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromI1*(P1: int8, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromUI2*(P1: USHORT, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromUI4*(P1: ULONG, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromUI8*(P1: ULONG64, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromDec*(P1: ptr DECIMAL, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromUI1*(P1: BYTE, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromI2*(P1: SHORT, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromI4*(P1: LONG, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromI8*(P1: LONG64, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromR4*(P1: FLOAT, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromR8*(P1: DOUBLE, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromDate*(P1: DATE, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromBool*(P1: VARIANT_BOOL, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromI1*(P1: int8, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromUI2*(P1: USHORT, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromUI8*(P1: ULONG64, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromUI4*(P1: ULONG, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromCy*(P1: CY, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromDec*(P1: ptr DECIMAL, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrFromDisp*(P1: ptr IDispatch, P2: LCID, P3: ULONG, P4: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromUI1*(P1: BYTE, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromI2*(P1: SHORT, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromI4*(P1: LONG, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromI8*(P1: LONG64, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromR4*(P1: FLOAT, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromR8*(P1: DOUBLE, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromDate*(P1: DATE, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromI1*(P1: int8, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromUI2*(P1: USHORT, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromUI4*(P1: ULONG, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromUI8*(P1: ULONG64, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromCy*(P1: CY, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromDec*(P1: ptr DECIMAL, P2: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBoolFromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr VARIANT_BOOL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromUI1*(P1: BYTE, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromI2*(P1: SHORT, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromI4*(P1: LONG, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromI8*(P1: LONG64, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromR4*(P1: FLOAT, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromR8*(P1: DOUBLE, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromDate*(P1: DATE, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromBool*(P1: VARIANT_BOOL, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromUI2*(P1: USHORT, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromUI4*(P1: ULONG, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromUI8*(P1: ULONG64, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromCy*(P1: CY, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromDec*(P1: ptr DECIMAL, P2: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarI1FromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr int8): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromUI1*(P1: BYTE, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromI2*(P1: SHORT, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromI4*(P1: LONG, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromI8*(P1: LONG64, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromR4*(P1: FLOAT, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromR8*(P1: DOUBLE, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromDate*(P1: DATE, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromBool*(P1: VARIANT_BOOL, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromI1*(P1: int8, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromUI4*(P1: ULONG, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromUI8*(P1: ULONG64, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromCy*(P1: CY, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromDec*(P1: ptr DECIMAL, P2: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI2FromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr USHORT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromUI1*(P1: BYTE, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromI2*(P1: SHORT, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromI4*(P1: LONG, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromI8*(P1: LONG64, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromR4*(P1: FLOAT, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromR8*(P1: DOUBLE, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromDate*(P1: DATE, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromBool*(P1: VARIANT_BOOL, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromI1*(P1: int8, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromUI2*(P1: USHORT, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromUI8*(P1: ULONG64, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromCy*(P1: CY, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromDec*(P1: ptr DECIMAL, P2: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI4FromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromUI1*(P1: BYTE, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromI2*(P1: SHORT, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromI4*(P1: LONG, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromI8*(P1: LONG64, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromR4*(P1: FLOAT, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromR8*(P1: DOUBLE, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromDate*(P1: DATE, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromBool*(P1: VARIANT_BOOL, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromI1*(P1: int8, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromUI2*(P1: USHORT, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromUI4*(P1: ULONG, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromDec*(P1: ptr DECIMAL, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromInt*(P1: INT, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromCy*(P1: CY, P2: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarUI8FromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr ULONG64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromUI1*(P1: BYTE, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromI2*(P1: SHORT, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromI4*(P1: LONG, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromI8*(P1: LONG64, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromR4*(P1: FLOAT, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromR8*(P1: DOUBLE, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromDate*(P1: DATE, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromStr*(P1: ptr OLECHAR, P2: LCID, P3: ULONG, P4: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromBool*(P1: VARIANT_BOOL, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromI1*(P1: int8, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromUI2*(P1: USHORT, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromUI4*(P1: ULONG, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromUI8*(P1: ULONG64, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromCy*(P1: CY, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFromDisp*(P1: ptr IDispatch, P2: LCID, P3: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecNeg*(P1: ptr DECIMAL, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR4CmpR8*(P1: float32, P2: float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8Pow*(P1: float64, P2: float64, P3: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarR8Round*(P1: float64, P2: int32, P3: ptr float64): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecAbs*(P1: ptr DECIMAL, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecAdd*(P1: ptr DECIMAL, P2: ptr DECIMAL, P3: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecCmp*(P1: ptr DECIMAL, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecCmpR8*(P1: ptr DECIMAL, P2: DOUBLE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecDiv*(P1: ptr DECIMAL, P2: ptr DECIMAL, P3: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecFix*(P1: ptr DECIMAL, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecInt*(P1: ptr DECIMAL, P2: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecMul*(P1: ptr DECIMAL, P2: ptr DECIMAL, P3: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecRound*(P1: ptr DECIMAL, P2: int32, P3: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarDecSub*(P1: ptr DECIMAL, P2: ptr DECIMAL, P3: ptr DECIMAL): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyAbs*(P1: CY, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyAdd*(P1: CY, P2: CY, P3: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyCmp*(P1: CY, P2: CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyCmpR8*(P1: CY, P2: DOUBLE): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyFix*(P1: CY, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyInt*(P1: CY, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyMul*(P1: CY, P2: CY, P3: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyMulI4*(P1: CY, P2: LONG, P3: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyMulI8*(P1: CY, P2: LONG64, P3: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyNeg*(P1: CY, P2: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCyRound*(P1: CY, P2: INT, P3: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCySub*(P1: CY, P2: CY, P3: ptr CY): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarAnd*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCat*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarEqv*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarIdiv*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarImp*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarMod*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarOr*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarPow*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarXor*(P1: LPVARIANT, P2: LPVARIANT, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarAbs*(P1: LPVARIANT, P2: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarFix*(P1: LPVARIANT, P2: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarInt*(P1: LPVARIANT, P2: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarNeg*(P1: LPVARIANT, P2: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarNot*(P1: LPVARIANT, P2: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarRound*(P1: LPVARIANT, P2: int32, P3: LPVARIANT): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarCmp*(P1: LPVARIANT, P2: LPVARIANT, P3: LCID, P4: ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrCmp*(P1: BSTR, P2: BSTR, P3: LCID, P4: ULONG): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc VarBstrCat*(P1: BSTR, P2: BSTR, P3: ptr BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}

converter winim_converter_ICreateTypeInfo*(x: ptr ICreateTypeInfo): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ICreateTypeInfo2*(x: ptr ICreateTypeInfo2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ICreateTypeLib*(x: ptr ICreateTypeLib): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ICreateTypeLib2*(x: ptr ICreateTypeLib2): ptr IUnknown = cast[ptr IUnknown](x)

# objext/olectl.nim

template ITF_ERROR_SCODE_FOR_D(c: int): SCODE =
  (SEVERITY_ERROR.SCODE shl 31) or (FACILITY_ITF.int shl 16) or c

template ITF_SUCCESS_SCODE_FOR_D(c: int): SCODE =
  (SEVERITY_SUCCESS.SCODE shl 31) or (FACILITY_ITF.int shl 16) or c

template STD_CTL_SCODE(c: int): SCODE =
  (SEVERITY_ERROR.SCODE shl 31) or (FACILITY_CONTROL.int shl 16) or c

const
  CTL_E_ILLEGALFUNCTIONCALL* = (STD_CTL_SCODE( 5 )).SCODE
  CTL_E_OVERFLOW* = (STD_CTL_SCODE( 6 )).SCODE
  CTL_E_OUTOFMEMORY* = (STD_CTL_SCODE( 7 )).SCODE
  CTL_E_DIVISIONBYZERO* = (STD_CTL_SCODE( 11 )).SCODE
  CTL_E_OUTOFSTRINGSPACE* = (STD_CTL_SCODE( 14 )).SCODE
  CTL_E_OUTOFSTACKSPACE* = (STD_CTL_SCODE( 28 )).SCODE
  CTL_E_BADFILENAMEORNUMBER* = (STD_CTL_SCODE( 52 )).SCODE
  CTL_E_FILENOTFOUND* = (STD_CTL_SCODE( 53 )).SCODE
  CTL_E_BADFILEMODE* = (STD_CTL_SCODE( 54 )).SCODE
  CTL_E_FILEALREADYOPEN* = (STD_CTL_SCODE( 55 )).SCODE
  CTL_E_DEVICEIOERROR* = (STD_CTL_SCODE( 57 )).SCODE
  CTL_E_FILEALREADYEXISTS* = (STD_CTL_SCODE( 58 )).SCODE
  CTL_E_BADRECORDLENGTH* = (STD_CTL_SCODE( 59 )).SCODE
  CTL_E_DISKFULL* = (STD_CTL_SCODE( 61 )).SCODE
  CTL_E_BADRECORDNUMBER* = (STD_CTL_SCODE( 63 )).SCODE
  CTL_E_BADFILENAME* = (STD_CTL_SCODE( 64 )).SCODE
  CTL_E_TOOMANYFILES* = (STD_CTL_SCODE( 67 )).SCODE
  CTL_E_DEVICEUNAVAILABLE* = (STD_CTL_SCODE( 68 )).SCODE
  CTL_E_PERMISSIONDENIED* = (STD_CTL_SCODE( 70 )).SCODE
  CTL_E_DISKNOTREADY* = (STD_CTL_SCODE( 71 )).SCODE
  CTL_E_PATHFILEACCESSERROR* = (STD_CTL_SCODE( 75 )).SCODE
  CTL_E_PATHNOTFOUND* = (STD_CTL_SCODE( 76 )).SCODE
  CTL_E_INVALIDPATTERNSTRING* = (STD_CTL_SCODE( 93 )).SCODE
  CTL_E_INVALIDUSEOFNULL* = (STD_CTL_SCODE( 94 )).SCODE
  CTL_E_INVALIDFILEFORMAT* = (STD_CTL_SCODE( 321 )).SCODE
  CTL_E_INVALIDPROPERTYVALUE* = (STD_CTL_SCODE( 380 )).SCODE
  CTL_E_INVALIDPROPERTYARRAYINDEX* = (STD_CTL_SCODE( 381 )).SCODE
  CTL_E_SETNOTSUPPORTEDATRUNTIME* = (STD_CTL_SCODE( 382 )).SCODE
  CTL_E_SETNOTSUPPORTED* = (STD_CTL_SCODE( 383 )).SCODE
  CTL_E_NEEDPROPERTYARRAYINDEX* = (STD_CTL_SCODE( 385 )).SCODE
  CTL_E_SETNOTPERMITTED* = (STD_CTL_SCODE( 387 )).SCODE
  CTL_E_GETNOTSUPPORTEDATRUNTIME* = (STD_CTL_SCODE( 393 )).SCODE
  CTL_E_GETNOTSUPPORTED* = (STD_CTL_SCODE( 394 )).SCODE
  CTL_E_PROPERTYNOTFOUND* = (STD_CTL_SCODE( 422 )).SCODE
  CTL_E_INVALIDCLIPBOARDFORMAT* = (STD_CTL_SCODE( 460 )).SCODE
  CTL_E_INVALIDPICTURE* = (STD_CTL_SCODE( 481 )).SCODE
  CTL_E_PRINTERERROR* = (STD_CTL_SCODE( 482 )).SCODE
  CTL_E_CANTSAVEFILETOTEMP* = (STD_CTL_SCODE( 735 )).SCODE
  CTL_E_SEARCHTEXTNOTFOUND* = (STD_CTL_SCODE( 744 )).SCODE
  CTL_E_REPLACEMENTSTOOLONG* = (STD_CTL_SCODE( 746 )).SCODE
  CTL_E_CUSTOM_FIRST* = (STD_CTL_SCODE( 600 )).SCODE
  CLASS_E_NOTLICENSED* = CLASSFACTORY_E_FIRST+2.SCODE
  CONNECT_E_FIRST* = (ITF_ERROR_SCODE_FOR_D( 0x200 )).SCODE
  CONNECT_E_LAST* = (ITF_ERROR_SCODE_FOR_D( 0x20F )).SCODE
  CONNECT_S_FIRST* = (ITF_SUCCESS_SCODE_FOR_D( 0x200 )).SCODE
  CONNECT_S_LAST* = (ITF_SUCCESS_SCODE_FOR_D( 0x20F )).SCODE
  CONNECT_E_NOCONNECTION* = (CONNECT_E_FIRST + 0).SCODE
  CONNECT_E_ADVISELIMIT* = (CONNECT_E_FIRST + 1).SCODE
  CONNECT_E_CANNOTCONNECT* = (CONNECT_E_FIRST + 2).SCODE
  CONNECT_E_OVERRIDDEN* = (CONNECT_E_FIRST + 3).SCODE
  SELFREG_E_FIRST* = (ITF_ERROR_SCODE_FOR_D( 0x200 )).SCODE
  SELFREG_E_LAST* = (ITF_ERROR_SCODE_FOR_D( 0x20F )).SCODE
  SELFREG_S_FIRST* = (ITF_SUCCESS_SCODE_FOR_D( 0x200 )).SCODE
  SELFREG_S_LAST* = (ITF_SUCCESS_SCODE_FOR_D( 0x20F )).SCODE
  SELFREG_E_TYPELIB* = (SELFREG_E_FIRST + 0).SCODE
  SELFREG_E_CLASS* = (SELFREG_E_FIRST + 1).SCODE
  PERPROP_E_FIRST* = (ITF_ERROR_SCODE_FOR_D( 0x200 )).SCODE
  PERPROP_E_LAST* = (ITF_ERROR_SCODE_FOR_D( 0x20F )).SCODE
  PERPROP_S_FIRST* = (ITF_SUCCESS_SCODE_FOR_D( 0x200 )).SCODE
  PERPROP_S_LAST* = (ITF_SUCCESS_SCODE_FOR_D( 0x20F )).SCODE
  PERPROP_E_NOPAGEAVAILABLE* = PERPROP_E_FIRST.SCODE
  OLEMISC_RECOMPOSEONRESIZE* = 0x1
  OLEMISC_ONLYICONIC* = 0x2
  OLEMISC_INSERTNOTREPLACE* = 0x4
  OLEMISC_STATIC* = 0x8
  OLEMISC_CANTLINKINSIDE* = 0x10
  OLEMISC_CANLINKBYOLE1* = 0x20
  OLEMISC_ISLINKOBJECT* = 0x40
  OLEMISC_INSIDEOUT* = 0x80
  OLEMISC_ACTIVATEWHENVISIBLE* = 0x100
  OLEMISC_RENDERINGISDEVICEINDEPENDENT* = 0x200
  OLEMISC_INVISIBLEATRUNTIME* = 0x400
  OLEMISC_ALWAYSRUN* = 0x800
  OLEMISC_ACTSLIKEBUTTON* = 0x1000
  OLEMISC_ACTSLIKELABEL* = 0x2000
  OLEMISC_NOUIACTIVATE* = 0x4000
  OLEMISC_ALIGNABLE* = 0x8000
  OLEMISC_SIMPLEFRAME* = 0x10000
  OLEMISC_SETCLIENTSITEFIRST* = 0x20000
  OLEMISC_IMEMODE* = 0x40000
  OLEMISC_IGNOREACTIVATEWHENVISIBLE* = 0x80000
  OLEMISC_WANTSTOMENUMERGE* = 0x100000
  OLEMISC_SUPPORTSMULTILEVELUNDO* = 0x200000
  OLEIVERB_PROPERTIES* = -7
  VT_STREAMED_PROPSET* = 73
  VT_STORED_PROPSET* = 74
  VT_BLOB_PROPSET* = 75
  VT_VERBOSE_ENUM* = 76
  VT_COLOR* = VT_I4
  VT_XPOS_PIXELS* = VT_I4
  VT_YPOS_PIXELS* = VT_I4
  VT_XSIZE_PIXELS* = VT_I4
  VT_YSIZE_PIXELS* = VT_I4
  VT_XPOS_HIMETRIC* = VT_I4
  VT_YPOS_HIMETRIC* = VT_I4
  VT_XSIZE_HIMETRIC* = VT_I4
  VT_YSIZE_HIMETRIC* = VT_I4
  VT_TRISTATE* = VT_I2
  VT_OPTEXCLUSIVE* = VT_BOOL
  VT_FONT* = VT_DISPATCH
  VT_PICTURE* = VT_DISPATCH
  VT_HANDLE* = VT_I4
  OCM_BASE* = WM_USER + 0x1c00
  OCM_COMMAND* = OCM_BASE + WM_COMMAND
  OCM_CTLCOLORBTN* = OCM_BASE + WM_CTLCOLORBTN
  OCM_CTLCOLOREDIT* = OCM_BASE + WM_CTLCOLOREDIT
  OCM_CTLCOLORDLG* = OCM_BASE + WM_CTLCOLORDLG
  OCM_CTLCOLORLISTBOX* = OCM_BASE + WM_CTLCOLORLISTBOX
  OCM_CTLCOLORMSGBOX* = OCM_BASE + WM_CTLCOLORMSGBOX
  OCM_CTLCOLORSCROLLBAR* = OCM_BASE + WM_CTLCOLORSCROLLBAR
  OCM_CTLCOLORSTATIC* = OCM_BASE + WM_CTLCOLORSTATIC
  OCM_DRAWITEM* = OCM_BASE + WM_DRAWITEM
  OCM_MEASUREITEM* = OCM_BASE + WM_MEASUREITEM
  OCM_DELETEITEM* = OCM_BASE + WM_DELETEITEM
  OCM_VKEYTOITEM* = OCM_BASE + WM_VKEYTOITEM
  OCM_CHARTOITEM* = OCM_BASE + WM_CHARTOITEM
  OCM_COMPAREITEM* = OCM_BASE + WM_COMPAREITEM
  OCM_HSCROLL* = OCM_BASE + WM_HSCROLL
  OCM_VSCROLL* = OCM_BASE + WM_VSCROLL
  OCM_PARENTNOTIFY* = OCM_BASE + WM_PARENTNOTIFY
  OCM_NOTIFY* = OCM_BASE + WM_NOTIFY
  CTRLINFO_EATS_RETURN* = 1
  CTRLINFO_EATS_ESCAPE* = 2
  XFORMCOORDS_POSITION* = 1
  XFORMCOORDS_SIZE* = 2
  XFORMCOORDS_HIMETRICTOCONTAINER* = 4
  XFORMCOORDS_CONTAINERTOHIMETRIC* = 8
  GUIDKIND_DEFAULT_SOURCE_DISP_IID* = 1
  PROPPAGESTATUS_DIRTY* = 1
  PROPPAGESTATUS_VALIDATE* = 2
  PICTURE_SCALABLE* = 1
  PICTURE_TRANSPARENT* = 2
  PICTYPE_UNINITIALIZED* = -1
  PICTYPE_NONE* = 0
  PICTYPE_BITMAP* = 1
  PICTYPE_METAFILE* = 2
  PICTYPE_ICON* = 3
  PICTYPE_ENHMETAFILE* = 4
  DISPID_AUTOSIZE* = -500
  DISPID_BACKCOLOR* = -501
  DISPID_BACKSTYLE* = -502
  DISPID_BORDERCOLOR* = -503
  DISPID_BORDERSTYLE* = -504
  DISPID_BORDERWIDTH* = -505
  DISPID_DRAWMODE* = -507
  DISPID_DRAWSTYLE* = -508
  DISPID_DRAWWIDTH* = -509
  DISPID_FILLCOLOR* = -510
  DISPID_FILLSTYLE* = -511
  DISPID_FONT* = -512
  DISPID_FORECOLOR* = -513
  DISPID_ENABLED* = -514
  DISPID_HWND* = -515
  DISPID_TABSTOP* = -516
  DISPID_TEXT* = -517
  DISPID_CAPTION* = -518
  DISPID_BORDERVISIBLE* = -519
  DISPID_APPEARANCE* = -520
  DISPID_MOUSEPOINTER* = -521
  DISPID_MOUSEICON* = -522
  DISPID_PICTURE* = -523
  DISPID_VALID* = -524
  DISPID_REFRESH* = -550
  DISPID_DOCLICK* = -551
  DISPID_ABOUTBOX* = -552
  DISPID_CLICK* = -600
  DISPID_DBLCLICK* = -601
  DISPID_KEYDOWN* = -602
  DISPID_KEYPRESS* = -603
  DISPID_KEYUP* = -604
  DISPID_MOUSEDOWN* = -605
  DISPID_MOUSEMOVE* = -606
  DISPID_MOUSEUP* = -607
  DISPID_ERROREVENT* = -608
  DISPID_AMBIENT_BACKCOLOR* = -701
  DISPID_AMBIENT_DISPLAYNAME* = -702
  DISPID_AMBIENT_FONT* = -703
  DISPID_AMBIENT_FORECOLOR* = -704
  DISPID_AMBIENT_LOCALEID* = -705
  DISPID_AMBIENT_MESSAGEREFLECT* = -706
  DISPID_AMBIENT_SCALEUNITS* = -707
  DISPID_AMBIENT_TEXTALIGN* = -708
  DISPID_AMBIENT_USERMODE* = -709
  DISPID_AMBIENT_UIDEAD* = -710
  DISPID_AMBIENT_SHOWGRABHANDLES* = -711
  DISPID_AMBIENT_SHOWHATCHING* = -712
  DISPID_AMBIENT_DISPLAYASDEFAULT* = -713
  DISPID_AMBIENT_SUPPORTSMNEMONICS* = -714
  DISPID_AMBIENT_AUTOCLIP* = -715
  DISPID_AMBIENT_APPEARANCE* = -716
  DISPID_AMBIENT_CODEPAGE* = -725
  DISPID_AMBIENT_PALETTE* = -726
  DISPID_AMBIENT_CHARSET* = -727
  DISPID_AMBIENT_RIGHTTOLEFT* = -732
  DISPID_AMBIENT_TOPTOBOTTOM* = -733
  DISPID_FONT_NAME* = 0
  DISPID_FONT_SIZE* = 2
  DISPID_FONT_BOLD* = 3
  DISPID_FONT_ITALIC* = 4
  DISPID_FONT_UNDER* = 5
  DISPID_FONT_STRIKE* = 6
  DISPID_FONT_WEIGHT* = 7
  DISPID_FONT_CHARSET* = 8
  DISPID_PICT_HANDLE* = 0
  DISPID_PICT_HPAL* = 2
  DISPID_PICT_TYPE* = 3
  DISPID_PICT_WIDTH* = 4
  DISPID_PICT_HEIGHT* = 5
  DISPID_PICT_RENDER* = 6
  # OLE_TRISTATE* = enum
  triUnchecked* = 0
  triChecked1* = 1
  triGray* = 2

type
  LPOLECONTROL* = ptr IOleControl
  LPOLECONTROLSITE* = ptr IOleControlSite
  LPSIMPLEFRAMESITE* = ptr ISimpleFrameSite
  LPPERSISTPROPERTYBAG* = ptr IPersistPropertyBag
  LPPERSISTSTREAMINIT* = ptr IPersistStreamInit
  LPPERSISTMEMORY* = ptr IPersistMemory
  LPPROPERTYNOTIFYSINK* = ptr IPropertyNotifySink
  LPPROVIDECLASSINFO* = ptr IProvideClassInfo
  LPPROVIDECLASSINFO2* = ptr IProvideClassInfo2
  LPCONNECTIONPOINTCONTAINER* = ptr IConnectionPointContainer
  LPCLASSFACTORY2* = ptr IClassFactory2
  LPSPECIFYPROPERTYPAGES* = ptr ISpecifyPropertyPages
  LPPERPROPERTYBROWSING* = ptr IPerPropertyBrowsing
  LPPROPERTYPAGE* = ptr IPropertyPage
  LPPROPERTYPAGE2* = ptr IPropertyPage2
  LPPICTURE* = ptr IPicture
  LPPICTUREDISP* = ptr IPictureDisp
  OLE_XPOS_PIXELS* = int32
  OLE_YPOS_PIXELS* = int32
  OLE_XSIZE_PIXELS* = int32
  OLE_YSIZE_PIXELS* = int32
  OLE_XPOS_CONTAINER* = float32
  OLE_YPOS_CONTAINER* = float32
  OLE_XSIZE_CONTAINER* = float32
  OLE_OPTEXCLUSIVE* = VARIANT_BOOL
  OLE_CANCELBOOL* = VARIANT_BOOL
  OLE_ENABLEDEFAULTBOOL* = VARIANT_BOOL
  OLE_TRISTATE* = int32
  OCPFIPARAMS* {.final, pure.} = object
    cbStructSize*: ULONG
    hWndOwner*: HWND
    x*: int32
    y*: int32
    lpszCaption*: LPCOLESTR
    cObjects*: ULONG
    lplpUnk*: ptr LPUNKNOWN
    cPages*: ULONG
    lpPages*: ptr CLSID
    lcid*: LCID
    dispidInitialProperty*: DISPID
  LPOCPFIPARAMS* = ptr OCPFIPARAMS
  FONTDESC* {.final, pure.} = object
    cbSizeofstruct*: UINT
    lpstrName*: LPOLESTR
    cySize*: CY
    sWeight*: SHORT
    sCharset*: SHORT
    fItalic*: BOOL
    fUnderline*: BOOL
    fStrikethrough*: BOOL
  LPFONTDESC* = ptr FONTDESC
  PICTDESC_UNION1_emf* {.final, pure.} = object
    hemf*: HENHMETAFILE
  PICTDESC_UNION1_icon* {.final, pure.} = object
    hicon*: HICON
  PICTDESC_UNION1_wmf* {.final, pure.} = object
    hmeta*: HMETAFILE
    xExt*: int32
    yExt*: int32
  PICTDESC_UNION1_bmp* {.final, pure.} = object
    hbitmap*: HBITMAP
    hpal*: HPALETTE
  PICTDESC_UNION1* {.final, union, pure.} = object
    bmp*: PICTDESC_UNION1_bmp
    wmf*: PICTDESC_UNION1_wmf
    icon*: PICTDESC_UNION1_icon
    emf*: PICTDESC_UNION1_emf
  PICTDESC* {.final, pure.} = object
    cbSizeofstruct*: UINT
    picType*: UINT
    u1*: PICTDESC_UNION1
  LPPICTDESC* = ptr PICTDESC

proc DllRegisterServer*(): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc DllUnregisterServer*(): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OleCreateFontIndirect*(P1: LPFONTDESC, P2: REFIID, P3: ptr PVOID): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OleCreatePictureIndirect*(P1: LPPICTDESC, P2: REFIID, P3: BOOL, P4: ptr PVOID): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OleCreatePropertyFrame*(P1: HWND, P2: UINT, P3: UINT, P4: LPCOLESTR, P5: ULONG, P6: ptr LPUNKNOWN, P7: ULONG, P8: LPCLSID, P9: LCID, P10: DWORD, P11: PVOID): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OleCreatePropertyFrameIndirect*(P1: LPOCPFIPARAMS): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OleIconToCursor*(P1: HINSTANCE, P2: HICON): HCURSOR {.winapi, dynlib: "oleaut32", importc.}
proc OleLoadPicture*(P1: LPSTREAM, P2: LONG, P3: BOOL, P4: REFIID, P5: ptr PVOID): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OleLoadPictureEx*(P1: LPSTREAM, P2: LONG, P3: BOOL, P4: REFIID, P5: DWORD, P6: DWORD, P7: DWORD, P8: ptr LPVOID): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OleLoadPicturePath*(P1: LPOLESTR, P2: LPUNKNOWN, P3: DWORD, P4: OLE_COLOR, P5: REFIID, P6: ptr LPVOID): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OleLoadPictureFile*(P1: VARIANT, P2: ptr LPDISPATCH): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OleLoadPictureFileEx*(P1: VARIANT, P2: DWORD, P3: DWORD, P4: DWORD, P5: ptr LPDISPATCH): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OleSavePictureFile*(P1: LPDISPATCH, P2: BSTR): HRESULT {.winapi, dynlib: "oleaut32", importc.}
proc OleTranslateColor*(P1: OLE_COLOR, P2: HPALETTE, P3: ptr COLORREF): HRESULT {.winapi, dynlib: "oleaut32", importc.}

# objext/oledlg.nim

const
  PS_MAXLINKTYPES* = 8
  OLESTDDELIM* = "\\"
  SZOLEUI_MSG_HELP* = "OLEUI_MSG_HELP"
  SZOLEUI_MSG_ENDDIALOG* = "OLEUI_MSG_ENDDIALOG"
  SZOLEUI_MSG_BROWSE* = "OLEUI_MSG_BROWSE"
  SZOLEUI_MSG_CHANGEICON* = "OLEUI_MSG_CHANGEICON"
  SZOLEUI_MSG_CLOSEBUSYDIALOG* = "OLEUI_MSG_CLOSEBUSYDIALOG"
  SZOLEUI_MSG_CONVERT* = "OLEUI_MSG_CONVERT"
  SZOLEUI_MSG_CHANGESOURCE* = "OLEUI_MSG_CHANGESOURCE"
  SZOLEUI_MSG_ADDCONTROL* = "OLEUI_MSG_ADDCONTROL"
  SZOLEUI_MSG_BROWSE_OFN* = "OLEUI_MSG_BROWSE_OFN"
  PROP_HWND_CHGICONDLG* = "HWND_CIDLG"
  IDC_OLEUIHELP* = 99
  IDC_IO_CREATENEW* = 2100
  IDC_IO_CREATEFROMFILE* = 2101
  IDC_IO_LINKFILE* = 2102
  IDC_IO_OBJECTTYPELIST* = 2103
  IDC_IO_DISPLAYASICON* = 2104
  IDC_IO_CHANGEICON* = 2105
  IDC_IO_FILE* = 2106
  IDC_IO_FILEDISPLAY* = 2107
  IDC_IO_RESULTIMAGE* = 2108
  IDC_IO_RESULTTEXT* = 2109
  IDC_IO_ICONDISPLAY* = 2110
  IDC_IO_OBJECTTYPETEXT* = 2111
  IDC_IO_FILETEXT* = 2112
  IDC_IO_FILETYPE* = 2113
  IDC_IO_INSERTCONTROL* = 2114
  IDC_IO_ADDCONTROL* = 2115
  IDC_IO_CONTROLTYPELIST* = 2116
  IDC_PS_PASTE* = 500
  IDC_PS_PASTELINK* = 501
  IDC_PS_SOURCETEXT* = 502
  IDC_PS_PASTELIST* = 503
  IDC_PS_PASTELINKLIST* = 504
  IDC_PS_DISPLAYLIST* = 505
  IDC_PS_DISPLAYASICON* = 506
  IDC_PS_ICONDISPLAY* = 507
  IDC_PS_CHANGEICON* = 508
  IDC_PS_RESULTIMAGE* = 509
  IDC_PS_RESULTTEXT* = 510
  IDC_CI_GROUP* = 120
  IDC_CI_CURRENT* = 121
  IDC_CI_CURRENTICON* = 122
  IDC_CI_DEFAULT* = 123
  IDC_CI_DEFAULTICON* = 124
  IDC_CI_FROMFILE* = 125
  IDC_CI_FROMFILEEDIT* = 126
  IDC_CI_ICONLIST* = 127
  IDC_CI_LABEL* = 128
  IDC_CI_LABELEDIT* = 129
  IDC_CI_BROWSE* = 130
  IDC_CI_ICONDISPLAY* = 131
  IDC_CV_OBJECTTYPE* = 150
  IDC_CV_DISPLAYASICON* = 152
  IDC_CV_CHANGEICON* = 153
  IDC_CV_ACTIVATELIST* = 154
  IDC_CV_CONVERTTO* = 155
  IDC_CV_ACTIVATEAS* = 156
  IDC_CV_RESULTTEXT* = 157
  IDC_CV_CONVERTLIST* = 158
  IDC_CV_ICONDISPLAY* = 165
  IDC_EL_CHANGESOURCE* = 201
  IDC_EL_AUTOMATIC* = 202
  IDC_EL_CANCELLINK* = 209
  IDC_EL_UPDATENOW* = 210
  IDC_EL_OPENSOURCE* = 211
  IDC_EL_MANUAL* = 212
  IDC_EL_LINKSOURCE* = 216
  IDC_EL_LINKTYPE* = 217
  IDC_EL_LINKSLISTBOX* = 206
  IDC_EL_COL1* = 220
  IDC_EL_COL2* = 221
  IDC_EL_COL3* = 222
  IDC_BZ_RETRY* = 600
  IDC_BZ_ICON* = 601
  IDC_BZ_MESSAGE1* = 602
  IDC_BZ_SWITCHTO* = 604
  IDC_UL_METER* = 1029
  IDC_UL_STOP* = 1030
  IDC_UL_PERCENT* = 1031
  IDC_UL_PROGRESS* = 1032
  IDC_PU_LINKS* = 900
  IDC_PU_TEXT* = 901
  IDC_PU_CONVERT* = 902
  IDC_PU_ICON* = 908
  IDC_GP_OBJECTNAME* = 1009
  IDC_GP_OBJECTTYPE* = 1010
  IDC_GP_OBJECTSIZE* = 1011
  IDC_GP_CONVERT* = 1013
  IDC_GP_OBJECTICON* = 1014
  IDC_GP_OBJECTLOCATION* = 1022
  IDC_VP_PERCENT* = 1000
  IDC_VP_CHANGEICON* = 1001
  IDC_VP_EDITABLE* = 1002
  IDC_VP_ASICON* = 1003
  IDC_VP_RELATIVE* = 1005
  IDC_VP_SPIN* = 1006
  IDC_VP_SCALETXT* = 1034
  IDC_VP_ICONDISPLAY* = 1021
  IDC_VP_RESULTIMAGE* = 1033
  IDC_LP_OPENSOURCE* = 1006
  IDC_LP_UPDATENOW* = 1007
  IDC_LP_BREAKLINK* = 1008
  IDC_LP_LINKSOURCE* = 1012
  IDC_LP_CHANGESOURCE* = 1015
  IDC_LP_AUTOMATIC* = 1016
  IDC_LP_MANUAL* = 1017
  IDC_LP_DATE* = 1018
  IDC_LP_TIME* = 1019
  IDD_INSERTOBJECT* = 1000
  IDD_CHANGEICON* = 1001
  IDD_CONVERT* = 1002
  IDD_PASTESPECIAL* = 1003
  IDD_EDITLINKS* = 1004
  IDD_BUSY* = 1006
  IDD_UPDATELINKS* = 1007
  IDD_CHANGESOURCE* = 1009
  IDD_INSERTFILEBROWSE* = 1010
  IDD_CHANGEICONBROWSE* = 1011
  IDD_CONVERTONLY* = 1012
  IDD_CHANGESOURCE4* = 1013
  IDD_GNRLPROPS* = 1100
  IDD_VIEWPROPS* = 1101
  IDD_LINKPROPS* = 1102
  IDD_CANNOTUPDATELINK* = 1008
  IDD_LINKSOURCEUNAVAILABLE* = 1020
  IDD_SERVERNOTFOUND* = 1023
  IDD_OUTOFMEMORY* = 1024
  IDD_SERVERNOTREGW* = 1021
  IDD_LINKTYPECHANGEDW* = 1022
  IDD_SERVERNOTREGA* = 1025
  IDD_LINKTYPECHANGEDA* = 1026
  ID_BROWSE_CHANGEICON* = 1
  ID_BROWSE_INSERTFILE* = 2
  ID_BROWSE_ADDCONTROL* = 3
  ID_BROWSE_CHANGESOURCE* = 4
  OLEUI_FALSE* = 0
  OLEUI_SUCCESS* = 1
  OLEUI_OK* = 1
  OLEUI_CANCEL* = 2
  OLEUI_ERR_STANDARDMIN* = 100
  OLEUI_ERR_STRUCTURENULL* = 101
  OLEUI_ERR_STRUCTUREINVALID* = 102
  OLEUI_ERR_CBSTRUCTINCORRECT* = 103
  OLEUI_ERR_HWNDOWNERINVALID* = 104
  OLEUI_ERR_LPSZCAPTIONINVALID* = 105
  OLEUI_ERR_LPFNHOOKINVALID* = 106
  OLEUI_ERR_HINSTANCEINVALID* = 107
  OLEUI_ERR_LPSZTEMPLATEINVALID* = 108
  OLEUI_ERR_HRESOURCEINVALID* = 109
  OLEUI_ERR_FINDTEMPLATEFAILURE* = 110
  OLEUI_ERR_LOADTEMPLATEFAILURE* = 111
  OLEUI_ERR_DIALOGFAILURE* = 112
  OLEUI_ERR_LOCALMEMALLOC* = 113
  OLEUI_ERR_GLOBALMEMALLOC* = 114
  OLEUI_ERR_LOADSTRING* = 115
  OLEUI_ERR_OLEMEMALLOC* = 116
  OLEUI_ERR_STANDARDMAX* = 116
  OPF_OBJECTISLINK* = 1
  OPF_NOFILLDEFAULT* = 2
  OPF_SHOWHELP* = 4
  OPF_DISABLECONVERT* = 8
  OLEUI_OPERR_SUBPROPNULL* = OLEUI_ERR_STANDARDMAX
  OLEUI_OPERR_SUBPROPINVALID* = ( OLEUI_ERR_STANDARDMAX+1 )
  OLEUI_OPERR_PROPSHEETNULL* = ( OLEUI_ERR_STANDARDMAX+2 )
  OLEUI_OPERR_PROPSHEETINVALID* = ( OLEUI_ERR_STANDARDMAX+3 )
  OLEUI_OPERR_SUPPROP* = ( OLEUI_ERR_STANDARDMAX+4 )
  OLEUI_OPERR_PROPSINVALID* = ( OLEUI_ERR_STANDARDMAX+5 )
  OLEUI_OPERR_PAGESINCORRECT* = ( OLEUI_ERR_STANDARDMAX+6 )
  OLEUI_OPERR_INVALIDPAGES* = ( OLEUI_ERR_STANDARDMAX+7 )
  OLEUI_OPERR_NOTSUPPORTED* = ( OLEUI_ERR_STANDARDMAX+8 )
  OLEUI_OPERR_DLGPROCNOTNULL* = ( OLEUI_ERR_STANDARDMAX+9 )
  OLEUI_OPERR_LPARAMNOTZERO* = ( OLEUI_ERR_STANDARDMAX+10 )
  OLEUI_GPERR_STRINGINVALID* = ( OLEUI_ERR_STANDARDMAX+11 )
  OLEUI_GPERR_CLASSIDINVALID* = ( OLEUI_ERR_STANDARDMAX+12 )
  OLEUI_GPERR_LPCLSIDEXCLUDEINVALID* = ( OLEUI_ERR_STANDARDMAX+13 )
  OLEUI_GPERR_CBFORMATINVALID* = ( OLEUI_ERR_STANDARDMAX+14 )
  OLEUI_VPERR_METAPICTINVALID* = ( OLEUI_ERR_STANDARDMAX+15 )
  OLEUI_VPERR_DVASPECTINVALID* = ( OLEUI_ERR_STANDARDMAX+16 )
  OLEUI_LPERR_LINKCNTRNULL* = ( OLEUI_ERR_STANDARDMAX+17 )
  OLEUI_LPERR_LINKCNTRINVALID* = ( OLEUI_ERR_STANDARDMAX+18 )
  OLEUI_OPERR_PROPERTYSHEET* = ( OLEUI_ERR_STANDARDMAX+19 )
  OLEUI_OPERR_OBJINFOINVALID* = ( OLEUI_ERR_STANDARDMAX+20 )
  OLEUI_OPERR_LINKINFOINVALID* = ( OLEUI_ERR_STANDARDMAX+21 )
  OLEUI_QUERY_GETCLASSID* = 65280
  OLEUI_QUERY_LINKBROKEN* = 65281
  IOF_SHOWHELP* = 1
  IOF_SELECTCREATENEW* = 2
  IOF_SELECTCREATEFROMFILE* = 4
  IOF_CHECKLINK* = 8
  IOF_CHECKDISPLAYASICON* = 16
  IOF_CREATENEWOBJECT* = 32
  IOF_CREATEFILEOBJECT* = 64
  IOF_CREATELINKOBJECT* = 128
  IOF_DISABLELINK* = 256
  IOF_VERIFYSERVERSEXIST* = 512
  IOF_DISABLEDISPLAYASICON* = 1024
  IOF_HIDECHANGEICON* = 2048
  IOF_SHOWINSERTCONTROL* = 4096
  IOF_SELECTCREATECONTROL* = 8192
  OLEUI_IOERR_LPSZFILEINVALID* = OLEUI_ERR_STANDARDMAX
  OLEUI_IOERR_LPSZLABELINVALID* = ( OLEUI_ERR_STANDARDMAX+1 )
  OLEUI_IOERR_HICONINVALID* = ( OLEUI_ERR_STANDARDMAX+2 )
  OLEUI_IOERR_LPFORMATETCINVALID* = ( OLEUI_ERR_STANDARDMAX+3 )
  OLEUI_IOERR_PPVOBJINVALID* = ( OLEUI_ERR_STANDARDMAX+4 )
  OLEUI_IOERR_LPIOLECLIENTSITEINVALID* = ( OLEUI_ERR_STANDARDMAX+5 )
  OLEUI_IOERR_LPISTORAGEINVALID* = ( OLEUI_ERR_STANDARDMAX+6 )
  OLEUI_IOERR_SCODEHASERROR* = ( OLEUI_ERR_STANDARDMAX+7 )
  OLEUI_IOERR_LPCLSIDEXCLUDEINVALID* = ( OLEUI_ERR_STANDARDMAX+8 )
  OLEUI_IOERR_CCHFILEINVALID* = ( OLEUI_ERR_STANDARDMAX+9 )
  PSF_SHOWHELP* = 1
  PSF_SELECTPASTE* = 2
  PSF_SELECTPASTELINK* = 4
  PSF_CHECKDISPLAYASICON* = 8
  PSF_DISABLEDISPLAYASICON* = 16
  PSF_HIDECHANGEICON* = 32
  PSF_STAYONCLIPBOARDCHANGE* = 64
  PSF_NOREFRESHDATAOBJECT* = 128
  OLEUI_IOERR_SRCDATAOBJECTINVALID* = OLEUI_ERR_STANDARDMAX
  OLEUI_IOERR_ARRPASTEENTRIESINVALID* = ( OLEUI_ERR_STANDARDMAX+1 )
  OLEUI_IOERR_ARRLINKTYPESINVALID* = ( OLEUI_ERR_STANDARDMAX+2 )
  OLEUI_PSERR_CLIPBOARDCHANGED* = ( OLEUI_ERR_STANDARDMAX+3 )
  OLEUI_PSERR_GETCLIPBOARDFAILED* = ( OLEUI_ERR_STANDARDMAX+4 )
  OLEUI_ELERR_LINKCNTRNULL* = OLEUI_ERR_STANDARDMAX
  OLEUI_ELERR_LINKCNTRINVALID* = ( OLEUI_ERR_STANDARDMAX+1 )
  ELF_SHOWHELP* = 1
  ELF_DISABLEUPDATENOW* = 2
  ELF_DISABLEOPENSOURCE* = 4
  ELF_DISABLECHANGESOURCE* = 8
  ELF_DISABLECANCELLINK* = 16
  CIF_SHOWHELP* = 1
  CIF_SELECTCURRENT* = 2
  CIF_SELECTDEFAULT* = 4
  CIF_SELECTFROMFILE* = 8
  CIF_USEICONEXE* = 16
  OLEUI_CIERR_MUSTHAVECLSID* = OLEUI_ERR_STANDARDMAX
  OLEUI_CIERR_MUSTHAVECURRENTMETAFILE* = OLEUI_ERR_STANDARDMAX+1
  OLEUI_CIERR_SZICONEXEINVALID* = OLEUI_ERR_STANDARDMAX+2
  CF_SHOWHELPBUTTON* = 1
  CF_SETCONVERTDEFAULT* = 2
  CF_SETACTIVATEDEFAULT* = 4
  CF_SELECTCONVERTTO* = 8
  CF_SELECTACTIVATEAS* = 16
  CF_DISABLEDISPLAYASICON* = 32
  CF_DISABLEACTIVATEAS* = 64
  CF_HIDECHANGEICON* = 128
  CF_CONVERTONLY* = 256
  OLEUI_CTERR_CLASSIDINVALID* = OLEUI_ERR_STANDARDMAX+1
  OLEUI_CTERR_DVASPECTINVALID* = OLEUI_ERR_STANDARDMAX+2
  OLEUI_CTERR_CBFORMATINVALID* = OLEUI_ERR_STANDARDMAX+3
  OLEUI_CTERR_HMETAPICTINVALID* = OLEUI_ERR_STANDARDMAX+4
  OLEUI_CTERR_STRINGINVALID* = OLEUI_ERR_STANDARDMAX+5
  BZ_DISABLECANCELBUTTON* = 1
  BZ_DISABLESWITCHTOBUTTON* = 2
  BZ_DISABLERETRYBUTTON* = 4
  BZ_NOTRESPONDINGDIALOG* = 8
  OLEUI_BZERR_HTASKINVALID* = OLEUI_ERR_STANDARDMAX
  OLEUI_BZ_SWITCHTOSELECTED* = OLEUI_ERR_STANDARDMAX+1
  OLEUI_BZ_RETRYSELECTED* = OLEUI_ERR_STANDARDMAX+2
  OLEUI_BZ_CALLUNBLOCKED* = OLEUI_ERR_STANDARDMAX+3
  CSF_SHOWHELP* = 1
  CSF_VALIDSOURCE* = 2
  CSF_ONLYGETSOURCE* = 4
  CSF_EXPLORER* = 8
  OLEUI_CSERR_LINKCNTRNULL* = OLEUI_ERR_STANDARDMAX
  OLEUI_CSERR_LINKCNTRINVALID* = OLEUI_ERR_STANDARDMAX+1
  OLEUI_CSERR_FROMNOTNULL* = OLEUI_ERR_STANDARDMAX+2
  OLEUI_CSERR_TONOTNULL* = OLEUI_ERR_STANDARDMAX+3
  OLEUI_CSERR_SOURCENULL* = OLEUI_ERR_STANDARDMAX+4
  OLEUI_CSERR_SOURCEINVALID* = OLEUI_ERR_STANDARDMAX+5
  OLEUI_CSERR_SOURCEPARSERROR* = OLEUI_ERR_STANDARDMAX+6
  OLEUI_CSERR_SOURCEPARSEERROR* = OLEUI_ERR_STANDARDMAX+7
  VPF_SELECTRELATIVE* = 1
  VPF_DISABLERELATIVE* = 2
  VPF_DISABLESCALE* = 4

type
  LPFNOLEUIHOOK* = proc (P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): UINT {.stdcall.}

type
  TOLEUIINSERTOBJECTW* {.final, pure.} = object # renamed from OLEUIINSERTOBJECTW
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCWSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCWSTR
    hResource*: HRSRC
    clsid*: CLSID
    lpszFile*: LPWSTR
    cchFile*: UINT
    cClsidExclude*: UINT
    lpClsidExclude*: LPCLSID
    iid*: IID
    oleRender*: DWORD
    lpFormatEtc*: LPFORMATETC
    lpIOleClientSite*: LPOLECLIENTSITE
    lpIStorage*: LPSTORAGE
    ppvObj*: ptr PVOID
    sc*: SCODE
    hMetaPict*: HGLOBAL
  POLEUIINSERTOBJECTW* = ptr TOLEUIINSERTOBJECTW
  LPOLEUIINSERTOBJECTW* = ptr TOLEUIINSERTOBJECTW
  TOLEUIINSERTOBJECTA* {.final, pure.} = object # renamed from OLEUIINSERTOBJECTA
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCSTR
    hResource*: HRSRC
    clsid*: CLSID
    lpszFile*: LPSTR
    cchFile*: UINT
    cClsidExclude*: UINT
    lpClsidExclude*: LPCLSID
    iid*: IID
    oleRender*: DWORD
    lpFormatEtc*: LPFORMATETC
    lpIOleClientSite*: LPOLECLIENTSITE
    lpIStorage*: LPSTORAGE
    ppvObj*: ptr PVOID
    sc*: SCODE
    hMetaPict*: HGLOBAL
  POLEUIINSERTOBJECTA* = ptr TOLEUIINSERTOBJECTA
  LPOLEUIINSERTOBJECTA* = ptr TOLEUIINSERTOBJECTA

proc OleUIInsertObjectW*(P1: LPOLEUIINSERTOBJECTW): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIInsertObjectA*(P1: LPOLEUIINSERTOBJECTA): UINT {.winapi, dynlib: "oledlg", importc.}

const
  # OLEUIPASTEFLAG* = enum
  OLEUIPASTE_PASTEONLY* = 0
  OLEUIPASTE_LINKTYPE1* = 1
  OLEUIPASTE_LINKTYPE2* = 2
  OLEUIPASTE_LINKTYPE3* = 4
  OLEUIPASTE_LINKTYPE4* = 8
  OLEUIPASTE_LINKTYPE5* = 16
  OLEUIPASTE_LINKTYPE6* = 32
  OLEUIPASTE_LINKTYPE7* = 64
  OLEUIPASTE_LINKTYPE8* = 128
  OLEUIPASTE_PASTE* = 512
  OLEUIPASTE_LINKANYTYPE* = 1024
  OLEUIPASTE_ENABLEICON* = 2048

type
  OLEUIPASTEFLAG* = int32
  OLEUIPASTEENTRYW* {.final, pure.} = object
    fmtetc*: FORMATETC
    lpstrFormatName*: LPCWSTR
    lpstrResultText*: LPCWSTR
    dwFlags*: DWORD
    dwScratchSpace*: DWORD
  POLEUIPASTEENTRYW* = ptr OLEUIPASTEENTRYW
  LPOLEUIPASTEENTRYW* = ptr OLEUIPASTEENTRYW
  OLEUIPASTEENTRYA* {.final, pure.} = object
    fmtetc*: FORMATETC
    lpstrFormatName*: LPCSTR
    lpstrResultText*: LPCSTR
    dwFlags*: DWORD
    dwScratchSpace*: DWORD
  POLEUIPASTEENTRYA* = ptr OLEUIPASTEENTRYA
  LPOLEUIPASTEENTRYA* = ptr OLEUIPASTEENTRYA
  TOLEUIPASTESPECIALW* {.final, pure.} = object # renamed from OLEUIPASTESPECIALW
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCWSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCWSTR
    hResource*: HRSRC
    lpSrcDataObj*: LPDATAOBJECT
    arrPasteEntries*: LPOLEUIPASTEENTRYW
    cPasteEntries*: int32
    arrLinkTypes*: ptr UINT
    cLinkTypes*: int32
    cClsidExclude*: UINT
    lpClsidExclude*: LPCLSID
    nSelectedIndex*: int32
    fLink*: BOOL
    hMetaPict*: HGLOBAL
    sizel*: SIZEL
  POLEUIPASTESPECIALW* = ptr TOLEUIPASTESPECIALW
  LPOLEUIPASTESPECIALW* = ptr TOLEUIPASTESPECIALW
  TOLEUIPASTESPECIALA* {.final, pure.} = object # renamed from OLEUIPASTESPECIALA
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCSTR
    hResource*: HRSRC
    lpSrcDataObj*: LPDATAOBJECT
    arrPasteEntries*: LPOLEUIPASTEENTRYA
    cPasteEntries*: int32
    arrLinkTypes*: ptr UINT
    cLinkTypes*: int32
    cClsidExclude*: UINT
    lpClsidExclude*: LPCLSID
    nSelectedIndex*: int32
    fLink*: BOOL
    hMetaPict*: HGLOBAL
    sizel*: SIZEL
  POLEUIPASTESPECIALA* = ptr TOLEUIPASTESPECIALA
  LPOLEUIPASTESPECIALA* = ptr TOLEUIPASTESPECIALA
  IOleUILinkContainerW* {.pure.} = object
    lpVtbl*: ptr IOleUILinkContainerWVtbl
  IOleUILinkContainerWVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetNextLink*: proc(self: ptr IOleUILinkContainerW, dwLink: DWORD): DWORD {.stdcall.}
    SetLinkUpdateOptions*: proc(self: ptr IOleUILinkContainerW, P1: DWORD, P2: DWORD): HRESULT {.stdcall.}
    GetLinkUpdateOptions*: proc(self: ptr IOleUILinkContainerW, P1: DWORD, P2: PDWORD): HRESULT {.stdcall.}
    SetLinkSource*: proc(self: ptr IOleUILinkContainerW, P1: DWORD, P2: LPWSTR, P3: ULONG, P4: PULONG, P5: BOOL): HRESULT {.stdcall.}
    GetLinkSource*: proc(self: ptr IOleUILinkContainerW, P1: DWORD, P2: ptr LPWSTR, P3: PULONG, P4: ptr LPWSTR, P5: ptr LPWSTR, P6: ptr BOOL, P7: ptr BOOL): HRESULT {.stdcall.}
    OpenLinkSource*: proc(self: ptr IOleUILinkContainerW, P1: DWORD): HRESULT {.stdcall.}
    UpdateLink*: proc(self: ptr IOleUILinkContainerW, P1: DWORD, P2: BOOL, P3: BOOL): HRESULT {.stdcall.}
    CancelLink*: proc(self: ptr IOleUILinkContainerW, P1: DWORD): HRESULT {.stdcall.}
  LPOLEUILINKCONTAINERW* = ptr IOleUILinkContainerW
  IOleUILinkContainerA* {.pure.} = object
    lpVtbl*: ptr IOleUILinkContainerAVtbl
  IOleUILinkContainerAVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetNextLink*: proc(self: ptr IOleUILinkContainerA, P1: DWORD): DWORD {.stdcall.}
    SetLinkUpdateOptions*: proc(self: ptr IOleUILinkContainerA, P1: DWORD, P2: DWORD): HRESULT {.stdcall.}
    GetLinkUpdateOptions*: proc(self: ptr IOleUILinkContainerA, P1: DWORD, P2: PDWORD): HRESULT {.stdcall.}
    SetLinkSource*: proc(self: ptr IOleUILinkContainerA, P1: DWORD, P2: LPSTR, P3: ULONG, P4: PULONG, P5: BOOL): HRESULT {.stdcall.}
    GetLinkSource*: proc(self: ptr IOleUILinkContainerA, P1: DWORD, P2: ptr LPSTR, P3: PULONG, P4: ptr LPSTR, P5: ptr LPSTR, P6: ptr BOOL, P7: ptr BOOL): HRESULT {.stdcall.}
    OpenLinkSource*: proc(self: ptr IOleUILinkContainerA, P1: DWORD): HRESULT {.stdcall.}
    UpdateLink*: proc(self: ptr IOleUILinkContainerA, P1: DWORD, P2: BOOL, P3: BOOL): HRESULT {.stdcall.}
    CancelLink*: proc(self: ptr IOleUILinkContainerA, P1: DWORD): HRESULT {.stdcall.}
  LPOLEUILINKCONTAINERA* = ptr IOleUILinkContainerA
  TOLEUIEDITLINKSW* {.final, pure.} = object # renamed from OLEUIEDITLINKSW
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCWSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCWSTR
    hResource*: HRSRC
    lpOleUILinkContainer*: LPOLEUILINKCONTAINERW
  POLEUIEDITLINKSW* = ptr TOLEUIEDITLINKSW
  LPOLEUIEDITLINKSW* = ptr TOLEUIEDITLINKSW
  TOLEUIEDITLINKSA* {.final, pure.} = object # renamed from OLEUIEDITLINKSA
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCSTR
    hResource*: HRSRC
    lpOleUILinkContainer*: LPOLEUILINKCONTAINERA
  POLEUIEDITLINKSA* = ptr TOLEUIEDITLINKSA
  LPOLEUIEDITLINKSA* = ptr TOLEUIEDITLINKSA
  TOLEUICHANGEICONW* {.final, pure.} = object # renamed from OLEUICHANGEICONW
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCWSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCWSTR
    hResource*: HRSRC
    hMetaPict*: HGLOBAL
    clsid*: CLSID
    szIconExe*: array[MAX_PATH, WCHAR]
    cchIconExe*: int32
  POLEUICHANGEICONW* = ptr TOLEUICHANGEICONW
  LPOLEUICHANGEICONW* = ptr TOLEUICHANGEICONW
  TOLEUICHANGEICONA* {.final, pure.} = object # renamed from OLEUICHANGEICONA
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCSTR
    hResource*: HRSRC
    hMetaPict*: HGLOBAL
    clsid*: CLSID
    szIconExe*: array[MAX_PATH, CHAR]
    cchIconExe*: int32
  POLEUICHANGEICONA* = ptr TOLEUICHANGEICONA
  LPOLEUICHANGEICONA* = ptr TOLEUICHANGEICONA
  TOLEUICONVERTW* {.final, pure.} = object # renamed from OLEUICONVERTW
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCWSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCWSTR
    hResource*: HRSRC
    clsid*: CLSID
    clsidConvertDefault*: CLSID
    clsidActivateDefault*: CLSID
    clsidNew*: CLSID
    dvAspect*: DWORD
    wFormat*: WORD
    fIsLinkedObject*: BOOL
    hMetaPict*: HGLOBAL
    lpszUserType*: LPWSTR
    fObjectsIconChanged*: BOOL
    lpszDefLabel*: LPWSTR
    cClsidExclude*: UINT
    lpClsidExclude*: LPCLSID
  POLEUICONVERTW* = ptr TOLEUICONVERTW
  LPOLEUICONVERTW* = ptr TOLEUICONVERTW
  TOLEUICONVERTA* {.final, pure.} = object # renamed from OLEUICONVERTA
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCSTR
    hResource*: HRSRC
    clsid*: CLSID
    clsidConvertDefault*: CLSID
    clsidActivateDefault*: CLSID
    clsidNew*: CLSID
    dvAspect*: DWORD
    wFormat*: WORD
    fIsLinkedObject*: BOOL
    hMetaPict*: HGLOBAL
    lpszUserType*: LPSTR
    fObjectsIconChanged*: BOOL
    lpszDefLabel*: LPSTR
    cClsidExclude*: UINT
    lpClsidExclude*: LPCLSID
  POLEUICONVERTA* = ptr TOLEUICONVERTA
  LPOLEUICONVERTA* = ptr TOLEUICONVERTA
  TOLEUIBUSYW* {.final, pure.} = object # renamed from OLEUIBUSYW
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCWSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCWSTR
    hResource*: HRSRC
    hTask*: HTASK
    lphWndDialog*: ptr HWND
  POLEUIBUSYW* = ptr TOLEUIBUSYW
  LPOLEUIBUSYW* = ptr TOLEUIBUSYW
  TOLEUIBUSYA* {.final, pure.} = object # renamed from OLEUIBUSYA
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCSTR
    hResource*: HRSRC
    hTask*: HTASK
    lphWndDialog*: ptr HWND
  POLEUIBUSYA* = ptr TOLEUIBUSYA
  LPOLEUIBUSYA* = ptr TOLEUIBUSYA
  TOLEUICHANGESOURCEW* {.final, pure.} = object # renamed from OLEUICHANGESOURCEW
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCWSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCWSTR
    hResource*: HRSRC
    lpOFN*: ptr OPENFILENAMEW
    dwReserved1*: array[4, DWORD]
    lpOleUILinkContainer*: LPOLEUILINKCONTAINERW
    dwLink*: DWORD
    lpszDisplayName*: LPWSTR
    nFileLength*: ULONG
    lpszFrom*: LPWSTR
    lpszTo*: LPWSTR
  POLEUICHANGESOURCEW* = ptr TOLEUICHANGESOURCEW
  LPOLEUICHANGESOURCEW* = ptr TOLEUICHANGESOURCEW
  TOLEUICHANGESOURCEA* {.final, pure.} = object # renamed from OLEUICHANGESOURCEA
    cbStruct*: DWORD
    dwFlags*: DWORD
    hWndOwner*: HWND
    lpszCaption*: LPCSTR
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    hInstance*: HINSTANCE
    lpszTemplate*: LPCSTR
    hResource*: HRSRC
    lpOFN*: ptr OPENFILENAMEA
    dwReserved1*: array[4, DWORD]
    lpOleUILinkContainer*: LPOLEUILINKCONTAINERA
    dwLink*: DWORD
    lpszDisplayName*: LPSTR
    nFileLength*: ULONG
    lpszFrom*: LPSTR
    lpszTo*: LPSTR
  POLEUICHANGESOURCEA* = ptr TOLEUICHANGESOURCEA
  LPOLEUICHANGESOURCEA* = ptr TOLEUICHANGESOURCEA
  IOleUIObjInfoW* {.pure.} = object
    lpVtbl*: ptr IOleUIObjInfoWVtbl
  IOleUIObjInfoWVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetObjectInfo*: proc(self: ptr IOleUIObjInfoW, P1: DWORD, P2: PDWORD, P3: ptr LPWSTR, P4: ptr LPWSTR, P5: ptr LPWSTR, P6: ptr LPWSTR): HRESULT {.stdcall.}
    GetConvertInfo*: proc(self: ptr IOleUIObjInfoW, P1: DWORD, P2: ptr CLSID, P3: PWORD, P4: ptr CLSID, P5: ptr LPCLSID, P6: ptr UINT): HRESULT {.stdcall.}
    ConvertObject*: proc(self: ptr IOleUIObjInfoW, P1: DWORD, P2: REFCLSID): HRESULT {.stdcall.}
    GetViewInfo*: proc(self: ptr IOleUIObjInfoW, P1: DWORD, P2: ptr HGLOBAL, P3: PDWORD, P4: ptr int32): HRESULT {.stdcall.}
    SetViewInfo*: proc(self: ptr IOleUIObjInfoW, P1: DWORD, P2: HGLOBAL, P3: DWORD, P4: int32, P5: BOOL): HRESULT {.stdcall.}
  LPOLEUIOBJINFOW* = ptr IOleUIObjInfoW
  IOleUIObjInfoA* {.pure.} = object
    lpVtbl*: ptr IOleUIObjInfoAVtbl
  IOleUIObjInfoAVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetObjectInfo*: proc(self: ptr IOleUIObjInfoA, P1: DWORD, P2: PDWORD, P3: ptr LPSTR, P4: ptr LPSTR, P5: ptr LPSTR, P6: ptr LPSTR): HRESULT {.stdcall.}
    GetConvertInfo*: proc(self: ptr IOleUIObjInfoA, P1: DWORD, P2: ptr CLSID, P3: PWORD, P4: ptr CLSID, P5: ptr LPCLSID, P6: ptr UINT): HRESULT {.stdcall.}
    ConvertObject*: proc(self: ptr IOleUIObjInfoA, P1: DWORD, P2: REFCLSID): HRESULT {.stdcall.}
    GetViewInfo*: proc(self: ptr IOleUIObjInfoA, P1: DWORD, P2: ptr HGLOBAL, P3: PDWORD, P4: ptr int32): HRESULT {.stdcall.}
    SetViewInfo*: proc(self: ptr IOleUIObjInfoA, P1: DWORD, P2: HGLOBAL, P3: DWORD, P4: int32, P5: BOOL): HRESULT {.stdcall.}
  LPOLEUIOBJINFOA* = ptr IOleUIObjInfoA
  IOleUILinkInfoW* {.pure.} = object
    lpVtbl*: ptr IOleUILinkInfoWVtbl
  IOleUILinkInfoWVtbl* {.pure, inheritable.} = object of IOleUILinkContainerWVtbl
    GetLastUpdate*: proc(self: ptr IOleUILinkInfoW, P1: DWORD, P2: ptr FILETIME): HRESULT {.stdcall.}
  LPOLEUILINKINFOW* = ptr IOleUILinkInfoW
  IOleUILinkInfoA* {.pure.} = object
    lpVtbl*: ptr IOleUILinkInfoAVtbl
  IOleUILinkInfoAVtbl* {.pure, inheritable.} = object of IOleUILinkContainerAVtbl
    GetLastUpdate*: proc(self: ptr IOleUILinkInfoA, P1: DWORD, P2: ptr FILETIME): HRESULT {.stdcall.}
  LPOLEUILINKINFOA* = ptr IOleUILinkInfoA
  OLEUIGNRLPROPSW* {.final, pure.} = object
    cbStruct*: DWORD
    dwFlags*: DWORD
    dwReserved1*: array[2, DWORD]
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    dwReserved2*: array[3, DWORD]
    lpOP*: ptr OLEUIOBJECTPROPSW
  POLEUIGNRLPROPSW* = ptr OLEUIGNRLPROPSW
  LPOLEUIGNRLPROPSW* = ptr OLEUIGNRLPROPSW
  OLEUIGNRLPROPSA* {.final, pure.} = object
    cbStruct*: DWORD
    dwFlags*: DWORD
    dwReserved1*: array[2, DWORD]
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    dwReserved2*: array[3, DWORD]
    lpOP*: ptr OLEUIOBJECTPROPSA
  POLEUIGNRLPROPSA* = ptr OLEUIGNRLPROPSA
  LPOLEUIGNRLPROPSA* = ptr OLEUIGNRLPROPSA
  OLEUIVIEWPROPSW* {.final, pure.} = object
    cbStruct*: DWORD
    dwFlags*: DWORD
    dwReserved1*: array[2, DWORD]
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    dwReserved2*: array[3, DWORD]
    lpOP*: ptr OLEUIOBJECTPROPSW
    nScaleMin*: int32
    nScaleMax*: int32
  POLEUIVIEWPROPSW* = ptr OLEUIVIEWPROPSW
  LPOLEUIVIEWPROPSW* = ptr OLEUIVIEWPROPSW
  OLEUIVIEWPROPSA* {.final, pure.} = object
    cbStruct*: DWORD
    dwFlags*: DWORD
    dwReserved1*: array[2, DWORD]
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    dwReserved2*: array[3, DWORD]
    lpOP*: ptr OLEUIOBJECTPROPSA
    nScaleMin*: int32
    nScaleMax*: int32
  POLEUIVIEWPROPSA* = ptr OLEUIVIEWPROPSA
  LPOLEUIVIEWPROPSA* = ptr OLEUIVIEWPROPSA
  OLEUILINKPROPSW* {.final, pure.} = object
    cbStruct*: DWORD
    dwFlags*: DWORD
    dwReserved1*: array[2, DWORD]
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    dwReserved2*: array[3, DWORD]
    lpOP*: ptr OLEUIOBJECTPROPSW
  POLEUILINKPROPSW* = ptr OLEUILINKPROPSW
  LPOLEUILINKPROPSW* = ptr OLEUILINKPROPSW
  OLEUILINKPROPSA* {.final, pure.} = object
    cbStruct*: DWORD
    dwFlags*: DWORD
    dwReserved1*: array[2, DWORD]
    lpfnHook*: LPFNOLEUIHOOK
    lCustData*: LPARAM
    dwReserved2*: array[3, DWORD]
    lpOP*: ptr OLEUIOBJECTPROPSA
  POLEUILINKPROPSA* = ptr OLEUILINKPROPSA
  LPOLEUILINKPROPSA* = ptr OLEUILINKPROPSA
  OLEUIOBJECTPROPSW* {.final, pure.} = object
    cbStruct*: DWORD
    dwFlags*: DWORD
    lpPS*: LPPROPSHEETHEADERW
    dwObject*: DWORD
    lpObjInfo*: LPOLEUIOBJINFOW
    dwLink*: DWORD
    lpLinkInfo*: LPOLEUILINKINFOW
    lpGP*: LPOLEUIGNRLPROPSW
    lpVP*: LPOLEUIVIEWPROPSW
    lpLP*: LPOLEUILINKPROPSW
  POLEUIOBJECTPROPSW* = ptr OLEUIOBJECTPROPSW
  LPOLEUIOBJECTPROPSW* = ptr OLEUIOBJECTPROPSW
  OLEUIOBJECTPROPSA* {.final, pure.} = object
    cbStruct*: DWORD
    dwFlags*: DWORD
    lpPS*: LPPROPSHEETHEADERA
    dwObject*: DWORD
    lpObjInfo*: LPOLEUIOBJINFOA
    dwLink*: DWORD
    lpLinkInfo*: LPOLEUILINKINFOA
    lpGP*: LPOLEUIGNRLPROPSA
    lpVP*: LPOLEUIVIEWPROPSA
    lpLP*: LPOLEUILINKPROPSA
  POLEUIOBJECTPROPSA* = ptr OLEUIOBJECTPROPSA
  LPOLEUIOBJECTPROPSA* = ptr OLEUIOBJECTPROPSA
proc OleUIAddVerbMenuW*(P1: LPOLEOBJECT, P2: LPCWSTR, P3: HMENU, P4: UINT, P5: UINT, P6: UINT, P7: BOOL, P8: UINT, P9: ptr HMENU): BOOL {.winapi, dynlib: "oledlg", importc.}
proc OleUIAddVerbMenuA*(P1: LPOLEOBJECT, P2: LPCSTR, P3: HMENU, P4: UINT, P5: UINT, P6: UINT, P7: BOOL, P8: UINT, P9: ptr HMENU): BOOL {.winapi, dynlib: "oledlg", importc.}
proc OleUIBusyW*(P1: LPOLEUIBUSYW): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIBusyA*(P1: LPOLEUIBUSYA): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUICanConvertOrActivateAs*(P1: REFCLSID, P2: BOOL, P3: WORD): BOOL {.winapi, dynlib: "oledlg", importc.}
proc OleUIChangeIconW*(P1: LPOLEUICHANGEICONW): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIChangeIconA*(P1: LPOLEUICHANGEICONA): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIChangeSourceW*(P1: LPOLEUICHANGESOURCEW): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIChangeSourceA*(P1: LPOLEUICHANGESOURCEA): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIConvertW*(P1: LPOLEUICONVERTW): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIConvertA*(P1: LPOLEUICONVERTA): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIEditLinksW*(P1: LPOLEUIEDITLINKSW): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIEditLinksA*(P1: LPOLEUIEDITLINKSA): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIObjectPropertiesW*(P1: LPOLEUIOBJECTPROPSW): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIObjectPropertiesA*(P1: LPOLEUIOBJECTPROPSA): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIPasteSpecialW*(P1: LPOLEUIPASTESPECIALW): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIPasteSpecialA*(P1: LPOLEUIPASTESPECIALA): UINT {.winapi, dynlib: "oledlg", importc.}
proc OleUIUpdateLinksW*(P1: LPOLEUILINKCONTAINERW, P2: HWND, P3: LPWSTR, P4: int32): BOOL {.winapi, dynlib: "oledlg", importc.}
proc OleUIUpdateLinksA*(P1: LPOLEUILINKCONTAINERA, P2: HWND, P3: LPSTR, P4: int32): BOOL {.winapi, dynlib: "oledlg", importc.}
proc OleUIPromptUserW*(P1: int32, P2: HWND): int32 {.winapi, dynlib: "oledlg", varargs, importc.}
proc OleUIPromptUserA*(P1: int32, P2: HWND): int32 {.winapi, dynlib: "oledlg", varargs, importc.}

when not defined(winansi):
  const
    IDD_SERVERNOTREG* = IDD_SERVERNOTREGW
    IDD_LINKTYPECHANGED* = IDD_LINKTYPECHANGEDW

  proc OleUIUpdateLinks*(P1: LPOLEUILINKCONTAINERW, P2: HWND, P3: LPWSTR, P4: int32): BOOL {.winapi, dynlib: "oledlg", importc: "OleUIUpdateLinksW".}
  proc OleUIAddVerbMenu*(P1: LPOLEOBJECT, P2: LPCWSTR, P3: HMENU, P4: UINT, P5: UINT, P6: UINT, P7: BOOL, P8: UINT, P9: ptr HMENU): BOOL {.winapi, dynlib: "oledlg", importc: "OleUIAddVerbMenuW".}

  type
    OLEUIOBJECTPROPS* = OLEUIOBJECTPROPSW
    POLEUIOBJECTPROPS* = POLEUIOBJECTPROPSW
    LPOLEUIOBJECTPROPS* = LPOLEUIOBJECTPROPSW

  proc OleUIObjectProperties*(P1: LPOLEUIOBJECTPROPSW): UINT {.winapi, dynlib: "oledlg", importc: "OleUIObjectPropertiesW".}

  type
    TOLEUIINSERTOBJECT* = TOLEUIINSERTOBJECTW
    POLEUIINSERTOBJECT* = POLEUIINSERTOBJECTW
    LPOLEUIINSERTOBJECT* = LPOLEUIINSERTOBJECTW

  proc OleUIInsertObject*(P1: LPOLEUIINSERTOBJECTW): UINT {.winapi, dynlib: "oledlg", importc: "OleUIInsertObjectW".}
  proc OleUIPromptUser*(P1: int32, P2: HWND): int32 {.winapi, dynlib: "oledlg", varargs, importc: "OleUIPromptUserW".}

  type
    OLEUIPASTEENTRY* = OLEUIPASTEENTRYW
    POLEUIPASTEENTRY* = POLEUIPASTEENTRYW
    LPOLEUIPASTEENTRY* = LPOLEUIPASTEENTRYW
    TOLEUIPASTESPECIAL* = TOLEUIPASTESPECIALW
    POLEUIPASTESPECIAL* = POLEUIPASTESPECIALW
    LPOLEUIPASTESPECIAL* = LPOLEUIPASTESPECIALW

  proc OleUIPasteSpecial*(P1: LPOLEUIPASTESPECIALW): UINT {.winapi, dynlib: "oledlg", importc: "OleUIPasteSpecialW".}

  type
    IOleUILinkContainer* = ptr IOleUILinkContainerW
    LPOLEUILINKCONTAINER* = LPOLEUILINKCONTAINERW
    TOLEUIEDITLINKS* = TOLEUIEDITLINKSW
    POLEUIEDITLINKS* = POLEUIEDITLINKSW
    LPOLEUIEDITLINKS* = LPOLEUIEDITLINKSW

  proc OleUIEditLinks*(P1: LPOLEUIEDITLINKSW): UINT {.winapi, dynlib: "oledlg", importc: "OleUIEditLinksW".}

  type
    TOLEUICHANGEICON* = TOLEUICHANGEICONW
    POLEUICHANGEICON* = POLEUICHANGEICONW
    LPOLEUICHANGEICON* = LPOLEUICHANGEICONW

  proc OleUIChangeIcon*(P1: LPOLEUICHANGEICONW): UINT {.winapi, dynlib: "oledlg", importc: "OleUIChangeIconW".}

  type
    TOLEUICONVERT* = TOLEUICONVERTW
    POLEUICONVERT* = POLEUICONVERTW
    LPOLEUICONVERT* = LPOLEUICONVERTW

  proc OleUIConvert*(P1: LPOLEUICONVERTW): UINT {.winapi, dynlib: "oledlg", importc: "OleUIConvertW".}

  type
    TOLEUIBUSY* = TOLEUIBUSYW
    POLEUIBUSY* = POLEUIBUSYW
    LPOLEUIBUSY* = LPOLEUIBUSYW

  proc OleUIBusy*(P1: LPOLEUIBUSYW): UINT {.winapi, dynlib: "oledlg", importc: "OleUIBusyW".}

  type
    TOLEUICHANGESOURCE* = TOLEUICHANGESOURCEW
    POLEUICHANGESOURCE* = POLEUICHANGESOURCEW
    LPOLEUICHANGESOURCE* = LPOLEUICHANGESOURCEW

  proc OleUIChangeSource*(P1: LPOLEUICHANGESOURCEW): UINT {.winapi, dynlib: "oledlg", importc: "OleUIChangeSourceW".}

  type
    IOleUIObjInfo* = ptr IOleUIObjInfoW
    LPOLEUIOBJINFO* = LPOLEUIOBJINFOW
    IOleUILinkInfo* = ptr IOleUILinkInfoW
    LPOLEUILINKINFO* = LPOLEUILINKINFOW
    OLEUIGNRLPROPS* = OLEUIGNRLPROPSW
    POLEUIGNRLPROPS* = POLEUIGNRLPROPSW
    LPOLEUIGNRLPROPS* = LPOLEUIGNRLPROPSW
    OLEUIVIEWPROPS* = OLEUIVIEWPROPSW
    POLEUIVIEWPROPS* = POLEUIVIEWPROPSW
    LPOLEUIVIEWPROPS* = LPOLEUIVIEWPROPSW
    OLEUILINKPROPS* = OLEUILINKPROPSW
    POLEUILINKPROPS* = POLEUILINKPROPSW
    LPOLEUILINKPROPS* = LPOLEUILINKPROPSW

else:
  const
    IDD_SERVERNOTREG* = IDD_SERVERNOTREGA
    IDD_LINKTYPECHANGED* = IDD_LINKTYPECHANGEDA

  proc OleUIUpdateLinks*(P1: LPOLEUILINKCONTAINERA, P2: HWND, P3: LPSTR, P4: int32): BOOL {.winapi, dynlib: "oledlg", importc: "OleUIUpdateLinksA".}
  proc OleUIAddVerbMenu*(P1: LPOLEOBJECT, P2: LPCSTR, P3: HMENU, P4: UINT, P5: UINT, P6: UINT, P7: BOOL, P8: UINT, P9: ptr HMENU): BOOL {.winapi, dynlib: "oledlg", importc: "OleUIAddVerbMenuA".}

  type
    OLEUIOBJECTPROPS* = OLEUIOBJECTPROPSA
    POLEUIOBJECTPROPS* = POLEUIOBJECTPROPSA
    LPOLEUIOBJECTPROPS* = LPOLEUIOBJECTPROPSA

  proc OleUIObjectProperties*(P1: LPOLEUIOBJECTPROPSA): UINT {.winapi, dynlib: "oledlg", importc: "OleUIObjectPropertiesA".}

  type
    TOLEUIINSERTOBJECT* = TOLEUIINSERTOBJECTA
    POLEUIINSERTOBJECT* = POLEUIINSERTOBJECTA
    LPOLEUIINSERTOBJECT* = LPOLEUIINSERTOBJECTA

  proc OleUIInsertObject*(P1: LPOLEUIINSERTOBJECTA): UINT {.winapi, dynlib: "oledlg", importc: "OleUIInsertObjectA".}
  proc OleUIPromptUser*(P1: int32, P2: HWND): int32 {.winapi, dynlib: "oledlg", varargs, importc: "OleUIPromptUserA".}

  type
    OLEUIPASTEENTRY* = OLEUIPASTEENTRYA
    POLEUIPASTEENTRY* = POLEUIPASTEENTRYA
    LPOLEUIPASTEENTRY* = LPOLEUIPASTEENTRYA
    TOLEUIPASTESPECIAL* = TOLEUIPASTESPECIALA
    POLEUIPASTESPECIAL* = POLEUIPASTESPECIALA
    LPOLEUIPASTESPECIAL* = LPOLEUIPASTESPECIALA

  proc OleUIPasteSpecial*(P1: LPOLEUIPASTESPECIALA): UINT {.winapi, dynlib: "oledlg", importc: "OleUIPasteSpecialA".}

  type
    IOleUILinkContainer* = ptr IOleUILinkContainerA
    LPOLEUILINKCONTAINER* = LPOLEUILINKCONTAINERA
    TOLEUIEDITLINKS* = TOLEUIEDITLINKSA
    POLEUIEDITLINKS* = POLEUIEDITLINKSA
    LPOLEUIEDITLINKS* = LPOLEUIEDITLINKSA

  proc OleUIEditLinks*(P1: LPOLEUIEDITLINKSA): UINT {.winapi, dynlib: "oledlg", importc: "OleUIEditLinksA".}

  type
    TOLEUICHANGEICON* = TOLEUICHANGEICONA
    POLEUICHANGEICON* = POLEUICHANGEICONA
    LPOLEUICHANGEICON* = LPOLEUICHANGEICONA

  proc OleUIChangeIcon*(P1: LPOLEUICHANGEICONA): UINT {.winapi, dynlib: "oledlg", importc: "OleUIChangeIconA".}

  type
    TOLEUICONVERT* = TOLEUICONVERTA
    POLEUICONVERT* = POLEUICONVERTA
    LPOLEUICONVERT* = LPOLEUICONVERTA

  proc OleUIConvert*(P1: LPOLEUICONVERTA): UINT {.winapi, dynlib: "oledlg", importc: "OleUIConvertA".}

  type
    TOLEUIBUSY* = TOLEUIBUSYA
    POLEUIBUSY* = POLEUIBUSYA
    LPOLEUIBUSY* = LPOLEUIBUSYA

  proc OleUIBusy*(P1: LPOLEUIBUSYA): UINT {.winapi, dynlib: "oledlg", importc: "OleUIBusyA".}

  type
    TOLEUICHANGESOURCE* = TOLEUICHANGESOURCEA
    POLEUICHANGESOURCE* = POLEUICHANGESOURCEA
    LPOLEUICHANGESOURCE* = LPOLEUICHANGESOURCEA

  proc OleUIChangeSource*(P1: LPOLEUICHANGESOURCEA): UINT {.winapi, dynlib: "oledlg", importc: "OleUIChangeSourceA".}

  type
    IOleUIObjInfo* = ptr IOleUIObjInfoA
    LPOLEUIOBJINFO* = LPOLEUIOBJINFOA
    IOleUILinkInfo* = ptr IOleUILinkInfoA
    LPOLEUILINKINFO* = LPOLEUILINKINFOA
    OLEUIGNRLPROPS* = OLEUIGNRLPROPSA
    POLEUIGNRLPROPS* = POLEUIGNRLPROPSA
    LPOLEUIGNRLPROPS* = LPOLEUIGNRLPROPSA
    OLEUIVIEWPROPS* = OLEUIVIEWPROPSA
    POLEUIVIEWPROPS* = POLEUIVIEWPROPSA
    LPOLEUIVIEWPROPS* = LPOLEUIVIEWPROPSA
    OLEUILINKPROPS* = OLEUILINKPROPSA
    POLEUILINKPROPS* = POLEUILINKPROPSA
    LPOLEUILINKPROPS* = LPOLEUILINKPROPSA

converter winim_converter_IOleUILinkContainerW*(x: ptr IOleUILinkContainerW): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IOleUILinkContainerW, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IOleUILinkContainerW): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IOleUILinkContainerW): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetNextLink*(self: ptr IOleUILinkContainerW, dwLink: DWORD): DWORD {.inline, discardable.} = self.lpVtbl.GetNextLink(self, dwLink)
proc SetLinkUpdateOptions*(self: ptr IOleUILinkContainerW, P1: DWORD, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetLinkUpdateOptions(self, P1, P2)
proc GetLinkUpdateOptions*(self: ptr IOleUILinkContainerW, P1: DWORD, P2: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetLinkUpdateOptions(self, P1, P2)
proc SetLinkSource*(self: ptr IOleUILinkContainerW, P1: DWORD, P2: LPWSTR, P3: ULONG, P4: PULONG, P5: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetLinkSource(self, P1, P2, P3, P4, P5)
proc GetLinkSource*(self: ptr IOleUILinkContainerW, P1: DWORD, P2: ptr LPWSTR, P3: PULONG, P4: ptr LPWSTR, P5: ptr LPWSTR, P6: ptr BOOL, P7: ptr BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetLinkSource(self, P1, P2, P3, P4, P5, P6, P7)
proc OpenLinkSource*(self: ptr IOleUILinkContainerW, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OpenLinkSource(self, P1)
proc UpdateLink*(self: ptr IOleUILinkContainerW, P1: DWORD, P2: BOOL, P3: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateLink(self, P1, P2, P3)
proc CancelLink*(self: ptr IOleUILinkContainerW, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.CancelLink(self, P1)
converter winim_converter_IOleUILinkContainerA*(x: ptr IOleUILinkContainerA): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IOleUILinkContainerA, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IOleUILinkContainerA): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IOleUILinkContainerA): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetNextLink*(self: ptr IOleUILinkContainerA, P1: DWORD): DWORD {.inline, discardable.} = self.lpVtbl.GetNextLink(self, P1)
proc SetLinkUpdateOptions*(self: ptr IOleUILinkContainerA, P1: DWORD, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetLinkUpdateOptions(self, P1, P2)
proc GetLinkUpdateOptions*(self: ptr IOleUILinkContainerA, P1: DWORD, P2: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetLinkUpdateOptions(self, P1, P2)
proc SetLinkSource*(self: ptr IOleUILinkContainerA, P1: DWORD, P2: LPSTR, P3: ULONG, P4: PULONG, P5: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetLinkSource(self, P1, P2, P3, P4, P5)
proc GetLinkSource*(self: ptr IOleUILinkContainerA, P1: DWORD, P2: ptr LPSTR, P3: PULONG, P4: ptr LPSTR, P5: ptr LPSTR, P6: ptr BOOL, P7: ptr BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetLinkSource(self, P1, P2, P3, P4, P5, P6, P7)
proc OpenLinkSource*(self: ptr IOleUILinkContainerA, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OpenLinkSource(self, P1)
proc UpdateLink*(self: ptr IOleUILinkContainerA, P1: DWORD, P2: BOOL, P3: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateLink(self, P1, P2, P3)
proc CancelLink*(self: ptr IOleUILinkContainerA, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.CancelLink(self, P1)
converter winim_converter_IOleUIObjInfoW*(x: ptr IOleUIObjInfoW): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IOleUIObjInfoW, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IOleUIObjInfoW): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IOleUIObjInfoW): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetObjectInfo*(self: ptr IOleUIObjInfoW, P1: DWORD, P2: PDWORD, P3: ptr LPWSTR, P4: ptr LPWSTR, P5: ptr LPWSTR, P6: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetObjectInfo(self, P1, P2, P3, P4, P5, P6)
proc GetConvertInfo*(self: ptr IOleUIObjInfoW, P1: DWORD, P2: ptr CLSID, P3: PWORD, P4: ptr CLSID, P5: ptr LPCLSID, P6: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetConvertInfo(self, P1, P2, P3, P4, P5, P6)
proc ConvertObject*(self: ptr IOleUIObjInfoW, P1: DWORD, P2: REFCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.ConvertObject(self, P1, P2)
proc GetViewInfo*(self: ptr IOleUIObjInfoW, P1: DWORD, P2: ptr HGLOBAL, P3: PDWORD, P4: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetViewInfo(self, P1, P2, P3, P4)
proc SetViewInfo*(self: ptr IOleUIObjInfoW, P1: DWORD, P2: HGLOBAL, P3: DWORD, P4: int32, P5: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetViewInfo(self, P1, P2, P3, P4, P5)
converter winim_converter_IOleUIObjInfoA*(x: ptr IOleUIObjInfoA): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryInterface*(self: ptr IOleUIObjInfoA, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IOleUIObjInfoA): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IOleUIObjInfoA): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetObjectInfo*(self: ptr IOleUIObjInfoA, P1: DWORD, P2: PDWORD, P3: ptr LPSTR, P4: ptr LPSTR, P5: ptr LPSTR, P6: ptr LPSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetObjectInfo(self, P1, P2, P3, P4, P5, P6)
proc GetConvertInfo*(self: ptr IOleUIObjInfoA, P1: DWORD, P2: ptr CLSID, P3: PWORD, P4: ptr CLSID, P5: ptr LPCLSID, P6: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetConvertInfo(self, P1, P2, P3, P4, P5, P6)
proc ConvertObject*(self: ptr IOleUIObjInfoA, P1: DWORD, P2: REFCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.ConvertObject(self, P1, P2)
proc GetViewInfo*(self: ptr IOleUIObjInfoA, P1: DWORD, P2: ptr HGLOBAL, P3: PDWORD, P4: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetViewInfo(self, P1, P2, P3, P4)
proc SetViewInfo*(self: ptr IOleUIObjInfoA, P1: DWORD, P2: HGLOBAL, P3: DWORD, P4: int32, P5: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetViewInfo(self, P1, P2, P3, P4, P5)
converter winim_converter_IOleUILinkInfoW*(x: ptr IOleUILinkInfoW): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IOleUILinkInfoW*(x: ptr IOleUILinkInfoW): ptr IOleUILinkContainerW = cast[ptr IOleUILinkContainerW](x)
proc QueryInterface*(self: ptr IOleUILinkInfoW, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IOleUILinkInfoW): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IOleUILinkInfoW): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetNextLink*(self: ptr IOleUILinkInfoW, P1: DWORD): DWORD {.inline, discardable.} = self.lpVtbl.GetNextLink(self, P1)
proc SetLinkUpdateOptions*(self: ptr IOleUILinkInfoW, P1: DWORD, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetLinkUpdateOptions(self, P1, P2)
proc GetLinkUpdateOptions*(self: ptr IOleUILinkInfoW, P1: DWORD, P2: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetLinkUpdateOptions(self, P1, P2)
proc SetLinkSource*(self: ptr IOleUILinkInfoW, P1: DWORD, P2: LPWSTR, P3: ULONG, P4: PULONG, P5: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetLinkSource(self, P1, P2, P3, P4, P5)
proc GetLinkSource*(self: ptr IOleUILinkInfoW, P1: DWORD, P2: ptr LPWSTR, P3: PULONG, P4: ptr LPWSTR, P5: ptr LPWSTR, P6: ptr BOOL, P7: ptr BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetLinkSource(self, P1, P2, P3, P4, P5, P6, P7)
proc OpenLinkSource*(self: ptr IOleUILinkInfoW, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OpenLinkSource(self, P1)
proc UpdateLink*(self: ptr IOleUILinkInfoW, P1: DWORD, P2: BOOL, P3: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateLink(self, P1, P2, P3)
proc CancelLink*(self: ptr IOleUILinkInfoW, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.CancelLink(self, P1)
proc GetLastUpdate*(self: ptr IOleUILinkInfoW, P1: DWORD, P2: ptr FILETIME): HRESULT {.inline, discardable.} = self.lpVtbl.GetLastUpdate(self, P1, P2)
converter winim_converter_IOleUILinkInfoA*(x: ptr IOleUILinkInfoA): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IOleUILinkInfoA*(x: ptr IOleUILinkInfoA): ptr IOleUILinkContainerA = cast[ptr IOleUILinkContainerA](x)
proc QueryInterface*(self: ptr IOleUILinkInfoA, P1: REFIID, P2: ptr PVOID): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInterface(self, P1, P2)
proc AddRef*(self: ptr IOleUILinkInfoA): ULONG {.inline, discardable.} = self.lpVtbl.AddRef(self)
proc Release*(self: ptr IOleUILinkInfoA): ULONG {.inline, discardable.} = self.lpVtbl.Release(self)
proc GetNextLink*(self: ptr IOleUILinkInfoA, P1: DWORD): DWORD {.inline, discardable.} = self.lpVtbl.GetNextLink(self, P1)
proc SetLinkUpdateOptions*(self: ptr IOleUILinkInfoA, P1: DWORD, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetLinkUpdateOptions(self, P1, P2)
proc GetLinkUpdateOptions*(self: ptr IOleUILinkInfoA, P1: DWORD, P2: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetLinkUpdateOptions(self, P1, P2)
proc SetLinkSource*(self: ptr IOleUILinkInfoA, P1: DWORD, P2: LPSTR, P3: ULONG, P4: PULONG, P5: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetLinkSource(self, P1, P2, P3, P4, P5)
proc GetLinkSource*(self: ptr IOleUILinkInfoA, P1: DWORD, P2: ptr LPSTR, P3: PULONG, P4: ptr LPSTR, P5: ptr LPSTR, P6: ptr BOOL, P7: ptr BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetLinkSource(self, P1, P2, P3, P4, P5, P6, P7)
proc OpenLinkSource*(self: ptr IOleUILinkInfoA, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OpenLinkSource(self, P1)
proc UpdateLink*(self: ptr IOleUILinkInfoA, P1: DWORD, P2: BOOL, P3: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateLink(self, P1, P2, P3)
proc CancelLink*(self: ptr IOleUILinkInfoA, P1: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.CancelLink(self, P1)
proc GetLastUpdate*(self: ptr IOleUILinkInfoA, P1: DWORD, P2: ptr FILETIME): HRESULT {.inline, discardable.} = self.lpVtbl.GetLastUpdate(self, P1, P2)

# objext/richole.nim

const
  REO_GETOBJ_NO_INTERFACES* = 0
  REO_GETOBJ_POLEOBJ* = 1
  REO_GETOBJ_PSTG* = 2
  REO_GETOBJ_POLESITE* = 4
  REO_GETOBJ_ALL_INTERFACES* = 7
  REO_CP_SELECTION* = 0xFFFFFFFF'u32
  REO_IOB_SELECTION* = 0xFFFFFFFF'u32
  REO_IOB_USE_CP* = 0xFFFFFFFE'u32
  REO_NULL* = 0
  REO_READWRITEMASK* = 0x3F
  REO_DONTNEEDPALETTE* = 32
  REO_BLANK* = 16
  REO_DYNAMICSIZE* = 8
  REO_INVERTEDSELECT* = 4
  REO_BELOWBASELINE* = 2
  REO_RESIZABLE* = 1
  REO_LINK* = 0x80000000'u32
  REO_STATIC* = 0x40000000
  REO_SELECTED* = 0x08000000
  REO_OPEN* = 0x4000000
  REO_INPLACEACTIVE* = 0x2000000
  REO_HILITED* = 0x1000000
  REO_LINKAVAILABLE* = 0x800000
  REO_GETMETAFILE* = 0x400000
  RECO_PASTE* = 0
  RECO_DROP* = 1
  RECO_COPY* = 2
  RECO_CUT* = 3
  RECO_DRAG* = 4

type
  REOBJECT* {.final, pure.} = object
    cbStruct*: DWORD
    cp*: LONG
    clsid*: CLSID
    poleobj*: LPOLEOBJECT
    pstg*: LPSTORAGE
    polesite*: LPOLECLIENTSITE
    sizel*: SIZEL
    dvaspect*: DWORD
    dwFlags*: DWORD
    dwUser*: DWORD
  IRichEditOle* {.pure.} = object
    lpVtbl*: ptr IRichEditOleVtbl
  IRichEditOleVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetClientSite*: proc(self: ptr IRichEditOle, P1: ptr LPOLECLIENTSITE): HRESULT {.stdcall.}
    GetObjectCount*: proc(self: ptr IRichEditOle): LONG {.stdcall.}
    GetLinkCount*: proc(self: ptr IRichEditOle): LONG {.stdcall.}
    GetObject*: proc(self: ptr IRichEditOle, P1: LONG, P2: ptr REOBJECT, P3: DWORD): HRESULT {.stdcall.}
    InsertObject*: proc(self: ptr IRichEditOle, P1: ptr REOBJECT): HRESULT {.stdcall.}
    ConvertObject*: proc(self: ptr IRichEditOle, P1: LONG, P2: REFCLSID, P3: LPCSTR): HRESULT {.stdcall.}
    ActivateAs*: proc(self: ptr IRichEditOle, P1: REFCLSID, P2: REFCLSID): HRESULT {.stdcall.}
    SetHostNames*: proc(self: ptr IRichEditOle, P1: LPCSTR, P2: LPCSTR): HRESULT {.stdcall.}
    SetLinkAvailable*: proc(self: ptr IRichEditOle, P1: LONG, P2: BOOL): HRESULT {.stdcall.}
    SetDvaspect*: proc(self: ptr IRichEditOle, P1: LONG, P2: DWORD): HRESULT {.stdcall.}
    HandsOffStorage*: proc(self: ptr IRichEditOle, P1: LONG): HRESULT {.stdcall.}
    SaveCompleted*: proc(self: ptr IRichEditOle, P1: LONG, P2: LPSTORAGE): HRESULT {.stdcall.}
    InPlaceDeactivate*: proc(self: ptr IRichEditOle): HRESULT {.stdcall.}
    ContextSensitiveHelp*: proc(self: ptr IRichEditOle, P1: BOOL): HRESULT {.stdcall.}
    GetClipboardData*: proc(self: ptr IRichEditOle, P1: ptr CHARRANGE, P2: DWORD, P3: ptr LPDATAOBJECT): HRESULT {.stdcall.}
    ImportDataObject*: proc(self: ptr IRichEditOle, P1: LPDATAOBJECT, P2: CLIPFORMAT, P3: HGLOBAL): HRESULT {.stdcall.}
  LPRICHEDITOLE* = ptr IRichEditOle
  IRichEditOleCallback* {.pure.} = object
    lpVtbl*: ptr IRichEditOleCallbackVtbl
  IRichEditOleCallbackVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetNewStorage*: proc(self: ptr IRichEditOleCallback, P1: ptr LPSTORAGE): HRESULT {.stdcall.}
    GetInPlaceContext*: proc(self: ptr IRichEditOleCallback, P1: ptr LPOLEINPLACEFRAME, P2: ptr LPOLEINPLACEUIWINDOW, P3: LPOLEINPLACEFRAMEINFO): HRESULT {.stdcall.}
    ShowContainerUI*: proc(self: ptr IRichEditOleCallback, P1: BOOL): HRESULT {.stdcall.}
    QueryInsertObject*: proc(self: ptr IRichEditOleCallback, P1: LPCLSID, P2: LPSTORAGE, P3: LONG): HRESULT {.stdcall.}
    DeleteObject*: proc(self: ptr IRichEditOleCallback, P1: LPOLEOBJECT): HRESULT {.stdcall.}
    QueryAcceptData*: proc(self: ptr IRichEditOleCallback, P1: LPDATAOBJECT, P2: ptr CLIPFORMAT, P3: DWORD, P4: BOOL, P5: HGLOBAL): HRESULT {.stdcall.}
    ContextSensitiveHelp*: proc(self: ptr IRichEditOleCallback, P1: BOOL): HRESULT {.stdcall.}
    GetClipboardData*: proc(self: ptr IRichEditOleCallback, P1: ptr CHARRANGE, P2: DWORD, P3: ptr LPDATAOBJECT): HRESULT {.stdcall.}
    GetDragDropEffect*: proc(self: ptr IRichEditOleCallback, P1: BOOL, P2: DWORD, P3: PDWORD): HRESULT {.stdcall.}
    GetContextMenu*: proc(self: ptr IRichEditOleCallback, P1: WORD, P2: LPOLEOBJECT, P3: ptr CHARRANGE, P4: ptr HMENU): HRESULT {.stdcall.}
  LPRICHEDITOLECALLBACK* = ptr IRichEditOleCallback

converter winim_converter_IRichEditOle*(x: ptr IRichEditOle): ptr IUnknown = cast[ptr IUnknown](x)
proc GetClientSite*(self: ptr IRichEditOle, P1: ptr LPOLECLIENTSITE): HRESULT {.inline, discardable.} = self.lpVtbl.GetClientSite(self, P1)
proc GetObjectCount*(self: ptr IRichEditOle): LONG {.inline, discardable.} = self.lpVtbl.GetObjectCount(self)
proc GetLinkCount*(self: ptr IRichEditOle): LONG {.inline, discardable.} = self.lpVtbl.GetLinkCount(self)
proc GetObject*(self: ptr IRichEditOle, P1: LONG, P2: ptr REOBJECT, P3: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetObject(self, P1, P2, P3)
proc InsertObject*(self: ptr IRichEditOle, P1: ptr REOBJECT): HRESULT {.inline, discardable.} = self.lpVtbl.InsertObject(self, P1)
proc ConvertObject*(self: ptr IRichEditOle, P1: LONG, P2: REFCLSID, P3: LPCSTR): HRESULT {.inline, discardable.} = self.lpVtbl.ConvertObject(self, P1, P2, P3)
proc ActivateAs*(self: ptr IRichEditOle, P1: REFCLSID, P2: REFCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.ActivateAs(self, P1, P2)
proc SetHostNames*(self: ptr IRichEditOle, P1: LPCSTR, P2: LPCSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetHostNames(self, P1, P2)
proc SetLinkAvailable*(self: ptr IRichEditOle, P1: LONG, P2: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetLinkAvailable(self, P1, P2)
proc SetDvaspect*(self: ptr IRichEditOle, P1: LONG, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetDvaspect(self, P1, P2)
proc HandsOffStorage*(self: ptr IRichEditOle, P1: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.HandsOffStorage(self, P1)
proc SaveCompleted*(self: ptr IRichEditOle, P1: LONG, P2: LPSTORAGE): HRESULT {.inline, discardable.} = self.lpVtbl.SaveCompleted(self, P1, P2)
proc InPlaceDeactivate*(self: ptr IRichEditOle): HRESULT {.inline, discardable.} = self.lpVtbl.InPlaceDeactivate(self)
proc ContextSensitiveHelp*(self: ptr IRichEditOle, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.ContextSensitiveHelp(self, P1)
proc GetClipboardData*(self: ptr IRichEditOle, P1: ptr CHARRANGE, P2: DWORD, P3: ptr LPDATAOBJECT): HRESULT {.inline, discardable.} = self.lpVtbl.GetClipboardData(self, P1, P2, P3)
proc ImportDataObject*(self: ptr IRichEditOle, P1: LPDATAOBJECT, P2: CLIPFORMAT, P3: HGLOBAL): HRESULT {.inline, discardable.} = self.lpVtbl.ImportDataObject(self, P1, P2, P3)
converter winim_converter_IRichEditOleCallback*(x: ptr IRichEditOleCallback): ptr IUnknown = cast[ptr IUnknown](x)
proc GetNewStorage*(self: ptr IRichEditOleCallback, P1: ptr LPSTORAGE): HRESULT {.inline, discardable.} = self.lpVtbl.GetNewStorage(self, P1)
proc GetInPlaceContext*(self: ptr IRichEditOleCallback, P1: ptr LPOLEINPLACEFRAME, P2: ptr LPOLEINPLACEUIWINDOW, P3: LPOLEINPLACEFRAMEINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetInPlaceContext(self, P1, P2, P3)
proc ShowContainerUI*(self: ptr IRichEditOleCallback, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.ShowContainerUI(self, P1)
proc QueryInsertObject*(self: ptr IRichEditOleCallback, P1: LPCLSID, P2: LPSTORAGE, P3: LONG): HRESULT {.inline, discardable.} = self.lpVtbl.QueryInsertObject(self, P1, P2, P3)
proc DeleteObject*(self: ptr IRichEditOleCallback, P1: LPOLEOBJECT): HRESULT {.inline, discardable.} = self.lpVtbl.DeleteObject(self, P1)
proc QueryAcceptData*(self: ptr IRichEditOleCallback, P1: LPDATAOBJECT, P2: ptr CLIPFORMAT, P3: DWORD, P4: BOOL, P5: HGLOBAL): HRESULT {.inline, discardable.} = self.lpVtbl.QueryAcceptData(self, P1, P2, P3, P4, P5)
proc ContextSensitiveHelp*(self: ptr IRichEditOleCallback, P1: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.ContextSensitiveHelp(self, P1)
proc GetClipboardData*(self: ptr IRichEditOleCallback, P1: ptr CHARRANGE, P2: DWORD, P3: ptr LPDATAOBJECT): HRESULT {.inline, discardable.} = self.lpVtbl.GetClipboardData(self, P1, P2, P3)
proc GetDragDropEffect*(self: ptr IRichEditOleCallback, P1: BOOL, P2: DWORD, P3: PDWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetDragDropEffect(self, P1, P2, P3)
proc GetContextMenu*(self: ptr IRichEditOleCallback, P1: WORD, P2: LPOLEOBJECT, P3: ptr CHARRANGE, P4: ptr HMENU): HRESULT {.inline, discardable.} = self.lpVtbl.GetContextMenu(self, P1, P2, P3, P4)

# objext/shtypes.nim

const
  # STRRET_TYPE* = enum
  STRRET_WSTR* = 0x00000000
  STRRET_OFFSET* = 0x00000001
  STRRET_CSTR* = 0x00000002
  # PERCEIVED* = enum
  PERCEIVED_TYPE_FIRST* = - 3
  PERCEIVED_TYPE_UNSPECIFIED* = - 2
  PERCEIVED_TYPE_FOLDER* = - 1
  PERCEIVED_TYPE_UNKNOWN* = 0
  PERCEIVED_TYPE_TEXT* = 1
  PERCEIVED_TYPE_IMAGE* = 2
  PERCEIVED_TYPE_AUDIO* = 3
  PERCEIVED_TYPE_VIDEO* = 4
  PERCEIVED_TYPE_COMPRESSED* = 5
  PERCEIVED_TYPE_DOCUMENT* = 6
  PERCEIVED_TYPE_SYSTEM* = 7
  PERCEIVED_TYPE_APPLICATION* = 8
  PERCEIVED_TYPE_GAMEMEDIA* = 9
  PERCEIVED_TYPE_CONTACTS* = 10
  # SHCOLSTATE* = enum
  SHCOLSTATE_DEFAULT* = 0x00000000
  SHCOLSTATE_TYPE_STR* = 0x00000001
  SHCOLSTATE_TYPE_INT* = 0x00000002
  SHCOLSTATE_TYPE_DATE* = 0x00000003
  SHCOLSTATE_TYPEMASK* = 0x0000000F
  SHCOLSTATE_ONBYDEFAULT* = 0x00000010
  SHCOLSTATE_SLOW* = 0x00000020
  SHCOLSTATE_EXTENDED* = 0x00000040
  SHCOLSTATE_SECONDARYUI* = 0x00000080
  SHCOLSTATE_HIDDEN* = 0x00000100
  SHCOLSTATE_PREFER_VARCMP* = 0x00000200
  SHCOLSTATE_PREFER_FMTCMP* = 0x00000400
  SHCOLSTATE_NOSORTBYFOLDERNESS* = 0x00000800
  SHCOLSTATE_FIXED_WIDTH* = 0x00001000
  SHCOLSTATE_NODPISCALE* = 0x00002000
  SHCOLSTATE_FIXED_RATIO* = 0x00004000
  SHCOLSTATE_DISPLAYMASK* = 0x0000F000
  SHCOLSTATE_VIEWONLY* = 0x00010000
  SHCOLSTATE_BATCHREAD* = 0x00020000
  SHCOLSTATE_NO_GROUPBY* = 0x00040000
  # DEVICE_SCALE_FACTOR* = enum
  SCALE_100_PERCENT* = 100
  SCALE_140_PERCENT* = 140
  SCALE_180_PERCENT* = 180

type
  # SHITEMID* {.final, pure.} = object
  #   cb*: USHORT
  #   abID*: array[1, BYTE]
  # LPSHITEMID* = ptr SHITEMID
  # LPCSHITEMID* = ptr SHITEMID
  # ITEMIDLIST* {.final, pure.} = object
  #   mkid*: SHITEMID
  ITEMIDLIST_RELATIVE* = ITEMIDLIST
  ITEMID_CHILD* = ITEMIDLIST
  ITEMIDLIST_ABSOLUTE* = ITEMIDLIST
  wirePIDL* = ptr BYTE_BLOB
  # LPITEMIDLIST* = ptr ITEMIDLIST
  # LPCITEMIDLIST* = ptr ITEMIDLIST
  PIDLIST_ABSOLUTE* = LPITEMIDLIST
  PCIDLIST_ABSOLUTE* = LPCITEMIDLIST
  PCUIDLIST_ABSOLUTE* = LPCITEMIDLIST
  PIDLIST_RELATIVE* = LPITEMIDLIST
  PCIDLIST_RELATIVE* = LPCITEMIDLIST
  PUIDLIST_RELATIVE* = LPITEMIDLIST
  PCUIDLIST_RELATIVE* = LPCITEMIDLIST
  PITEMID_CHILD* = LPITEMIDLIST
  PCITEMID_CHILD* = LPCITEMIDLIST
  PUITEMID_CHILD* = LPITEMIDLIST
  PCUITEMID_CHILD* = LPCITEMIDLIST
  PCUITEMID_CHILD_ARRAY* = ptr LPCITEMIDLIST
  PCUIDLIST_RELATIVE_ARRAY* = ptr LPCITEMIDLIST
  PCIDLIST_ABSOLUTE_ARRAY* = ptr LPCITEMIDLIST
  PCUIDLIST_ABSOLUTE_ARRAY* = ptr LPCITEMIDLIST
  # STRRET_U1* {.final, union, pure.} = object
  #   pOleStr*: LPWSTR
  #   uOffset*: UINT
  #   cStr*: array[260, char]
  # STRRET* = object
  #   uType*: UINT
  #   u1*: STRRET_U1
  # LPSTRRET* = ptr STRRET
  # SHELLDETAILS* {.final, pure.} = object
  #   fmt*: cint
  #   cxChar*: cint
  #   str*: STRRET
  # LPSHELLDETAILS* = ptr SHELLDETAILS

const
  PERCEIVED_TYPE_CUSTOM* = PERCEIVED_TYPE_FIRST
  PERCEIVED_TYPE_LAST* = PERCEIVED_TYPE_CONTACTS
  PERCEIVEDFLAG_UNDEFINED* = 0x00000000
  PERCEIVEDFLAG_SOFTCODED* = 0x00000001
  PERCEIVEDFLAG_HARDCODED* = 0x00000002
  PERCEIVEDFLAG_NATIVESUPPORT* = 0x00000004
  PERCEIVEDFLAG_GDIPLUS* = 0x00000010
  PERCEIVEDFLAG_WMSDK* = 0x00000020
  PERCEIVEDFLAG_ZIPFOLDER* = 0x00000040

type
  PERCEIVEDFLAG* = DWORD
  COMDLG_FILTERSPEC* {.final, pure.} = object
    pszName*: LPCWSTR
    pszSpec*: LPCWSTR
  KNOWNFOLDERID* = GUID
  REFKNOWNFOLDERID* = ptr KNOWNFOLDERID
  KF_REDIRECT_FLAGS* = DWORD
  FOLDERTYPEID* = GUID
  REFFOLDERTYPEID* = ptr FOLDERTYPEID
  TASKOWNERID* = GUID
  REFTASKOWNERID* = ptr TASKOWNERID
  ELEMENTID* = GUID
  REFELEMENTID* = ptr ELEMENTID
  PROPERTYKEY* {.final, pure.} = object
    fmtid: GUID
    pid: DWORD
  REFPROPVARIANT* = ptr PROPVARIANT

# objext/structuredquerycondition.nim

const
  # tagCONDITION_TYPE* = enum
  CT_AND_CONDITION* = 0
  CT_OR_CONDITION* = 1
  CT_NOT_CONDITION* = 2
  CT_LEAF_CONDITION* = 3
  # tagCONDITION_OPERATION* = enum
  COP_IMPLICIT* = 0
  COP_EQUAL* = 1
  COP_NOTEQUAL* = 2
  COP_LESSTHAN* = 3
  COP_GREATERTHAN* = 4
  COP_LESSTHANOREQUAL* = 5
  COP_GREATERTHANOREQUAL* = 6
  COP_VALUE_STARTSWITH* = 7
  COP_VALUE_ENDSWITH* = 8
  COP_VALUE_CONTAINS* = 9
  COP_VALUE_NOTCONTAINS* = 10
  COP_DOSWILDCARDS* = 11
  COP_WORD_EQUAL* = 12
  COP_WORD_STARTSWITH* = 13
  COP_APPLICATION_SPECIFIC* = 14

type
  IRichChunk* {.pure.} = object
    lpVtbl*: ptr IRichChunkVtbl
  IRichChunkVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetData*: proc(self: ptr IRichChunk, pFirstPos: ptr ULONG, pLength: ptr ULONG, ppsz: ptr LPWSTR, pValue: ptr PROPVARIANT): HRESULT {.stdcall.}
  ICondition* {.pure.} = object
    lpVtbl*: ptr IConditionVtbl
  IConditionVtbl* {.pure, inheritable.} = object of IPersistStreamVtbl
    GetConditionType*: proc(self: ptr ICondition, pNodeType: ptr int32): HRESULT {.stdcall.}
    GetSubConditions*: proc(self: ptr ICondition, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetComparisonInfo*: proc(self: ptr ICondition, ppszPropertyName: ptr LPWSTR, pcop: ptr int32, ppropvar: ptr PROPVARIANT): HRESULT {.stdcall.}
    GetValueType*: proc(self: ptr ICondition, ppszValueTypeName: ptr LPWSTR): HRESULT {.stdcall.}
    GetValueNormalization*: proc(self: ptr ICondition, ppszNormalization: ptr LPWSTR): HRESULT {.stdcall.}
    GetInputTerms*: proc(self: ptr ICondition, ppPropertyTerm: ptr ptr IRichChunk, ppOperationTerm: ptr ptr IRichChunk, ppValueTerm: ptr ptr IRichChunk): HRESULT {.stdcall.}
    Clone*: proc(self: ptr ICondition, ppc: ptr ptr ICondition): HRESULT {.stdcall.}
  ICondition2* {.pure.} = object
    lpVtbl*: ptr ICondition2Vtbl
  ICondition2Vtbl* {.pure, inheritable.} = object of IConditionVtbl
    GetLocale*: proc(self: ptr ICondition2, ppszLocaleName: ptr LPWSTR): HRESULT {.stdcall.}
    GetLeafConditionInfo*: proc(self: ptr ICondition2, ppropkey: ptr PROPERTYKEY, pcop: ptr int32, ppropvar: ptr PROPVARIANT): HRESULT {.stdcall.}

converter winim_converter_IRichChunk*(x: ptr IRichChunk): ptr IUnknown = cast[ptr IUnknown](x)
proc GetData*(self: ptr IRichChunk, pFirstPos: ptr ULONG, pLength: ptr ULONG, ppsz: ptr LPWSTR, pValue: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetData(self, pFirstPos, pLength, ppsz, pValue)
converter winim_converter_ICondition*(x: ptr ICondition): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ICondition*(x: ptr ICondition): ptr IPersist = cast[ptr IPersist](x)
converter winim_converter_ICondition*(x: ptr ICondition): ptr IPersistStream = cast[ptr IPersistStream](x)
proc GetConditionType*(self: ptr ICondition, pNodeType: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetConditionType(self, pNodeType)
proc GetSubConditions*(self: ptr ICondition, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetSubConditions(self, riid, ppv)
proc GetComparisonInfo*(self: ptr ICondition, ppszPropertyName: ptr LPWSTR, pcop: ptr int32, ppropvar: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetComparisonInfo(self, ppszPropertyName, pcop, ppropvar)
proc GetValueType*(self: ptr ICondition, ppszValueTypeName: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetValueType(self, ppszValueTypeName)
proc GetValueNormalization*(self: ptr ICondition, ppszNormalization: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetValueNormalization(self, ppszNormalization)
proc GetInputTerms*(self: ptr ICondition, ppPropertyTerm: ptr ptr IRichChunk, ppOperationTerm: ptr ptr IRichChunk, ppValueTerm: ptr ptr IRichChunk): HRESULT {.inline, discardable.} = self.lpVtbl.GetInputTerms(self, ppPropertyTerm, ppOperationTerm, ppValueTerm)
proc Clone*(self: ptr ICondition, ppc: ptr ptr ICondition): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, ppc)
converter winim_converter_ICondition2*(x: ptr ICondition2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ICondition2*(x: ptr ICondition2): ptr IPersist = cast[ptr IPersist](x)
converter winim_converter_ICondition2*(x: ptr ICondition2): ptr ICondition = cast[ptr ICondition](x)
converter winim_converter_ICondition2*(x: ptr ICondition2): ptr IPersistStream = cast[ptr IPersistStream](x)
proc GetLocale*(self: ptr ICondition2, ppszLocaleName: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetLocale(self, ppszLocaleName)
proc GetLeafConditionInfo*(self: ptr ICondition2, ppropkey: ptr PROPERTYKEY, pcop: ptr int32, ppropvar: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetLeafConditionInfo(self, ppropkey, pcop, ppropvar)


# objext/propsys.nim

const
  # GETPROPERTYSTOREFLAGS* = enum
  GPS_DEFAULT* = 0x0
  GPS_HANDLERPROPERTIESONLY* = 0x1
  GPS_READWRITE* = 0x2
  GPS_TEMPORARY* = 0x4
  GPS_FASTPROPERTIESONLY* = 0x8
  GPS_OPENSLOWITEM* = 0x10
  GPS_DELAYCREATION* = 0x20
  GPS_BESTEFFORT* = 0x40
  GPS_NO_OPLOCK* = 0x80
  GPS_PREFERQUERYPROPERTIES* = 0x100
  GPS_MASK_VALID* = 0x1ff
  #* PKA_FLAGS* = enum
  PKA_SET* = 0
  PKA_APPEND* = 1
  PKA_DELETE* = 2
  #* PSC_STATE* = enum
  PSC_NORMAL* = 0
  PSC_NOTINSOURCE* = 1
  PSC_DIRTY* = 2
  PSC_READONLY* = 3
  #* PROPENUMTYPE* = enum
  PET_DISCRETEVALUE* = 0
  PET_RANGEDVALUE* = 1
  PET_DEFAULTVALUE* = 2
  PET_ENDRANGE* = 3
  #* PROPDESC_TYPE_FLAGS* = enum
  PDTF_DEFAULT* = 0x0
  PDTF_MULTIPLEVALUES* = 0x1
  PDTF_ISINNATE* = 0x2
  PDTF_ISGROUP* = 0x4
  PDTF_CANGROUPBY* = 0x8
  PDTF_CANSTACKBY* = 0x10
  PDTF_ISTREEPROPERTY* = 0x20
  PDTF_INCLUDEINFULLTEXTQUERY* = 0x40
  PDTF_ISVIEWABLE* = 0x80
  PDTF_ISQUERYABLE* = 0x100
  PDTF_CANBEPURGED* = 0x200
  PDTF_SEARCHRAWVALUE* = 0x400
  PDTF_ISSYSTEMPROPERTY* = -2147483648
  PDTF_MASK_ALL* = -2147481601
  #* PROPDESC_VIEW_FLAGS* = enum
  PDVF_DEFAULT* = 0x0
  PDVF_CENTERALIGN* = 0x1
  PDVF_RIGHTALIGN* = 0x2
  PDVF_BEGINNEWGROUP* = 0x4
  PDVF_FILLAREA* = 0x8
  PDVF_SORTDESCENDING* = 0x10
  PDVF_SHOWONLYIFPRESENT* = 0x20
  PDVF_SHOWBYDEFAULT* = 0x40
  PDVF_SHOWINPRIMARYLIST* = 0x80
  PDVF_SHOWINSECONDARYLIST* = 0x100
  PDVF_HIDELABEL* = 0x200
  PDVF_HIDDEN* = 0x800
  PDVF_CANWRAP* = 0x1000
  PDVF_MASK_ALL* = 0x1bff
  #* PROPDESC_DISPLAYTYPE* = enum
  PDDT_STRING* = 0
  PDDT_NUMBER* = 1
  PDDT_BOOLEAN* = 2
  PDDT_DATETIME* = 3
  PDDT_ENUMERATED* = 4
  #* PROPDESC_GROUPING_RANGE* = enum
  PDGR_DISCRETE* = 0
  PDGR_ALPHANUMERIC* = 1
  PDGR_SIZE* = 2
  PDGR_DYNAMIC* = 3
  PDGR_DATE* = 4
  PDGR_PERCENT* = 5
  PDGR_ENUMERATED* = 6
  #* PROPDESC_FORMAT_FLAGS* = enum
  PDFF_DEFAULT* = 0x0
  PDFF_PREFIXNAME* = 0x1
  PDFF_FILENAME* = 0x2
  PDFF_ALWAYSKB* = 0x4
  PDFF_RESERVED_RIGHTTOLEFT* = 0x8
  PDFF_SHORTTIME* = 0x10
  PDFF_LONGTIME* = 0x20
  PDFF_HIDETIME* = 0x40
  PDFF_SHORTDATE* = 0x80
  PDFF_LONGDATE* = 0x100
  PDFF_HIDEDATE* = 0x200
  PDFF_RELATIVEDATE* = 0x400
  PDFF_USEEDITINVITATION* = 0x800
  PDFF_READONLY* = 0x1000
  PDFF_NOAUTOREADINGORDER* = 0x2000
  #* PROPDESC_SORTDESCRIPTION* = enum
  PDSD_GENERAL* = 0
  PDSD_A_Z* = 1
  PDSD_LOWEST_HIGHEST* = 2
  PDSD_SMALLEST_BIGGEST* = 3
  PDSD_OLDEST_NEWEST* = 4
  #* PROPDESC_RELATIVEDESCRIPTION_TYPE* = enum
  PDRDT_GENERAL* = 0
  PDRDT_DATE* = 1
  PDRDT_SIZE* = 2
  PDRDT_COUNT* = 3
  PDRDT_REVISION* = 4
  PDRDT_LENGTH* = 5
  PDRDT_DURATION* = 6
  PDRDT_SPEED* = 7
  PDRDT_RATE* = 8
  PDRDT_RATING* = 9
  PDRDT_PRIORITY* = 10
  #* PROPDESC_AGGREGATION_TYPE* = enum
  PDAT_DEFAULT* = 0
  PDAT_FIRST* = 1
  PDAT_SUM* = 2
  PDAT_AVERAGE* = 3
  PDAT_DATERANGE* = 4
  PDAT_UNION* = 5
  PDAT_MAX* = 6
  PDAT_MIN* = 7
  #* PROPDESC_CONDITION_TYPE* = enum
  PDCOT_NONE* = 0
  PDCOT_STRING* = 1
  PDCOT_SIZE* = 2
  PDCOT_DATETIME* = 3
  PDCOT_BOOLEAN* = 4
  PDCOT_NUMBER* = 5
  #* PROPDESC_SEARCHINFO_FLAGS* = enum
  PDSIF_DEFAULT* = 0x0
  PDSIF_ININVERTEDINDEX* = 0x1
  PDSIF_ISCOLUMN* = 0x2
  PDSIF_ISCOLUMNSPARSE* = 0x4
  PDSIF_ALWAYSINCLUDE* = 0x8
  PDSIF_USEFORTYPEAHEAD* = 0x10
  #* PROPDESC_COLUMNINDEX_TYPE* = enum
  PDCIT_NONE* = 0
  PDCIT_ONDISK* = 1
  PDCIT_INMEMORY* = 2
  PDCIT_ONDEMAND* = 3
  PDCIT_ONDISKALL* = 4
  PDCIT_ONDISKVECTOR* = 5
  #* PROPDESC_ENUMFILTER* = enum
  PDEF_ALL* = 0
  PDEF_SYSTEM* = 1
  PDEF_NONSYSTEM* = 2
  PDEF_VIEWABLE* = 3
  PDEF_QUERYABLE* = 4
  PDEF_INFULLTEXTQUERY* = 5
  PDEF_COLUMN* = 6

type
  SERIALIZEDPROPSTORAGE = object
  REFPROPERTYKEY* = ptr PROPERTYKEY
  LPPROPERTYSTORE* = ptr IPropertyStore
  PERSIST_SPROPSTORE_FLAGS* = cint
  PUSERIALIZEDPROPSTORAGE* = ptr SERIALIZEDPROPSTORAGE
  PCUSERIALIZEDPROPSTORAGE* = ptr SERIALIZEDPROPSTORAGE

  IInitializeWithFile* {.pure.} = object
    lpVtbl*: ptr IInitializeWithFileVtbl
  IInitializeWithFileVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IInitializeWithFile, pszFilePath: LPCWSTR, grfMode: DWORD): HRESULT {.stdcall.}
  IInitializeWithStream* {.pure.} = object
    lpVtbl*: ptr IInitializeWithStreamVtbl
  IInitializeWithStreamVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IInitializeWithStream, pstream: ptr IStream, grfMode: DWORD): HRESULT {.stdcall.}
  IPropertyStore* {.pure.} = object
    lpVtbl*: ptr IPropertyStoreVtbl
  IPropertyStoreVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCount*: proc(self: ptr IPropertyStore, cProps: ptr DWORD): HRESULT {.stdcall.}
    GetAt*: proc(self: ptr IPropertyStore, iProp: DWORD, pkey: ptr PROPERTYKEY): HRESULT {.stdcall.}
    GetValue*: proc(self: ptr IPropertyStore, key: REFPROPERTYKEY, pv: ptr PROPVARIANT): HRESULT {.stdcall.}
    SetValue*: proc(self: ptr IPropertyStore, key: REFPROPERTYKEY, propvar: REFPROPVARIANT): HRESULT {.stdcall.}
    Commit*: proc(self: ptr IPropertyStore): HRESULT {.stdcall.}
  INamedPropertyStore* {.pure.} = object
    lpVtbl*: ptr INamedPropertyStoreVtbl
  INamedPropertyStoreVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetNamedValue*: proc(self: ptr INamedPropertyStore, pszName: LPCWSTR, ppropvar: ptr PROPVARIANT): HRESULT {.stdcall.}
    SetNamedValue*: proc(self: ptr INamedPropertyStore, pszName: LPCWSTR, propvar: REFPROPVARIANT): HRESULT {.stdcall.}
    GetNameCount*: proc(self: ptr INamedPropertyStore, pdwCount: ptr DWORD): HRESULT {.stdcall.}
    GetNameAt*: proc(self: ptr INamedPropertyStore, iProp: DWORD, pbstrName: ptr BSTR): HRESULT {.stdcall.}
  IObjectWithPropertyKey* {.pure.} = object
    lpVtbl*: ptr IObjectWithPropertyKeyVtbl
  IObjectWithPropertyKeyVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetPropertyKey*: proc(self: ptr IObjectWithPropertyKey, key: REFPROPERTYKEY): HRESULT {.stdcall.}
    GetPropertyKey*: proc(self: ptr IObjectWithPropertyKey, pkey: ptr PROPERTYKEY): HRESULT {.stdcall.}
  IPropertyChange* {.pure.} = object
    lpVtbl*: ptr IPropertyChangeVtbl
  IPropertyChangeVtbl* {.pure, inheritable.} = object of IObjectWithPropertyKeyVtbl
    ApplyToPropVariant*: proc(self: ptr IPropertyChange, propvarIn: REFPROPVARIANT, ppropvarOut: ptr PROPVARIANT): HRESULT {.stdcall.}
  IPropertyChangeArray* {.pure.} = object
    lpVtbl*: ptr IPropertyChangeArrayVtbl
  IPropertyChangeArrayVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCount*: proc(self: ptr IPropertyChangeArray, pcOperations: ptr UINT): HRESULT {.stdcall.}
    GetAt*: proc(self: ptr IPropertyChangeArray, iIndex: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    InsertAt*: proc(self: ptr IPropertyChangeArray, iIndex: UINT, ppropChange: ptr IPropertyChange): HRESULT {.stdcall.}
    Append*: proc(self: ptr IPropertyChangeArray, ppropChange: ptr IPropertyChange): HRESULT {.stdcall.}
    AppendOrReplace*: proc(self: ptr IPropertyChangeArray, ppropChange: ptr IPropertyChange): HRESULT {.stdcall.}
    RemoveAt*: proc(self: ptr IPropertyChangeArray, iIndex: UINT): HRESULT {.stdcall.}
    IsKeyInArray*: proc(self: ptr IPropertyChangeArray, key: REFPROPERTYKEY): HRESULT {.stdcall.}
  IPropertyStoreCapabilities* {.pure.} = object
    lpVtbl*: ptr IPropertyStoreCapabilitiesVtbl
  IPropertyStoreCapabilitiesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    IsPropertyWritable*: proc(self: ptr IPropertyStoreCapabilities, key: REFPROPERTYKEY): HRESULT {.stdcall.}
  IPropertyStoreCache* {.pure.} = object
    lpVtbl*: ptr IPropertyStoreCacheVtbl
  IPropertyStoreCacheVtbl* {.pure, inheritable.} = object of IPropertyStoreVtbl
    GetState*: proc(self: ptr IPropertyStoreCache, key: REFPROPERTYKEY, pstate: ptr int32): HRESULT {.stdcall.}
    GetValueAndState*: proc(self: ptr IPropertyStoreCache, key: REFPROPERTYKEY, ppropvar: ptr PROPVARIANT, pstate: ptr int32): HRESULT {.stdcall.}
    SetState*: proc(self: ptr IPropertyStoreCache, key: REFPROPERTYKEY, state: int32): HRESULT {.stdcall.}
    SetValueAndState*: proc(self: ptr IPropertyStoreCache, key: REFPROPERTYKEY, ppropvar: ptr PROPVARIANT, state: int32): HRESULT {.stdcall.}
  IPropertyEnumType* {.pure.} = object
    lpVtbl*: ptr IPropertyEnumTypeVtbl
  IPropertyEnumTypeVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetEnumType*: proc(self: ptr IPropertyEnumType, penumtype: ptr int32): HRESULT {.stdcall.}
    GetValue*: proc(self: ptr IPropertyEnumType, ppropvar: ptr PROPVARIANT): HRESULT {.stdcall.}
    GetRangeMinValue*: proc(self: ptr IPropertyEnumType, ppropvarMin: ptr PROPVARIANT): HRESULT {.stdcall.}
    GetRangeSetValue*: proc(self: ptr IPropertyEnumType, ppropvarSet: ptr PROPVARIANT): HRESULT {.stdcall.}
    GetDisplayText*: proc(self: ptr IPropertyEnumType, ppszDisplay: ptr LPWSTR): HRESULT {.stdcall.}
  IPropertyEnumType2* {.pure.} = object
    lpVtbl*: ptr IPropertyEnumType2Vtbl
  IPropertyEnumType2Vtbl* {.pure, inheritable.} = object of IPropertyEnumTypeVtbl
    GetImageReference*: proc(self: ptr IPropertyEnumType2, ppszImageRes: ptr LPWSTR): HRESULT {.stdcall.}
  IPropertyEnumTypeList* {.pure.} = object
    lpVtbl*: ptr IPropertyEnumTypeListVtbl
  IPropertyEnumTypeListVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCount*: proc(self: ptr IPropertyEnumTypeList, pctypes: ptr UINT): HRESULT {.stdcall.}
    GetAt*: proc(self: ptr IPropertyEnumTypeList, itype: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetConditionAt*: proc(self: ptr IPropertyEnumTypeList, nIndex: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    FindMatchingIndex*: proc(self: ptr IPropertyEnumTypeList, propvarCmp: REFPROPVARIANT, pnIndex: ptr UINT): HRESULT {.stdcall.}
  IPropertyDescription* {.pure.} = object
    lpVtbl*: ptr IPropertyDescriptionVtbl
  IPropertyDescriptionVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetPropertyKey*: proc(self: ptr IPropertyDescription, pkey: ptr PROPERTYKEY): HRESULT {.stdcall.}
    GetCanonicalName*: proc(self: ptr IPropertyDescription, ppszName: ptr LPWSTR): HRESULT {.stdcall.}
    GetPropertyType*: proc(self: ptr IPropertyDescription, pvartype: ptr VARTYPE): HRESULT {.stdcall.}
    GetDisplayName*: proc(self: ptr IPropertyDescription, ppszName: ptr LPWSTR): HRESULT {.stdcall.}
    GetEditInvitation*: proc(self: ptr IPropertyDescription, ppszInvite: ptr LPWSTR): HRESULT {.stdcall.}
    GetTypeFlags*: proc(self: ptr IPropertyDescription, mask: int32, ppdtFlags: ptr int32): HRESULT {.stdcall.}
    GetViewFlags*: proc(self: ptr IPropertyDescription, ppdvFlags: ptr int32): HRESULT {.stdcall.}
    GetDefaultColumnWidth*: proc(self: ptr IPropertyDescription, pcxChars: ptr UINT): HRESULT {.stdcall.}
    GetDisplayType*: proc(self: ptr IPropertyDescription, pdisplaytype: ptr int32): HRESULT {.stdcall.}
    GetColumnState*: proc(self: ptr IPropertyDescription, pcsFlags: ptr SHCOLSTATEF): HRESULT {.stdcall.}
    GetGroupingRange*: proc(self: ptr IPropertyDescription, pgr: ptr int32): HRESULT {.stdcall.}
    GetRelativeDescriptionType*: proc(self: ptr IPropertyDescription, prdt: ptr int32): HRESULT {.stdcall.}
    GetRelativeDescription*: proc(self: ptr IPropertyDescription, propvar1: REFPROPVARIANT, propvar2: REFPROPVARIANT, ppszDesc1: ptr LPWSTR, ppszDesc2: ptr LPWSTR): HRESULT {.stdcall.}
    GetSortDescription*: proc(self: ptr IPropertyDescription, psd: ptr int32): HRESULT {.stdcall.}
    GetSortDescriptionLabel*: proc(self: ptr IPropertyDescription, fDescending: WINBOOL, ppszDescription: ptr LPWSTR): HRESULT {.stdcall.}
    GetAggregationType*: proc(self: ptr IPropertyDescription, paggtype: ptr int32): HRESULT {.stdcall.}
    GetConditionType*: proc(self: ptr IPropertyDescription, pcontype: ptr int32, popDefault: ptr int32): HRESULT {.stdcall.}
    GetEnumTypeList*: proc(self: ptr IPropertyDescription, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    CoerceToCanonicalValue*: proc(self: ptr IPropertyDescription, ppropvar: ptr PROPVARIANT): HRESULT {.stdcall.}
    FormatForDisplay*: proc(self: ptr IPropertyDescription, propvar: REFPROPVARIANT, pdfFlags: int32, ppszDisplay: ptr LPWSTR): HRESULT {.stdcall.}
    IsValueCanonical*: proc(self: ptr IPropertyDescription, propvar: REFPROPVARIANT): HRESULT {.stdcall.}
  IPropertyDescription2* {.pure.} = object
    lpVtbl*: ptr IPropertyDescription2Vtbl
  IPropertyDescription2Vtbl* {.pure, inheritable.} = object of IPropertyDescriptionVtbl
    GetImageReferenceForValue*: proc(self: ptr IPropertyDescription2, propvar: REFPROPVARIANT, ppszImageRes: ptr LPWSTR): HRESULT {.stdcall.}
  IPropertyDescriptionAliasInfo* {.pure.} = object
    lpVtbl*: ptr IPropertyDescriptionAliasInfoVtbl
  IPropertyDescriptionAliasInfoVtbl* {.pure, inheritable.} = object of IPropertyDescriptionVtbl
    GetSortByAlias*: proc(self: ptr IPropertyDescriptionAliasInfo, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetAdditionalSortByAliases*: proc(self: ptr IPropertyDescriptionAliasInfo, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IPropertyDescriptionSearchInfo* {.pure.} = object
    lpVtbl*: ptr IPropertyDescriptionSearchInfoVtbl
  IPropertyDescriptionSearchInfoVtbl* {.pure, inheritable.} = object of IPropertyDescriptionVtbl
    GetSearchInfoFlags*: proc(self: ptr IPropertyDescriptionSearchInfo, ppdsiFlags: ptr int32): HRESULT {.stdcall.}
    GetColumnIndexType*: proc(self: ptr IPropertyDescriptionSearchInfo, ppdciType: ptr int32): HRESULT {.stdcall.}
    GetProjectionString*: proc(self: ptr IPropertyDescriptionSearchInfo, ppszProjection: ptr LPWSTR): HRESULT {.stdcall.}
    GetMaxSize*: proc(self: ptr IPropertyDescriptionSearchInfo, pcbMaxSize: ptr UINT): HRESULT {.stdcall.}
  IPropertyDescriptionRelatedPropertyInfo* {.pure.} = object
    lpVtbl*: ptr IPropertyDescriptionRelatedPropertyInfoVtbl
  IPropertyDescriptionRelatedPropertyInfoVtbl* {.pure, inheritable.} = object of IPropertyDescriptionVtbl
    GetRelatedProperty*: proc(self: ptr IPropertyDescriptionRelatedPropertyInfo, pszRelationshipName: LPCWSTR, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IPropertySystem* {.pure.} = object
    lpVtbl*: ptr IPropertySystemVtbl
  IPropertySystemVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetPropertyDescription*: proc(self: ptr IPropertySystem, propkey: REFPROPERTYKEY, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetPropertyDescriptionByName*: proc(self: ptr IPropertySystem, pszCanonicalName: LPCWSTR, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetPropertyDescriptionListFromString*: proc(self: ptr IPropertySystem, pszPropList: LPCWSTR, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    EnumeratePropertyDescriptions*: proc(self: ptr IPropertySystem, filterOn: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    FormatForDisplay*: proc(self: ptr IPropertySystem, key: REFPROPERTYKEY, propvar: REFPROPVARIANT, pdff: int32, pszText: LPWSTR, cchText: DWORD): HRESULT {.stdcall.}
    FormatForDisplayAlloc*: proc(self: ptr IPropertySystem, key: REFPROPERTYKEY, propvar: REFPROPVARIANT, pdff: int32, ppszDisplay: ptr LPWSTR): HRESULT {.stdcall.}
    RegisterPropertySchema*: proc(self: ptr IPropertySystem, pszPath: LPCWSTR): HRESULT {.stdcall.}
    UnregisterPropertySchema*: proc(self: ptr IPropertySystem, pszPath: LPCWSTR): HRESULT {.stdcall.}
    RefreshPropertySchema*: proc(self: ptr IPropertySystem): HRESULT {.stdcall.}
  IPropertyDescriptionList* {.pure.} = object
    lpVtbl*: ptr IPropertyDescriptionListVtbl
  IPropertyDescriptionListVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCount*: proc(self: ptr IPropertyDescriptionList, pcElem: ptr UINT): HRESULT {.stdcall.}
    GetAt*: proc(self: ptr IPropertyDescriptionList, iElem: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IPropertyStoreFactory* {.pure.} = object
    lpVtbl*: ptr IPropertyStoreFactoryVtbl
  IPropertyStoreFactoryVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetPropertyStore*: proc(self: ptr IPropertyStoreFactory, flags: int32, pUnkFactory: ptr IUnknown, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetPropertyStoreForKeys*: proc(self: ptr IPropertyStoreFactory, rgKeys: ptr PROPERTYKEY, cKeys: UINT, flags: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IDelayedPropertyStoreFactory* {.pure.} = object
    lpVtbl*: ptr IDelayedPropertyStoreFactoryVtbl
  IDelayedPropertyStoreFactoryVtbl* {.pure, inheritable.} = object of IPropertyStoreFactoryVtbl
    GetDelayedPropertyStore*: proc(self: ptr IDelayedPropertyStoreFactory, flags: int32, dwStoreId: DWORD, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IPersistSerializedPropStorage* {.pure.} = object
    lpVtbl*: ptr IPersistSerializedPropStorageVtbl
  IPersistSerializedPropStorageVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetFlags*: proc(self: ptr IPersistSerializedPropStorage, flags: PERSIST_SPROPSTORE_FLAGS): HRESULT {.stdcall.}
    SetPropertyStorage*: proc(self: ptr IPersistSerializedPropStorage, psps: PCUSERIALIZEDPROPSTORAGE, cb: DWORD): HRESULT {.stdcall.}
    GetPropertyStorage*: proc(self: ptr IPersistSerializedPropStorage, ppsps: ptr ptr SERIALIZEDPROPSTORAGE, pcb: ptr DWORD): HRESULT {.stdcall.}
  IPersistSerializedPropStorage2* {.pure.} = object
    lpVtbl*: ptr IPersistSerializedPropStorage2Vtbl
  IPersistSerializedPropStorage2Vtbl* {.pure, inheritable.} = object of IPersistSerializedPropStorageVtbl
    GetPropertyStorageSize*: proc(self: ptr IPersistSerializedPropStorage2, pcb: ptr DWORD): HRESULT {.stdcall.}
    GetPropertyStorageBuffer*: proc(self: ptr IPersistSerializedPropStorage2, psps: ptr SERIALIZEDPROPSTORAGE, cb: DWORD, pcbWritten: ptr DWORD): HRESULT {.stdcall.}
  IPropertySystemChangeNotify* {.pure.} = object
    lpVtbl*: ptr IPropertySystemChangeNotifyVtbl
  IPropertySystemChangeNotifyVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SchemaRefreshed*: proc(self: ptr IPropertySystemChangeNotify): HRESULT {.stdcall.}
  ICreateObject* {.pure.} = object
    lpVtbl*: ptr ICreateObjectVtbl
  ICreateObjectVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CreateObject*: proc(self: ptr ICreateObject, clsid: REFCLSID, pUnkOuter: ptr IUnknown, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}

converter winim_converter_IInitializeWithFile*(x: ptr IInitializeWithFile): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IInitializeWithFile, pszFilePath: LPCWSTR, grfMode: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, pszFilePath, grfMode)
converter winim_converter_IInitializeWithStream*(x: ptr IInitializeWithStream): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IInitializeWithStream, pstream: ptr IStream, grfMode: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, pstream, grfMode)
converter winim_converter_IPropertyStore*(x: ptr IPropertyStore): ptr IUnknown = cast[ptr IUnknown](x)
proc GetCount*(self: ptr IPropertyStore, cProps: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetCount(self, cProps)
proc GetAt*(self: ptr IPropertyStore, iProp: DWORD, pkey: ptr PROPERTYKEY): HRESULT {.inline, discardable.} = self.lpVtbl.GetAt(self, iProp, pkey)
proc GetValue*(self: ptr IPropertyStore, key: REFPROPERTYKEY, pv: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetValue(self, key, pv)
proc SetValue*(self: ptr IPropertyStore, key: REFPROPERTYKEY, propvar: REFPROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.SetValue(self, key, propvar)
proc Commit*(self: ptr IPropertyStore): HRESULT {.inline, discardable.} = self.lpVtbl.Commit(self)
converter winim_converter_INamedPropertyStore*(x: ptr INamedPropertyStore): ptr IUnknown = cast[ptr IUnknown](x)
proc GetNamedValue*(self: ptr INamedPropertyStore, pszName: LPCWSTR, ppropvar: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetNamedValue(self, pszName, ppropvar)
proc SetNamedValue*(self: ptr INamedPropertyStore, pszName: LPCWSTR, propvar: REFPROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.SetNamedValue(self, pszName, propvar)
proc GetNameCount*(self: ptr INamedPropertyStore, pdwCount: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetNameCount(self, pdwCount)
proc GetNameAt*(self: ptr INamedPropertyStore, iProp: DWORD, pbstrName: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetNameAt(self, iProp, pbstrName)
converter winim_converter_IObjectWithPropertyKey*(x: ptr IObjectWithPropertyKey): ptr IUnknown = cast[ptr IUnknown](x)
proc SetPropertyKey*(self: ptr IObjectWithPropertyKey, key: REFPROPERTYKEY): HRESULT {.inline, discardable.} = self.lpVtbl.SetPropertyKey(self, key)
proc GetPropertyKey*(self: ptr IObjectWithPropertyKey, pkey: ptr PROPERTYKEY): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyKey(self, pkey)
converter winim_converter_IPropertyChange*(x: ptr IPropertyChange): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPropertyChange*(x: ptr IPropertyChange): ptr IObjectWithPropertyKey = cast[ptr IObjectWithPropertyKey](x)
proc ApplyToPropVariant*(self: ptr IPropertyChange, propvarIn: REFPROPVARIANT, ppropvarOut: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.ApplyToPropVariant(self, propvarIn, ppropvarOut)
converter winim_converter_IPropertyChangeArray*(x: ptr IPropertyChangeArray): ptr IUnknown = cast[ptr IUnknown](x)
proc GetCount*(self: ptr IPropertyChangeArray, pcOperations: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetCount(self, pcOperations)
proc GetAt*(self: ptr IPropertyChangeArray, iIndex: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetAt(self, iIndex, riid, ppv)
proc InsertAt*(self: ptr IPropertyChangeArray, iIndex: UINT, ppropChange: ptr IPropertyChange): HRESULT {.inline, discardable.} = self.lpVtbl.InsertAt(self, iIndex, ppropChange)
proc Append*(self: ptr IPropertyChangeArray, ppropChange: ptr IPropertyChange): HRESULT {.inline, discardable.} = self.lpVtbl.Append(self, ppropChange)
proc AppendOrReplace*(self: ptr IPropertyChangeArray, ppropChange: ptr IPropertyChange): HRESULT {.inline, discardable.} = self.lpVtbl.AppendOrReplace(self, ppropChange)
proc RemoveAt*(self: ptr IPropertyChangeArray, iIndex: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveAt(self, iIndex)
proc IsKeyInArray*(self: ptr IPropertyChangeArray, key: REFPROPERTYKEY): HRESULT {.inline, discardable.} = self.lpVtbl.IsKeyInArray(self, key)
converter winim_converter_IPropertyStoreCapabilities*(x: ptr IPropertyStoreCapabilities): ptr IUnknown = cast[ptr IUnknown](x)
proc IsPropertyWritable*(self: ptr IPropertyStoreCapabilities, key: REFPROPERTYKEY): HRESULT {.inline, discardable.} = self.lpVtbl.IsPropertyWritable(self, key)
converter winim_converter_IPropertyStoreCache*(x: ptr IPropertyStoreCache): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPropertyStoreCache*(x: ptr IPropertyStoreCache): ptr IPropertyStore = cast[ptr IPropertyStore](x)
proc GetState*(self: ptr IPropertyStoreCache, key: REFPROPERTYKEY, pstate: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetState(self, key, pstate)
proc GetValueAndState*(self: ptr IPropertyStoreCache, key: REFPROPERTYKEY, ppropvar: ptr PROPVARIANT, pstate: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetValueAndState(self, key, ppropvar, pstate)
proc SetState*(self: ptr IPropertyStoreCache, key: REFPROPERTYKEY, state: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetState(self, key, state)
proc SetValueAndState*(self: ptr IPropertyStoreCache, key: REFPROPERTYKEY, ppropvar: ptr PROPVARIANT, state: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetValueAndState(self, key, ppropvar, state)
converter winim_converter_IPropertyEnumType*(x: ptr IPropertyEnumType): ptr IUnknown = cast[ptr IUnknown](x)
proc GetEnumType*(self: ptr IPropertyEnumType, penumtype: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetEnumType(self, penumtype)
proc GetValue*(self: ptr IPropertyEnumType, ppropvar: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetValue(self, ppropvar)
proc GetRangeMinValue*(self: ptr IPropertyEnumType, ppropvarMin: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetRangeMinValue(self, ppropvarMin)
proc GetRangeSetValue*(self: ptr IPropertyEnumType, ppropvarSet: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetRangeSetValue(self, ppropvarSet)
proc GetDisplayText*(self: ptr IPropertyEnumType, ppszDisplay: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetDisplayText(self, ppszDisplay)
converter winim_converter_IPropertyEnumType2*(x: ptr IPropertyEnumType2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPropertyEnumType2*(x: ptr IPropertyEnumType2): ptr IPropertyEnumType = cast[ptr IPropertyEnumType](x)
proc GetImageReference*(self: ptr IPropertyEnumType2, ppszImageRes: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetImageReference(self, ppszImageRes)
converter winim_converter_IPropertyEnumTypeList*(x: ptr IPropertyEnumTypeList): ptr IUnknown = cast[ptr IUnknown](x)
proc GetCount*(self: ptr IPropertyEnumTypeList, pctypes: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetCount(self, pctypes)
proc GetAt*(self: ptr IPropertyEnumTypeList, itype: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetAt(self, itype, riid, ppv)
proc GetConditionAt*(self: ptr IPropertyEnumTypeList, nIndex: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetConditionAt(self, nIndex, riid, ppv)
proc FindMatchingIndex*(self: ptr IPropertyEnumTypeList, propvarCmp: REFPROPVARIANT, pnIndex: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.FindMatchingIndex(self, propvarCmp, pnIndex)
converter winim_converter_IPropertyDescription*(x: ptr IPropertyDescription): ptr IUnknown = cast[ptr IUnknown](x)
proc GetPropertyKey*(self: ptr IPropertyDescription, pkey: ptr PROPERTYKEY): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyKey(self, pkey)
proc GetCanonicalName*(self: ptr IPropertyDescription, ppszName: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetCanonicalName(self, ppszName)
proc GetPropertyType*(self: ptr IPropertyDescription, pvartype: ptr VARTYPE): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyType(self, pvartype)
proc GetDisplayName*(self: ptr IPropertyDescription, ppszName: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetDisplayName(self, ppszName)
proc GetEditInvitation*(self: ptr IPropertyDescription, ppszInvite: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetEditInvitation(self, ppszInvite)
proc GetTypeFlags*(self: ptr IPropertyDescription, mask: int32, ppdtFlags: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetTypeFlags(self, mask, ppdtFlags)
proc GetViewFlags*(self: ptr IPropertyDescription, ppdvFlags: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetViewFlags(self, ppdvFlags)
proc GetDefaultColumnWidth*(self: ptr IPropertyDescription, pcxChars: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetDefaultColumnWidth(self, pcxChars)
proc GetDisplayType*(self: ptr IPropertyDescription, pdisplaytype: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetDisplayType(self, pdisplaytype)
proc GetColumnState*(self: ptr IPropertyDescription, pcsFlags: ptr SHCOLSTATEF): HRESULT {.inline, discardable.} = self.lpVtbl.GetColumnState(self, pcsFlags)
proc GetGroupingRange*(self: ptr IPropertyDescription, pgr: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetGroupingRange(self, pgr)
proc GetRelativeDescriptionType*(self: ptr IPropertyDescription, prdt: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetRelativeDescriptionType(self, prdt)
proc GetRelativeDescription*(self: ptr IPropertyDescription, propvar1: REFPROPVARIANT, propvar2: REFPROPVARIANT, ppszDesc1: ptr LPWSTR, ppszDesc2: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetRelativeDescription(self, propvar1, propvar2, ppszDesc1, ppszDesc2)
proc GetSortDescription*(self: ptr IPropertyDescription, psd: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetSortDescription(self, psd)
proc GetSortDescriptionLabel*(self: ptr IPropertyDescription, fDescending: WINBOOL, ppszDescription: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetSortDescriptionLabel(self, fDescending, ppszDescription)
proc GetAggregationType*(self: ptr IPropertyDescription, paggtype: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetAggregationType(self, paggtype)
proc GetConditionType*(self: ptr IPropertyDescription, pcontype: ptr int32, popDefault: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetConditionType(self, pcontype, popDefault)
proc GetEnumTypeList*(self: ptr IPropertyDescription, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetEnumTypeList(self, riid, ppv)
proc CoerceToCanonicalValue*(self: ptr IPropertyDescription, ppropvar: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.CoerceToCanonicalValue(self, ppropvar)
proc FormatForDisplay*(self: ptr IPropertyDescription, propvar: REFPROPVARIANT, pdfFlags: int32, ppszDisplay: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.FormatForDisplay(self, propvar, pdfFlags, ppszDisplay)
proc IsValueCanonical*(self: ptr IPropertyDescription, propvar: REFPROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.IsValueCanonical(self, propvar)
converter winim_converter_IPropertyDescription2*(x: ptr IPropertyDescription2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPropertyDescription2*(x: ptr IPropertyDescription2): ptr IPropertyDescription = cast[ptr IPropertyDescription](x)
proc GetImageReferenceForValue*(self: ptr IPropertyDescription2, propvar: REFPROPVARIANT, ppszImageRes: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetImageReferenceForValue(self, propvar, ppszImageRes)
converter winim_converter_IPropertyDescriptionAliasInfo*(x: ptr IPropertyDescriptionAliasInfo): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPropertyDescriptionAliasInfo*(x: ptr IPropertyDescriptionAliasInfo): ptr IPropertyDescription = cast[ptr IPropertyDescription](x)
proc GetSortByAlias*(self: ptr IPropertyDescriptionAliasInfo, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetSortByAlias(self, riid, ppv)
proc GetAdditionalSortByAliases*(self: ptr IPropertyDescriptionAliasInfo, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetAdditionalSortByAliases(self, riid, ppv)
converter winim_converter_IPropertyDescriptionSearchInfo*(x: ptr IPropertyDescriptionSearchInfo): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPropertyDescriptionSearchInfo*(x: ptr IPropertyDescriptionSearchInfo): ptr IPropertyDescription = cast[ptr IPropertyDescription](x)
proc GetSearchInfoFlags*(self: ptr IPropertyDescriptionSearchInfo, ppdsiFlags: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetSearchInfoFlags(self, ppdsiFlags)
proc GetColumnIndexType*(self: ptr IPropertyDescriptionSearchInfo, ppdciType: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetColumnIndexType(self, ppdciType)
proc GetProjectionString*(self: ptr IPropertyDescriptionSearchInfo, ppszProjection: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetProjectionString(self, ppszProjection)
proc GetMaxSize*(self: ptr IPropertyDescriptionSearchInfo, pcbMaxSize: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetMaxSize(self, pcbMaxSize)
converter winim_converter_IPropertyDescriptionRelatedPropertyInfo*(x: ptr IPropertyDescriptionRelatedPropertyInfo): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPropertyDescriptionRelatedPropertyInfo*(x: ptr IPropertyDescriptionRelatedPropertyInfo): ptr IPropertyDescription = cast[ptr IPropertyDescription](x)
proc GetRelatedProperty*(self: ptr IPropertyDescriptionRelatedPropertyInfo, pszRelationshipName: LPCWSTR, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetRelatedProperty(self, pszRelationshipName, riid, ppv)
converter winim_converter_IPropertySystem*(x: ptr IPropertySystem): ptr IUnknown = cast[ptr IUnknown](x)
proc GetPropertyDescription*(self: ptr IPropertySystem, propkey: REFPROPERTYKEY, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyDescription(self, propkey, riid, ppv)
proc GetPropertyDescriptionByName*(self: ptr IPropertySystem, pszCanonicalName: LPCWSTR, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyDescriptionByName(self, pszCanonicalName, riid, ppv)
proc GetPropertyDescriptionListFromString*(self: ptr IPropertySystem, pszPropList: LPCWSTR, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyDescriptionListFromString(self, pszPropList, riid, ppv)
proc EnumeratePropertyDescriptions*(self: ptr IPropertySystem, filterOn: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.EnumeratePropertyDescriptions(self, filterOn, riid, ppv)
proc FormatForDisplay*(self: ptr IPropertySystem, key: REFPROPERTYKEY, propvar: REFPROPVARIANT, pdff: int32, pszText: LPWSTR, cchText: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.FormatForDisplay(self, key, propvar, pdff, pszText, cchText)
proc FormatForDisplayAlloc*(self: ptr IPropertySystem, key: REFPROPERTYKEY, propvar: REFPROPVARIANT, pdff: int32, ppszDisplay: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.FormatForDisplayAlloc(self, key, propvar, pdff, ppszDisplay)
proc RegisterPropertySchema*(self: ptr IPropertySystem, pszPath: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.RegisterPropertySchema(self, pszPath)
proc UnregisterPropertySchema*(self: ptr IPropertySystem, pszPath: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.UnregisterPropertySchema(self, pszPath)
proc RefreshPropertySchema*(self: ptr IPropertySystem): HRESULT {.inline, discardable.} = self.lpVtbl.RefreshPropertySchema(self)
converter winim_converter_IPropertyDescriptionList*(x: ptr IPropertyDescriptionList): ptr IUnknown = cast[ptr IUnknown](x)
proc GetCount*(self: ptr IPropertyDescriptionList, pcElem: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetCount(self, pcElem)
proc GetAt*(self: ptr IPropertyDescriptionList, iElem: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetAt(self, iElem, riid, ppv)
converter winim_converter_IPropertyStoreFactory*(x: ptr IPropertyStoreFactory): ptr IUnknown = cast[ptr IUnknown](x)
proc GetPropertyStore*(self: ptr IPropertyStoreFactory, flags: int32, pUnkFactory: ptr IUnknown, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyStore(self, flags, pUnkFactory, riid, ppv)
proc GetPropertyStoreForKeys*(self: ptr IPropertyStoreFactory, rgKeys: ptr PROPERTYKEY, cKeys: UINT, flags: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyStoreForKeys(self, rgKeys, cKeys, flags, riid, ppv)
converter winim_converter_IDelayedPropertyStoreFactory*(x: ptr IDelayedPropertyStoreFactory): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IDelayedPropertyStoreFactory*(x: ptr IDelayedPropertyStoreFactory): ptr IPropertyStoreFactory = cast[ptr IPropertyStoreFactory](x)
proc GetDelayedPropertyStore*(self: ptr IDelayedPropertyStoreFactory, flags: int32, dwStoreId: DWORD, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetDelayedPropertyStore(self, flags, dwStoreId, riid, ppv)
converter winim_converter_IPersistSerializedPropStorage*(x: ptr IPersistSerializedPropStorage): ptr IUnknown = cast[ptr IUnknown](x)
proc SetFlags*(self: ptr IPersistSerializedPropStorage, flags: PERSIST_SPROPSTORE_FLAGS): HRESULT {.inline, discardable.} = self.lpVtbl.SetFlags(self, flags)
proc SetPropertyStorage*(self: ptr IPersistSerializedPropStorage, psps: PCUSERIALIZEDPROPSTORAGE, cb: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetPropertyStorage(self, psps, cb)
proc GetPropertyStorage*(self: ptr IPersistSerializedPropStorage, ppsps: ptr ptr SERIALIZEDPROPSTORAGE, pcb: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyStorage(self, ppsps, pcb)
converter winim_converter_IPersistSerializedPropStorage2*(x: ptr IPersistSerializedPropStorage2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPersistSerializedPropStorage2*(x: ptr IPersistSerializedPropStorage2): ptr IPersistSerializedPropStorage = cast[ptr IPersistSerializedPropStorage](x)
proc GetPropertyStorageSize*(self: ptr IPersistSerializedPropStorage2, pcb: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyStorageSize(self, pcb)
proc GetPropertyStorageBuffer*(self: ptr IPersistSerializedPropStorage2, psps: ptr SERIALIZEDPROPSTORAGE, cb: DWORD, pcbWritten: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyStorageBuffer(self, psps, cb, pcbWritten)
converter winim_converter_IPropertySystemChangeNotify*(x: ptr IPropertySystemChangeNotify): ptr IUnknown = cast[ptr IUnknown](x)
proc SchemaRefreshed*(self: ptr IPropertySystemChangeNotify): HRESULT {.inline, discardable.} = self.lpVtbl.SchemaRefreshed(self)
converter winim_converter_ICreateObject*(x: ptr ICreateObject): ptr IUnknown = cast[ptr IUnknown](x)
proc CreateObject*(self: ptr ICreateObject, clsid: REFCLSID, pUnkOuter: ptr IUnknown, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.CreateObject(self, clsid, pUnkOuter, riid, ppv)

# objext/shobjidl.nim

type
  IXMLDOMDocument = object
  IObjectArray = object

const
  # FOLDER_ENUM_MODE* = enum
  FEM_VIEWRESULT* = 0
  FEM_NAVIGATION* = 1
  # FOLDERFLAGS* = enum
  FWF_NONE* = 0x0
  FWF_AUTOARRANGE* = 0x1
  FWF_ABBREVIATEDNAMES* = 0x2
  FWF_SNAPTOGRID* = 0x4
  FWF_OWNERDATA* = 0x8
  FWF_BESTFITWINDOW* = 0x10
  FWF_DESKTOP* = 0x20
  FWF_SINGLESEL* = 0x40
  FWF_NOSUBFOLDERS* = 0x80
  FWF_TRANSPARENT* = 0x100
  FWF_NOCLIENTEDGE* = 0x200
  FWF_NOSCROLL* = 0x400
  FWF_ALIGNLEFT* = 0x800
  FWF_NOICONS* = 0x1000
  FWF_SHOWSELALWAYS* = 0x2000
  FWF_NOVISIBLE* = 0x4000
  FWF_SINGLECLICKACTIVATE* = 0x8000
  FWF_NOWEBVIEW* = 0x10000
  FWF_HIDEFILENAMES* = 0x20000
  FWF_CHECKSELECT* = 0x40000
  FWF_NOENUMREFRESH* = 0x80000
  FWF_NOGROUPING* = 0x100000
  FWF_FULLROWSELECT* = 0x200000
  FWF_NOFILTERS* = 0x400000
  FWF_NOCOLUMNHEADER* = 0x800000
  FWF_NOHEADERINALLVIEWS* = 0x1000000
  FWF_EXTENDEDTILES* = 0x2000000
  FWF_TRICHECKSELECT* = 0x4000000
  FWF_AUTOCHECKSELECT* = 0x8000000
  FWF_NOBROWSERVIEWSTATE* = 0x10000000
  FWF_SUBSETGROUPS* = 0x20000000
  FWF_USESEARCHFOLDER* = 0x40000000
  FWF_ALLOWRTLREADING* = -2147483648
  # FOLDERVIEWMODE* = enum
  FVM_AUTO* = -1
  FVM_FIRST* = 1
  FVM_ICON* = 1
  FVM_SMALLICON* = 2
  FVM_LIST* = 3
  FVM_DETAILS* = 4
  FVM_THUMBNAIL* = 5
  FVM_TILE* = 6
  FVM_THUMBSTRIP* = 7
  FVM_CONTENT* = 8
  FVM_LAST* = 8
  # FOLDERLOGICALVIEWMODE* = enum
  FLVM_UNSPECIFIED* = -1
  FLVM_FIRST* = 1
  FLVM_DETAILS* = 1
  FLVM_TILES* = 2
  FLVM_ICONS* = 3
  FLVM_LIST* = 4
  FLVM_CONTENT* = 5
  FLVM_LAST* = 5
  # FOLDERVIEWOPTIONS* = enum
  FVO_DEFAULT* = 0x0
  FVO_VISTALAYOUT* = 0x1
  FVO_CUSTOMPOSITION* = 0x2
  FVO_CUSTOMORDERING* = 0x4
  FVO_SUPPORTHYPERLINKS* = 0x8
  FVO_NOANIMATIONS* = 0x10
  FVO_NOSCROLLTIPS* = 0x20
  # SVSIF* = enum
  SVSI_DESELECT* = 0x0
  SVSI_SELECT* = 0x1
  SVSI_EDIT* = 0x3
  SVSI_DESELECTOTHERS* = 0x4
  SVSI_ENSUREVISIBLE* = 0x8
  SVSI_FOCUSED* = 0x10
  SVSI_TRANSLATEPT* = 0x20
  SVSI_SELECTIONMARK* = 0x40
  SVSI_POSITIONITEM* = 0x80
  SVSI_CHECK* = 0x100
  SVSI_CHECK2* = 0x200
  SVSI_KEYBOARDSELECT* = 0x401
  SVSI_NOTAKEFOCUS* = 0x40000000
  # SVGIO* = enum
  SVGIO_BACKGROUND* = 0x0
  SVGIO_SELECTION* = 0x1
  SVGIO_ALLVIEW* = 0x2
  SVGIO_CHECKED* = 0x3
  SVGIO_TYPE_MASK* = 0xf
  SVGIO_FLAG_VIEWORDER* = -2147483648
  # SVUIA_STATUS* = enum
  SVUIA_DEACTIVATE* = 0
  SVUIA_ACTIVATE_NOFOCUS* = 1
  SVUIA_ACTIVATE_FOCUS* = 2
  SVUIA_INPLACEACTIVATE* = 3
  # FVTEXTTYPE* = enum
  FVST_EMPTYTEXT* = 0
  # VPWATERMARKFLAGS* = enum
  VPWF_DEFAULT* = 0x0
  VPWF_ALPHABLEND* = 0x1
  # VPCOLORFLAGS* = enum
  VPCF_TEXT* = 1
  VPCF_BACKGROUND* = 2
  VPCF_SORTCOLUMN* = 3
  VPCF_SUBTEXT* = 4
  VPCF_TEXTBACKGROUND* = 5
  # CM_MASK* = enum
  CM_MASK_WIDTH* = 0x1
  CM_MASK_DEFAULTWIDTH* = 0x2
  CM_MASK_IDEALWIDTH* = 0x4
  CM_MASK_NAME* = 0x8
  CM_MASK_STATE* = 0x10
  # CM_STATE* = enum
  CM_STATE_NONE* = 0x0
  CM_STATE_VISIBLE* = 0x1
  CM_STATE_FIXEDWIDTH* = 0x2
  CM_STATE_NOSORTBYFOLDERNESS* = 0x4
  CM_STATE_ALWAYSVISIBLE* = 0x8
  # CM_ENUM_FLAGS* = enum
  CM_ENUM_ALL* = 0x1
  CM_ENUM_VISIBLE* = 0x2
  # CM_SET_WIDTH_VALUE* = enum
  CM_WIDTH_USEDEFAULT* = -1
  CM_WIDTH_AUTOSIZE* = -2
  # SIGDN* = enum
  SIGDN_NORMALDISPLAY* = 0x0
  SIGDN_PARENTRELATIVEPARSING* = -2147385343
  SIGDN_DESKTOPABSOLUTEPARSING* = -2147319808
  SIGDN_PARENTRELATIVEEDITING* = -2147282943
  SIGDN_DESKTOPABSOLUTEEDITING* = -2147172352
  SIGDN_FILESYSPATH* = -2147123200
  SIGDN_URL* = -2147057664
  SIGDN_PARENTRELATIVEFORADDRESSBAR* = -2146975743
  SIGDN_PARENTRELATIVE* = -2146959359
  SIGDN_PARENTRELATIVEFORUI* = -2146877439
  # DATAOBJ_GET_ITEM_FLAGS* = enum
  DOGIF_DEFAULT* = 0x0
  DOGIF_TRAVERSE_LINK* = 0x1
  DOGIF_NO_HDROP* = 0x2
  DOGIF_NO_URL* = 0x4
  DOGIF_ONLY_IF_ONE* = 0x8
  # STGOP* = enum
  STGOP_MOVE* = 1
  STGOP_COPY* = 2
  STGOP_SYNC* = 3
  STGOP_REMOVE* = 5
  STGOP_RENAME* = 6
  STGOP_APPLYPROPERTIES* = 8
  STGOP_NEW* = 10
  # SIATTRIBFLAGS* = enum
  SIATTRIBFLAGS_AND* = 0x1
  SIATTRIBFLAGS_OR* = 0x2
  SIATTRIBFLAGS_APPCOMPAT* = 0x3
  SIATTRIBFLAGS_MASK* = 0x3
  SIATTRIBFLAGS_ALLITEMS* = 0x4000
  # CATEGORYINFO_FLAGS* = enum
  CATINFO_NORMAL* = 0x0
  CATINFO_COLLAPSED* = 0x1
  CATINFO_HIDDEN* = 0x2
  CATINFO_EXPANDED* = 0x4
  CATINFO_NOHEADER* = 0x8
  CATINFO_NOTCOLLAPSIBLE* = 0x10
  CATINFO_NOHEADERCOUNT* = 0x20
  CATINFO_SUBSETTED* = 0x40
  # CATSORT_FLAGS* = enum
  CATSORT_DEFAULT* = 0x0
  CATSORT_NAME* = 0x1
  # DSH_FLAGS* = enum
  DSH_ALLOWDROPDESCRIPTIONTEXT* = 0x1
  # SLR_FLAGS* = enum
  SLR_NO_UI* = 0x1
  SLR_ANY_MATCH* = 0x2
  SLR_UPDATE* = 0x4
  SLR_NOUPDATE* = 0x8
  SLR_NOSEARCH* = 0x10
  SLR_NOTRACK* = 0x20
  SLR_NOLINKINFO* = 0x40
  SLR_INVOKE_MSI* = 0x80
  SLR_NO_UI_WITH_MSG_PUMP* = 0x101
  SLR_OFFER_DELETE_WITHOUT_FILE* = 0x200
  SLR_KNOWNFOLDER* = 0x400
  SLR_MACHINE_IN_LOCAL_TARGET* = 0x800
  SLR_UPDATE_MACHINE_AND_SID* = 0x1000
  # SLGP_FLAGS* = enum
  SLGP_SHORTPATH* = 0x1
  SLGP_UNCPRIORITY* = 0x2
  SLGP_RAWPATH* = 0x4
  SLGP_RELATIVEPRIORITY* = 0x8
  # SPACTION* = enum
  SPACTION_NONE* = 0
  SPACTION_MOVING* = 1
  SPACTION_COPYING* = 2
  SPACTION_RECYCLING* = 3
  SPACTION_APPLYINGATTRIBS* = 4
  SPACTION_DOWNLOADING* = 5
  SPACTION_SEARCHING_INTERNET* = 6
  SPACTION_CALCULATING* = 7
  SPACTION_UPLOADING* = 8
  SPACTION_SEARCHING_FILES* = 9
  SPACTION_DELETING* = 10
  SPACTION_RENAMING* = 11
  SPACTION_FORMATTING* = 12
  SPACTION_COPY_MOVING* = 13
  # SPTEXT* = enum
  SPTEXT_ACTIONDESCRIPTION* = 1
  SPTEXT_ACTIONDETAIL* = 2
  # THUMBBUTTONFLAGS* = enum
  THBF_ENABLED* = 0x0
  THBF_DISABLED* = 0x1
  THBF_DISMISSONCLICK* = 0x2
  THBF_NOBACKGROUND* = 0x4
  THBF_HIDDEN* = 0x8
  THBF_NONINTERACTIVE* = 0x10
  # THUMBBUTTONMASK* = enum
  THB_BITMAP* = 0x1
  THB_ICON* = 0x2
  THB_TOOLTIP* = 0x4
  THB_FLAGS* = 0x8
  # TBPFLAG* = enum
  TBPF_NOPROGRESS* = 0x0
  TBPF_INDETERMINATE* = 0x1
  TBPF_NORMAL* = 0x2
  TBPF_ERROR* = 0x4
  TBPF_PAUSED* = 0x8
  # STPFLAG* = enum
  STPF_NONE* = 0x0
  STPF_USEAPPTHUMBNAILALWAYS* = 0x1
  STPF_USEAPPTHUMBNAILWHENACTIVE* = 0x2
  STPF_USEAPPPEEKALWAYS* = 0x4
  STPF_USEAPPPEEKWHENACTIVE* = 0x8
  # EXPLORER_BROWSER_OPTIONS* = enum
  EBO_NONE* = 0x0
  EBO_NAVIGATEONCE* = 0x1
  EBO_SHOWFRAMES* = 0x2
  EBO_ALWAYSNAVIGATE* = 0x4
  EBO_NOTRAVELLOG* = 0x8
  EBO_NOWRAPPERWINDOW* = 0x10
  EBO_HTMLSHAREPOINTVIEW* = 0x20
  EBO_NOBORDER* = 0x40
  EBO_NOPERSISTVIEWSTATE* = 0x80
  # EXPLORER_BROWSER_FILL_FLAGS* = enum
  EBF_NONE* = 0x0
  EBF_SELECTFROMDATAOBJECT* = 0x100
  EBF_NODROPTARGET* = 0x200
  # PDOPSTATUS* = enum
  PDOPS_RUNNING* = 1
  PDOPS_PAUSED* = 2
  PDOPS_CANCELLED* = 3
  PDOPS_STOPPED* = 4
  PDOPS_ERRORS* = 5
  # NAMESPACEWALKFLAG* = enum
  NSWF_DEFAULT* = 0x0
  NSWF_NONE_IMPLIES_ALL* = 0x1
  NSWF_ONE_IMPLIES_ALL* = 0x2
  NSWF_DONT_TRAVERSE_LINKS* = 0x4
  NSWF_DONT_ACCUMULATE_RESULT* = 0x8
  NSWF_TRAVERSE_STREAM_JUNCTIONS* = 0x10
  NSWF_FILESYSTEM_ONLY* = 0x20
  NSWF_SHOW_PROGRESS* = 0x40
  NSWF_FLAG_VIEWORDER* = 0x80
  NSWF_IGNORE_AUTOPLAY_HIDA* = 0x100
  NSWF_ASYNC* = 0x200
  NSWF_DONT_RESOLVE_LINKS* = 0x400
  NSWF_ACCUMULATE_FOLDERS* = 0x800
  NSWF_DONT_SORT* = 0x1000
  NSWF_USE_TRANSFER_MEDIUM* = 0x2000
  NSWF_DONT_TRAVERSE_STREAM_JUNCTIONS* = 0x4000
  NSWF_ANY_IMPLIES_ALL* = 0x8000
  # FILE_USAGE_TYPE* = enum
  FUT_PLAYING* = 0
  FUT_EDITING* = 1
  FUT_GENERIC* = 2
  # FDE_OVERWRITE_RESPONSE* = enum
  FDEOR_DEFAULT* = 0
  FDEOR_ACCEPT* = 1
  FDEOR_REFUSE* = 2
  # FDE_SHAREVIOLATION_RESPONSE* = enum
  FDESVR_DEFAULT* = 0
  FDESVR_ACCEPT* = 1
  FDESVR_REFUSE* = 2
  # FDAP = enum
  FDAP_BOTTOM* = 0
  FDAP_TOP* = 1
  # CDCONTROLSTATEF* = enum
  CDCS_INACTIVE* = 0x0
  CDCS_ENABLED* = 0x1
  CDCS_VISIBLE* = 0x2
  CDCS_ENABLEDVISIBLE* = 0x3
  # ASSOCIATIONLEVEL* = enum
  AL_MACHINE* = 0
  AL_EFFECTIVE* = 1
  AL_USER* = 2
  # ASSOCIATIONTYPE* = enum
  AT_FILEEXTENSION* = 0
  AT_URLPROTOCOL* = 1
  AT_STARTMENUCLIENT* = 2
  AT_MIMETYPE* = 3
  # NWMF = enum
  NWMF_UNLOADING* = 0x1
  NWMF_USERINITED* = 0x2
  NWMF_FIRST* = 0x4
  NWMF_OVERRIDEKEY* = 0x8
  NWMF_SHOWHELP* = 0x10
  NWMF_HTMLDIALOG* = 0x20
  NWMF_FROMDIALOGCHILD* = 0x40
  NWMF_USERREQUESTED* = 0x80
  NWMF_USERALLOWED* = 0x100
  NWMF_FORCEWINDOW* = 0x10000
  NWMF_FORCETAB* = 0x20000
  NWMF_SUGGESTWINDOW* = 0x40000
  NWMF_SUGGESTTAB* = 0x80000
  NWMF_INACTIVETAB* = 0x100000
  # ATTACHMENT_PROMPT* = enum
  ATTACHMENT_PROMPT_NONE* = 0x0
  ATTACHMENT_PROMPT_SAVE* = 0x1
  ATTACHMENT_PROMPT_EXEC* = 0x2
  ATTACHMENT_PROMPT_EXEC_OR_SAVE* = 0x3
  # ATTACHMENT_ACTION* = enum
  ATTACHMENT_ACTION_CANCEL* = 0x0
  ATTACHMENT_ACTION_SAVE* = 0x1
  ATTACHMENT_ACTION_EXEC* = 0x2
  # KF_CATEGORY* = enum
  KF_CATEGORY_VIRTUAL* = 1
  KF_CATEGORY_FIXED* = 2
  KF_CATEGORY_COMMON* = 3
  KF_CATEGORY_PERUSER* = 4
  # FFFP_MODE* = enum
  FFFP_EXACTMATCH* = 0
  FFFP_NEARESTPARENTMATCH* = 1
  # SHARE_ROLE* = enum
  SHARE_ROLE_INVALID* = -1
  SHARE_ROLE_READER* = 0
  SHARE_ROLE_CONTRIBUTOR* = 1
  SHARE_ROLE_CO_OWNER* = 2
  SHARE_ROLE_OWNER* = 3
  SHARE_ROLE_CUSTOM* = 4
  SHARE_ROLE_MIXED* = 5
  # DEF_SHARE_ID* = enum
  DEFSHAREID_USERS* = 1
  DEFSHAREID_PUBLIC* = 2
  # NSTCGNI* = enum
  NSTCGNI_NEXT* = 0
  NSTCGNI_NEXTVISIBLE* = 1
  NSTCGNI_PREV* = 2
  NSTCGNI_PREVVISIBLE* = 3
  NSTCGNI_PARENT* = 4
  NSTCGNI_CHILD* = 5
  NSTCGNI_FIRSTVISIBLE* = 6
  NSTCGNI_LASTVISIBLE* = 7
  # NSTCSTYLE2* = enum
  NSTCS2_DEFAULT* = 0x0
  NSTCS2_INTERRUPTNOTIFICATIONS* = 0x1
  NSTCS2_SHOWNULLSPACEMENU* = 0x2
  NSTCS2_DISPLAYPADDING* = 0x4
  NSTCS2_DISPLAYPINNEDONLY* = 0x8
  NTSCS2_NOSINGLETONAUTOEXPAND* = 0x10
  NTSCS2_NEVERINSERTNONENUMERATED* = 0x20
  # NSTCFOLDERCAPABILITIES* = enum
  NSTCFC_NONE* = 0x0
  NSTCFC_PINNEDITEMFILTERING* = 0x1
  NSTCFC_DELAY_REGISTER_NOTIFY* = 0x2
  # CPVIEW* = enum
  CPVIEW_CLASSIC* = 0
  CPVIEW_ALLITEMS* = CPVIEW_CLASSIC
  CPVIEW_CATEGORY* = 1
  CPVIEW_HOME* = CPVIEW_CATEGORY
  # _KNOWNDESTCATEGORY* = enum
  KDC_FREQUENT* = 1
  KDC_RECENT* = 2
  # _APPDOCLISTTYPE* = enum
  ADLT_RECENT* = 0
  ADLT_FREQUENT* = 1
  # _DESKTOP_SLIDESHOW_OPTIONS* = enum
  DSO_SHUFFLEIMAGES* = 0x1
  # _DESKTOP_SLIDESHOW_STATE* = enum
  DSS_ENABLED* = 0x1
  DSS_SLIDESHOW* = 0x2
  DSS_DISABLED_BY_REMOTE_SESSION* = 0x4
  # _DESKTOP_SLIDESHOW_DIRECTION* = enum
  DSD_FORWARD* = 0
  DSD_BACKWARD* = 1
  # _DESKTOP_WALLPAPER_POSITION* = enum
  DWPOS_CENTER* = 0
  DWPOS_TILE* = 1
  DWPOS_STRETCH* = 2
  DWPOS_FIT* = 3
  DWPOS_FILL* = 4
  DWPOS_SPAN* = 5
  # HOMEGROUPSHARINGCHOICES* = enum
  HGSC_NONE* = 0x0
  HGSC_MUSICLIBRARY* = 0x1
  HGSC_PICTURESLIBRARY* = 0x2
  HGSC_VIDEOSLIBRARY* = 0x4
  HGSC_DOCUMENTSLIBRARY* = 0x8
  HGSC_PRINTERS* = 0x10
  # LIBRARYFOLDERFILTER* = enum
  LFF_FORCEFILESYSTEM* = 1
  LFF_STORAGEITEMS* = 2
  LFF_ALLITEMS* = 3
  # LIBRARYOPTIONFLAGS* = enum
  LOF_DEFAULT* = 0x0
  LOF_PINNEDTONAVPANE* = 0x1
  LOF_MASK_ALL* = 0x1
  # DEFAULTSAVEFOLDERTYPE* = enum
  DSFT_DETECT* = 1
  DSFT_PRIVATE* = 2
  DSFT_PUBLIC* = 3
  # LIBRARYSAVEFLAGS* = enum
  LSF_FAILIFTHERE* = 0x0
  LSF_OVERRIDEEXISTING* = 0x1
  LSF_MAKEUNIQUENAME* = 0x2
  # PBM_EVENT* = enum
  PE_DUCKSESSION* = 1
  PE_UNDUCKSESSION* = 2
  # PBM_SESSION_TYPE* = enum
  ST_COMMUNICATION* = 1
  ST_MEDIA* = 2
  # PBM_PLAY_STATE* = enum
  PS_PLAYING* = 1
  PS_PAUSED* = 2
  PS_STOPPED* = 3
  # PBM_MUTE_STATE* = enum
  MS_MUTED* = 1
  MS_UNMUTED* = 2
  # DEFAULT_FOLDER_MENU_RESTRICTIONS* = enum
  DFMR_DEFAULT* = 0x0
  DFMR_NO_STATIC_VERBS* = 0x8
  DFMR_STATIC_VERBS_ONLY* = 0x10
  DFMR_NO_RESOURCE_VERBS* = 0x20
  DFMR_OPTIN_HANDLERS_ONLY* = 0x40
  DFMR_RESOURCE_AND_FOLDER_VERBS_ONLY* = 0x80
  DFMR_USE_SPECIFIED_HANDLERS* = 0x100
  DFMR_USE_SPECIFIED_VERBS* = 0x200
  DFMR_NO_ASYNC_VERBS* = 0x400
  # ACTIVATEOPTIONS* = enum
  AO_NONE* = 0x0
  AO_DESIGNMODE* = 0x1
  AO_NOERRORUI* = 0x2
  AO_NOSPLASHSCREEN* = 0x4
  # LIBRARYMANAGEDIALOGOPTIONS* = enum
  LMD_DEFAULT* = 0x0
  LMD_ALLOWUNINDEXABLENETWORKLOCATIONS* = 0x1
  # ASSOC_FILTER* = enum
  ASSOC_FILTER_NONE* = 0x0
  ASSOC_FILTER_RECOMMENDED* = 0x1
  # UNDOCK_REASON* = enum
  UR_RESOLUTION_CHANGE* = 0
  UR_MONITOR_DISCONNECT* = 1
  # MONITOR_APP_VISIBILITY* = enum
  MAV_UNKNOWN* = 0
  MAV_NO_APP_VISIBLE* = 1
  MAV_APP_VISIBLE* = 2
  # PACKAGE_EXECUTION_STATE* = enum
  PES_UNKNOWN* = 0
  PES_RUNNING* = 1
  PES_SUSPENDING* = 2
  PES_SUSPENDED* = 3
  PES_TERMINATED* = 4
  # AHE_TYPE* = enum
  AHE_DESKTOP* = 0
  AHE_IMMERSIVE* = 1
  # EC_HOST_UI_MODE* = enum
  ECHUIM_DESKTOP* = 0
  ECHUIM_IMMERSIVE* = 1
  ECHUIM_SYSTEM_LAUNCHER* = 2
  # APPLICATION_VIEW_STATE* = enum
  AVS_FULLSCREEN_LANDSCAPE* = 0
  AVS_FILLED* = 1
  AVS_SNAPPED* = 2
  AVS_FULLSCREEN_PORTRAIT* = 3
  # EDGE_GESTURE_KIND* = enum
  EGK_TOUCH* = 0
  EGK_KEYBOARD* = 1
  EGK_MOUSE* = 2

type
  # CMINVOKECOMMANDINFO* {.final, pure.} = object
  #   cbSize*: DWORD
  #   fMask*: DWORD
  #   hwnd*: HWND
  #   lpVerb*: LPCSTR
  #   lpParameters*: LPCSTR
  #   lpDirectory*: LPCSTR
  #   nShow*: cint
  #   dwHotKey*: DWORD
  #   hIcon*: HANDLE
  # LPCMINVOKECOMMANDINFO* = ptr CMINVOKECOMMANDINFO
  PCCMINVOKECOMMANDINFO* = ptr CMINVOKECOMMANDINFO
  CMINVOKECOMMANDINFOEX* {.final, pure.} = object
    cbSize*: DWORD
    fMask*: DWORD
    hwnd*: HWND
    lpVerb*: LPCSTR
    lpParameters*: LPCSTR
    lpDirectory*: LPCSTR
    nShow*: cint
    dwHotKey*: DWORD
    hIcon*: HANDLE
    lpTitle*: LPCSTR
    lpVerbW*: LPCWSTR
    lpParametersW*: LPCWSTR
    lpDirectoryW*: LPCWSTR
    lpTitleW*: LPCWSTR
    ptInvoke*: POINT
  LPCMINVOKECOMMANDINFOEX* = ptr CMINVOKECOMMANDINFOEX
  PCCMINVOKECOMMANDINFOEX* = ptr CMINVOKECOMMANDINFOEX
  LPCONTEXTMENU3* = ptr IContextMenu3
  # PERSIST_FOLDER_TARGET_INFO* {.final, pure.} = object
  #   pidlTargetFolder*: PIDLIST_ABSOLUTE
  #   szTargetParsingName*: array[260, WCHAR]
  #   szNetworkProvider*: array[260, WCHAR]
  #   dwAttributes*: DWORD
  #   csidl*: cint
  # LPENUMIDLIST* = ptr IEnumIDList
  SHGDNF* = DWORD
  SHCONTF* = DWORD
  SFGAOF* = ULONG
  # LPSHELLFOLDER* = ptr IShellFolder
  # EXTRASEARCH* {.final, pure.} = object
  #   guidSearch*: GUID
  #   wszFriendlyName*: array[80, WCHAR]
  #   wszUrl*: array[2084, WCHAR]
  # LPENUMEXTRASEARCH* = ptr IEnumExtraSearch
  # LPVIEWSETTINGS* = cstring
  # FOLDERSETTINGS* {.final, pure.} = object
  #   ViewMode*: UINT
  #   fFlags*: UINT
  # LPFOLDERSETTINGS* = ptr FOLDERSETTINGS
  # LPCFOLDERSETTINGS* = ptr FOLDERSETTINGS
  PFOLDERSETTINGS* = ptr FOLDERSETTINGS
  SVSIF* = UINT
  SVGIO* = cint
  LPFNSVADDPROPSHEETPAGE* = LPFNADDPROPSHEETPAGE
  # LPSHELLVIEW* = ptr IShellView
  # SHELLVIEWID* = GUID
  # SV2CVW2_PARAMS* {.final, pure.} = object
  #   cbSize*: DWORD
  #   psvPrev*: ptr IShellView
  #   pfs*: LPCFOLDERSETTINGS
  #   psbOwner*: ptr IShellBrowser
  #   prcView*: ptr RECT
  #   pvid*: ptr SHELLVIEWID
  #   hwndView*: HWND
  SV3CVW3_FLAGS* = DWORD
  SORTDIRECTION* = cint
  SORTCOLUMN* {.final, pure.} = object
    propkey*: PROPERTYKEY
    direction*: SORTDIRECTION
  DEPRECATED_HRESULT* = HRESULT
  # LPCOMMDLGBROWSER* = ptr ICommDlgBrowser
  LPCOMMDLGBROWSER2* = ptr ICommDlgBrowser2
  CM_COLUMNINFO* {.final, pure.} = object
    cbSize*: DWORD
    dwMask*: DWORD
    dwState*: DWORD
    uWidth*: UINT
    uDefaultWidth*: UINT
    uIdealWidth*: UINT
    wszName*: array[80, WCHAR]
  LPTBBUTTONSB* = LPTBBUTTON
  # LPSHELLBROWSER* = ptr IShellBrowser
  SICHINTF* = DWORD
  SIIGBF* = cint
  STGTRANSCONFIRMATION* = GUID
  LPSTGTRANSCONFIRMATION* = ptr GUID
  TRANSFER_SOURCE_FLAGS* = DWORD
  TRANSFER_ADVISE_STATE* = DWORD
  SHELL_ITEM_RESOURCE* {.final, pure.} = object
    guidType*: GUID
    szName*: array[260, WCHAR]
  PROPERTYUI_NAME_FLAGS* = DWORD
  PROPERTYUI_FLAGS* = DWORD
  PROPERTYUI_FORMAT_FLAGS* = DWORD
  TCATEGORY_INFO* {.final, pure.} = object # renamed from CATEGORY_INFO
    cif*: int32
    wszName*: array[260, WCHAR]
  # SHDRAGIMAGE* {.final, pure.} = object
  #   sizeDragImage*: SIZE
  #   ptOffset*: POINT
  #   hbmpDragImage*: HBITMAP
  #   crColorKey*: COLORREF
  SPINITF* = DWORD
  SPBEGINF* = DWORD
  # LPSHELLEXTINIT* = ptr IShellExtInit
  EXPPS* = UINT
  # LPSHELLPROPSHEETEXT* = ptr IShellPropSheetExt
  LPEXTRACTIMAGE* = ptr IExtractImage
  LPEXTRACTIMAGE2* = ptr IExtractImage2
  DESKBANDINFO* {.final, pure.} = object
    dwMask*: DWORD
    ptMinSize*: POINTL
    ptMaxSize*: POINTL
    ptIntegral*: POINTL
    ptActual*: POINTL
    wszTitle*: array[256, WCHAR]
    dwModeFlags*: DWORD
    crBkgnd*: COLORREF
  # HIMAGELIST* = ptr IUnknown
  THUMBBUTTON* {.final, pure.} = object
    dwMask*: int32
    iId*: UINT
    iBitmap*: UINT
    hIcon*: HICON
    szTip*: array[260, WCHAR]
    dwFlags*: int32
  LPTHUMBBUTTON* = ptr THUMBBUTTON
  OPPROGDLGF* = DWORD
  PDMODE* = DWORD
  BANDSITEINFO* {.final, pure.} = object
    dwMask*: DWORD
    dwState*: DWORD
    dwStyle*: DWORD
  CDBE_ACTIONS* = DWORD
  MP_POPUPFLAGS* = cint
  FILEOPENDIALOGOPTIONS* = DWORD
  DELEGATEITEMID* {.final, pure.} = object
    cbSize*: WORD
    wOuter*: WORD
    cbInner*: WORD
    rgb*: array[1, BYTE]
  PCDELEGATEITEMID* = ptr DELEGATEITEMID
  PDELEGATEITEMID* = ptr DELEGATEITEMID
  LPBROWSERFRAMEOPTIONS* = ptr IBrowserFrameOptions
  BROWSERFRAMEOPTIONS* = DWORD
  SMDATA* {.final, pure.} = object
    dwMask*: DWORD
    dwFlags*: DWORD
    hmenu*: HMENU
    hwnd*: HWND
    uId*: UINT
    uIdParent*: UINT
    uIdAncestor*: UINT
    punk*: ptr IUnknown
    pidlFolder*: PIDLIST_ABSOLUTE
    pidlItem*: PUITEMID_CHILD
    psf*: ptr IShellFolder
    pvUserData*: pointer
  LPSMDATA* = ptr SMDATA
  SMINFO* {.final, pure.} = object
    dwMask*: DWORD
    dwType*: DWORD
    dwFlags*: DWORD
    iIcon*: cint
  SMCSHCHANGENOTIFYSTRUCT* {.final, pure.} = object
    lEvent*: LONG
    pidl1*: PCIDLIST_ABSOLUTE
    pidl2*: PCIDLIST_ABSOLUTE
  KF_DEFINITION_FLAGS* = DWORD
  # KF_REDIRECT_FLAGS* = DWORD
  KF_REDIRECTION_CAPABILITIES* = DWORD
  KNOWNFOLDER_DEFINITION* {.final, pure.} = object
    category*: int32
    pszName*: LPWSTR
    pszDescription*: LPWSTR
    fidParent*: KNOWNFOLDERID
    pszRelativePath*: LPWSTR
    pszParsingName*: LPWSTR
    pszTooltip*: LPWSTR
    pszLocalizedName*: LPWSTR
    pszIcon*: LPWSTR
    pszSecurity*: LPWSTR
    dwAttributes*: DWORD
    kfdFlags*: KF_DEFINITION_FLAGS
    ftidType*: FOLDERTYPEID
  NMCII_FLAGS* = cint
  NMCSAEI_FLAGS* = cint
  NSTCSTYLE* = DWORD
  NSTCROOTSTYLE* = DWORD
  NSTCITEMSTATE* = DWORD
  NSTCEHITTEST* = DWORD
  NSTCECLICKTYPE* = DWORD
  NSTCCUSTOMDRAW* {.final, pure.} = object
    psi*: ptr IShellItem
    uItemState*: UINT
    nstcis*: NSTCITEMSTATE
    pszText*: LPCWSTR
    iImage*: cint
    himl*: HIMAGELIST
    iLevel*: cint
    iIndent*: cint
  PREVIEWHANDLERFRAMEINFO* {.final, pure.} = object
    haccel*: HACCEL
    cAccelEntries*: UINT
  EXPLORERPANE* = GUID
  REFEXPLORERPANE* = ptr EXPLORERPANE
  EXPLORERPANESTATE* = DWORD
  EXPCMDSTATE* = DWORD
  EXPCMDFLAGS* = DWORD
  HTHEME* = HANDLE
  PZZWSTR* = ptr WCHAR
  IContextMenu3* {.pure.} = object
    lpVtbl*: ptr IContextMenu3Vtbl
  IContextMenu3Vtbl* {.pure, inheritable.} = object of IContextMenu2Vtbl
    HandleMenuMsg2*: proc(self: ptr IContextMenu3, uMsg: UINT, wParam: WPARAM, lParam: LPARAM, plResult: ptr LRESULT): HRESULT {.stdcall.}
  IExecuteCommand* {.pure.} = object
    lpVtbl*: ptr IExecuteCommandVtbl
  IExecuteCommandVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetKeyState*: proc(self: ptr IExecuteCommand, grfKeyState: DWORD): HRESULT {.stdcall.}
    SetParameters*: proc(self: ptr IExecuteCommand, pszParameters: LPCWSTR): HRESULT {.stdcall.}
    SetPosition*: proc(self: ptr IExecuteCommand, pt: POINT): HRESULT {.stdcall.}
    SetShowWindow*: proc(self: ptr IExecuteCommand, nShow: int32): HRESULT {.stdcall.}
    SetNoShowUI*: proc(self: ptr IExecuteCommand, fNoShowUI: WINBOOL): HRESULT {.stdcall.}
    SetDirectory*: proc(self: ptr IExecuteCommand, pszDirectory: LPCWSTR): HRESULT {.stdcall.}
    Execute*: proc(self: ptr IExecuteCommand): HRESULT {.stdcall.}
  IRunnableTask* {.pure.} = object
    lpVtbl*: ptr IRunnableTaskVtbl
  IRunnableTaskVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Run*: proc(self: ptr IRunnableTask): HRESULT {.stdcall.}
    Kill*: proc(self: ptr IRunnableTask, bWait: WINBOOL): HRESULT {.stdcall.}
    Suspend*: proc(self: ptr IRunnableTask): HRESULT {.stdcall.}
    Resume*: proc(self: ptr IRunnableTask): HRESULT {.stdcall.}
    IsRunning*: proc(self: ptr IRunnableTask): ULONG {.stdcall.}
  IShellTaskScheduler* {.pure.} = object
    lpVtbl*: ptr IShellTaskSchedulerVtbl
  IShellTaskSchedulerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AddTask*: proc(self: ptr IShellTaskScheduler, prt: ptr IRunnableTask, rtoid: REFTASKOWNERID, lParam: DWORD_PTR, dwPriority: DWORD): HRESULT {.stdcall.}
    RemoveTasks*: proc(self: ptr IShellTaskScheduler, rtoid: REFTASKOWNERID, lParam: DWORD_PTR, bWaitIfRunning: WINBOOL): HRESULT {.stdcall.}
    CountTasks*: proc(self: ptr IShellTaskScheduler, rtoid: REFTASKOWNERID): UINT {.stdcall.}
    Status*: proc(self: ptr IShellTaskScheduler, dwReleaseStatus: DWORD, dwThreadTimeout: DWORD): HRESULT {.stdcall.}
  IQueryCodePage* {.pure.} = object
    lpVtbl*: ptr IQueryCodePageVtbl
  IQueryCodePageVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCodePage*: proc(self: ptr IQueryCodePage, puiCodePage: ptr UINT): HRESULT {.stdcall.}
    SetCodePage*: proc(self: ptr IQueryCodePage, uiCodePage: UINT): HRESULT {.stdcall.}
  IPersistIDList* {.pure.} = object
    lpVtbl*: ptr IPersistIDListVtbl
  IPersistIDListVtbl* {.pure, inheritable.} = object of IPersistVtbl
    SetIDList*: proc(self: ptr IPersistIDList, pidl: PCIDLIST_ABSOLUTE): HRESULT {.stdcall.}
    GetIDList*: proc(self: ptr IPersistIDList, ppidl: ptr PIDLIST_ABSOLUTE): HRESULT {.stdcall.}
  IEnumFullIDList* {.pure.} = object
    lpVtbl*: ptr IEnumFullIDListVtbl
  IEnumFullIDListVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumFullIDList, celt: ULONG, rgelt: ptr PIDLIST_ABSOLUTE, pceltFetched: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumFullIDList, celt: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumFullIDList): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumFullIDList, ppenum: ptr ptr IEnumFullIDList): HRESULT {.stdcall.}
  IObjectWithFolderEnumMode* {.pure.} = object
    lpVtbl*: ptr IObjectWithFolderEnumModeVtbl
  IObjectWithFolderEnumModeVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetMode*: proc(self: ptr IObjectWithFolderEnumMode, feMode: int32): HRESULT {.stdcall.}
    GetMode*: proc(self: ptr IObjectWithFolderEnumMode, pfeMode: ptr int32): HRESULT {.stdcall.}
  IParseAndCreateItem* {.pure.} = object
    lpVtbl*: ptr IParseAndCreateItemVtbl
  IParseAndCreateItemVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetItem*: proc(self: ptr IParseAndCreateItem, psi: ptr IShellItem): HRESULT {.stdcall.}
    GetItem*: proc(self: ptr IParseAndCreateItem, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IFolderViewOptions* {.pure.} = object
    lpVtbl*: ptr IFolderViewOptionsVtbl
  IFolderViewOptionsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetFolderViewOptions*: proc(self: ptr IFolderViewOptions, fvoMask: int32, fvoFlags: int32): HRESULT {.stdcall.}
    GetFolderViewOptions*: proc(self: ptr IFolderViewOptions, pfvoFlags: ptr int32): HRESULT {.stdcall.}
  IShellView3* {.pure.} = object
    lpVtbl*: ptr IShellView3Vtbl
  IShellView3Vtbl* {.pure, inheritable.} = object of IShellView2Vtbl
    CreateViewWindow3*: proc(self: ptr IShellView3, psbOwner: ptr IShellBrowser, psvPrev: ptr IShellView, dwViewFlags: SV3CVW3_FLAGS, dwMask: int32, dwFlags: int32, fvMode: int32, pvid: ptr SHELLVIEWID, prcView: ptr RECT, phwndView: ptr HWND): HRESULT {.stdcall.}
  IFolderView* {.pure.} = object
    lpVtbl*: ptr IFolderViewVtbl
  IFolderViewVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCurrentViewMode*: proc(self: ptr IFolderView, pViewMode: ptr UINT): HRESULT {.stdcall.}
    SetCurrentViewMode*: proc(self: ptr IFolderView, ViewMode: UINT): HRESULT {.stdcall.}
    GetFolder*: proc(self: ptr IFolderView, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    Item*: proc(self: ptr IFolderView, iItemIndex: int32, ppidl: ptr PITEMID_CHILD): HRESULT {.stdcall.}
    ItemCount*: proc(self: ptr IFolderView, uFlags: UINT, pcItems: ptr int32): HRESULT {.stdcall.}
    Items*: proc(self: ptr IFolderView, uFlags: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetSelectionMarkedItem*: proc(self: ptr IFolderView, piItem: ptr int32): HRESULT {.stdcall.}
    GetFocusedItem*: proc(self: ptr IFolderView, piItem: ptr int32): HRESULT {.stdcall.}
    GetItemPosition*: proc(self: ptr IFolderView, pidl: PCUITEMID_CHILD, ppt: ptr POINT): HRESULT {.stdcall.}
    GetSpacing*: proc(self: ptr IFolderView, ppt: ptr POINT): HRESULT {.stdcall.}
    GetDefaultSpacing*: proc(self: ptr IFolderView, ppt: ptr POINT): HRESULT {.stdcall.}
    GetAutoArrange*: proc(self: ptr IFolderView): HRESULT {.stdcall.}
    SelectItem*: proc(self: ptr IFolderView, iItem: int32, dwFlags: DWORD): HRESULT {.stdcall.}
    SelectAndPositionItems*: proc(self: ptr IFolderView, cidl: UINT, apidl: PCUITEMID_CHILD_ARRAY, apt: ptr POINT, dwFlags: DWORD): HRESULT {.stdcall.}
  ISearchBoxInfo* {.pure.} = object
    lpVtbl*: ptr ISearchBoxInfoVtbl
  ISearchBoxInfoVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCondition*: proc(self: ptr ISearchBoxInfo, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetText*: proc(self: ptr ISearchBoxInfo, ppsz: ptr LPWSTR): HRESULT {.stdcall.}
  IFolderView2* {.pure.} = object
    lpVtbl*: ptr IFolderView2Vtbl
  IFolderView2Vtbl* {.pure, inheritable.} = object of IFolderViewVtbl
    SetGroupBy*: proc(self: ptr IFolderView2, key: REFPROPERTYKEY, fAscending: WINBOOL): HRESULT {.stdcall.}
    GetGroupBy*: proc(self: ptr IFolderView2, pkey: ptr PROPERTYKEY, pfAscending: ptr WINBOOL): HRESULT {.stdcall.}
    SetViewProperty*: proc(self: ptr IFolderView2, pidl: PCUITEMID_CHILD, propkey: REFPROPERTYKEY, propvar: REFPROPVARIANT): HRESULT {.stdcall.}
    GetViewProperty*: proc(self: ptr IFolderView2, pidl: PCUITEMID_CHILD, propkey: REFPROPERTYKEY, ppropvar: ptr PROPVARIANT): HRESULT {.stdcall.}
    SetTileViewProperties*: proc(self: ptr IFolderView2, pidl: PCUITEMID_CHILD, pszPropList: LPCWSTR): HRESULT {.stdcall.}
    SetExtendedTileViewProperties*: proc(self: ptr IFolderView2, pidl: PCUITEMID_CHILD, pszPropList: LPCWSTR): HRESULT {.stdcall.}
    SetText*: proc(self: ptr IFolderView2, iType: int32, pwszText: LPCWSTR): HRESULT {.stdcall.}
    SetCurrentFolderFlags*: proc(self: ptr IFolderView2, dwMask: DWORD, dwFlags: DWORD): HRESULT {.stdcall.}
    GetCurrentFolderFlags*: proc(self: ptr IFolderView2, pdwFlags: ptr DWORD): HRESULT {.stdcall.}
    GetSortColumnCount*: proc(self: ptr IFolderView2, pcColumns: ptr int32): HRESULT {.stdcall.}
    SetSortColumns*: proc(self: ptr IFolderView2, rgSortColumns: ptr SORTCOLUMN, cColumns: int32): HRESULT {.stdcall.}
    GetSortColumns*: proc(self: ptr IFolderView2, rgSortColumns: ptr SORTCOLUMN, cColumns: int32): HRESULT {.stdcall.}
    GetItem*: proc(self: ptr IFolderView2, iItem: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetVisibleItem*: proc(self: ptr IFolderView2, iStart: int32, fPrevious: WINBOOL, piItem: ptr int32): HRESULT {.stdcall.}
    GetSelectedItem*: proc(self: ptr IFolderView2, iStart: int32, piItem: ptr int32): HRESULT {.stdcall.}
    GetSelection*: proc(self: ptr IFolderView2, fNoneImpliesFolder: WINBOOL, ppsia: ptr ptr IShellItemArray): HRESULT {.stdcall.}
    GetSelectionState*: proc(self: ptr IFolderView2, pidl: PCUITEMID_CHILD, pdwFlags: ptr DWORD): HRESULT {.stdcall.}
    InvokeVerbOnSelection*: proc(self: ptr IFolderView2, pszVerb: LPCSTR): HRESULT {.stdcall.}
    SetViewModeAndIconSize*: proc(self: ptr IFolderView2, uViewMode: int32, iImageSize: int32): HRESULT {.stdcall.}
    GetViewModeAndIconSize*: proc(self: ptr IFolderView2, puViewMode: ptr int32, piImageSize: ptr int32): HRESULT {.stdcall.}
    SetGroupSubsetCount*: proc(self: ptr IFolderView2, cVisibleRows: UINT): HRESULT {.stdcall.}
    GetGroupSubsetCount*: proc(self: ptr IFolderView2, pcVisibleRows: ptr UINT): HRESULT {.stdcall.}
    SetRedraw*: proc(self: ptr IFolderView2, fRedrawOn: WINBOOL): HRESULT {.stdcall.}
    IsMoveInSameFolder*: proc(self: ptr IFolderView2): HRESULT {.stdcall.}
    DoRename*: proc(self: ptr IFolderView2): HRESULT {.stdcall.}
  IFolderViewSettings* {.pure.} = object
    lpVtbl*: ptr IFolderViewSettingsVtbl
  IFolderViewSettingsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetColumnPropertyList*: proc(self: ptr IFolderViewSettings, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetGroupByProperty*: proc(self: ptr IFolderViewSettings, pkey: ptr PROPERTYKEY, pfGroupAscending: ptr WINBOOL): HRESULT {.stdcall.}
    GetViewMode*: proc(self: ptr IFolderViewSettings, plvm: ptr int32): HRESULT {.stdcall.}
    GetIconSize*: proc(self: ptr IFolderViewSettings, puIconSize: ptr UINT): HRESULT {.stdcall.}
    GetFolderFlags*: proc(self: ptr IFolderViewSettings, pfolderMask: ptr int32, pfolderFlags: ptr int32): HRESULT {.stdcall.}
    GetSortColumns*: proc(self: ptr IFolderViewSettings, rgSortColumns: ptr SORTCOLUMN, cColumnsIn: UINT, pcColumnsOut: ptr UINT): HRESULT {.stdcall.}
    GetGroupSubsetCount*: proc(self: ptr IFolderViewSettings, pcVisibleRows: ptr UINT): HRESULT {.stdcall.}
  IPreviewHandlerVisuals* {.pure.} = object
    lpVtbl*: ptr IPreviewHandlerVisualsVtbl
  IPreviewHandlerVisualsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetBackgroundColor*: proc(self: ptr IPreviewHandlerVisuals, color: COLORREF): HRESULT {.stdcall.}
    SetFont*: proc(self: ptr IPreviewHandlerVisuals, plf: ptr LOGFONTW): HRESULT {.stdcall.}
    SetTextColor*: proc(self: ptr IPreviewHandlerVisuals, color: COLORREF): HRESULT {.stdcall.}
  IVisualProperties* {.pure.} = object
    lpVtbl*: ptr IVisualPropertiesVtbl
  IVisualPropertiesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetWatermark*: proc(self: ptr IVisualProperties, hbmp: HBITMAP, vpwf: int32): HRESULT {.stdcall.}
    SetColor*: proc(self: ptr IVisualProperties, vpcf: int32, cr: COLORREF): HRESULT {.stdcall.}
    GetColor*: proc(self: ptr IVisualProperties, vpcf: int32, pcr: ptr COLORREF): HRESULT {.stdcall.}
    SetItemHeight*: proc(self: ptr IVisualProperties, cyItemInPixels: int32): HRESULT {.stdcall.}
    GetItemHeight*: proc(self: ptr IVisualProperties, cyItemInPixels: ptr int32): HRESULT {.stdcall.}
    SetFont*: proc(self: ptr IVisualProperties, plf: ptr LOGFONTW, bRedraw: WINBOOL): HRESULT {.stdcall.}
    GetFont*: proc(self: ptr IVisualProperties, plf: ptr LOGFONTW): HRESULT {.stdcall.}
    SetTheme*: proc(self: ptr IVisualProperties, pszSubAppName: LPCWSTR, pszSubIdList: LPCWSTR): HRESULT {.stdcall.}
  ICommDlgBrowser2* {.pure.} = object
    lpVtbl*: ptr ICommDlgBrowser2Vtbl
  ICommDlgBrowser2Vtbl* {.pure, inheritable.} = object of ICommDlgBrowserVtbl
    Notify*: proc(self: ptr ICommDlgBrowser2, ppshv: ptr IShellView, dwNotifyType: DWORD): HRESULT {.stdcall.}
    GetDefaultMenuText*: proc(self: ptr ICommDlgBrowser2, ppshv: ptr IShellView, pszText: LPWSTR, cchMax: int32): HRESULT {.stdcall.}
    GetViewFlags*: proc(self: ptr ICommDlgBrowser2, pdwFlags: ptr DWORD): HRESULT {.stdcall.}
  ICommDlgBrowser3* {.pure.} = object
    lpVtbl*: ptr ICommDlgBrowser3Vtbl
  ICommDlgBrowser3Vtbl* {.pure, inheritable.} = object of ICommDlgBrowser2Vtbl
    OnColumnClicked*: proc(self: ptr ICommDlgBrowser3, ppshv: ptr IShellView, iColumn: int32): HRESULT {.stdcall.}
    GetCurrentFilter*: proc(self: ptr ICommDlgBrowser3, pszFileSpec: LPWSTR, cchFileSpec: int32): HRESULT {.stdcall.}
    OnPreViewCreated*: proc(self: ptr ICommDlgBrowser3, ppshv: ptr IShellView): HRESULT {.stdcall.}
  IColumnManager* {.pure.} = object
    lpVtbl*: ptr IColumnManagerVtbl
  IColumnManagerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetColumnInfo*: proc(self: ptr IColumnManager, propkey: REFPROPERTYKEY, pcmci: ptr CM_COLUMNINFO): HRESULT {.stdcall.}
    GetColumnInfo*: proc(self: ptr IColumnManager, propkey: REFPROPERTYKEY, pcmci: ptr CM_COLUMNINFO): HRESULT {.stdcall.}
    GetColumnCount*: proc(self: ptr IColumnManager, dwFlags: int32, puCount: ptr UINT): HRESULT {.stdcall.}
    GetColumns*: proc(self: ptr IColumnManager, dwFlags: int32, rgkeyOrder: ptr PROPERTYKEY, cColumns: UINT): HRESULT {.stdcall.}
    SetColumns*: proc(self: ptr IColumnManager, rgkeyOrder: ptr PROPERTYKEY, cVisible: UINT): HRESULT {.stdcall.}
  IFolderFilterSite* {.pure.} = object
    lpVtbl*: ptr IFolderFilterSiteVtbl
  IFolderFilterSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetFilter*: proc(self: ptr IFolderFilterSite, punk: ptr IUnknown): HRESULT {.stdcall.}
  IFolderFilter* {.pure.} = object
    lpVtbl*: ptr IFolderFilterVtbl
  IFolderFilterVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ShouldShow*: proc(self: ptr IFolderFilter, psf: ptr IShellFolder, pidlFolder: PCIDLIST_ABSOLUTE, pidlItem: PCUITEMID_CHILD): HRESULT {.stdcall.}
    GetEnumFlags*: proc(self: ptr IFolderFilter, psf: ptr IShellFolder, pidlFolder: PCIDLIST_ABSOLUTE, phwnd: ptr HWND, pgrfFlags: ptr DWORD): HRESULT {.stdcall.}
  IInputObjectSite* {.pure.} = object
    lpVtbl*: ptr IInputObjectSiteVtbl
  IInputObjectSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnFocusChangeIS*: proc(self: ptr IInputObjectSite, punkObj: ptr IUnknown, fSetFocus: WINBOOL): HRESULT {.stdcall.}
  IInputObject* {.pure.} = object
    lpVtbl*: ptr IInputObjectVtbl
  IInputObjectVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    UIActivateIO*: proc(self: ptr IInputObject, fActivate: WINBOOL, pMsg: ptr MSG): HRESULT {.stdcall.}
    HasFocusIO*: proc(self: ptr IInputObject): HRESULT {.stdcall.}
    TranslateAcceleratorIO*: proc(self: ptr IInputObject, pMsg: ptr MSG): HRESULT {.stdcall.}
  IInputObject2* {.pure.} = object
    lpVtbl*: ptr IInputObject2Vtbl
  IInputObject2Vtbl* {.pure, inheritable.} = object of IInputObjectVtbl
    TranslateAcceleratorGlobal*: proc(self: ptr IInputObject2, pMsg: ptr MSG): HRESULT {.stdcall.}
  IProfferService* {.pure.} = object
    lpVtbl*: ptr IProfferServiceVtbl
  IProfferServiceVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ProfferService*: proc(self: ptr IProfferService, guidService: REFGUID, psp: ptr IServiceProvider, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    RevokeService*: proc(self: ptr IProfferService, dwCookie: DWORD): HRESULT {.stdcall.}
  IShellItem* {.pure.} = object
    lpVtbl*: ptr IShellItemVtbl
  IShellItemVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    BindToHandler*: proc(self: ptr IShellItem, pbc: ptr IBindCtx, bhid: REFGUID, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetParent*: proc(self: ptr IShellItem, ppsi: ptr ptr IShellItem): HRESULT {.stdcall.}
    GetDisplayName*: proc(self: ptr IShellItem, sigdnName: int32, ppszName: ptr LPWSTR): HRESULT {.stdcall.}
    GetAttributes*: proc(self: ptr IShellItem, sfgaoMask: SFGAOF, psfgaoAttribs: ptr SFGAOF): HRESULT {.stdcall.}
    Compare*: proc(self: ptr IShellItem, psi: ptr IShellItem, hint: SICHINTF, piOrder: ptr int32): HRESULT {.stdcall.}
  IShellItem2* {.pure.} = object
    lpVtbl*: ptr IShellItem2Vtbl
  IShellItem2Vtbl* {.pure, inheritable.} = object of IShellItemVtbl
    GetPropertyStore*: proc(self: ptr IShellItem2, flags: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetPropertyStoreWithCreateObject*: proc(self: ptr IShellItem2, flags: int32, punkCreateObject: ptr IUnknown, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetPropertyStoreForKeys*: proc(self: ptr IShellItem2, rgKeys: ptr PROPERTYKEY, cKeys: UINT, flags: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetPropertyDescriptionList*: proc(self: ptr IShellItem2, keyType: REFPROPERTYKEY, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    Update*: proc(self: ptr IShellItem2, pbc: ptr IBindCtx): HRESULT {.stdcall.}
    GetProperty*: proc(self: ptr IShellItem2, key: REFPROPERTYKEY, ppropvar: ptr PROPVARIANT): HRESULT {.stdcall.}
    GetCLSID*: proc(self: ptr IShellItem2, key: REFPROPERTYKEY, pclsid: ptr CLSID): HRESULT {.stdcall.}
    GetFileTime*: proc(self: ptr IShellItem2, key: REFPROPERTYKEY, pft: ptr FILETIME): HRESULT {.stdcall.}
    GetInt32*: proc(self: ptr IShellItem2, key: REFPROPERTYKEY, pi: ptr int32): HRESULT {.stdcall.}
    GetString*: proc(self: ptr IShellItem2, key: REFPROPERTYKEY, ppsz: ptr LPWSTR): HRESULT {.stdcall.}
    GetUInt32*: proc(self: ptr IShellItem2, key: REFPROPERTYKEY, pui: ptr ULONG): HRESULT {.stdcall.}
    GetUInt64*: proc(self: ptr IShellItem2, key: REFPROPERTYKEY, pull: ptr ULONGLONG): HRESULT {.stdcall.}
    GetBool*: proc(self: ptr IShellItem2, key: REFPROPERTYKEY, pf: ptr WINBOOL): HRESULT {.stdcall.}
  IShellItemImageFactory* {.pure.} = object
    lpVtbl*: ptr IShellItemImageFactoryVtbl
  IShellItemImageFactoryVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetImage*: proc(self: ptr IShellItemImageFactory, size: SIZE, flags: SIIGBF, phbm: ptr HBITMAP): HRESULT {.stdcall.}
  IUserAccountChangeCallback* {.pure.} = object
    lpVtbl*: ptr IUserAccountChangeCallbackVtbl
  IUserAccountChangeCallbackVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnPictureChange*: proc(self: ptr IUserAccountChangeCallback, pszUserName: LPCWSTR): HRESULT {.stdcall.}
  IEnumShellItems* {.pure.} = object
    lpVtbl*: ptr IEnumShellItemsVtbl
  IEnumShellItemsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumShellItems, celt: ULONG, rgelt: ptr ptr IShellItem, pceltFetched: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumShellItems, celt: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumShellItems): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumShellItems, ppenum: ptr ptr IEnumShellItems): HRESULT {.stdcall.}
  ITransferAdviseSink* {.pure.} = object
    lpVtbl*: ptr ITransferAdviseSinkVtbl
  ITransferAdviseSinkVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    UpdateProgress*: proc(self: ptr ITransferAdviseSink, ullSizeCurrent: ULONGLONG, ullSizeTotal: ULONGLONG, nFilesCurrent: int32, nFilesTotal: int32, nFoldersCurrent: int32, nFoldersTotal: int32): HRESULT {.stdcall.}
    UpdateTransferState*: proc(self: ptr ITransferAdviseSink, ts: TRANSFER_ADVISE_STATE): HRESULT {.stdcall.}
    ConfirmOverwrite*: proc(self: ptr ITransferAdviseSink, psiSource: ptr IShellItem, psiDestParent: ptr IShellItem, pszName: LPCWSTR): HRESULT {.stdcall.}
    ConfirmEncryptionLoss*: proc(self: ptr ITransferAdviseSink, psiSource: ptr IShellItem): HRESULT {.stdcall.}
    FileFailure*: proc(self: ptr ITransferAdviseSink, psi: ptr IShellItem, pszItem: LPCWSTR, hrError: HRESULT, pszRename: LPWSTR, cchRename: ULONG): HRESULT {.stdcall.}
    SubStreamFailure*: proc(self: ptr ITransferAdviseSink, psi: ptr IShellItem, pszStreamName: LPCWSTR, hrError: HRESULT): HRESULT {.stdcall.}
    PropertyFailure*: proc(self: ptr ITransferAdviseSink, psi: ptr IShellItem, pkey: ptr PROPERTYKEY, hrError: HRESULT): HRESULT {.stdcall.}
  ITransferSource* {.pure.} = object
    lpVtbl*: ptr ITransferSourceVtbl
  ITransferSourceVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Advise*: proc(self: ptr ITransferSource, psink: ptr ITransferAdviseSink, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    Unadvise*: proc(self: ptr ITransferSource, dwCookie: DWORD): HRESULT {.stdcall.}
    SetProperties*: proc(self: ptr ITransferSource, pproparray: ptr IPropertyChangeArray): HRESULT {.stdcall.}
    OpenItem*: proc(self: ptr ITransferSource, psi: ptr IShellItem, flags: TRANSFER_SOURCE_FLAGS, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    MoveItem*: proc(self: ptr ITransferSource, psi: ptr IShellItem, psiParentDst: ptr IShellItem, pszNameDst: LPCWSTR, flags: TRANSFER_SOURCE_FLAGS, ppsiNew: ptr ptr IShellItem): HRESULT {.stdcall.}
    RecycleItem*: proc(self: ptr ITransferSource, psiSource: ptr IShellItem, psiParentDest: ptr IShellItem, flags: TRANSFER_SOURCE_FLAGS, ppsiNewDest: ptr ptr IShellItem): HRESULT {.stdcall.}
    RemoveItem*: proc(self: ptr ITransferSource, psiSource: ptr IShellItem, flags: TRANSFER_SOURCE_FLAGS): HRESULT {.stdcall.}
    RenameItem*: proc(self: ptr ITransferSource, psiSource: ptr IShellItem, pszNewName: LPCWSTR, flags: TRANSFER_SOURCE_FLAGS, ppsiNewDest: ptr ptr IShellItem): HRESULT {.stdcall.}
    LinkItem*: proc(self: ptr ITransferSource, psiSource: ptr IShellItem, psiParentDest: ptr IShellItem, pszNewName: LPCWSTR, flags: TRANSFER_SOURCE_FLAGS, ppsiNewDest: ptr ptr IShellItem): HRESULT {.stdcall.}
    ApplyPropertiesToItem*: proc(self: ptr ITransferSource, psiSource: ptr IShellItem, ppsiNew: ptr ptr IShellItem): HRESULT {.stdcall.}
    GetDefaultDestinationName*: proc(self: ptr ITransferSource, psiSource: ptr IShellItem, psiParentDest: ptr IShellItem, ppszDestinationName: ptr LPWSTR): HRESULT {.stdcall.}
    EnterFolder*: proc(self: ptr ITransferSource, psiChildFolderDest: ptr IShellItem): HRESULT {.stdcall.}
    LeaveFolder*: proc(self: ptr ITransferSource, psiChildFolderDest: ptr IShellItem): HRESULT {.stdcall.}
  IEnumResources* {.pure.} = object
    lpVtbl*: ptr IEnumResourcesVtbl
  IEnumResourcesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumResources, celt: ULONG, psir: ptr SHELL_ITEM_RESOURCE, pceltFetched: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumResources, celt: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumResources): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumResources, ppenumr: ptr ptr IEnumResources): HRESULT {.stdcall.}
  IShellItemResources* {.pure.} = object
    lpVtbl*: ptr IShellItemResourcesVtbl
  IShellItemResourcesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetAttributes*: proc(self: ptr IShellItemResources, pdwAttributes: ptr DWORD): HRESULT {.stdcall.}
    GetSize*: proc(self: ptr IShellItemResources, pullSize: ptr ULONGLONG): HRESULT {.stdcall.}
    GetTimes*: proc(self: ptr IShellItemResources, pftCreation: ptr FILETIME, pftWrite: ptr FILETIME, pftAccess: ptr FILETIME): HRESULT {.stdcall.}
    SetTimes*: proc(self: ptr IShellItemResources, pftCreation: ptr FILETIME, pftWrite: ptr FILETIME, pftAccess: ptr FILETIME): HRESULT {.stdcall.}
    GetResourceDescription*: proc(self: ptr IShellItemResources, pcsir: ptr SHELL_ITEM_RESOURCE, ppszDescription: ptr LPWSTR): HRESULT {.stdcall.}
    EnumResources*: proc(self: ptr IShellItemResources, ppenumr: ptr ptr IEnumResources): HRESULT {.stdcall.}
    SupportsResource*: proc(self: ptr IShellItemResources, pcsir: ptr SHELL_ITEM_RESOURCE): HRESULT {.stdcall.}
    OpenResource*: proc(self: ptr IShellItemResources, pcsir: ptr SHELL_ITEM_RESOURCE, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    CreateResource*: proc(self: ptr IShellItemResources, pcsir: ptr SHELL_ITEM_RESOURCE, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    MarkForDelete*: proc(self: ptr IShellItemResources): HRESULT {.stdcall.}
  ITransferDestination* {.pure.} = object
    lpVtbl*: ptr ITransferDestinationVtbl
  ITransferDestinationVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Advise*: proc(self: ptr ITransferDestination, psink: ptr ITransferAdviseSink, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    Unadvise*: proc(self: ptr ITransferDestination, dwCookie: DWORD): HRESULT {.stdcall.}
    CreateItem*: proc(self: ptr ITransferDestination, pszName: LPCWSTR, dwAttributes: DWORD, ullSize: ULONGLONG, flags: TRANSFER_SOURCE_FLAGS, riidItem: REFIID, ppvItem: ptr pointer, riidResources: REFIID, ppvResources: ptr pointer): HRESULT {.stdcall.}
  IStreamAsync* {.pure.} = object
    lpVtbl*: ptr IStreamAsyncVtbl
  IStreamAsyncVtbl* {.pure, inheritable.} = object of IStreamVtbl
    ReadAsync*: proc(self: ptr IStreamAsync, pv: pointer, cb: DWORD, pcbRead: LPDWORD, lpOverlapped: LPOVERLAPPED): HRESULT {.stdcall.}
    WriteAsync*: proc(self: ptr IStreamAsync, lpBuffer: pointer, cb: DWORD, pcbWritten: LPDWORD, lpOverlapped: LPOVERLAPPED): HRESULT {.stdcall.}
    OverlappedResult*: proc(self: ptr IStreamAsync, lpOverlapped: LPOVERLAPPED, lpNumberOfBytesTransferred: LPDWORD, bWait: WINBOOL): HRESULT {.stdcall.}
    CancelIo*: proc(self: ptr IStreamAsync): HRESULT {.stdcall.}
  IStreamUnbufferedInfo* {.pure.} = object
    lpVtbl*: ptr IStreamUnbufferedInfoVtbl
  IStreamUnbufferedInfoVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetSectorSize*: proc(self: ptr IStreamUnbufferedInfo, pcbSectorSize: ptr ULONG): HRESULT {.stdcall.}
  IFileOperationProgressSink* {.pure.} = object
    lpVtbl*: ptr IFileOperationProgressSinkVtbl
  IFileOperationProgressSinkVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    StartOperations*: proc(self: ptr IFileOperationProgressSink): HRESULT {.stdcall.}
    FinishOperations*: proc(self: ptr IFileOperationProgressSink, hrResult: HRESULT): HRESULT {.stdcall.}
    PreRenameItem*: proc(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, pszNewName: LPCWSTR): HRESULT {.stdcall.}
    PostRenameItem*: proc(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, pszNewName: LPCWSTR, hrRename: HRESULT, psiNewlyCreated: ptr IShellItem): HRESULT {.stdcall.}
    PreMoveItem*: proc(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR): HRESULT {.stdcall.}
    PostMoveItem*: proc(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR, hrMove: HRESULT, psiNewlyCreated: ptr IShellItem): HRESULT {.stdcall.}
    PreCopyItem*: proc(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR): HRESULT {.stdcall.}
    PostCopyItem*: proc(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR, hrCopy: HRESULT, psiNewlyCreated: ptr IShellItem): HRESULT {.stdcall.}
    PreDeleteItem*: proc(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem): HRESULT {.stdcall.}
    PostDeleteItem*: proc(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, hrDelete: HRESULT, psiNewlyCreated: ptr IShellItem): HRESULT {.stdcall.}
    PreNewItem*: proc(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR): HRESULT {.stdcall.}
    PostNewItem*: proc(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR, pszTemplateName: LPCWSTR, dwFileAttributes: DWORD, hrNew: HRESULT, psiNewItem: ptr IShellItem): HRESULT {.stdcall.}
    UpdateProgress*: proc(self: ptr IFileOperationProgressSink, iWorkTotal: UINT, iWorkSoFar: UINT): HRESULT {.stdcall.}
    ResetTimer*: proc(self: ptr IFileOperationProgressSink): HRESULT {.stdcall.}
    PauseTimer*: proc(self: ptr IFileOperationProgressSink): HRESULT {.stdcall.}
    ResumeTimer*: proc(self: ptr IFileOperationProgressSink): HRESULT {.stdcall.}
  IShellItemArray* {.pure.} = object
    lpVtbl*: ptr IShellItemArrayVtbl
  IShellItemArrayVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    BindToHandler*: proc(self: ptr IShellItemArray, pbc: ptr IBindCtx, bhid: REFGUID, riid: REFIID, ppvOut: ptr pointer): HRESULT {.stdcall.}
    GetPropertyStore*: proc(self: ptr IShellItemArray, flags: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetPropertyDescriptionList*: proc(self: ptr IShellItemArray, keyType: REFPROPERTYKEY, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetAttributes*: proc(self: ptr IShellItemArray, AttribFlags: int32, sfgaoMask: SFGAOF, psfgaoAttribs: ptr SFGAOF): HRESULT {.stdcall.}
    GetCount*: proc(self: ptr IShellItemArray, pdwNumItems: ptr DWORD): HRESULT {.stdcall.}
    GetItemAt*: proc(self: ptr IShellItemArray, dwIndex: DWORD, ppsi: ptr ptr IShellItem): HRESULT {.stdcall.}
    EnumItems*: proc(self: ptr IShellItemArray, ppenumShellItems: ptr ptr IEnumShellItems): HRESULT {.stdcall.}
  IInitializeWithItem* {.pure.} = object
    lpVtbl*: ptr IInitializeWithItemVtbl
  IInitializeWithItemVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IInitializeWithItem, psi: ptr IShellItem, grfMode: DWORD): HRESULT {.stdcall.}
  IObjectWithSelection* {.pure.} = object
    lpVtbl*: ptr IObjectWithSelectionVtbl
  IObjectWithSelectionVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetSelection*: proc(self: ptr IObjectWithSelection, psia: ptr IShellItemArray): HRESULT {.stdcall.}
    GetSelection*: proc(self: ptr IObjectWithSelection, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IObjectWithBackReferences* {.pure.} = object
    lpVtbl*: ptr IObjectWithBackReferencesVtbl
  IObjectWithBackReferencesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    RemoveBackReferences*: proc(self: ptr IObjectWithBackReferences): HRESULT {.stdcall.}
  IPropertyUI* {.pure.} = object
    lpVtbl*: ptr IPropertyUIVtbl
  IPropertyUIVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ParsePropertyName*: proc(self: ptr IPropertyUI, pszName: LPCWSTR, pfmtid: ptr FMTID, ppid: ptr PROPID, pchEaten: ptr ULONG): HRESULT {.stdcall.}
    GetCannonicalName*: proc(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, pwszText: LPWSTR, cchText: DWORD): HRESULT {.stdcall.}
    GetDisplayName*: proc(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, flags: PROPERTYUI_NAME_FLAGS, pwszText: LPWSTR, cchText: DWORD): HRESULT {.stdcall.}
    GetPropertyDescription*: proc(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, pwszText: LPWSTR, cchText: DWORD): HRESULT {.stdcall.}
    GetDefaultWidth*: proc(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, pcxChars: ptr ULONG): HRESULT {.stdcall.}
    GetFlags*: proc(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, pflags: ptr PROPERTYUI_FLAGS): HRESULT {.stdcall.}
    FormatForDisplay*: proc(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, ppropvar: ptr PROPVARIANT, puiff: PROPERTYUI_FORMAT_FLAGS, pwszText: LPWSTR, cchText: DWORD): HRESULT {.stdcall.}
    GetHelpInfo*: proc(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, pwszHelpFile: LPWSTR, cch: DWORD, puHelpID: ptr UINT): HRESULT {.stdcall.}
  ICategoryProvider* {.pure.} = object
    lpVtbl*: ptr ICategoryProviderVtbl
  ICategoryProviderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CanCategorizeOnSCID*: proc(self: ptr ICategoryProvider, pscid: ptr SHCOLUMNID): HRESULT {.stdcall.}
    GetDefaultCategory*: proc(self: ptr ICategoryProvider, pguid: ptr GUID, pscid: ptr SHCOLUMNID): HRESULT {.stdcall.}
    GetCategoryForSCID*: proc(self: ptr ICategoryProvider, pscid: ptr SHCOLUMNID, pguid: ptr GUID): HRESULT {.stdcall.}
    EnumCategories*: proc(self: ptr ICategoryProvider, penum: ptr ptr IEnumGUID): HRESULT {.stdcall.}
    GetCategoryName*: proc(self: ptr ICategoryProvider, pguid: ptr GUID, pszName: LPWSTR, cch: UINT): HRESULT {.stdcall.}
    CreateCategory*: proc(self: ptr ICategoryProvider, pguid: ptr GUID, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  ICategorizer* {.pure.} = object
    lpVtbl*: ptr ICategorizerVtbl
  ICategorizerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetDescription*: proc(self: ptr ICategorizer, pszDesc: LPWSTR, cch: UINT): HRESULT {.stdcall.}
    GetCategory*: proc(self: ptr ICategorizer, cidl: UINT, apidl: PCUITEMID_CHILD_ARRAY, rgCategoryIds: ptr DWORD): HRESULT {.stdcall.}
    GetCategoryInfo*: proc(self: ptr ICategorizer, dwCategoryId: DWORD, pci: ptr TCATEGORY_INFO): HRESULT {.stdcall.}
    CompareCategory*: proc(self: ptr ICategorizer, csfFlags: int32, dwCategoryId1: DWORD, dwCategoryId2: DWORD): HRESULT {.stdcall.}
  IDragSourceHelper2* {.pure.} = object
    lpVtbl*: ptr IDragSourceHelper2Vtbl
  IDragSourceHelper2Vtbl* {.pure, inheritable.} = object of IDragSourceHelperVtbl
    SetFlags*: proc(self: ptr IDragSourceHelper2, dwFlags: DWORD): HRESULT {.stdcall.}
  IShellLinkDataList* {.pure.} = object
    lpVtbl*: ptr IShellLinkDataListVtbl
  IShellLinkDataListVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AddDataBlock*: proc(self: ptr IShellLinkDataList, pDataBlock: pointer): HRESULT {.stdcall.}
    CopyDataBlock*: proc(self: ptr IShellLinkDataList, dwSig: DWORD, ppDataBlock: ptr pointer): HRESULT {.stdcall.}
    RemoveDataBlock*: proc(self: ptr IShellLinkDataList, dwSig: DWORD): HRESULT {.stdcall.}
    GetFlags*: proc(self: ptr IShellLinkDataList, pdwFlags: ptr DWORD): HRESULT {.stdcall.}
    SetFlags*: proc(self: ptr IShellLinkDataList, dwFlags: DWORD): HRESULT {.stdcall.}
  IResolveShellLink* {.pure.} = object
    lpVtbl*: ptr IResolveShellLinkVtbl
  IResolveShellLinkVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ResolveShellLink*: proc(self: ptr IResolveShellLink, punkLink: ptr IUnknown, hwnd: HWND, fFlags: DWORD): HRESULT {.stdcall.}
  IActionProgressDialog* {.pure.} = object
    lpVtbl*: ptr IActionProgressDialogVtbl
  IActionProgressDialogVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IActionProgressDialog, flags: SPINITF, pszTitle: LPCWSTR, pszCancel: LPCWSTR): HRESULT {.stdcall.}
    Stop*: proc(self: ptr IActionProgressDialog): HRESULT {.stdcall.}
  IHWEventHandler* {.pure.} = object
    lpVtbl*: ptr IHWEventHandlerVtbl
  IHWEventHandlerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IHWEventHandler, pszParams: LPCWSTR): HRESULT {.stdcall.}
    HandleEvent*: proc(self: ptr IHWEventHandler, pszDeviceID: LPCWSTR, pszAltDeviceID: LPCWSTR, pszEventType: LPCWSTR): HRESULT {.stdcall.}
    HandleEventWithContent*: proc(self: ptr IHWEventHandler, pszDeviceID: LPCWSTR, pszAltDeviceID: LPCWSTR, pszEventType: LPCWSTR, pszContentTypeHandler: LPCWSTR, pdataobject: ptr IDataObject): HRESULT {.stdcall.}
  IHWEventHandler2* {.pure.} = object
    lpVtbl*: ptr IHWEventHandler2Vtbl
  IHWEventHandler2Vtbl* {.pure, inheritable.} = object of IHWEventHandlerVtbl
    HandleEventWithHWND*: proc(self: ptr IHWEventHandler2, pszDeviceID: LPCWSTR, pszAltDeviceID: LPCWSTR, pszEventType: LPCWSTR, hwndOwner: HWND): HRESULT {.stdcall.}
  IQueryCancelAutoPlay* {.pure.} = object
    lpVtbl*: ptr IQueryCancelAutoPlayVtbl
  IQueryCancelAutoPlayVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AllowAutoPlay*: proc(self: ptr IQueryCancelAutoPlay, pszPath: LPCWSTR, dwContentType: DWORD, pszLabel: LPCWSTR, dwSerialNumber: DWORD): HRESULT {.stdcall.}
  IDynamicHWHandler* {.pure.} = object
    lpVtbl*: ptr IDynamicHWHandlerVtbl
  IDynamicHWHandlerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetDynamicInfo*: proc(self: ptr IDynamicHWHandler, pszDeviceID: LPCWSTR, dwContentType: DWORD, ppszAction: ptr LPWSTR): HRESULT {.stdcall.}
  IActionProgress* {.pure.} = object
    lpVtbl*: ptr IActionProgressVtbl
  IActionProgressVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Begin*: proc(self: ptr IActionProgress, action: int32, flags: SPBEGINF): HRESULT {.stdcall.}
    UpdateProgress*: proc(self: ptr IActionProgress, ulCompleted: ULONGLONG, ulTotal: ULONGLONG): HRESULT {.stdcall.}
    UpdateText*: proc(self: ptr IActionProgress, sptext: int32, pszText: LPCWSTR, fMayCompact: WINBOOL): HRESULT {.stdcall.}
    QueryCancel*: proc(self: ptr IActionProgress, pfCancelled: ptr WINBOOL): HRESULT {.stdcall.}
    ResetCancel*: proc(self: ptr IActionProgress): HRESULT {.stdcall.}
    End*: proc(self: ptr IActionProgress): HRESULT {.stdcall.}
  IRemoteComputer* {.pure.} = object
    lpVtbl*: ptr IRemoteComputerVtbl
  IRemoteComputerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IRemoteComputer, pszMachine: LPCWSTR, bEnumerating: WINBOOL): HRESULT {.stdcall.}
  IQueryContinue* {.pure.} = object
    lpVtbl*: ptr IQueryContinueVtbl
  IQueryContinueVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    QueryContinue*: proc(self: ptr IQueryContinue): HRESULT {.stdcall.}
  IObjectWithCancelEvent* {.pure.} = object
    lpVtbl*: ptr IObjectWithCancelEventVtbl
  IObjectWithCancelEventVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCancelEvent*: proc(self: ptr IObjectWithCancelEvent, phEvent: ptr HANDLE): HRESULT {.stdcall.}
  IUserNotification* {.pure.} = object
    lpVtbl*: ptr IUserNotificationVtbl
  IUserNotificationVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetBalloonInfo*: proc(self: ptr IUserNotification, pszTitle: LPCWSTR, pszText: LPCWSTR, dwInfoFlags: DWORD): HRESULT {.stdcall.}
    SetBalloonRetry*: proc(self: ptr IUserNotification, dwShowTime: DWORD, dwInterval: DWORD, cRetryCount: UINT): HRESULT {.stdcall.}
    SetIconInfo*: proc(self: ptr IUserNotification, hIcon: HICON, pszToolTip: LPCWSTR): HRESULT {.stdcall.}
    Show*: proc(self: ptr IUserNotification, pqc: ptr IQueryContinue, dwContinuePollInterval: DWORD): HRESULT {.stdcall.}
    PlaySound*: proc(self: ptr IUserNotification, pszSoundName: LPCWSTR): HRESULT {.stdcall.}
  IUserNotificationCallback* {.pure.} = object
    lpVtbl*: ptr IUserNotificationCallbackVtbl
  IUserNotificationCallbackVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnBalloonUserClick*: proc(self: ptr IUserNotificationCallback, pt: ptr POINT): HRESULT {.stdcall.}
    OnLeftClick*: proc(self: ptr IUserNotificationCallback, pt: ptr POINT): HRESULT {.stdcall.}
    OnContextMenu*: proc(self: ptr IUserNotificationCallback, pt: ptr POINT): HRESULT {.stdcall.}
  IUserNotification2* {.pure.} = object
    lpVtbl*: ptr IUserNotification2Vtbl
  IUserNotification2Vtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetBalloonInfo*: proc(self: ptr IUserNotification2, pszTitle: LPCWSTR, pszText: LPCWSTR, dwInfoFlags: DWORD): HRESULT {.stdcall.}
    SetBalloonRetry*: proc(self: ptr IUserNotification2, dwShowTime: DWORD, dwInterval: DWORD, cRetryCount: UINT): HRESULT {.stdcall.}
    SetIconInfo*: proc(self: ptr IUserNotification2, hIcon: HICON, pszToolTip: LPCWSTR): HRESULT {.stdcall.}
    Show*: proc(self: ptr IUserNotification2, pqc: ptr IQueryContinue, dwContinuePollInterval: DWORD, pSink: ptr IUserNotificationCallback): HRESULT {.stdcall.}
    PlaySound*: proc(self: ptr IUserNotification2, pszSoundName: LPCWSTR): HRESULT {.stdcall.}
  IItemNameLimits* {.pure.} = object
    lpVtbl*: ptr IItemNameLimitsVtbl
  IItemNameLimitsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetValidCharacters*: proc(self: ptr IItemNameLimits, ppwszValidChars: ptr LPWSTR, ppwszInvalidChars: ptr LPWSTR): HRESULT {.stdcall.}
    GetMaxLength*: proc(self: ptr IItemNameLimits, pszName: LPCWSTR, piMaxNameLen: ptr int32): HRESULT {.stdcall.}
  ISearchFolderItemFactory* {.pure.} = object
    lpVtbl*: ptr ISearchFolderItemFactoryVtbl
  ISearchFolderItemFactoryVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetDisplayName*: proc(self: ptr ISearchFolderItemFactory, pszDisplayName: LPCWSTR): HRESULT {.stdcall.}
    SetFolderTypeID*: proc(self: ptr ISearchFolderItemFactory, ftid: FOLDERTYPEID): HRESULT {.stdcall.}
    SetFolderLogicalViewMode*: proc(self: ptr ISearchFolderItemFactory, flvm: int32): HRESULT {.stdcall.}
    SetIconSize*: proc(self: ptr ISearchFolderItemFactory, iIconSize: int32): HRESULT {.stdcall.}
    SetVisibleColumns*: proc(self: ptr ISearchFolderItemFactory, cVisibleColumns: UINT, rgKey: ptr PROPERTYKEY): HRESULT {.stdcall.}
    SetSortColumns*: proc(self: ptr ISearchFolderItemFactory, cSortColumns: UINT, rgSortColumns: ptr SORTCOLUMN): HRESULT {.stdcall.}
    SetGroupColumn*: proc(self: ptr ISearchFolderItemFactory, keyGroup: REFPROPERTYKEY): HRESULT {.stdcall.}
    SetStacks*: proc(self: ptr ISearchFolderItemFactory, cStackKeys: UINT, rgStackKeys: ptr PROPERTYKEY): HRESULT {.stdcall.}
    SetScope*: proc(self: ptr ISearchFolderItemFactory, psiaScope: ptr IShellItemArray): HRESULT {.stdcall.}
    SetCondition*: proc(self: ptr ISearchFolderItemFactory, pCondition: ptr ICondition): HRESULT {.stdcall.}
    GetShellItem*: proc(self: ptr ISearchFolderItemFactory, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetIDList*: proc(self: ptr ISearchFolderItemFactory, ppidl: ptr PIDLIST_ABSOLUTE): HRESULT {.stdcall.}
  IExtractImage* {.pure.} = object
    lpVtbl*: ptr IExtractImageVtbl
  IExtractImageVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetLocation*: proc(self: ptr IExtractImage, pszPathBuffer: LPWSTR, cch: DWORD, pdwPriority: ptr DWORD, prgSize: ptr SIZE, dwRecClrDepth: DWORD, pdwFlags: ptr DWORD): HRESULT {.stdcall.}
    Extract*: proc(self: ptr IExtractImage, phBmpThumbnail: ptr HBITMAP): HRESULT {.stdcall.}
  IExtractImage2* {.pure.} = object
    lpVtbl*: ptr IExtractImage2Vtbl
  IExtractImage2Vtbl* {.pure, inheritable.} = object of IExtractImageVtbl
    GetDateStamp*: proc(self: ptr IExtractImage2, pDateStamp: ptr FILETIME): HRESULT {.stdcall.}
  IThumbnailHandlerFactory* {.pure.} = object
    lpVtbl*: ptr IThumbnailHandlerFactoryVtbl
  IThumbnailHandlerFactoryVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetThumbnailHandler*: proc(self: ptr IThumbnailHandlerFactory, pidlChild: PCUITEMID_CHILD, pbc: ptr IBindCtx, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IParentAndItem* {.pure.} = object
    lpVtbl*: ptr IParentAndItemVtbl
  IParentAndItemVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetParentAndItem*: proc(self: ptr IParentAndItem, pidlParent: PCIDLIST_ABSOLUTE, psf: ptr IShellFolder, pidlChild: PCUITEMID_CHILD): HRESULT {.stdcall.}
    GetParentAndItem*: proc(self: ptr IParentAndItem, ppidlParent: ptr PIDLIST_ABSOLUTE, ppsf: ptr ptr IShellFolder, ppidlChild: ptr PITEMID_CHILD): HRESULT {.stdcall.}
  IDockingWindow* {.pure.} = object
    lpVtbl*: ptr IDockingWindowVtbl
  IDockingWindowVtbl* {.pure, inheritable.} = object of IOleWindowVtbl
    ShowDW*: proc(self: ptr IDockingWindow, fShow: WINBOOL): HRESULT {.stdcall.}
    CloseDW*: proc(self: ptr IDockingWindow, dwReserved: DWORD): HRESULT {.stdcall.}
    ResizeBorderDW*: proc(self: ptr IDockingWindow, prcBorder: LPCRECT, punkToolbarSite: ptr IUnknown, fReserved: WINBOOL): HRESULT {.stdcall.}
  IDeskBand* {.pure.} = object
    lpVtbl*: ptr IDeskBandVtbl
  IDeskBandVtbl* {.pure, inheritable.} = object of IDockingWindowVtbl
    GetBandInfo*: proc(self: ptr IDeskBand, dwBandID: DWORD, dwViewMode: DWORD, pdbi: ptr DESKBANDINFO): HRESULT {.stdcall.}
  IDeskBandInfo* {.pure.} = object
    lpVtbl*: ptr IDeskBandInfoVtbl
  IDeskBandInfoVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetDefaultBandWidth*: proc(self: ptr IDeskBandInfo, dwBandID: DWORD, dwViewMode: DWORD, pnWidth: ptr int32): HRESULT {.stdcall.}
  IDeskBand2* {.pure.} = object
    lpVtbl*: ptr IDeskBand2Vtbl
  IDeskBand2Vtbl* {.pure, inheritable.} = object of IDeskBandVtbl
    CanRenderComposited*: proc(self: ptr IDeskBand2, pfCanRenderComposited: ptr WINBOOL): HRESULT {.stdcall.}
    SetCompositionState*: proc(self: ptr IDeskBand2, fCompositionEnabled: WINBOOL): HRESULT {.stdcall.}
    GetCompositionState*: proc(self: ptr IDeskBand2, pfCompositionEnabled: ptr WINBOOL): HRESULT {.stdcall.}
  ITaskbarList* {.pure.} = object
    lpVtbl*: ptr ITaskbarListVtbl
  ITaskbarListVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    HrInit*: proc(self: ptr ITaskbarList): HRESULT {.stdcall.}
    AddTab*: proc(self: ptr ITaskbarList, hwnd: HWND): HRESULT {.stdcall.}
    DeleteTab*: proc(self: ptr ITaskbarList, hwnd: HWND): HRESULT {.stdcall.}
    ActivateTab*: proc(self: ptr ITaskbarList, hwnd: HWND): HRESULT {.stdcall.}
    SetActiveAlt*: proc(self: ptr ITaskbarList, hwnd: HWND): HRESULT {.stdcall.}
  ITaskbarList2* {.pure.} = object
    lpVtbl*: ptr ITaskbarList2Vtbl
  ITaskbarList2Vtbl* {.pure, inheritable.} = object of ITaskbarListVtbl
    MarkFullscreenWindow*: proc(self: ptr ITaskbarList2, hwnd: HWND, fFullscreen: WINBOOL): HRESULT {.stdcall.}
  ITaskbarList3* {.pure.} = object
    lpVtbl*: ptr ITaskbarList3Vtbl
  ITaskbarList3Vtbl* {.pure, inheritable.} = object of ITaskbarList2Vtbl
    SetProgressValue*: proc(self: ptr ITaskbarList3, hwnd: HWND, ullCompleted: ULONGLONG, ullTotal: ULONGLONG): HRESULT {.stdcall.}
    SetProgressState*: proc(self: ptr ITaskbarList3, hwnd: HWND, tbpFlags: int32): HRESULT {.stdcall.}
    RegisterTab*: proc(self: ptr ITaskbarList3, hwndTab: HWND, hwndMDI: HWND): HRESULT {.stdcall.}
    UnregisterTab*: proc(self: ptr ITaskbarList3, hwndTab: HWND): HRESULT {.stdcall.}
    SetTabOrder*: proc(self: ptr ITaskbarList3, hwndTab: HWND, hwndInsertBefore: HWND): HRESULT {.stdcall.}
    SetTabActive*: proc(self: ptr ITaskbarList3, hwndTab: HWND, hwndMDI: HWND, dwReserved: DWORD): HRESULT {.stdcall.}
    ThumbBarAddButtons*: proc(self: ptr ITaskbarList3, hwnd: HWND, cButtons: UINT, pButton: LPTHUMBBUTTON): HRESULT {.stdcall.}
    ThumbBarUpdateButtons*: proc(self: ptr ITaskbarList3, hwnd: HWND, cButtons: UINT, pButton: LPTHUMBBUTTON): HRESULT {.stdcall.}
    ThumbBarSetImageList*: proc(self: ptr ITaskbarList3, hwnd: HWND, himl: HIMAGELIST): HRESULT {.stdcall.}
    SetOverlayIcon*: proc(self: ptr ITaskbarList3, hwnd: HWND, hIcon: HICON, pszDescription: LPCWSTR): HRESULT {.stdcall.}
    SetThumbnailTooltip*: proc(self: ptr ITaskbarList3, hwnd: HWND, pszTip: LPCWSTR): HRESULT {.stdcall.}
    SetThumbnailClip*: proc(self: ptr ITaskbarList3, hwnd: HWND, prcClip: ptr RECT): HRESULT {.stdcall.}
  ITaskbarList4* {.pure.} = object
    lpVtbl*: ptr ITaskbarList4Vtbl
  ITaskbarList4Vtbl* {.pure, inheritable.} = object of ITaskbarList3Vtbl
    SetTabProperties*: proc(self: ptr ITaskbarList4, hwndTab: HWND, stpFlags: int32): HRESULT {.stdcall.}
  IStartMenuPinnedList* {.pure.} = object
    lpVtbl*: ptr IStartMenuPinnedListVtbl
  IStartMenuPinnedListVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    RemoveFromList*: proc(self: ptr IStartMenuPinnedList, pitem: ptr IShellItem): HRESULT {.stdcall.}
  ICDBurn* {.pure.} = object
    lpVtbl*: ptr ICDBurnVtbl
  ICDBurnVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetRecorderDriveLetter*: proc(self: ptr ICDBurn, pszDrive: LPWSTR, cch: UINT): HRESULT {.stdcall.}
    Burn*: proc(self: ptr ICDBurn, hwnd: HWND): HRESULT {.stdcall.}
    HasRecordableDrive*: proc(self: ptr ICDBurn, pfHasRecorder: ptr WINBOOL): HRESULT {.stdcall.}
  IWizardSite* {.pure.} = object
    lpVtbl*: ptr IWizardSiteVtbl
  IWizardSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetPreviousPage*: proc(self: ptr IWizardSite, phpage: ptr HPROPSHEETPAGE): HRESULT {.stdcall.}
    GetNextPage*: proc(self: ptr IWizardSite, phpage: ptr HPROPSHEETPAGE): HRESULT {.stdcall.}
    GetCancelledPage*: proc(self: ptr IWizardSite, phpage: ptr HPROPSHEETPAGE): HRESULT {.stdcall.}
  IWizardExtension* {.pure.} = object
    lpVtbl*: ptr IWizardExtensionVtbl
  IWizardExtensionVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AddPages*: proc(self: ptr IWizardExtension, aPages: ptr HPROPSHEETPAGE, cPages: UINT, pnPagesAdded: ptr UINT): HRESULT {.stdcall.}
    GetFirstPage*: proc(self: ptr IWizardExtension, phpage: ptr HPROPSHEETPAGE): HRESULT {.stdcall.}
    GetLastPage*: proc(self: ptr IWizardExtension, phpage: ptr HPROPSHEETPAGE): HRESULT {.stdcall.}
  IWebWizardExtension* {.pure.} = object
    lpVtbl*: ptr IWebWizardExtensionVtbl
  IWebWizardExtensionVtbl* {.pure, inheritable.} = object of IWizardExtensionVtbl
    SetInitialURL*: proc(self: ptr IWebWizardExtension, pszURL: LPCWSTR): HRESULT {.stdcall.}
    SetErrorURL*: proc(self: ptr IWebWizardExtension, pszErrorURL: LPCWSTR): HRESULT {.stdcall.}
  IPublishingWizard* {.pure.} = object
    lpVtbl*: ptr IPublishingWizardVtbl
  IPublishingWizardVtbl* {.pure, inheritable.} = object of IWizardExtensionVtbl
    Initialize*: proc(self: ptr IPublishingWizard, pdo: ptr IDataObject, dwOptions: DWORD, pszServiceScope: LPCWSTR): HRESULT {.stdcall.}
    GetTransferManifest*: proc(self: ptr IPublishingWizard, phrFromTransfer: ptr HRESULT, pdocManifest: ptr ptr IXMLDOMDocument): HRESULT {.stdcall.}
  IFolderViewHost* {.pure.} = object
    lpVtbl*: ptr IFolderViewHostVtbl
  IFolderViewHostVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IFolderViewHost, hwndParent: HWND, pdo: ptr IDataObject, prc: ptr RECT): HRESULT {.stdcall.}
  IExplorerBrowserEvents* {.pure.} = object
    lpVtbl*: ptr IExplorerBrowserEventsVtbl
  IExplorerBrowserEventsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnNavigationPending*: proc(self: ptr IExplorerBrowserEvents, pidlFolder: PCIDLIST_ABSOLUTE): HRESULT {.stdcall.}
    OnViewCreated*: proc(self: ptr IExplorerBrowserEvents, psv: ptr IShellView): HRESULT {.stdcall.}
    OnNavigationComplete*: proc(self: ptr IExplorerBrowserEvents, pidlFolder: PCIDLIST_ABSOLUTE): HRESULT {.stdcall.}
    OnNavigationFailed*: proc(self: ptr IExplorerBrowserEvents, pidlFolder: PCIDLIST_ABSOLUTE): HRESULT {.stdcall.}
  IExplorerBrowser* {.pure.} = object
    lpVtbl*: ptr IExplorerBrowserVtbl
  IExplorerBrowserVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IExplorerBrowser, hwndParent: HWND, prc: ptr RECT, pfs: ptr FOLDERSETTINGS): HRESULT {.stdcall.}
    Destroy*: proc(self: ptr IExplorerBrowser): HRESULT {.stdcall.}
    SetRect*: proc(self: ptr IExplorerBrowser, phdwp: ptr HDWP, rcBrowser: RECT): HRESULT {.stdcall.}
    SetPropertyBag*: proc(self: ptr IExplorerBrowser, pszPropertyBag: LPCWSTR): HRESULT {.stdcall.}
    SetEmptyText*: proc(self: ptr IExplorerBrowser, pszEmptyText: LPCWSTR): HRESULT {.stdcall.}
    SetFolderSettings*: proc(self: ptr IExplorerBrowser, pfs: ptr FOLDERSETTINGS): HRESULT {.stdcall.}
    Advise*: proc(self: ptr IExplorerBrowser, psbe: ptr IExplorerBrowserEvents, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    Unadvise*: proc(self: ptr IExplorerBrowser, dwCookie: DWORD): HRESULT {.stdcall.}
    SetOptions*: proc(self: ptr IExplorerBrowser, dwFlag: int32): HRESULT {.stdcall.}
    GetOptions*: proc(self: ptr IExplorerBrowser, pdwFlag: ptr int32): HRESULT {.stdcall.}
    BrowseToIDList*: proc(self: ptr IExplorerBrowser, pidl: PCUIDLIST_RELATIVE, uFlags: UINT): HRESULT {.stdcall.}
    BrowseToObject*: proc(self: ptr IExplorerBrowser, punk: ptr IUnknown, uFlags: UINT): HRESULT {.stdcall.}
    FillFromObject*: proc(self: ptr IExplorerBrowser, punk: ptr IUnknown, dwFlags: int32): HRESULT {.stdcall.}
    RemoveAll*: proc(self: ptr IExplorerBrowser): HRESULT {.stdcall.}
    GetCurrentView*: proc(self: ptr IExplorerBrowser, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IAccessibleObject* {.pure.} = object
    lpVtbl*: ptr IAccessibleObjectVtbl
  IAccessibleObjectVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetAccessibleName*: proc(self: ptr IAccessibleObject, pszName: LPCWSTR): HRESULT {.stdcall.}
  IResultsFolder* {.pure.} = object
    lpVtbl*: ptr IResultsFolderVtbl
  IResultsFolderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AddItem*: proc(self: ptr IResultsFolder, psi: ptr IShellItem): HRESULT {.stdcall.}
    AddIDList*: proc(self: ptr IResultsFolder, pidl: PCIDLIST_ABSOLUTE, ppidlAdded: ptr PITEMID_CHILD): HRESULT {.stdcall.}
    RemoveItem*: proc(self: ptr IResultsFolder, psi: ptr IShellItem): HRESULT {.stdcall.}
    RemoveIDList*: proc(self: ptr IResultsFolder, pidl: PCIDLIST_ABSOLUTE): HRESULT {.stdcall.}
    RemoveAll*: proc(self: ptr IResultsFolder): HRESULT {.stdcall.}
  IEnumObjects* {.pure.} = object
    lpVtbl*: ptr IEnumObjectsVtbl
  IEnumObjectsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumObjects, celt: ULONG, riid: REFIID, rgelt: ptr pointer, pceltFetched: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumObjects, celt: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumObjects): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumObjects, ppenum: ptr ptr IEnumObjects): HRESULT {.stdcall.}
  IOperationsProgressDialog* {.pure.} = object
    lpVtbl*: ptr IOperationsProgressDialogVtbl
  IOperationsProgressDialogVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    StartProgressDialog*: proc(self: ptr IOperationsProgressDialog, hwndOwner: HWND, flags: OPPROGDLGF): HRESULT {.stdcall.}
    StopProgressDialog*: proc(self: ptr IOperationsProgressDialog): HRESULT {.stdcall.}
    SetOperation*: proc(self: ptr IOperationsProgressDialog, action: int32): HRESULT {.stdcall.}
    SetMode*: proc(self: ptr IOperationsProgressDialog, mode: PDMODE): HRESULT {.stdcall.}
    UpdateProgress*: proc(self: ptr IOperationsProgressDialog, ullPointsCurrent: ULONGLONG, ullPointsTotal: ULONGLONG, ullSizeCurrent: ULONGLONG, ullSizeTotal: ULONGLONG, ullItemsCurrent: ULONGLONG, ullItemsTotal: ULONGLONG): HRESULT {.stdcall.}
    UpdateLocations*: proc(self: ptr IOperationsProgressDialog, psiSource: ptr IShellItem, psiTarget: ptr IShellItem, psiItem: ptr IShellItem): HRESULT {.stdcall.}
    ResetTimer*: proc(self: ptr IOperationsProgressDialog): HRESULT {.stdcall.}
    PauseTimer*: proc(self: ptr IOperationsProgressDialog): HRESULT {.stdcall.}
    ResumeTimer*: proc(self: ptr IOperationsProgressDialog): HRESULT {.stdcall.}
    GetMilliseconds*: proc(self: ptr IOperationsProgressDialog, pullElapsed: ptr ULONGLONG, pullRemaining: ptr ULONGLONG): HRESULT {.stdcall.}
    GetOperationStatus*: proc(self: ptr IOperationsProgressDialog, popstatus: ptr int32): HRESULT {.stdcall.}
  IIOCancelInformation* {.pure.} = object
    lpVtbl*: ptr IIOCancelInformationVtbl
  IIOCancelInformationVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetCancelInformation*: proc(self: ptr IIOCancelInformation, dwThreadID: DWORD, uMsgCancel: UINT): HRESULT {.stdcall.}
    GetCancelInformation*: proc(self: ptr IIOCancelInformation, pdwThreadID: ptr DWORD, puMsgCancel: ptr UINT): HRESULT {.stdcall.}
  IFileOperation* {.pure.} = object
    lpVtbl*: ptr IFileOperationVtbl
  IFileOperationVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Advise*: proc(self: ptr IFileOperation, pfops: ptr IFileOperationProgressSink, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    Unadvise*: proc(self: ptr IFileOperation, dwCookie: DWORD): HRESULT {.stdcall.}
    SetOperationFlags*: proc(self: ptr IFileOperation, dwOperationFlags: DWORD): HRESULT {.stdcall.}
    SetProgressMessage*: proc(self: ptr IFileOperation, pszMessage: LPCWSTR): HRESULT {.stdcall.}
    SetProgressDialog*: proc(self: ptr IFileOperation, popd: ptr IOperationsProgressDialog): HRESULT {.stdcall.}
    SetProperties*: proc(self: ptr IFileOperation, pproparray: ptr IPropertyChangeArray): HRESULT {.stdcall.}
    SetOwnerWindow*: proc(self: ptr IFileOperation, hwndOwner: HWND): HRESULT {.stdcall.}
    ApplyPropertiesToItem*: proc(self: ptr IFileOperation, psiItem: ptr IShellItem): HRESULT {.stdcall.}
    ApplyPropertiesToItems*: proc(self: ptr IFileOperation, punkItems: ptr IUnknown): HRESULT {.stdcall.}
    RenameItem*: proc(self: ptr IFileOperation, psiItem: ptr IShellItem, pszNewName: LPCWSTR, pfopsItem: ptr IFileOperationProgressSink): HRESULT {.stdcall.}
    RenameItems*: proc(self: ptr IFileOperation, pUnkItems: ptr IUnknown, pszNewName: LPCWSTR): HRESULT {.stdcall.}
    MoveItem*: proc(self: ptr IFileOperation, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR, pfopsItem: ptr IFileOperationProgressSink): HRESULT {.stdcall.}
    MoveItems*: proc(self: ptr IFileOperation, punkItems: ptr IUnknown, psiDestinationFolder: ptr IShellItem): HRESULT {.stdcall.}
    CopyItem*: proc(self: ptr IFileOperation, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszCopyName: LPCWSTR, pfopsItem: ptr IFileOperationProgressSink): HRESULT {.stdcall.}
    CopyItems*: proc(self: ptr IFileOperation, punkItems: ptr IUnknown, psiDestinationFolder: ptr IShellItem): HRESULT {.stdcall.}
    DeleteItem*: proc(self: ptr IFileOperation, psiItem: ptr IShellItem, pfopsItem: ptr IFileOperationProgressSink): HRESULT {.stdcall.}
    DeleteItems*: proc(self: ptr IFileOperation, punkItems: ptr IUnknown): HRESULT {.stdcall.}
    NewItem*: proc(self: ptr IFileOperation, psiDestinationFolder: ptr IShellItem, dwFileAttributes: DWORD, pszName: LPCWSTR, pszTemplateName: LPCWSTR, pfopsItem: ptr IFileOperationProgressSink): HRESULT {.stdcall.}
    PerformOperations*: proc(self: ptr IFileOperation): HRESULT {.stdcall.}
    GetAnyOperationsAborted*: proc(self: ptr IFileOperation, pfAnyOperationsAborted: ptr WINBOOL): HRESULT {.stdcall.}
  IObjectProvider* {.pure.} = object
    lpVtbl*: ptr IObjectProviderVtbl
  IObjectProviderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    QueryObject*: proc(self: ptr IObjectProvider, guidObject: REFGUID, riid: REFIID, ppvOut: ptr pointer): HRESULT {.stdcall.}
  INamespaceWalkCB* {.pure.} = object
    lpVtbl*: ptr INamespaceWalkCBVtbl
  INamespaceWalkCBVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    FoundItem*: proc(self: ptr INamespaceWalkCB, psf: ptr IShellFolder, pidl: PCUITEMID_CHILD): HRESULT {.stdcall.}
    EnterFolder*: proc(self: ptr INamespaceWalkCB, psf: ptr IShellFolder, pidl: PCUITEMID_CHILD): HRESULT {.stdcall.}
    LeaveFolder*: proc(self: ptr INamespaceWalkCB, psf: ptr IShellFolder, pidl: PCUITEMID_CHILD): HRESULT {.stdcall.}
    InitializeProgressDialog*: proc(self: ptr INamespaceWalkCB, ppszTitle: ptr LPWSTR, ppszCancel: ptr LPWSTR): HRESULT {.stdcall.}
  INamespaceWalkCB2* {.pure.} = object
    lpVtbl*: ptr INamespaceWalkCB2Vtbl
  INamespaceWalkCB2Vtbl* {.pure, inheritable.} = object of INamespaceWalkCBVtbl
    WalkComplete*: proc(self: ptr INamespaceWalkCB2, hr: HRESULT): HRESULT {.stdcall.}
  INamespaceWalk* {.pure.} = object
    lpVtbl*: ptr INamespaceWalkVtbl
  INamespaceWalkVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Walk*: proc(self: ptr INamespaceWalk, punkToWalk: ptr IUnknown, dwFlags: DWORD, cDepth: int32, pnswcb: ptr INamespaceWalkCB): HRESULT {.stdcall.}
    GetIDArrayResult*: proc(self: ptr INamespaceWalk, pcItems: ptr UINT, prgpidl: ptr ptr PIDLIST_ABSOLUTE): HRESULT {.stdcall.}
  IAutoCompleteDropDown* {.pure.} = object
    lpVtbl*: ptr IAutoCompleteDropDownVtbl
  IAutoCompleteDropDownVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetDropDownStatus*: proc(self: ptr IAutoCompleteDropDown, pdwFlags: ptr DWORD, ppwszString: ptr LPWSTR): HRESULT {.stdcall.}
    ResetEnumerator*: proc(self: ptr IAutoCompleteDropDown): HRESULT {.stdcall.}
  IBandSite* {.pure.} = object
    lpVtbl*: ptr IBandSiteVtbl
  IBandSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AddBand*: proc(self: ptr IBandSite, punk: ptr IUnknown): HRESULT {.stdcall.}
    EnumBands*: proc(self: ptr IBandSite, uBand: UINT, pdwBandID: ptr DWORD): HRESULT {.stdcall.}
    QueryBand*: proc(self: ptr IBandSite, dwBandID: DWORD, ppstb: ptr ptr IDeskBand, pdwState: ptr DWORD, pszName: LPWSTR, cchName: int32): HRESULT {.stdcall.}
    SetBandState*: proc(self: ptr IBandSite, dwBandID: DWORD, dwMask: DWORD, dwState: DWORD): HRESULT {.stdcall.}
    RemoveBand*: proc(self: ptr IBandSite, dwBandID: DWORD): HRESULT {.stdcall.}
    GetBandObject*: proc(self: ptr IBandSite, dwBandID: DWORD, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    SetBandSiteInfo*: proc(self: ptr IBandSite, pbsinfo: ptr BANDSITEINFO): HRESULT {.stdcall.}
    GetBandSiteInfo*: proc(self: ptr IBandSite, pbsinfo: ptr BANDSITEINFO): HRESULT {.stdcall.}
  IModalWindow* {.pure.} = object
    lpVtbl*: ptr IModalWindowVtbl
  IModalWindowVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Show*: proc(self: ptr IModalWindow, hwndOwner: HWND): HRESULT {.stdcall.}
  ICDBurnExt* {.pure.} = object
    lpVtbl*: ptr ICDBurnExtVtbl
  ICDBurnExtVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetSupportedActionTypes*: proc(self: ptr ICDBurnExt, pdwActions: ptr CDBE_ACTIONS): HRESULT {.stdcall.}
  IContextMenuSite* {.pure.} = object
    lpVtbl*: ptr IContextMenuSiteVtbl
  IContextMenuSiteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    DoContextMenuPopup*: proc(self: ptr IContextMenuSite, punkContextMenu: ptr IUnknown, fFlags: UINT, pt: POINT): HRESULT {.stdcall.}
  IEnumReadyCallback* {.pure.} = object
    lpVtbl*: ptr IEnumReadyCallbackVtbl
  IEnumReadyCallbackVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    EnumReady*: proc(self: ptr IEnumReadyCallback): HRESULT {.stdcall.}
  IEnumerableView* {.pure.} = object
    lpVtbl*: ptr IEnumerableViewVtbl
  IEnumerableViewVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetEnumReadyCallback*: proc(self: ptr IEnumerableView, percb: ptr IEnumReadyCallback): HRESULT {.stdcall.}
    CreateEnumIDListFromContents*: proc(self: ptr IEnumerableView, pidlFolder: PCIDLIST_ABSOLUTE, dwEnumFlags: DWORD, ppEnumIDList: ptr ptr IEnumIDList): HRESULT {.stdcall.}
  IInsertItem* {.pure.} = object
    lpVtbl*: ptr IInsertItemVtbl
  IInsertItemVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    InsertItem*: proc(self: ptr IInsertItem, pidl: PCUIDLIST_RELATIVE): HRESULT {.stdcall.}
  IMenuBand* {.pure.} = object
    lpVtbl*: ptr IMenuBandVtbl
  IMenuBandVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    IsMenuMessage*: proc(self: ptr IMenuBand, pmsg: ptr MSG): HRESULT {.stdcall.}
    TranslateMenuMessage*: proc(self: ptr IMenuBand, pmsg: ptr MSG, plRet: ptr LRESULT): HRESULT {.stdcall.}
  IFolderBandPriv* {.pure.} = object
    lpVtbl*: ptr IFolderBandPrivVtbl
  IFolderBandPrivVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetCascade*: proc(self: ptr IFolderBandPriv, fCascade: WINBOOL): HRESULT {.stdcall.}
    SetAccelerators*: proc(self: ptr IFolderBandPriv, fAccelerators: WINBOOL): HRESULT {.stdcall.}
    SetNoIcons*: proc(self: ptr IFolderBandPriv, fNoIcons: WINBOOL): HRESULT {.stdcall.}
    SetNoText*: proc(self: ptr IFolderBandPriv, fNoText: WINBOOL): HRESULT {.stdcall.}
  IRegTreeItem* {.pure.} = object
    lpVtbl*: ptr IRegTreeItemVtbl
  IRegTreeItemVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCheckState*: proc(self: ptr IRegTreeItem, pbCheck: ptr WINBOOL): HRESULT {.stdcall.}
    SetCheckState*: proc(self: ptr IRegTreeItem, bCheck: WINBOOL): HRESULT {.stdcall.}
  IImageRecompress* {.pure.} = object
    lpVtbl*: ptr IImageRecompressVtbl
  IImageRecompressVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    RecompressImage*: proc(self: ptr IImageRecompress, psi: ptr IShellItem, cx: int32, cy: int32, iQuality: int32, pstg: ptr IStorage, ppstrmOut: ptr ptr IStream): HRESULT {.stdcall.}
  IDeskBar* {.pure.} = object
    lpVtbl*: ptr IDeskBarVtbl
  IDeskBarVtbl* {.pure, inheritable.} = object of IOleWindowVtbl
    SetClient*: proc(self: ptr IDeskBar, punkClient: ptr IUnknown): HRESULT {.stdcall.}
    GetClient*: proc(self: ptr IDeskBar, ppunkClient: ptr ptr IUnknown): HRESULT {.stdcall.}
    OnPosRectChangeDB*: proc(self: ptr IDeskBar, prc: ptr RECT): HRESULT {.stdcall.}
  IMenuPopup* {.pure.} = object
    lpVtbl*: ptr IMenuPopupVtbl
  IMenuPopupVtbl* {.pure, inheritable.} = object of IDeskBarVtbl
    Popup*: proc(self: ptr IMenuPopup, ppt: ptr POINTL, prcExclude: ptr RECTL, dwFlags: MP_POPUPFLAGS): HRESULT {.stdcall.}
    OnSelect*: proc(self: ptr IMenuPopup, dwSelectType: DWORD): HRESULT {.stdcall.}
    SetSubMenu*: proc(self: ptr IMenuPopup, pmp: ptr IMenuPopup, fSet: WINBOOL): HRESULT {.stdcall.}
  IFileIsInUse* {.pure.} = object
    lpVtbl*: ptr IFileIsInUseVtbl
  IFileIsInUseVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetAppName*: proc(self: ptr IFileIsInUse, ppszName: ptr LPWSTR): HRESULT {.stdcall.}
    GetUsage*: proc(self: ptr IFileIsInUse, pfut: ptr int32): HRESULT {.stdcall.}
    GetCapabilities*: proc(self: ptr IFileIsInUse, pdwCapFlags: ptr DWORD): HRESULT {.stdcall.}
    GetSwitchToHWND*: proc(self: ptr IFileIsInUse, phwnd: ptr HWND): HRESULT {.stdcall.}
    CloseFile*: proc(self: ptr IFileIsInUse): HRESULT {.stdcall.}
  IFileDialogEvents* {.pure.} = object
    lpVtbl*: ptr IFileDialogEventsVtbl
  IFileDialogEventsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnFileOk*: proc(self: ptr IFileDialogEvents, pfd: ptr IFileDialog): HRESULT {.stdcall.}
    OnFolderChanging*: proc(self: ptr IFileDialogEvents, pfd: ptr IFileDialog, psiFolder: ptr IShellItem): HRESULT {.stdcall.}
    OnFolderChange*: proc(self: ptr IFileDialogEvents, pfd: ptr IFileDialog): HRESULT {.stdcall.}
    OnSelectionChange*: proc(self: ptr IFileDialogEvents, pfd: ptr IFileDialog): HRESULT {.stdcall.}
    OnShareViolation*: proc(self: ptr IFileDialogEvents, pfd: ptr IFileDialog, psi: ptr IShellItem, pResponse: ptr int32): HRESULT {.stdcall.}
    OnTypeChange*: proc(self: ptr IFileDialogEvents, pfd: ptr IFileDialog): HRESULT {.stdcall.}
    OnOverwrite*: proc(self: ptr IFileDialogEvents, pfd: ptr IFileDialog, psi: ptr IShellItem, pResponse: ptr int32): HRESULT {.stdcall.}
  IFileDialog* {.pure.} = object
    lpVtbl*: ptr IFileDialogVtbl
  IFileDialogVtbl* {.pure, inheritable.} = object of IModalWindowVtbl
    SetFileTypes*: proc(self: ptr IFileDialog, cFileTypes: UINT, rgFilterSpec: ptr COMDLG_FILTERSPEC): HRESULT {.stdcall.}
    SetFileTypeIndex*: proc(self: ptr IFileDialog, iFileType: UINT): HRESULT {.stdcall.}
    GetFileTypeIndex*: proc(self: ptr IFileDialog, piFileType: ptr UINT): HRESULT {.stdcall.}
    Advise*: proc(self: ptr IFileDialog, pfde: ptr IFileDialogEvents, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    Unadvise*: proc(self: ptr IFileDialog, dwCookie: DWORD): HRESULT {.stdcall.}
    SetOptions*: proc(self: ptr IFileDialog, fos: FILEOPENDIALOGOPTIONS): HRESULT {.stdcall.}
    GetOptions*: proc(self: ptr IFileDialog, pfos: ptr FILEOPENDIALOGOPTIONS): HRESULT {.stdcall.}
    SetDefaultFolder*: proc(self: ptr IFileDialog, psi: ptr IShellItem): HRESULT {.stdcall.}
    SetFolder*: proc(self: ptr IFileDialog, psi: ptr IShellItem): HRESULT {.stdcall.}
    GetFolder*: proc(self: ptr IFileDialog, ppsi: ptr ptr IShellItem): HRESULT {.stdcall.}
    GetCurrentSelection*: proc(self: ptr IFileDialog, ppsi: ptr ptr IShellItem): HRESULT {.stdcall.}
    SetFileName*: proc(self: ptr IFileDialog, pszName: LPCWSTR): HRESULT {.stdcall.}
    GetFileName*: proc(self: ptr IFileDialog, pszName: ptr LPWSTR): HRESULT {.stdcall.}
    SetTitle*: proc(self: ptr IFileDialog, pszTitle: LPCWSTR): HRESULT {.stdcall.}
    SetOkButtonLabel*: proc(self: ptr IFileDialog, pszText: LPCWSTR): HRESULT {.stdcall.}
    SetFileNameLabel*: proc(self: ptr IFileDialog, pszLabel: LPCWSTR): HRESULT {.stdcall.}
    GetResult*: proc(self: ptr IFileDialog, ppsi: ptr ptr IShellItem): HRESULT {.stdcall.}
    AddPlace*: proc(self: ptr IFileDialog, psi: ptr IShellItem, fdap: int32): HRESULT {.stdcall.}
    SetDefaultExtension*: proc(self: ptr IFileDialog, pszDefaultExtension: LPCWSTR): HRESULT {.stdcall.}
    Close*: proc(self: ptr IFileDialog, hr: HRESULT): HRESULT {.stdcall.}
    SetClientGuid*: proc(self: ptr IFileDialog, guid: REFGUID): HRESULT {.stdcall.}
    ClearClientData*: proc(self: ptr IFileDialog): HRESULT {.stdcall.}
    SetFilter*: proc(self: ptr IFileDialog, pFilter: ptr IShellItemFilter): HRESULT {.stdcall.}
  IFileSaveDialog* {.pure.} = object
    lpVtbl*: ptr IFileSaveDialogVtbl
  IFileSaveDialogVtbl* {.pure, inheritable.} = object of IFileDialogVtbl
    SetSaveAsItem*: proc(self: ptr IFileSaveDialog, psi: ptr IShellItem): HRESULT {.stdcall.}
    SetProperties*: proc(self: ptr IFileSaveDialog, pStore: ptr IPropertyStore): HRESULT {.stdcall.}
    SetCollectedProperties*: proc(self: ptr IFileSaveDialog, pList: ptr IPropertyDescriptionList, fAppendDefault: WINBOOL): HRESULT {.stdcall.}
    GetProperties*: proc(self: ptr IFileSaveDialog, ppStore: ptr ptr IPropertyStore): HRESULT {.stdcall.}
    ApplyProperties*: proc(self: ptr IFileSaveDialog, psi: ptr IShellItem, pStore: ptr IPropertyStore, hwnd: HWND, pSink: ptr IFileOperationProgressSink): HRESULT {.stdcall.}
  IFileOpenDialog* {.pure.} = object
    lpVtbl*: ptr IFileOpenDialogVtbl
  IFileOpenDialogVtbl* {.pure, inheritable.} = object of IFileDialogVtbl
    GetResults*: proc(self: ptr IFileOpenDialog, ppenum: ptr ptr IShellItemArray): HRESULT {.stdcall.}
    GetSelectedItems*: proc(self: ptr IFileOpenDialog, ppsai: ptr ptr IShellItemArray): HRESULT {.stdcall.}
  IFileDialogCustomize* {.pure.} = object
    lpVtbl*: ptr IFileDialogCustomizeVtbl
  IFileDialogCustomizeVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    EnableOpenDropDown*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.stdcall.}
    AddMenu*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszLabel: LPCWSTR): HRESULT {.stdcall.}
    AddPushButton*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszLabel: LPCWSTR): HRESULT {.stdcall.}
    AddComboBox*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.stdcall.}
    AddRadioButtonList*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.stdcall.}
    AddCheckButton*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszLabel: LPCWSTR, bChecked: WINBOOL): HRESULT {.stdcall.}
    AddEditBox*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszText: LPCWSTR): HRESULT {.stdcall.}
    AddSeparator*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.stdcall.}
    AddText*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszText: LPCWSTR): HRESULT {.stdcall.}
    SetControlLabel*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszLabel: LPCWSTR): HRESULT {.stdcall.}
    GetControlState*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pdwState: ptr int32): HRESULT {.stdcall.}
    SetControlState*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwState: int32): HRESULT {.stdcall.}
    GetEditBoxText*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, ppszText: ptr ptr WCHAR): HRESULT {.stdcall.}
    SetEditBoxText*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszText: LPCWSTR): HRESULT {.stdcall.}
    GetCheckButtonState*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pbChecked: ptr WINBOOL): HRESULT {.stdcall.}
    SetCheckButtonState*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, bChecked: WINBOOL): HRESULT {.stdcall.}
    AddControlItem*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD, pszLabel: LPCWSTR): HRESULT {.stdcall.}
    RemoveControlItem*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD): HRESULT {.stdcall.}
    RemoveAllControlItems*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.stdcall.}
    GetControlItemState*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD, pdwState: ptr int32): HRESULT {.stdcall.}
    SetControlItemState*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD, dwState: int32): HRESULT {.stdcall.}
    GetSelectedControlItem*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pdwIDItem: ptr DWORD): HRESULT {.stdcall.}
    SetSelectedControlItem*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD): HRESULT {.stdcall.}
    StartVisualGroup*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszLabel: LPCWSTR): HRESULT {.stdcall.}
    EndVisualGroup*: proc(self: ptr IFileDialogCustomize): HRESULT {.stdcall.}
    MakeProminent*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.stdcall.}
    SetControlItemText*: proc(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD, pszLabel: LPCWSTR): HRESULT {.stdcall.}
  IFileDialogControlEvents* {.pure.} = object
    lpVtbl*: ptr IFileDialogControlEventsVtbl
  IFileDialogControlEventsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnItemSelected*: proc(self: ptr IFileDialogControlEvents, pfdc: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD): HRESULT {.stdcall.}
    OnButtonClicked*: proc(self: ptr IFileDialogControlEvents, pfdc: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.stdcall.}
    OnCheckButtonToggled*: proc(self: ptr IFileDialogControlEvents, pfdc: ptr IFileDialogCustomize, dwIDCtl: DWORD, bChecked: WINBOOL): HRESULT {.stdcall.}
    OnControlActivating*: proc(self: ptr IFileDialogControlEvents, pfdc: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.stdcall.}
  IFileDialog2* {.pure.} = object
    lpVtbl*: ptr IFileDialog2Vtbl
  IFileDialog2Vtbl* {.pure, inheritable.} = object of IFileDialogVtbl
    SetCancelButtonLabel*: proc(self: ptr IFileDialog2, pszLabel: LPCWSTR): HRESULT {.stdcall.}
    SetNavigationRoot*: proc(self: ptr IFileDialog2, psi: ptr IShellItem): HRESULT {.stdcall.}
  IApplicationAssociationRegistration* {.pure.} = object
    lpVtbl*: ptr IApplicationAssociationRegistrationVtbl
  IApplicationAssociationRegistrationVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    QueryCurrentDefault*: proc(self: ptr IApplicationAssociationRegistration, pszQuery: LPCWSTR, atQueryType: int32, alQueryLevel: int32, ppszAssociation: ptr LPWSTR): HRESULT {.stdcall.}
    QueryAppIsDefault*: proc(self: ptr IApplicationAssociationRegistration, pszQuery: LPCWSTR, atQueryType: int32, alQueryLevel: int32, pszAppRegistryName: LPCWSTR, pfDefault: ptr WINBOOL): HRESULT {.stdcall.}
    QueryAppIsDefaultAll*: proc(self: ptr IApplicationAssociationRegistration, alQueryLevel: int32, pszAppRegistryName: LPCWSTR, pfDefault: ptr WINBOOL): HRESULT {.stdcall.}
    SetAppAsDefault*: proc(self: ptr IApplicationAssociationRegistration, pszAppRegistryName: LPCWSTR, pszSet: LPCWSTR, atSetType: int32): HRESULT {.stdcall.}
    SetAppAsDefaultAll*: proc(self: ptr IApplicationAssociationRegistration, pszAppRegistryName: LPCWSTR): HRESULT {.stdcall.}
    ClearUserAssociations*: proc(self: ptr IApplicationAssociationRegistration): HRESULT {.stdcall.}
  IApplicationAssociationRegistrationUI* {.pure.} = object
    lpVtbl*: ptr IApplicationAssociationRegistrationUIVtbl
  IApplicationAssociationRegistrationUIVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    LaunchAdvancedAssociationUI*: proc(self: ptr IApplicationAssociationRegistrationUI, pszAppRegistryName: LPCWSTR): HRESULT {.stdcall.}
  IDelegateFolder* {.pure.} = object
    lpVtbl*: ptr IDelegateFolderVtbl
  IDelegateFolderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetItemAlloc*: proc(self: ptr IDelegateFolder, pmalloc: ptr IMalloc): HRESULT {.stdcall.}
  IBrowserFrameOptions* {.pure.} = object
    lpVtbl*: ptr IBrowserFrameOptionsVtbl
  IBrowserFrameOptionsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetFrameOptions*: proc(self: ptr IBrowserFrameOptions, dwMask: BROWSERFRAMEOPTIONS, pdwOptions: ptr BROWSERFRAMEOPTIONS): HRESULT {.stdcall.}
  INewWindowManager* {.pure.} = object
    lpVtbl*: ptr INewWindowManagerVtbl
  INewWindowManagerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    EvaluateNewWindow*: proc(self: ptr INewWindowManager, pszUrl: LPCWSTR, pszName: LPCWSTR, pszUrlContext: LPCWSTR, pszFeatures: LPCWSTR, fReplace: WINBOOL, dwFlags: DWORD, dwUserActionTime: DWORD): HRESULT {.stdcall.}
  IAttachmentExecute* {.pure.} = object
    lpVtbl*: ptr IAttachmentExecuteVtbl
  IAttachmentExecuteVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetClientTitle*: proc(self: ptr IAttachmentExecute, pszTitle: LPCWSTR): HRESULT {.stdcall.}
    SetClientGuid*: proc(self: ptr IAttachmentExecute, guid: REFGUID): HRESULT {.stdcall.}
    SetLocalPath*: proc(self: ptr IAttachmentExecute, pszLocalPath: LPCWSTR): HRESULT {.stdcall.}
    SetFileName*: proc(self: ptr IAttachmentExecute, pszFileName: LPCWSTR): HRESULT {.stdcall.}
    SetSource*: proc(self: ptr IAttachmentExecute, pszSource: LPCWSTR): HRESULT {.stdcall.}
    SetReferrer*: proc(self: ptr IAttachmentExecute, pszReferrer: LPCWSTR): HRESULT {.stdcall.}
    CheckPolicy*: proc(self: ptr IAttachmentExecute): HRESULT {.stdcall.}
    Prompt*: proc(self: ptr IAttachmentExecute, hwnd: HWND, prompt: int32, paction: ptr int32): HRESULT {.stdcall.}
    Save*: proc(self: ptr IAttachmentExecute): HRESULT {.stdcall.}
    Execute*: proc(self: ptr IAttachmentExecute, hwnd: HWND, pszVerb: LPCWSTR, phProcess: ptr HANDLE): HRESULT {.stdcall.}
    SaveWithUI*: proc(self: ptr IAttachmentExecute, hwnd: HWND): HRESULT {.stdcall.}
    ClearClientState*: proc(self: ptr IAttachmentExecute): HRESULT {.stdcall.}
  IShellMenuCallback* {.pure.} = object
    lpVtbl*: ptr IShellMenuCallbackVtbl
  IShellMenuCallbackVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CallbackSM*: proc(self: ptr IShellMenuCallback, psmd: LPSMDATA, uMsg: UINT, wParam: WPARAM, lParam: LPARAM): HRESULT {.stdcall.}
  IShellMenu* {.pure.} = object
    lpVtbl*: ptr IShellMenuVtbl
  IShellMenuVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IShellMenu, psmc: ptr IShellMenuCallback, uId: UINT, uIdAncestor: UINT, dwFlags: DWORD): HRESULT {.stdcall.}
    GetMenuInfo*: proc(self: ptr IShellMenu, ppsmc: ptr ptr IShellMenuCallback, puId: ptr UINT, puIdAncestor: ptr UINT, pdwFlags: ptr DWORD): HRESULT {.stdcall.}
    SetShellFolder*: proc(self: ptr IShellMenu, psf: ptr IShellFolder, pidlFolder: PCIDLIST_ABSOLUTE, hKey: HKEY, dwFlags: DWORD): HRESULT {.stdcall.}
    GetShellFolder*: proc(self: ptr IShellMenu, pdwFlags: ptr DWORD, ppidl: ptr PIDLIST_ABSOLUTE, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    SetMenu*: proc(self: ptr IShellMenu, hmenu: HMENU, hwnd: HWND, dwFlags: DWORD): HRESULT {.stdcall.}
    GetMenu*: proc(self: ptr IShellMenu, phmenu: ptr HMENU, phwnd: ptr HWND, pdwFlags: ptr DWORD): HRESULT {.stdcall.}
    InvalidateItem*: proc(self: ptr IShellMenu, psmd: LPSMDATA, dwFlags: DWORD): HRESULT {.stdcall.}
    GetState*: proc(self: ptr IShellMenu, psmd: LPSMDATA): HRESULT {.stdcall.}
    SetMenuToolbar*: proc(self: ptr IShellMenu, punk: ptr IUnknown, dwFlags: DWORD): HRESULT {.stdcall.}
  IShellRunDll* {.pure.} = object
    lpVtbl*: ptr IShellRunDllVtbl
  IShellRunDllVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Run*: proc(self: ptr IShellRunDll, pszArgs: LPCWSTR): HRESULT {.stdcall.}
  IKnownFolder* {.pure.} = object
    lpVtbl*: ptr IKnownFolderVtbl
  IKnownFolderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetId*: proc(self: ptr IKnownFolder, pkfid: ptr KNOWNFOLDERID): HRESULT {.stdcall.}
    GetCategory*: proc(self: ptr IKnownFolder, pCategory: ptr int32): HRESULT {.stdcall.}
    GetShellItem*: proc(self: ptr IKnownFolder, dwFlags: DWORD, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetPath*: proc(self: ptr IKnownFolder, dwFlags: DWORD, ppszPath: ptr LPWSTR): HRESULT {.stdcall.}
    SetPath*: proc(self: ptr IKnownFolder, dwFlags: DWORD, pszPath: LPCWSTR): HRESULT {.stdcall.}
    GetIDList*: proc(self: ptr IKnownFolder, dwFlags: DWORD, ppidl: ptr PIDLIST_ABSOLUTE): HRESULT {.stdcall.}
    GetFolderType*: proc(self: ptr IKnownFolder, pftid: ptr FOLDERTYPEID): HRESULT {.stdcall.}
    GetRedirectionCapabilities*: proc(self: ptr IKnownFolder, pCapabilities: ptr KF_REDIRECTION_CAPABILITIES): HRESULT {.stdcall.}
    GetFolderDefinition*: proc(self: ptr IKnownFolder, pKFD: ptr KNOWNFOLDER_DEFINITION): HRESULT {.stdcall.}
  IKnownFolderManager* {.pure.} = object
    lpVtbl*: ptr IKnownFolderManagerVtbl
  IKnownFolderManagerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    FolderIdFromCsidl*: proc(self: ptr IKnownFolderManager, nCsidl: int32, pfid: ptr KNOWNFOLDERID): HRESULT {.stdcall.}
    FolderIdToCsidl*: proc(self: ptr IKnownFolderManager, rfid: REFKNOWNFOLDERID, pnCsidl: ptr int32): HRESULT {.stdcall.}
    GetFolderIds*: proc(self: ptr IKnownFolderManager, ppKFId: ptr ptr KNOWNFOLDERID, pCount: ptr UINT): HRESULT {.stdcall.}
    GetFolder*: proc(self: ptr IKnownFolderManager, rfid: REFKNOWNFOLDERID, ppkf: ptr ptr IKnownFolder): HRESULT {.stdcall.}
    GetFolderByName*: proc(self: ptr IKnownFolderManager, pszCanonicalName: LPCWSTR, ppkf: ptr ptr IKnownFolder): HRESULT {.stdcall.}
    RegisterFolder*: proc(self: ptr IKnownFolderManager, rfid: REFKNOWNFOLDERID, pKFD: ptr KNOWNFOLDER_DEFINITION): HRESULT {.stdcall.}
    UnregisterFolder*: proc(self: ptr IKnownFolderManager, rfid: REFKNOWNFOLDERID): HRESULT {.stdcall.}
    FindFolderFromPath*: proc(self: ptr IKnownFolderManager, pszPath: LPCWSTR, mode: int32, ppkf: ptr ptr IKnownFolder): HRESULT {.stdcall.}
    FindFolderFromIDList*: proc(self: ptr IKnownFolderManager, pidl: PCIDLIST_ABSOLUTE, ppkf: ptr ptr IKnownFolder): HRESULT {.stdcall.}
    Redirect*: proc(self: ptr IKnownFolderManager, rfid: REFKNOWNFOLDERID, hwnd: HWND, flags: KF_REDIRECT_FLAGS, pszTargetPath: LPCWSTR, cFolders: UINT, pExclusion: ptr KNOWNFOLDERID, ppszError: ptr LPWSTR): HRESULT {.stdcall.}
  ISharingConfigurationManager* {.pure.} = object
    lpVtbl*: ptr ISharingConfigurationManagerVtbl
  ISharingConfigurationManagerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CreateShare*: proc(self: ptr ISharingConfigurationManager, dsid: int32, role: int32): HRESULT {.stdcall.}
    DeleteShare*: proc(self: ptr ISharingConfigurationManager, dsid: int32): HRESULT {.stdcall.}
    ShareExists*: proc(self: ptr ISharingConfigurationManager, dsid: int32): HRESULT {.stdcall.}
    GetSharePermissions*: proc(self: ptr ISharingConfigurationManager, dsid: int32, pRole: ptr int32): HRESULT {.stdcall.}
    SharePrinters*: proc(self: ptr ISharingConfigurationManager): HRESULT {.stdcall.}
    StopSharingPrinters*: proc(self: ptr ISharingConfigurationManager): HRESULT {.stdcall.}
    ArePrintersShared*: proc(self: ptr ISharingConfigurationManager): HRESULT {.stdcall.}
  IPreviousVersionsInfo* {.pure.} = object
    lpVtbl*: ptr IPreviousVersionsInfoVtbl
  IPreviousVersionsInfoVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AreSnapshotsAvailable*: proc(self: ptr IPreviousVersionsInfo, pszPath: LPCWSTR, fOkToBeSlow: WINBOOL, pfAvailable: ptr WINBOOL): HRESULT {.stdcall.}
  IRelatedItem* {.pure.} = object
    lpVtbl*: ptr IRelatedItemVtbl
  IRelatedItemVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetItemIDList*: proc(self: ptr IRelatedItem, ppidl: ptr PIDLIST_ABSOLUTE): HRESULT {.stdcall.}
    GetItem*: proc(self: ptr IRelatedItem, ppsi: ptr ptr IShellItem): HRESULT {.stdcall.}
  IIdentityName* {.pure.} = object
    lpVtbl*: ptr IIdentityNameVtbl
  IIdentityNameVtbl* {.pure, inheritable.} = object of IRelatedItemVtbl
  IDelegateItem* {.pure.} = object
    lpVtbl*: ptr IDelegateItemVtbl
  IDelegateItemVtbl* {.pure, inheritable.} = object of IRelatedItemVtbl
  ICurrentItem* {.pure.} = object
    lpVtbl*: ptr ICurrentItemVtbl
  ICurrentItemVtbl* {.pure, inheritable.} = object of IRelatedItemVtbl
  ITransferMediumItem* {.pure.} = object
    lpVtbl*: ptr ITransferMediumItemVtbl
  ITransferMediumItemVtbl* {.pure, inheritable.} = object of IRelatedItemVtbl
  IUseToBrowseItem* {.pure.} = object
    lpVtbl*: ptr IUseToBrowseItemVtbl
  IUseToBrowseItemVtbl* {.pure, inheritable.} = object of IRelatedItemVtbl
  IDisplayItem* {.pure.} = object
    lpVtbl*: ptr IDisplayItemVtbl
  IDisplayItemVtbl* {.pure, inheritable.} = object of IRelatedItemVtbl
  IViewStateIdentityItem* {.pure.} = object
    lpVtbl*: ptr IViewStateIdentityItemVtbl
  IViewStateIdentityItemVtbl* {.pure, inheritable.} = object of IRelatedItemVtbl
  IPreviewItem* {.pure.} = object
    lpVtbl*: ptr IPreviewItemVtbl
  IPreviewItemVtbl* {.pure, inheritable.} = object of IRelatedItemVtbl
  IDestinationStreamFactory* {.pure.} = object
    lpVtbl*: ptr IDestinationStreamFactoryVtbl
  IDestinationStreamFactoryVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetDestinationStream*: proc(self: ptr IDestinationStreamFactory, ppstm: ptr ptr IStream): HRESULT {.stdcall.}
  INewMenuClient* {.pure.} = object
    lpVtbl*: ptr INewMenuClientVtbl
  INewMenuClientVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    IncludeItems*: proc(self: ptr INewMenuClient, pflags: ptr NMCII_FLAGS): HRESULT {.stdcall.}
    SelectAndEditItem*: proc(self: ptr INewMenuClient, pidlItem: PCIDLIST_ABSOLUTE, flags: NMCSAEI_FLAGS): HRESULT {.stdcall.}
  IInitializeWithBindCtx* {.pure.} = object
    lpVtbl*: ptr IInitializeWithBindCtxVtbl
  IInitializeWithBindCtxVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IInitializeWithBindCtx, pbc: ptr IBindCtx): HRESULT {.stdcall.}
  IShellItemFilter* {.pure.} = object
    lpVtbl*: ptr IShellItemFilterVtbl
  IShellItemFilterVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    IncludeItem*: proc(self: ptr IShellItemFilter, psi: ptr IShellItem): HRESULT {.stdcall.}
    GetEnumFlagsForItem*: proc(self: ptr IShellItemFilter, psi: ptr IShellItem, pgrfFlags: ptr SHCONTF): HRESULT {.stdcall.}
  INameSpaceTreeControl* {.pure.} = object
    lpVtbl*: ptr INameSpaceTreeControlVtbl
  INameSpaceTreeControlVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr INameSpaceTreeControl, hwndParent: HWND, prc: ptr RECT, nsctsFlags: NSTCSTYLE): HRESULT {.stdcall.}
    TreeAdvise*: proc(self: ptr INameSpaceTreeControl, punk: ptr IUnknown, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    TreeUnadvise*: proc(self: ptr INameSpaceTreeControl, dwCookie: DWORD): HRESULT {.stdcall.}
    AppendRoot*: proc(self: ptr INameSpaceTreeControl, psiRoot: ptr IShellItem, grfEnumFlags: SHCONTF, grfRootStyle: NSTCROOTSTYLE, pif: ptr IShellItemFilter): HRESULT {.stdcall.}
    InsertRoot*: proc(self: ptr INameSpaceTreeControl, iIndex: int32, psiRoot: ptr IShellItem, grfEnumFlags: SHCONTF, grfRootStyle: NSTCROOTSTYLE, pif: ptr IShellItemFilter): HRESULT {.stdcall.}
    RemoveRoot*: proc(self: ptr INameSpaceTreeControl, psiRoot: ptr IShellItem): HRESULT {.stdcall.}
    RemoveAllRoots*: proc(self: ptr INameSpaceTreeControl): HRESULT {.stdcall.}
    GetRootItems*: proc(self: ptr INameSpaceTreeControl, ppsiaRootItems: ptr ptr IShellItemArray): HRESULT {.stdcall.}
    SetItemState*: proc(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, nstcisMask: NSTCITEMSTATE, nstcisFlags: NSTCITEMSTATE): HRESULT {.stdcall.}
    GetItemState*: proc(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, nstcisMask: NSTCITEMSTATE, pnstcisFlags: ptr NSTCITEMSTATE): HRESULT {.stdcall.}
    GetSelectedItems*: proc(self: ptr INameSpaceTreeControl, psiaItems: ptr ptr IShellItemArray): HRESULT {.stdcall.}
    GetItemCustomState*: proc(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, piStateNumber: ptr int32): HRESULT {.stdcall.}
    SetItemCustomState*: proc(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, iStateNumber: int32): HRESULT {.stdcall.}
    EnsureItemVisible*: proc(self: ptr INameSpaceTreeControl, psi: ptr IShellItem): HRESULT {.stdcall.}
    SetTheme*: proc(self: ptr INameSpaceTreeControl, pszTheme: LPCWSTR): HRESULT {.stdcall.}
    GetNextItem*: proc(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, nstcgi: int32, ppsiNext: ptr ptr IShellItem): HRESULT {.stdcall.}
    HitTest*: proc(self: ptr INameSpaceTreeControl, ppt: ptr POINT, ppsiOut: ptr ptr IShellItem): HRESULT {.stdcall.}
    GetItemRect*: proc(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, prect: ptr RECT): HRESULT {.stdcall.}
    CollapseAll*: proc(self: ptr INameSpaceTreeControl): HRESULT {.stdcall.}
  INameSpaceTreeControl2* {.pure.} = object
    lpVtbl*: ptr INameSpaceTreeControl2Vtbl
  INameSpaceTreeControl2Vtbl* {.pure, inheritable.} = object of INameSpaceTreeControlVtbl
    SetControlStyle*: proc(self: ptr INameSpaceTreeControl2, nstcsMask: NSTCSTYLE, nstcsStyle: NSTCSTYLE): HRESULT {.stdcall.}
    GetControlStyle*: proc(self: ptr INameSpaceTreeControl2, nstcsMask: NSTCSTYLE, pnstcsStyle: ptr NSTCSTYLE): HRESULT {.stdcall.}
    SetControlStyle2*: proc(self: ptr INameSpaceTreeControl2, nstcsMask: int32, nstcsStyle: int32): HRESULT {.stdcall.}
    GetControlStyle2*: proc(self: ptr INameSpaceTreeControl2, nstcsMask: int32, pnstcsStyle: ptr int32): HRESULT {.stdcall.}
  INameSpaceTreeControlEvents* {.pure.} = object
    lpVtbl*: ptr INameSpaceTreeControlEventsVtbl
  INameSpaceTreeControlEventsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnItemClick*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, nstceHitTest: NSTCEHITTEST, nstceClickType: NSTCECLICKTYPE): HRESULT {.stdcall.}
    OnPropertyItemCommit*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.stdcall.}
    OnItemStateChanging*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, nstcisMask: NSTCITEMSTATE, nstcisState: NSTCITEMSTATE): HRESULT {.stdcall.}
    OnItemStateChanged*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, nstcisMask: NSTCITEMSTATE, nstcisState: NSTCITEMSTATE): HRESULT {.stdcall.}
    OnSelectionChanged*: proc(self: ptr INameSpaceTreeControlEvents, psiaSelection: ptr IShellItemArray): HRESULT {.stdcall.}
    OnKeyboardInput*: proc(self: ptr INameSpaceTreeControlEvents, uMsg: UINT, wParam: WPARAM, lParam: LPARAM): HRESULT {.stdcall.}
    OnBeforeExpand*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.stdcall.}
    OnAfterExpand*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.stdcall.}
    OnBeginLabelEdit*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.stdcall.}
    OnEndLabelEdit*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.stdcall.}
    OnGetToolTip*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, pszTip: LPWSTR, cchTip: int32): HRESULT {.stdcall.}
    OnBeforeItemDelete*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.stdcall.}
    OnItemAdded*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, fIsRoot: WINBOOL): HRESULT {.stdcall.}
    OnItemDeleted*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, fIsRoot: WINBOOL): HRESULT {.stdcall.}
    OnBeforeContextMenu*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    OnAfterContextMenu*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, pcmIn: ptr IContextMenu, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    OnBeforeStateImageChange*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.stdcall.}
    OnGetDefaultIconIndex*: proc(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, piDefaultIcon: ptr int32, piOpenIcon: ptr int32): HRESULT {.stdcall.}
  INameSpaceTreeControlDropHandler* {.pure.} = object
    lpVtbl*: ptr INameSpaceTreeControlDropHandlerVtbl
  INameSpaceTreeControlDropHandlerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnDragEnter*: proc(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem, psiaData: ptr IShellItemArray, fOutsideSource: WINBOOL, grfKeyState: DWORD, pdwEffect: ptr DWORD): HRESULT {.stdcall.}
    OnDragOver*: proc(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem, psiaData: ptr IShellItemArray, grfKeyState: DWORD, pdwEffect: ptr DWORD): HRESULT {.stdcall.}
    OnDragPosition*: proc(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem, psiaData: ptr IShellItemArray, iNewPosition: int32, iOldPosition: int32): HRESULT {.stdcall.}
    OnDrop*: proc(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem, psiaData: ptr IShellItemArray, iPosition: int32, grfKeyState: DWORD, pdwEffect: ptr DWORD): HRESULT {.stdcall.}
    OnDropPosition*: proc(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem, psiaData: ptr IShellItemArray, iNewPosition: int32, iOldPosition: int32): HRESULT {.stdcall.}
    OnDragLeave*: proc(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem): HRESULT {.stdcall.}
  INameSpaceTreeAccessible* {.pure.} = object
    lpVtbl*: ptr INameSpaceTreeAccessibleVtbl
  INameSpaceTreeAccessibleVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnGetDefaultAccessibilityAction*: proc(self: ptr INameSpaceTreeAccessible, psi: ptr IShellItem, pbstrDefaultAction: ptr BSTR): HRESULT {.stdcall.}
    OnDoDefaultAccessibilityAction*: proc(self: ptr INameSpaceTreeAccessible, psi: ptr IShellItem): HRESULT {.stdcall.}
    OnGetAccessibilityRole*: proc(self: ptr INameSpaceTreeAccessible, psi: ptr IShellItem, pvarRole: ptr VARIANT): HRESULT {.stdcall.}
  INameSpaceTreeControlCustomDraw* {.pure.} = object
    lpVtbl*: ptr INameSpaceTreeControlCustomDrawVtbl
  INameSpaceTreeControlCustomDrawVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    PrePaint*: proc(self: ptr INameSpaceTreeControlCustomDraw, hdc: HDC, prc: ptr RECT, plres: ptr LRESULT): HRESULT {.stdcall.}
    PostPaint*: proc(self: ptr INameSpaceTreeControlCustomDraw, hdc: HDC, prc: ptr RECT): HRESULT {.stdcall.}
    ItemPrePaint*: proc(self: ptr INameSpaceTreeControlCustomDraw, hdc: HDC, prc: ptr RECT, pnstccdItem: ptr NSTCCUSTOMDRAW, pclrText: ptr COLORREF, pclrTextBk: ptr COLORREF, plres: ptr LRESULT): HRESULT {.stdcall.}
    ItemPostPaint*: proc(self: ptr INameSpaceTreeControlCustomDraw, hdc: HDC, prc: ptr RECT, pnstccdItem: ptr NSTCCUSTOMDRAW): HRESULT {.stdcall.}
  INameSpaceTreeControlFolderCapabilities* {.pure.} = object
    lpVtbl*: ptr INameSpaceTreeControlFolderCapabilitiesVtbl
  INameSpaceTreeControlFolderCapabilitiesVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetFolderCapabilities*: proc(self: ptr INameSpaceTreeControlFolderCapabilities, nfcMask: int32, pnfcValue: ptr int32): HRESULT {.stdcall.}
  IPreviewHandler* {.pure.} = object
    lpVtbl*: ptr IPreviewHandlerVtbl
  IPreviewHandlerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetWindow*: proc(self: ptr IPreviewHandler, hwnd: HWND, prc: ptr RECT): HRESULT {.stdcall.}
    SetRect*: proc(self: ptr IPreviewHandler, prc: ptr RECT): HRESULT {.stdcall.}
    DoPreview*: proc(self: ptr IPreviewHandler): HRESULT {.stdcall.}
    Unload*: proc(self: ptr IPreviewHandler): HRESULT {.stdcall.}
    SetFocus*: proc(self: ptr IPreviewHandler): HRESULT {.stdcall.}
    QueryFocus*: proc(self: ptr IPreviewHandler, phwnd: ptr HWND): HRESULT {.stdcall.}
    TranslateAccelerator*: proc(self: ptr IPreviewHandler, pmsg: ptr MSG): HRESULT {.stdcall.}
  IPreviewHandlerFrame* {.pure.} = object
    lpVtbl*: ptr IPreviewHandlerFrameVtbl
  IPreviewHandlerFrameVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetWindowContext*: proc(self: ptr IPreviewHandlerFrame, pinfo: ptr PREVIEWHANDLERFRAMEINFO): HRESULT {.stdcall.}
    TranslateAccelerator*: proc(self: ptr IPreviewHandlerFrame, pmsg: ptr MSG): HRESULT {.stdcall.}
  ITrayDeskBand* {.pure.} = object
    lpVtbl*: ptr ITrayDeskBandVtbl
  ITrayDeskBandVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ShowDeskBand*: proc(self: ptr ITrayDeskBand, clsid: REFCLSID): HRESULT {.stdcall.}
    HideDeskBand*: proc(self: ptr ITrayDeskBand, clsid: REFCLSID): HRESULT {.stdcall.}
    IsDeskBandShown*: proc(self: ptr ITrayDeskBand, clsid: REFCLSID): HRESULT {.stdcall.}
    DeskBandRegistrationChanged*: proc(self: ptr ITrayDeskBand): HRESULT {.stdcall.}
  IBandHost* {.pure.} = object
    lpVtbl*: ptr IBandHostVtbl
  IBandHostVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CreateBand*: proc(self: ptr IBandHost, rclsidBand: REFCLSID, fAvailable: WINBOOL, fVisible: WINBOOL, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    SetBandAvailability*: proc(self: ptr IBandHost, rclsidBand: REFCLSID, fAvailable: WINBOOL): HRESULT {.stdcall.}
    DestroyBand*: proc(self: ptr IBandHost, rclsidBand: REFCLSID): HRESULT {.stdcall.}
  IExplorerPaneVisibility* {.pure.} = object
    lpVtbl*: ptr IExplorerPaneVisibilityVtbl
  IExplorerPaneVisibilityVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetPaneState*: proc(self: ptr IExplorerPaneVisibility, ep: REFEXPLORERPANE, peps: ptr EXPLORERPANESTATE): HRESULT {.stdcall.}
  IContextMenuCB* {.pure.} = object
    lpVtbl*: ptr IContextMenuCBVtbl
  IContextMenuCBVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    CallBack*: proc(self: ptr IContextMenuCB, psf: ptr IShellFolder, hwndOwner: HWND, pdtobj: ptr IDataObject, uMsg: UINT, wParam: WPARAM, lParam: LPARAM): HRESULT {.stdcall.}
  IDefaultExtractIconInit* {.pure.} = object
    lpVtbl*: ptr IDefaultExtractIconInitVtbl
  IDefaultExtractIconInitVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetFlags*: proc(self: ptr IDefaultExtractIconInit, uFlags: UINT): HRESULT {.stdcall.}
    SetKey*: proc(self: ptr IDefaultExtractIconInit, hkey: HKEY): HRESULT {.stdcall.}
    SetNormalIcon*: proc(self: ptr IDefaultExtractIconInit, pszFile: LPCWSTR, iIcon: int32): HRESULT {.stdcall.}
    SetOpenIcon*: proc(self: ptr IDefaultExtractIconInit, pszFile: LPCWSTR, iIcon: int32): HRESULT {.stdcall.}
    SetShortcutIcon*: proc(self: ptr IDefaultExtractIconInit, pszFile: LPCWSTR, iIcon: int32): HRESULT {.stdcall.}
    SetDefaultIcon*: proc(self: ptr IDefaultExtractIconInit, pszFile: LPCWSTR, iIcon: int32): HRESULT {.stdcall.}
  IExplorerCommand* {.pure.} = object
    lpVtbl*: ptr IExplorerCommandVtbl
  IExplorerCommandVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetTitle*: proc(self: ptr IExplorerCommand, psiItemArray: ptr IShellItemArray, ppszName: ptr LPWSTR): HRESULT {.stdcall.}
    GetIcon*: proc(self: ptr IExplorerCommand, psiItemArray: ptr IShellItemArray, ppszIcon: ptr LPWSTR): HRESULT {.stdcall.}
    GetToolTip*: proc(self: ptr IExplorerCommand, psiItemArray: ptr IShellItemArray, ppszInfotip: ptr LPWSTR): HRESULT {.stdcall.}
    GetCanonicalName*: proc(self: ptr IExplorerCommand, pguidCommandName: ptr GUID): HRESULT {.stdcall.}
    GetState*: proc(self: ptr IExplorerCommand, psiItemArray: ptr IShellItemArray, fOkToBeSlow: WINBOOL, pCmdState: ptr EXPCMDSTATE): HRESULT {.stdcall.}
    Invoke*: proc(self: ptr IExplorerCommand, psiItemArray: ptr IShellItemArray, pbc: ptr IBindCtx): HRESULT {.stdcall.}
    GetFlags*: proc(self: ptr IExplorerCommand, pFlags: ptr EXPCMDFLAGS): HRESULT {.stdcall.}
    EnumSubCommands*: proc(self: ptr IExplorerCommand, ppEnum: ptr ptr IEnumExplorerCommand): HRESULT {.stdcall.}
  IExplorerCommandState* {.pure.} = object
    lpVtbl*: ptr IExplorerCommandStateVtbl
  IExplorerCommandStateVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetState*: proc(self: ptr IExplorerCommandState, psiItemArray: ptr IShellItemArray, fOkToBeSlow: WINBOOL, pCmdState: ptr EXPCMDSTATE): HRESULT {.stdcall.}
  IInitializeCommand* {.pure.} = object
    lpVtbl*: ptr IInitializeCommandVtbl
  IInitializeCommandVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IInitializeCommand, pszCommandName: LPCWSTR, ppb: ptr IPropertyBag): HRESULT {.stdcall.}
  IEnumExplorerCommand* {.pure.} = object
    lpVtbl*: ptr IEnumExplorerCommandVtbl
  IEnumExplorerCommandVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumExplorerCommand, celt: ULONG, pUICommand: ptr ptr IExplorerCommand, pceltFetched: ptr ULONG): HRESULT {.stdcall.}
    Skip*: proc(self: ptr IEnumExplorerCommand, celt: ULONG): HRESULT {.stdcall.}
    Reset*: proc(self: ptr IEnumExplorerCommand): HRESULT {.stdcall.}
    Clone*: proc(self: ptr IEnumExplorerCommand, ppenum: ptr ptr IEnumExplorerCommand): HRESULT {.stdcall.}
  IExplorerCommandProvider* {.pure.} = object
    lpVtbl*: ptr IExplorerCommandProviderVtbl
  IExplorerCommandProviderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetCommands*: proc(self: ptr IExplorerCommandProvider, punkSite: ptr IUnknown, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetCommand*: proc(self: ptr IExplorerCommandProvider, rguidCommandId: REFGUID, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IInitializeNetworkFolder* {.pure.} = object
    lpVtbl*: ptr IInitializeNetworkFolderVtbl
  IInitializeNetworkFolderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IInitializeNetworkFolder, pidl: PCIDLIST_ABSOLUTE, pidlTarget: PCIDLIST_ABSOLUTE, uDisplayType: UINT, pszResName: LPCWSTR, pszProvider: LPCWSTR): HRESULT {.stdcall.}
  IOpenControlPanel* {.pure.} = object
    lpVtbl*: ptr IOpenControlPanelVtbl
  IOpenControlPanelVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Open*: proc(self: ptr IOpenControlPanel, pszName: LPCWSTR, pszPage: LPCWSTR, punkSite: ptr IUnknown): HRESULT {.stdcall.}
    GetPath*: proc(self: ptr IOpenControlPanel, pszName: LPCWSTR, pszPath: LPWSTR, cchPath: UINT): HRESULT {.stdcall.}
    GetCurrentView*: proc(self: ptr IOpenControlPanel, pView: ptr int32): HRESULT {.stdcall.}
  IComputerInfoChangeNotify* {.pure.} = object
    lpVtbl*: ptr IComputerInfoChangeNotifyVtbl
  IComputerInfoChangeNotifyVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ComputerInfoChanged*: proc(self: ptr IComputerInfoChangeNotify): HRESULT {.stdcall.}
  IFileSystemBindData2* {.pure.} = object
    lpVtbl*: ptr IFileSystemBindData2Vtbl
  IFileSystemBindData2Vtbl* {.pure, inheritable.} = object of IFileSystemBindDataVtbl
    SetFileID*: proc(self: ptr IFileSystemBindData2, liFileID: LARGE_INTEGER): HRESULT {.stdcall.}
    GetFileID*: proc(self: ptr IFileSystemBindData2, pliFileID: ptr LARGE_INTEGER): HRESULT {.stdcall.}
    SetJunctionCLSID*: proc(self: ptr IFileSystemBindData2, clsid: REFCLSID): HRESULT {.stdcall.}
    GetJunctionCLSID*: proc(self: ptr IFileSystemBindData2, pclsid: ptr CLSID): HRESULT {.stdcall.}
  ICustomDestinationList* {.pure.} = object
    lpVtbl*: ptr ICustomDestinationListVtbl
  ICustomDestinationListVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetAppID*: proc(self: ptr ICustomDestinationList, pszAppID: LPCWSTR): HRESULT {.stdcall.}
    BeginList*: proc(self: ptr ICustomDestinationList, pcMinSlots: ptr UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    AppendCategory*: proc(self: ptr ICustomDestinationList, pszCategory: LPCWSTR, poa: ptr IObjectArray): HRESULT {.stdcall.}
    AppendKnownCategory*: proc(self: ptr ICustomDestinationList, category: int32): HRESULT {.stdcall.}
    AddUserTasks*: proc(self: ptr ICustomDestinationList, poa: ptr IObjectArray): HRESULT {.stdcall.}
    CommitList*: proc(self: ptr ICustomDestinationList): HRESULT {.stdcall.}
    GetRemovedDestinations*: proc(self: ptr ICustomDestinationList, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    DeleteList*: proc(self: ptr ICustomDestinationList, pszAppID: LPCWSTR): HRESULT {.stdcall.}
    AbortList*: proc(self: ptr ICustomDestinationList): HRESULT {.stdcall.}
  IApplicationDestinations* {.pure.} = object
    lpVtbl*: ptr IApplicationDestinationsVtbl
  IApplicationDestinationsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetAppID*: proc(self: ptr IApplicationDestinations, pszAppID: LPCWSTR): HRESULT {.stdcall.}
    RemoveDestination*: proc(self: ptr IApplicationDestinations, punk: ptr IUnknown): HRESULT {.stdcall.}
    RemoveAllDestinations*: proc(self: ptr IApplicationDestinations): HRESULT {.stdcall.}
  IApplicationDocumentLists* {.pure.} = object
    lpVtbl*: ptr IApplicationDocumentListsVtbl
  IApplicationDocumentListsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetAppID*: proc(self: ptr IApplicationDocumentLists, pszAppID: LPCWSTR): HRESULT {.stdcall.}
    GetList*: proc(self: ptr IApplicationDocumentLists, listtype: int32, cItemsDesired: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IObjectWithAppUserModelID* {.pure.} = object
    lpVtbl*: ptr IObjectWithAppUserModelIDVtbl
  IObjectWithAppUserModelIDVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetAppID*: proc(self: ptr IObjectWithAppUserModelID, pszAppID: LPCWSTR): HRESULT {.stdcall.}
    GetAppID*: proc(self: ptr IObjectWithAppUserModelID, ppszAppID: ptr LPWSTR): HRESULT {.stdcall.}
  IObjectWithProgID* {.pure.} = object
    lpVtbl*: ptr IObjectWithProgIDVtbl
  IObjectWithProgIDVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetProgID*: proc(self: ptr IObjectWithProgID, pszProgID: LPCWSTR): HRESULT {.stdcall.}
    GetProgID*: proc(self: ptr IObjectWithProgID, ppszProgID: ptr LPWSTR): HRESULT {.stdcall.}
  IUpdateIDList* {.pure.} = object
    lpVtbl*: ptr IUpdateIDListVtbl
  IUpdateIDListVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Update*: proc(self: ptr IUpdateIDList, pbc: ptr IBindCtx, pidlIn: PCUITEMID_CHILD, ppidlOut: ptr PITEMID_CHILD): HRESULT {.stdcall.}
  IDesktopGadget* {.pure.} = object
    lpVtbl*: ptr IDesktopGadgetVtbl
  IDesktopGadgetVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    RunGadget*: proc(self: ptr IDesktopGadget, gadgetPath: LPCWSTR): HRESULT {.stdcall.}
  IDesktopWallpaper* {.pure.} = object
    lpVtbl*: ptr IDesktopWallpaperVtbl
  IDesktopWallpaperVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetWallpaper*: proc(self: ptr IDesktopWallpaper, monitorID: LPCWSTR, wallpaper: LPCWSTR): HRESULT {.stdcall.}
    GetWallpaper*: proc(self: ptr IDesktopWallpaper, monitorID: LPCWSTR, wallpaper: ptr LPWSTR): HRESULT {.stdcall.}
    GetMonitorDevicePathAt*: proc(self: ptr IDesktopWallpaper, monitorIndex: UINT, monitorID: ptr LPWSTR): HRESULT {.stdcall.}
    GetMonitorDevicePathCount*: proc(self: ptr IDesktopWallpaper, count: ptr UINT): HRESULT {.stdcall.}
    GetMonitorRECT*: proc(self: ptr IDesktopWallpaper, monitorID: LPCWSTR, displayRect: ptr RECT): HRESULT {.stdcall.}
    SetBackgroundColor*: proc(self: ptr IDesktopWallpaper, color: COLORREF): HRESULT {.stdcall.}
    GetBackgroundColor*: proc(self: ptr IDesktopWallpaper, color: ptr COLORREF): HRESULT {.stdcall.}
    SetPosition*: proc(self: ptr IDesktopWallpaper, position: int32): HRESULT {.stdcall.}
    GetPosition*: proc(self: ptr IDesktopWallpaper, position: ptr int32): HRESULT {.stdcall.}
    SetSlideshow*: proc(self: ptr IDesktopWallpaper, items: ptr IShellItemArray): HRESULT {.stdcall.}
    GetSlideshow*: proc(self: ptr IDesktopWallpaper, items: ptr ptr IShellItemArray): HRESULT {.stdcall.}
    SetSlideshowOptions*: proc(self: ptr IDesktopWallpaper, options: int32, slideshowTick: UINT): HRESULT {.stdcall.}
    GetSlideshowOptions*: proc(self: ptr IDesktopWallpaper, options: ptr int32, slideshowTick: ptr UINT): HRESULT {.stdcall.}
    AdvanceSlideshow*: proc(self: ptr IDesktopWallpaper, monitorID: LPCWSTR, direction: int32): HRESULT {.stdcall.}
    GetStatus*: proc(self: ptr IDesktopWallpaper, state: ptr int32): HRESULT {.stdcall.}
    Enable*: proc(self: ptr IDesktopWallpaper, enable: WINBOOL): HRESULT {.stdcall.}
  IHomeGroup* {.pure.} = object
    lpVtbl*: ptr IHomeGroupVtbl
  IHomeGroupVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    IsMember*: proc(self: ptr IHomeGroup, member: ptr WINBOOL): HRESULT {.stdcall.}
    ShowSharingWizard*: proc(self: ptr IHomeGroup, owner: HWND, sharingchoices: ptr int32): HRESULT {.stdcall.}
  IInitializeWithPropertyStore* {.pure.} = object
    lpVtbl*: ptr IInitializeWithPropertyStoreVtbl
  IInitializeWithPropertyStoreVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IInitializeWithPropertyStore, pps: ptr IPropertyStore): HRESULT {.stdcall.}
  IOpenSearchSource* {.pure.} = object
    lpVtbl*: ptr IOpenSearchSourceVtbl
  IOpenSearchSourceVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetResults*: proc(self: ptr IOpenSearchSource, hwnd: HWND, pszQuery: LPCWSTR, dwStartIndex: DWORD, dwCount: DWORD, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
  IShellLibrary* {.pure.} = object
    lpVtbl*: ptr IShellLibraryVtbl
  IShellLibraryVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    LoadLibraryFromItem*: proc(self: ptr IShellLibrary, psiLibrary: ptr IShellItem, grfMode: DWORD): HRESULT {.stdcall.}
    LoadLibraryFromKnownFolder*: proc(self: ptr IShellLibrary, kfidLibrary: REFKNOWNFOLDERID, grfMode: DWORD): HRESULT {.stdcall.}
    AddFolder*: proc(self: ptr IShellLibrary, psiLocation: ptr IShellItem): HRESULT {.stdcall.}
    RemoveFolder*: proc(self: ptr IShellLibrary, psiLocation: ptr IShellItem): HRESULT {.stdcall.}
    GetFolders*: proc(self: ptr IShellLibrary, lff: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    ResolveFolder*: proc(self: ptr IShellLibrary, psiFolderToResolve: ptr IShellItem, dwTimeout: DWORD, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    GetDefaultSaveFolder*: proc(self: ptr IShellLibrary, dsft: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.stdcall.}
    SetDefaultSaveFolder*: proc(self: ptr IShellLibrary, dsft: int32, psi: ptr IShellItem): HRESULT {.stdcall.}
    GetOptions*: proc(self: ptr IShellLibrary, plofOptions: ptr int32): HRESULT {.stdcall.}
    SetOptions*: proc(self: ptr IShellLibrary, lofMask: int32, lofOptions: int32): HRESULT {.stdcall.}
    GetFolderType*: proc(self: ptr IShellLibrary, pftid: ptr FOLDERTYPEID): HRESULT {.stdcall.}
    SetFolderType*: proc(self: ptr IShellLibrary, ftid: REFFOLDERTYPEID): HRESULT {.stdcall.}
    GetIcon*: proc(self: ptr IShellLibrary, ppszIcon: ptr LPWSTR): HRESULT {.stdcall.}
    SetIcon*: proc(self: ptr IShellLibrary, pszIcon: LPCWSTR): HRESULT {.stdcall.}
    Commit*: proc(self: ptr IShellLibrary): HRESULT {.stdcall.}
    Save*: proc(self: ptr IShellLibrary, psiFolderToSaveIn: ptr IShellItem, pszLibraryName: LPCWSTR, lsf: int32, ppsiSavedTo: ptr ptr IShellItem): HRESULT {.stdcall.}
    SaveInKnownFolder*: proc(self: ptr IShellLibrary, kfidToSaveIn: REFKNOWNFOLDERID, pszLibraryName: LPCWSTR, lsf: int32, ppsiSavedTo: ptr ptr IShellItem): HRESULT {.stdcall.}
  IPlaybackManagerEvents* {.pure.} = object
    lpVtbl*: ptr IPlaybackManagerEventsVtbl
  IPlaybackManagerEventsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnPlaybackManagerEvent*: proc(self: ptr IPlaybackManagerEvents, dwSessionId: DWORD, mediaEvent: int32): HRESULT {.stdcall.}
  IPlaybackManager* {.pure.} = object
    lpVtbl*: ptr IPlaybackManagerVtbl
  IPlaybackManagerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Advise*: proc(self: ptr IPlaybackManager, typ: int32, pEvents: ptr IPlaybackManagerEvents, pdwSessionId: ptr DWORD): HRESULT {.stdcall.}
    Unadvise*: proc(self: ptr IPlaybackManager, dwSessionId: DWORD): HRESULT {.stdcall.}
    ChangeSessionState*: proc(self: ptr IPlaybackManager, dwSessionId: DWORD, state: int32, mute: int32): HRESULT {.stdcall.}
  IDefaultFolderMenuInitialize* {.pure.} = object
    lpVtbl*: ptr IDefaultFolderMenuInitializeVtbl
  IDefaultFolderMenuInitializeVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IDefaultFolderMenuInitialize, hwnd: HWND, pcmcb: ptr IContextMenuCB, pidlFolder: PCIDLIST_ABSOLUTE, psf: ptr IShellFolder, cidl: UINT, apidl: PCUITEMID_CHILD_ARRAY, punkAssociation: ptr IUnknown, cKeys: UINT, aKeys: ptr HKEY): HRESULT {.stdcall.}
    SetMenuRestrictions*: proc(self: ptr IDefaultFolderMenuInitialize, dfmrValues: int32): HRESULT {.stdcall.}
    GetMenuRestrictions*: proc(self: ptr IDefaultFolderMenuInitialize, dfmrMask: int32, pdfmrValues: ptr int32): HRESULT {.stdcall.}
    SetHandlerClsid*: proc(self: ptr IDefaultFolderMenuInitialize, rclsid: REFCLSID): HRESULT {.stdcall.}
  IApplicationActivationManager* {.pure.} = object
    lpVtbl*: ptr IApplicationActivationManagerVtbl
  IApplicationActivationManagerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    ActivateApplication*: proc(self: ptr IApplicationActivationManager, appUserModelId: LPCWSTR, arguments: LPCWSTR, options: int32, processId: ptr DWORD): HRESULT {.stdcall.}
    ActivateForFile*: proc(self: ptr IApplicationActivationManager, appUserModelId: LPCWSTR, itemArray: ptr IShellItemArray, verb: LPCWSTR, processId: ptr DWORD): HRESULT {.stdcall.}
    ActivateForProtocol*: proc(self: ptr IApplicationActivationManager, appUserModelId: LPCWSTR, itemArray: ptr IShellItemArray, processId: ptr DWORD): HRESULT {.stdcall.}
  IAssocHandlerInvoker* {.pure.} = object
    lpVtbl*: ptr IAssocHandlerInvokerVtbl
  IAssocHandlerInvokerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SupportsSelection*: proc(self: ptr IAssocHandlerInvoker): HRESULT {.stdcall.}
    Invoke*: proc(self: ptr IAssocHandlerInvoker): HRESULT {.stdcall.}
  IAssocHandler* {.pure.} = object
    lpVtbl*: ptr IAssocHandlerVtbl
  IAssocHandlerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetName*: proc(self: ptr IAssocHandler, ppsz: ptr LPWSTR): HRESULT {.stdcall.}
    GetUIName*: proc(self: ptr IAssocHandler, ppsz: ptr LPWSTR): HRESULT {.stdcall.}
    GetIconLocation*: proc(self: ptr IAssocHandler, ppszPath: ptr LPWSTR, pIndex: ptr int32): HRESULT {.stdcall.}
    IsRecommended*: proc(self: ptr IAssocHandler): HRESULT {.stdcall.}
    MakeDefault*: proc(self: ptr IAssocHandler, pszDescription: LPCWSTR): HRESULT {.stdcall.}
    Invoke*: proc(self: ptr IAssocHandler, pdo: ptr IDataObject): HRESULT {.stdcall.}
    CreateInvoker*: proc(self: ptr IAssocHandler, pdo: ptr IDataObject, ppInvoker: ptr ptr IAssocHandlerInvoker): HRESULT {.stdcall.}
  IEnumAssocHandlers* {.pure.} = object
    lpVtbl*: ptr IEnumAssocHandlersVtbl
  IEnumAssocHandlersVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Next*: proc(self: ptr IEnumAssocHandlers, celt: ULONG, rgelt: ptr ptr IAssocHandler, pceltFetched: ptr ULONG): HRESULT {.stdcall.}
  IDataObjectProvider* {.pure.} = object
    lpVtbl*: ptr IDataObjectProviderVtbl
  IDataObjectProviderVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetDataObject*: proc(self: ptr IDataObjectProvider, dataObject: ptr ptr IDataObject): HRESULT {.stdcall.}
    SetDataObject*: proc(self: ptr IDataObjectProvider, dataObject: ptr IDataObject): HRESULT {.stdcall.}
  IDataTransferManagerInterop* {.pure.} = object
    lpVtbl*: ptr IDataTransferManagerInteropVtbl
  IDataTransferManagerInteropVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetForWindow*: proc(self: ptr IDataTransferManagerInterop, appWindow: HWND, riid: REFIID, dataTransferManager: ptr pointer): HRESULT {.stdcall.}
    ShowShareUIForWindow*: proc(self: ptr IDataTransferManagerInterop, appWindow: HWND): HRESULT {.stdcall.}
  IFrameworkInputPaneHandler* {.pure.} = object
    lpVtbl*: ptr IFrameworkInputPaneHandlerVtbl
  IFrameworkInputPaneHandlerVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Showing*: proc(self: ptr IFrameworkInputPaneHandler, prcInputPaneScreenLocation: ptr RECT, fEnsureFocusedElementInView: WINBOOL): HRESULT {.stdcall.}
    Hiding*: proc(self: ptr IFrameworkInputPaneHandler, fEnsureFocusedElementInView: WINBOOL): HRESULT {.stdcall.}
  IFrameworkInputPane* {.pure.} = object
    lpVtbl*: ptr IFrameworkInputPaneVtbl
  IFrameworkInputPaneVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Advise*: proc(self: ptr IFrameworkInputPane, pWindow: ptr IUnknown, pHandler: ptr IFrameworkInputPaneHandler, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    AdviseWithHWND*: proc(self: ptr IFrameworkInputPane, hwnd: HWND, pHandler: ptr IFrameworkInputPaneHandler, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    Unadvise*: proc(self: ptr IFrameworkInputPane, dwCookie: DWORD): HRESULT {.stdcall.}
    Location*: proc(self: ptr IFrameworkInputPane, prcInputPaneScreenLocation: ptr RECT): HRESULT {.stdcall.}
  ISearchableApplication* {.pure.} = object
    lpVtbl*: ptr ISearchableApplicationVtbl
  ISearchableApplicationVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetSearchWindow*: proc(self: ptr ISearchableApplication, hwnd: ptr HWND): HRESULT {.stdcall.}
  IAccessibilityDockingServiceCallback* {.pure.} = object
    lpVtbl*: ptr IAccessibilityDockingServiceCallbackVtbl
  IAccessibilityDockingServiceCallbackVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Undocked*: proc(self: ptr IAccessibilityDockingServiceCallback, undockReason: int32): HRESULT {.stdcall.}
  IAccessibilityDockingService* {.pure.} = object
    lpVtbl*: ptr IAccessibilityDockingServiceVtbl
  IAccessibilityDockingServiceVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetAvailableSize*: proc(self: ptr IAccessibilityDockingService, hMonitor: HMONITOR, pcxFixed: ptr UINT, pcyMax: ptr UINT): HRESULT {.stdcall.}
    DockWindow*: proc(self: ptr IAccessibilityDockingService, hwnd: HWND, hMonitor: HMONITOR, cyRequested: UINT, pCallback: ptr IAccessibilityDockingServiceCallback): HRESULT {.stdcall.}
    UndockWindow*: proc(self: ptr IAccessibilityDockingService, hwnd: HWND): HRESULT {.stdcall.}
  IAppVisibilityEvents* {.pure.} = object
    lpVtbl*: ptr IAppVisibilityEventsVtbl
  IAppVisibilityEventsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    AppVisibilityOnMonitorChanged*: proc(self: ptr IAppVisibilityEvents, hMonitor: HMONITOR, previousMode: int32, currentMode: int32): HRESULT {.stdcall.}
    LauncherVisibilityChange*: proc(self: ptr IAppVisibilityEvents, currentVisibleState: WINBOOL): HRESULT {.stdcall.}
  IAppVisibility* {.pure.} = object
    lpVtbl*: ptr IAppVisibilityVtbl
  IAppVisibilityVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetAppVisibilityOnMonitor*: proc(self: ptr IAppVisibility, hMonitor: HMONITOR, pMode: ptr int32): HRESULT {.stdcall.}
    IsLauncherVisible*: proc(self: ptr IAppVisibility, pfVisible: ptr WINBOOL): HRESULT {.stdcall.}
    Advise*: proc(self: ptr IAppVisibility, pCallback: ptr IAppVisibilityEvents, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    Unadvise*: proc(self: ptr IAppVisibility, dwCookie: DWORD): HRESULT {.stdcall.}
  IPackageExecutionStateChangeNotification* {.pure.} = object
    lpVtbl*: ptr IPackageExecutionStateChangeNotificationVtbl
  IPackageExecutionStateChangeNotificationVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    OnStateChanged*: proc(self: ptr IPackageExecutionStateChangeNotification, pszPackageFullName: LPCWSTR, pesNewState: int32): HRESULT {.stdcall.}
  IPackageDebugSettings* {.pure.} = object
    lpVtbl*: ptr IPackageDebugSettingsVtbl
  IPackageDebugSettingsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    EnableDebugging*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR, debuggerCommandLine: LPCWSTR, environment: PZZWSTR): HRESULT {.stdcall.}
    DisableDebugging*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.stdcall.}
    Suspend*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.stdcall.}
    Resume*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.stdcall.}
    TerminateAllProcesses*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.stdcall.}
    SetTargetSessionId*: proc(self: ptr IPackageDebugSettings, sessionId: ULONG): HRESULT {.stdcall.}
    EnumerateBackgroundTasks*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR, taskCount: ptr ULONG, taskIds: ptr LPCGUID, taskNames: ptr ptr LPCWSTR): HRESULT {.stdcall.}
    ActivateBackgroundTask*: proc(self: ptr IPackageDebugSettings, taskId: LPCGUID): HRESULT {.stdcall.}
    StartServicing*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.stdcall.}
    StopServicing*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.stdcall.}
    StartSessionRedirection*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR, sessionId: ULONG): HRESULT {.stdcall.}
    StopSessionRedirection*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.stdcall.}
    GetPackageExecutionState*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR, packageExecutionState: ptr int32): HRESULT {.stdcall.}
    RegisterForPackageStateChanges*: proc(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR, pPackageExecutionStateChangeNotification: ptr IPackageExecutionStateChangeNotification, pdwCookie: ptr DWORD): HRESULT {.stdcall.}
    UnregisterForPackageStateChanges*: proc(self: ptr IPackageDebugSettings, dwCookie: DWORD): HRESULT {.stdcall.}
  IExecuteCommandApplicationHostEnvironment* {.pure.} = object
    lpVtbl*: ptr IExecuteCommandApplicationHostEnvironmentVtbl
  IExecuteCommandApplicationHostEnvironmentVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetValue*: proc(self: ptr IExecuteCommandApplicationHostEnvironment, pahe: ptr int32): HRESULT {.stdcall.}
  IExecuteCommandHost* {.pure.} = object
    lpVtbl*: ptr IExecuteCommandHostVtbl
  IExecuteCommandHostVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetUIMode*: proc(self: ptr IExecuteCommandHost, pUIMode: ptr int32): HRESULT {.stdcall.}
  IApplicationDesignModeSettings* {.pure.} = object
    lpVtbl*: ptr IApplicationDesignModeSettingsVtbl
  IApplicationDesignModeSettingsVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetNativeDisplaySize*: proc(self: ptr IApplicationDesignModeSettings, sizeNativeDisplay: SIZE): HRESULT {.stdcall.}
    SetScaleFactor*: proc(self: ptr IApplicationDesignModeSettings, scaleFactor: int32): HRESULT {.stdcall.}
    SetApplicationViewState*: proc(self: ptr IApplicationDesignModeSettings, viewState: int32): HRESULT {.stdcall.}
    ComputeApplicationSize*: proc(self: ptr IApplicationDesignModeSettings, psizeApplication: ptr SIZE): HRESULT {.stdcall.}
    IsApplicationViewStateSupported*: proc(self: ptr IApplicationDesignModeSettings, viewState: int32, sizeNativeDisplay: SIZE, scaleFactor: int32, pfSupported: ptr WINBOOL): HRESULT {.stdcall.}
    TriggerEdgeGesture*: proc(self: ptr IApplicationDesignModeSettings, edgeGestureKind: int32): HRESULT {.stdcall.}
  IInitializeWithWindow* {.pure.} = object
    lpVtbl*: ptr IInitializeWithWindowVtbl
  IInitializeWithWindowVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    Initialize*: proc(self: ptr IInitializeWithWindow, hwnd: HWND): HRESULT {.stdcall.}
  IHandlerInfo* {.pure.} = object
    lpVtbl*: ptr IHandlerInfoVtbl
  IHandlerInfoVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetApplicationDisplayName*: proc(self: ptr IHandlerInfo, value: ptr LPWSTR): HRESULT {.stdcall.}
    GetApplicationPublisher*: proc(self: ptr IHandlerInfo, value: ptr LPWSTR): HRESULT {.stdcall.}
    GetApplicationIconReference*: proc(self: ptr IHandlerInfo, value: ptr LPWSTR): HRESULT {.stdcall.}
  IHandlerActivationHost* {.pure.} = object
    lpVtbl*: ptr IHandlerActivationHostVtbl
  IHandlerActivationHostVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    BeforeCoCreateInstance*: proc(self: ptr IHandlerActivationHost, clsidHandler: REFCLSID, itemsBeingActivated: ptr IShellItemArray, handlerInfo: ptr IHandlerInfo): HRESULT {.stdcall.}
    BeforeCreateProcess*: proc(self: ptr IHandlerActivationHost, applicationPath: LPCWSTR, commandLine: LPCWSTR, handlerInfo: ptr IHandlerInfo): HRESULT {.stdcall.}

converter winim_converter_IContextMenu3*(x: ptr IContextMenu3): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IContextMenu3*(x: ptr IContextMenu3): ptr IContextMenu = cast[ptr IContextMenu](x)
converter winim_converter_IContextMenu3*(x: ptr IContextMenu3): ptr IContextMenu2 = cast[ptr IContextMenu2](x)
proc HandleMenuMsg2*(self: ptr IContextMenu3, uMsg: UINT, wParam: WPARAM, lParam: LPARAM, plResult: ptr LRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.HandleMenuMsg2(self, uMsg, wParam, lParam, plResult)
converter winim_converter_IExecuteCommand*(x: ptr IExecuteCommand): ptr IUnknown = cast[ptr IUnknown](x)
proc SetKeyState*(self: ptr IExecuteCommand, grfKeyState: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetKeyState(self, grfKeyState)
proc SetParameters*(self: ptr IExecuteCommand, pszParameters: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetParameters(self, pszParameters)
proc SetPosition*(self: ptr IExecuteCommand, pt: POINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetPosition(self, pt)
proc SetShowWindow*(self: ptr IExecuteCommand, nShow: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetShowWindow(self, nShow)
proc SetNoShowUI*(self: ptr IExecuteCommand, fNoShowUI: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetNoShowUI(self, fNoShowUI)
proc SetDirectory*(self: ptr IExecuteCommand, pszDirectory: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetDirectory(self, pszDirectory)
proc Execute*(self: ptr IExecuteCommand): HRESULT {.inline, discardable.} = self.lpVtbl.Execute(self)
converter winim_converter_IRunnableTask*(x: ptr IRunnableTask): ptr IUnknown = cast[ptr IUnknown](x)
proc Run*(self: ptr IRunnableTask): HRESULT {.inline, discardable.} = self.lpVtbl.Run(self)
proc Kill*(self: ptr IRunnableTask, bWait: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Kill(self, bWait)
proc Suspend*(self: ptr IRunnableTask): HRESULT {.inline, discardable.} = self.lpVtbl.Suspend(self)
proc Resume*(self: ptr IRunnableTask): HRESULT {.inline, discardable.} = self.lpVtbl.Resume(self)
proc IsRunning*(self: ptr IRunnableTask): ULONG {.inline, discardable.} = self.lpVtbl.IsRunning(self)
converter winim_converter_IShellTaskScheduler*(x: ptr IShellTaskScheduler): ptr IUnknown = cast[ptr IUnknown](x)
proc AddTask*(self: ptr IShellTaskScheduler, prt: ptr IRunnableTask, rtoid: REFTASKOWNERID, lParam: DWORD_PTR, dwPriority: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.AddTask(self, prt, rtoid, lParam, dwPriority)
proc RemoveTasks*(self: ptr IShellTaskScheduler, rtoid: REFTASKOWNERID, lParam: DWORD_PTR, bWaitIfRunning: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveTasks(self, rtoid, lParam, bWaitIfRunning)
proc CountTasks*(self: ptr IShellTaskScheduler, rtoid: REFTASKOWNERID): UINT {.inline, discardable.} = self.lpVtbl.CountTasks(self, rtoid)
proc Status*(self: ptr IShellTaskScheduler, dwReleaseStatus: DWORD, dwThreadTimeout: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Status(self, dwReleaseStatus, dwThreadTimeout)
converter winim_converter_IQueryCodePage*(x: ptr IQueryCodePage): ptr IUnknown = cast[ptr IUnknown](x)
proc GetCodePage*(self: ptr IQueryCodePage, puiCodePage: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetCodePage(self, puiCodePage)
proc SetCodePage*(self: ptr IQueryCodePage, uiCodePage: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetCodePage(self, uiCodePage)
converter winim_converter_IPersistIDList*(x: ptr IPersistIDList): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPersistIDList*(x: ptr IPersistIDList): ptr IPersist = cast[ptr IPersist](x)
proc SetIDList*(self: ptr IPersistIDList, pidl: PCIDLIST_ABSOLUTE): HRESULT {.inline, discardable.} = self.lpVtbl.SetIDList(self, pidl)
proc GetIDList*(self: ptr IPersistIDList, ppidl: ptr PIDLIST_ABSOLUTE): HRESULT {.inline, discardable.} = self.lpVtbl.GetIDList(self, ppidl)
converter winim_converter_IEnumFullIDList*(x: ptr IEnumFullIDList): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumFullIDList, celt: ULONG, rgelt: ptr PIDLIST_ABSOLUTE, pceltFetched: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, celt, rgelt, pceltFetched)
proc Skip*(self: ptr IEnumFullIDList, celt: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, celt)
proc Reset*(self: ptr IEnumFullIDList): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumFullIDList, ppenum: ptr ptr IEnumFullIDList): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, ppenum)
converter winim_converter_IObjectWithFolderEnumMode*(x: ptr IObjectWithFolderEnumMode): ptr IUnknown = cast[ptr IUnknown](x)
proc SetMode*(self: ptr IObjectWithFolderEnumMode, feMode: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetMode(self, feMode)
proc GetMode*(self: ptr IObjectWithFolderEnumMode, pfeMode: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetMode(self, pfeMode)
converter winim_converter_IParseAndCreateItem*(x: ptr IParseAndCreateItem): ptr IUnknown = cast[ptr IUnknown](x)
proc SetItem*(self: ptr IParseAndCreateItem, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.SetItem(self, psi)
proc GetItem*(self: ptr IParseAndCreateItem, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetItem(self, riid, ppv)
converter winim_converter_IFolderViewOptions*(x: ptr IFolderViewOptions): ptr IUnknown = cast[ptr IUnknown](x)
proc SetFolderViewOptions*(self: ptr IFolderViewOptions, fvoMask: int32, fvoFlags: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetFolderViewOptions(self, fvoMask, fvoFlags)
proc GetFolderViewOptions*(self: ptr IFolderViewOptions, pfvoFlags: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolderViewOptions(self, pfvoFlags)
converter winim_converter_IShellView3*(x: ptr IShellView3): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IShellView3*(x: ptr IShellView3): ptr IShellView = cast[ptr IShellView](x)
converter winim_converter_IShellView3*(x: ptr IShellView3): ptr IShellView2 = cast[ptr IShellView2](x)
proc CreateViewWindow3*(self: ptr IShellView3, psbOwner: ptr IShellBrowser, psvPrev: ptr IShellView, dwViewFlags: SV3CVW3_FLAGS, dwMask: int32, dwFlags: int32, fvMode: int32, pvid: ptr SHELLVIEWID, prcView: ptr RECT, phwndView: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.CreateViewWindow3(self, psbOwner, psvPrev, dwViewFlags, dwMask, dwFlags, fvMode, pvid, prcView, phwndView)
converter winim_converter_IFolderView*(x: ptr IFolderView): ptr IUnknown = cast[ptr IUnknown](x)
proc GetCurrentViewMode*(self: ptr IFolderView, pViewMode: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetCurrentViewMode(self, pViewMode)
proc SetCurrentViewMode*(self: ptr IFolderView, ViewMode: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetCurrentViewMode(self, ViewMode)
proc GetFolder*(self: ptr IFolderView, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolder(self, riid, ppv)
proc Item*(self: ptr IFolderView, iItemIndex: int32, ppidl: ptr PITEMID_CHILD): HRESULT {.inline, discardable.} = self.lpVtbl.Item(self, iItemIndex, ppidl)
proc ItemCount*(self: ptr IFolderView, uFlags: UINT, pcItems: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.ItemCount(self, uFlags, pcItems)
proc Items*(self: ptr IFolderView, uFlags: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.Items(self, uFlags, riid, ppv)
proc GetSelectionMarkedItem*(self: ptr IFolderView, piItem: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetSelectionMarkedItem(self, piItem)
proc GetFocusedItem*(self: ptr IFolderView, piItem: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetFocusedItem(self, piItem)
proc GetItemPosition*(self: ptr IFolderView, pidl: PCUITEMID_CHILD, ppt: ptr POINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetItemPosition(self, pidl, ppt)
proc GetSpacing*(self: ptr IFolderView, ppt: ptr POINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetSpacing(self, ppt)
proc GetDefaultSpacing*(self: ptr IFolderView, ppt: ptr POINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetDefaultSpacing(self, ppt)
proc GetAutoArrange*(self: ptr IFolderView): HRESULT {.inline, discardable.} = self.lpVtbl.GetAutoArrange(self)
proc SelectItem*(self: ptr IFolderView, iItem: int32, dwFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SelectItem(self, iItem, dwFlags)
proc SelectAndPositionItems*(self: ptr IFolderView, cidl: UINT, apidl: PCUITEMID_CHILD_ARRAY, apt: ptr POINT, dwFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SelectAndPositionItems(self, cidl, apidl, apt, dwFlags)
converter winim_converter_ISearchBoxInfo*(x: ptr ISearchBoxInfo): ptr IUnknown = cast[ptr IUnknown](x)
proc GetCondition*(self: ptr ISearchBoxInfo, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetCondition(self, riid, ppv)
proc GetText*(self: ptr ISearchBoxInfo, ppsz: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetText(self, ppsz)
converter winim_converter_IFolderView2*(x: ptr IFolderView2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IFolderView2*(x: ptr IFolderView2): ptr IFolderView = cast[ptr IFolderView](x)
proc SetGroupBy*(self: ptr IFolderView2, key: REFPROPERTYKEY, fAscending: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetGroupBy(self, key, fAscending)
proc GetGroupBy*(self: ptr IFolderView2, pkey: ptr PROPERTYKEY, pfAscending: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetGroupBy(self, pkey, pfAscending)
proc SetViewProperty*(self: ptr IFolderView2, pidl: PCUITEMID_CHILD, propkey: REFPROPERTYKEY, propvar: REFPROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.SetViewProperty(self, pidl, propkey, propvar)
proc GetViewProperty*(self: ptr IFolderView2, pidl: PCUITEMID_CHILD, propkey: REFPROPERTYKEY, ppropvar: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetViewProperty(self, pidl, propkey, ppropvar)
proc SetTileViewProperties*(self: ptr IFolderView2, pidl: PCUITEMID_CHILD, pszPropList: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetTileViewProperties(self, pidl, pszPropList)
proc SetExtendedTileViewProperties*(self: ptr IFolderView2, pidl: PCUITEMID_CHILD, pszPropList: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetExtendedTileViewProperties(self, pidl, pszPropList)
proc SetText*(self: ptr IFolderView2, iType: int32, pwszText: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetText(self, iType, pwszText)
proc SetCurrentFolderFlags*(self: ptr IFolderView2, dwMask: DWORD, dwFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetCurrentFolderFlags(self, dwMask, dwFlags)
proc GetCurrentFolderFlags*(self: ptr IFolderView2, pdwFlags: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetCurrentFolderFlags(self, pdwFlags)
proc GetSortColumnCount*(self: ptr IFolderView2, pcColumns: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetSortColumnCount(self, pcColumns)
proc SetSortColumns*(self: ptr IFolderView2, rgSortColumns: ptr SORTCOLUMN, cColumns: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetSortColumns(self, rgSortColumns, cColumns)
proc GetSortColumns*(self: ptr IFolderView2, rgSortColumns: ptr SORTCOLUMN, cColumns: int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetSortColumns(self, rgSortColumns, cColumns)
proc GetItem*(self: ptr IFolderView2, iItem: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetItem(self, iItem, riid, ppv)
proc GetVisibleItem*(self: ptr IFolderView2, iStart: int32, fPrevious: WINBOOL, piItem: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetVisibleItem(self, iStart, fPrevious, piItem)
proc GetSelectedItem*(self: ptr IFolderView2, iStart: int32, piItem: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetSelectedItem(self, iStart, piItem)
proc GetSelection*(self: ptr IFolderView2, fNoneImpliesFolder: WINBOOL, ppsia: ptr ptr IShellItemArray): HRESULT {.inline, discardable.} = self.lpVtbl.GetSelection(self, fNoneImpliesFolder, ppsia)
proc GetSelectionState*(self: ptr IFolderView2, pidl: PCUITEMID_CHILD, pdwFlags: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetSelectionState(self, pidl, pdwFlags)
proc InvokeVerbOnSelection*(self: ptr IFolderView2, pszVerb: LPCSTR): HRESULT {.inline, discardable.} = self.lpVtbl.InvokeVerbOnSelection(self, pszVerb)
proc SetViewModeAndIconSize*(self: ptr IFolderView2, uViewMode: int32, iImageSize: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetViewModeAndIconSize(self, uViewMode, iImageSize)
proc GetViewModeAndIconSize*(self: ptr IFolderView2, puViewMode: ptr int32, piImageSize: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetViewModeAndIconSize(self, puViewMode, piImageSize)
proc SetGroupSubsetCount*(self: ptr IFolderView2, cVisibleRows: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetGroupSubsetCount(self, cVisibleRows)
proc GetGroupSubsetCount*(self: ptr IFolderView2, pcVisibleRows: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetGroupSubsetCount(self, pcVisibleRows)
proc SetRedraw*(self: ptr IFolderView2, fRedrawOn: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetRedraw(self, fRedrawOn)
proc IsMoveInSameFolder*(self: ptr IFolderView2): HRESULT {.inline, discardable.} = self.lpVtbl.IsMoveInSameFolder(self)
proc DoRename*(self: ptr IFolderView2): HRESULT {.inline, discardable.} = self.lpVtbl.DoRename(self)
converter winim_converter_IFolderViewSettings*(x: ptr IFolderViewSettings): ptr IUnknown = cast[ptr IUnknown](x)
proc GetColumnPropertyList*(self: ptr IFolderViewSettings, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetColumnPropertyList(self, riid, ppv)
proc GetGroupByProperty*(self: ptr IFolderViewSettings, pkey: ptr PROPERTYKEY, pfGroupAscending: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetGroupByProperty(self, pkey, pfGroupAscending)
proc GetViewMode*(self: ptr IFolderViewSettings, plvm: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetViewMode(self, plvm)
proc GetIconSize*(self: ptr IFolderViewSettings, puIconSize: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetIconSize(self, puIconSize)
proc GetFolderFlags*(self: ptr IFolderViewSettings, pfolderMask: ptr int32, pfolderFlags: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolderFlags(self, pfolderMask, pfolderFlags)
proc GetSortColumns*(self: ptr IFolderViewSettings, rgSortColumns: ptr SORTCOLUMN, cColumnsIn: UINT, pcColumnsOut: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetSortColumns(self, rgSortColumns, cColumnsIn, pcColumnsOut)
proc GetGroupSubsetCount*(self: ptr IFolderViewSettings, pcVisibleRows: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetGroupSubsetCount(self, pcVisibleRows)
converter winim_converter_IPreviewHandlerVisuals*(x: ptr IPreviewHandlerVisuals): ptr IUnknown = cast[ptr IUnknown](x)
proc SetBackgroundColor*(self: ptr IPreviewHandlerVisuals, color: COLORREF): HRESULT {.inline, discardable.} = self.lpVtbl.SetBackgroundColor(self, color)
proc SetFont*(self: ptr IPreviewHandlerVisuals, plf: ptr LOGFONTW): HRESULT {.inline, discardable.} = self.lpVtbl.SetFont(self, plf)
proc SetTextColor*(self: ptr IPreviewHandlerVisuals, color: COLORREF): HRESULT {.inline, discardable.} = self.lpVtbl.SetTextColor(self, color)
converter winim_converter_IVisualProperties*(x: ptr IVisualProperties): ptr IUnknown = cast[ptr IUnknown](x)
proc SetWatermark*(self: ptr IVisualProperties, hbmp: HBITMAP, vpwf: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetWatermark(self, hbmp, vpwf)
proc SetColor*(self: ptr IVisualProperties, vpcf: int32, cr: COLORREF): HRESULT {.inline, discardable.} = self.lpVtbl.SetColor(self, vpcf, cr)
proc GetColor*(self: ptr IVisualProperties, vpcf: int32, pcr: ptr COLORREF): HRESULT {.inline, discardable.} = self.lpVtbl.GetColor(self, vpcf, pcr)
proc SetItemHeight*(self: ptr IVisualProperties, cyItemInPixels: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetItemHeight(self, cyItemInPixels)
proc GetItemHeight*(self: ptr IVisualProperties, cyItemInPixels: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetItemHeight(self, cyItemInPixels)
proc SetFont*(self: ptr IVisualProperties, plf: ptr LOGFONTW, bRedraw: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetFont(self, plf, bRedraw)
proc GetFont*(self: ptr IVisualProperties, plf: ptr LOGFONTW): HRESULT {.inline, discardable.} = self.lpVtbl.GetFont(self, plf)
proc SetTheme*(self: ptr IVisualProperties, pszSubAppName: LPCWSTR, pszSubIdList: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetTheme(self, pszSubAppName, pszSubIdList)
converter winim_converter_ICommDlgBrowser2*(x: ptr ICommDlgBrowser2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ICommDlgBrowser2*(x: ptr ICommDlgBrowser2): ptr ICommDlgBrowser = cast[ptr ICommDlgBrowser](x)
proc Notify*(self: ptr ICommDlgBrowser2, ppshv: ptr IShellView, dwNotifyType: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Notify(self, ppshv, dwNotifyType)
proc GetDefaultMenuText*(self: ptr ICommDlgBrowser2, ppshv: ptr IShellView, pszText: LPWSTR, cchMax: int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetDefaultMenuText(self, ppshv, pszText, cchMax)
proc GetViewFlags*(self: ptr ICommDlgBrowser2, pdwFlags: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetViewFlags(self, pdwFlags)
converter winim_converter_ICommDlgBrowser3*(x: ptr ICommDlgBrowser3): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ICommDlgBrowser3*(x: ptr ICommDlgBrowser3): ptr ICommDlgBrowser2 = cast[ptr ICommDlgBrowser2](x)
converter winim_converter_ICommDlgBrowser3*(x: ptr ICommDlgBrowser3): ptr ICommDlgBrowser = cast[ptr ICommDlgBrowser](x)
proc OnColumnClicked*(self: ptr ICommDlgBrowser3, ppshv: ptr IShellView, iColumn: int32): HRESULT {.inline, discardable.} = self.lpVtbl.OnColumnClicked(self, ppshv, iColumn)
proc GetCurrentFilter*(self: ptr ICommDlgBrowser3, pszFileSpec: LPWSTR, cchFileSpec: int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetCurrentFilter(self, pszFileSpec, cchFileSpec)
proc OnPreViewCreated*(self: ptr ICommDlgBrowser3, ppshv: ptr IShellView): HRESULT {.inline, discardable.} = self.lpVtbl.OnPreViewCreated(self, ppshv)
converter winim_converter_IColumnManager*(x: ptr IColumnManager): ptr IUnknown = cast[ptr IUnknown](x)
proc SetColumnInfo*(self: ptr IColumnManager, propkey: REFPROPERTYKEY, pcmci: ptr CM_COLUMNINFO): HRESULT {.inline, discardable.} = self.lpVtbl.SetColumnInfo(self, propkey, pcmci)
proc GetColumnInfo*(self: ptr IColumnManager, propkey: REFPROPERTYKEY, pcmci: ptr CM_COLUMNINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetColumnInfo(self, propkey, pcmci)
proc GetColumnCount*(self: ptr IColumnManager, dwFlags: int32, puCount: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetColumnCount(self, dwFlags, puCount)
proc GetColumns*(self: ptr IColumnManager, dwFlags: int32, rgkeyOrder: ptr PROPERTYKEY, cColumns: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetColumns(self, dwFlags, rgkeyOrder, cColumns)
proc SetColumns*(self: ptr IColumnManager, rgkeyOrder: ptr PROPERTYKEY, cVisible: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetColumns(self, rgkeyOrder, cVisible)
converter winim_converter_IFolderFilterSite*(x: ptr IFolderFilterSite): ptr IUnknown = cast[ptr IUnknown](x)
proc SetFilter*(self: ptr IFolderFilterSite, punk: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.SetFilter(self, punk)
converter winim_converter_IFolderFilter*(x: ptr IFolderFilter): ptr IUnknown = cast[ptr IUnknown](x)
proc ShouldShow*(self: ptr IFolderFilter, psf: ptr IShellFolder, pidlFolder: PCIDLIST_ABSOLUTE, pidlItem: PCUITEMID_CHILD): HRESULT {.inline, discardable.} = self.lpVtbl.ShouldShow(self, psf, pidlFolder, pidlItem)
proc GetEnumFlags*(self: ptr IFolderFilter, psf: ptr IShellFolder, pidlFolder: PCIDLIST_ABSOLUTE, phwnd: ptr HWND, pgrfFlags: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetEnumFlags(self, psf, pidlFolder, phwnd, pgrfFlags)
converter winim_converter_IInputObjectSite*(x: ptr IInputObjectSite): ptr IUnknown = cast[ptr IUnknown](x)
proc OnFocusChangeIS*(self: ptr IInputObjectSite, punkObj: ptr IUnknown, fSetFocus: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.OnFocusChangeIS(self, punkObj, fSetFocus)
converter winim_converter_IInputObject*(x: ptr IInputObject): ptr IUnknown = cast[ptr IUnknown](x)
proc UIActivateIO*(self: ptr IInputObject, fActivate: WINBOOL, pMsg: ptr MSG): HRESULT {.inline, discardable.} = self.lpVtbl.UIActivateIO(self, fActivate, pMsg)
proc HasFocusIO*(self: ptr IInputObject): HRESULT {.inline, discardable.} = self.lpVtbl.HasFocusIO(self)
proc TranslateAcceleratorIO*(self: ptr IInputObject, pMsg: ptr MSG): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateAcceleratorIO(self, pMsg)
converter winim_converter_IInputObject2*(x: ptr IInputObject2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IInputObject2*(x: ptr IInputObject2): ptr IInputObject = cast[ptr IInputObject](x)
proc TranslateAcceleratorGlobal*(self: ptr IInputObject2, pMsg: ptr MSG): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateAcceleratorGlobal(self, pMsg)
converter winim_converter_IProfferService*(x: ptr IProfferService): ptr IUnknown = cast[ptr IUnknown](x)
proc ProfferService*(self: ptr IProfferService, guidService: REFGUID, psp: ptr IServiceProvider, pdwCookie: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.ProfferService(self, guidService, psp, pdwCookie)
proc RevokeService*(self: ptr IProfferService, dwCookie: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.RevokeService(self, dwCookie)
converter winim_converter_IShellItem*(x: ptr IShellItem): ptr IUnknown = cast[ptr IUnknown](x)
proc BindToHandler*(self: ptr IShellItem, pbc: ptr IBindCtx, bhid: REFGUID, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.BindToHandler(self, pbc, bhid, riid, ppv)
proc GetParent*(self: ptr IShellItem, ppsi: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.GetParent(self, ppsi)
proc GetDisplayName*(self: ptr IShellItem, sigdnName: int32, ppszName: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetDisplayName(self, sigdnName, ppszName)
proc GetAttributes*(self: ptr IShellItem, sfgaoMask: SFGAOF, psfgaoAttribs: ptr SFGAOF): HRESULT {.inline, discardable.} = self.lpVtbl.GetAttributes(self, sfgaoMask, psfgaoAttribs)
proc Compare*(self: ptr IShellItem, psi: ptr IShellItem, hint: SICHINTF, piOrder: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.Compare(self, psi, hint, piOrder)
converter winim_converter_IShellItem2*(x: ptr IShellItem2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IShellItem2*(x: ptr IShellItem2): ptr IShellItem = cast[ptr IShellItem](x)
proc GetPropertyStore*(self: ptr IShellItem2, flags: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyStore(self, flags, riid, ppv)
proc GetPropertyStoreWithCreateObject*(self: ptr IShellItem2, flags: int32, punkCreateObject: ptr IUnknown, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyStoreWithCreateObject(self, flags, punkCreateObject, riid, ppv)
proc GetPropertyStoreForKeys*(self: ptr IShellItem2, rgKeys: ptr PROPERTYKEY, cKeys: UINT, flags: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyStoreForKeys(self, rgKeys, cKeys, flags, riid, ppv)
proc GetPropertyDescriptionList*(self: ptr IShellItem2, keyType: REFPROPERTYKEY, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyDescriptionList(self, keyType, riid, ppv)
proc Update*(self: ptr IShellItem2, pbc: ptr IBindCtx): HRESULT {.inline, discardable.} = self.lpVtbl.Update(self, pbc)
proc GetProperty*(self: ptr IShellItem2, key: REFPROPERTYKEY, ppropvar: ptr PROPVARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.GetProperty(self, key, ppropvar)
proc GetCLSID*(self: ptr IShellItem2, key: REFPROPERTYKEY, pclsid: ptr CLSID): HRESULT {.inline, discardable.} = self.lpVtbl.GetCLSID(self, key, pclsid)
proc GetFileTime*(self: ptr IShellItem2, key: REFPROPERTYKEY, pft: ptr FILETIME): HRESULT {.inline, discardable.} = self.lpVtbl.GetFileTime(self, key, pft)
proc GetInt32*(self: ptr IShellItem2, key: REFPROPERTYKEY, pi: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetInt32(self, key, pi)
proc GetString*(self: ptr IShellItem2, key: REFPROPERTYKEY, ppsz: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetString(self, key, ppsz)
proc GetUInt32*(self: ptr IShellItem2, key: REFPROPERTYKEY, pui: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetUInt32(self, key, pui)
proc GetUInt64*(self: ptr IShellItem2, key: REFPROPERTYKEY, pull: ptr ULONGLONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetUInt64(self, key, pull)
proc GetBool*(self: ptr IShellItem2, key: REFPROPERTYKEY, pf: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetBool(self, key, pf)
converter winim_converter_IShellItemImageFactory*(x: ptr IShellItemImageFactory): ptr IUnknown = cast[ptr IUnknown](x)
proc GetImage*(self: ptr IShellItemImageFactory, size: SIZE, flags: SIIGBF, phbm: ptr HBITMAP): HRESULT {.inline, discardable.} = self.lpVtbl.GetImage(self, size, flags, phbm)
converter winim_converter_IUserAccountChangeCallback*(x: ptr IUserAccountChangeCallback): ptr IUnknown = cast[ptr IUnknown](x)
proc OnPictureChange*(self: ptr IUserAccountChangeCallback, pszUserName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.OnPictureChange(self, pszUserName)
converter winim_converter_IEnumShellItems*(x: ptr IEnumShellItems): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumShellItems, celt: ULONG, rgelt: ptr ptr IShellItem, pceltFetched: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, celt, rgelt, pceltFetched)
proc Skip*(self: ptr IEnumShellItems, celt: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, celt)
proc Reset*(self: ptr IEnumShellItems): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumShellItems, ppenum: ptr ptr IEnumShellItems): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, ppenum)
converter winim_converter_ITransferAdviseSink*(x: ptr ITransferAdviseSink): ptr IUnknown = cast[ptr IUnknown](x)
proc UpdateProgress*(self: ptr ITransferAdviseSink, ullSizeCurrent: ULONGLONG, ullSizeTotal: ULONGLONG, nFilesCurrent: int32, nFilesTotal: int32, nFoldersCurrent: int32, nFoldersTotal: int32): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateProgress(self, ullSizeCurrent, ullSizeTotal, nFilesCurrent, nFilesTotal, nFoldersCurrent, nFoldersTotal)
proc UpdateTransferState*(self: ptr ITransferAdviseSink, ts: TRANSFER_ADVISE_STATE): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateTransferState(self, ts)
proc ConfirmOverwrite*(self: ptr ITransferAdviseSink, psiSource: ptr IShellItem, psiDestParent: ptr IShellItem, pszName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.ConfirmOverwrite(self, psiSource, psiDestParent, pszName)
proc ConfirmEncryptionLoss*(self: ptr ITransferAdviseSink, psiSource: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.ConfirmEncryptionLoss(self, psiSource)
proc FileFailure*(self: ptr ITransferAdviseSink, psi: ptr IShellItem, pszItem: LPCWSTR, hrError: HRESULT, pszRename: LPWSTR, cchRename: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.FileFailure(self, psi, pszItem, hrError, pszRename, cchRename)
proc SubStreamFailure*(self: ptr ITransferAdviseSink, psi: ptr IShellItem, pszStreamName: LPCWSTR, hrError: HRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.SubStreamFailure(self, psi, pszStreamName, hrError)
proc PropertyFailure*(self: ptr ITransferAdviseSink, psi: ptr IShellItem, pkey: ptr PROPERTYKEY, hrError: HRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.PropertyFailure(self, psi, pkey, hrError)
converter winim_converter_ITransferSource*(x: ptr ITransferSource): ptr IUnknown = cast[ptr IUnknown](x)
proc Advise*(self: ptr ITransferSource, psink: ptr ITransferAdviseSink, pdwCookie: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Advise(self, psink, pdwCookie)
proc Unadvise*(self: ptr ITransferSource, dwCookie: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Unadvise(self, dwCookie)
proc SetProperties*(self: ptr ITransferSource, pproparray: ptr IPropertyChangeArray): HRESULT {.inline, discardable.} = self.lpVtbl.SetProperties(self, pproparray)
proc OpenItem*(self: ptr ITransferSource, psi: ptr IShellItem, flags: TRANSFER_SOURCE_FLAGS, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.OpenItem(self, psi, flags, riid, ppv)
proc MoveItem*(self: ptr ITransferSource, psi: ptr IShellItem, psiParentDst: ptr IShellItem, pszNameDst: LPCWSTR, flags: TRANSFER_SOURCE_FLAGS, ppsiNew: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.MoveItem(self, psi, psiParentDst, pszNameDst, flags, ppsiNew)
proc RecycleItem*(self: ptr ITransferSource, psiSource: ptr IShellItem, psiParentDest: ptr IShellItem, flags: TRANSFER_SOURCE_FLAGS, ppsiNewDest: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.RecycleItem(self, psiSource, psiParentDest, flags, ppsiNewDest)
proc RemoveItem*(self: ptr ITransferSource, psiSource: ptr IShellItem, flags: TRANSFER_SOURCE_FLAGS): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveItem(self, psiSource, flags)
proc RenameItem*(self: ptr ITransferSource, psiSource: ptr IShellItem, pszNewName: LPCWSTR, flags: TRANSFER_SOURCE_FLAGS, ppsiNewDest: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.RenameItem(self, psiSource, pszNewName, flags, ppsiNewDest)
proc LinkItem*(self: ptr ITransferSource, psiSource: ptr IShellItem, psiParentDest: ptr IShellItem, pszNewName: LPCWSTR, flags: TRANSFER_SOURCE_FLAGS, ppsiNewDest: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.LinkItem(self, psiSource, psiParentDest, pszNewName, flags, ppsiNewDest)
proc ApplyPropertiesToItem*(self: ptr ITransferSource, psiSource: ptr IShellItem, ppsiNew: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.ApplyPropertiesToItem(self, psiSource, ppsiNew)
proc GetDefaultDestinationName*(self: ptr ITransferSource, psiSource: ptr IShellItem, psiParentDest: ptr IShellItem, ppszDestinationName: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetDefaultDestinationName(self, psiSource, psiParentDest, ppszDestinationName)
proc EnterFolder*(self: ptr ITransferSource, psiChildFolderDest: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.EnterFolder(self, psiChildFolderDest)
proc LeaveFolder*(self: ptr ITransferSource, psiChildFolderDest: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.LeaveFolder(self, psiChildFolderDest)
converter winim_converter_IEnumResources*(x: ptr IEnumResources): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumResources, celt: ULONG, psir: ptr SHELL_ITEM_RESOURCE, pceltFetched: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, celt, psir, pceltFetched)
proc Skip*(self: ptr IEnumResources, celt: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, celt)
proc Reset*(self: ptr IEnumResources): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumResources, ppenumr: ptr ptr IEnumResources): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, ppenumr)
converter winim_converter_IShellItemResources*(x: ptr IShellItemResources): ptr IUnknown = cast[ptr IUnknown](x)
proc GetAttributes*(self: ptr IShellItemResources, pdwAttributes: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetAttributes(self, pdwAttributes)
proc GetSize*(self: ptr IShellItemResources, pullSize: ptr ULONGLONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetSize(self, pullSize)
proc GetTimes*(self: ptr IShellItemResources, pftCreation: ptr FILETIME, pftWrite: ptr FILETIME, pftAccess: ptr FILETIME): HRESULT {.inline, discardable.} = self.lpVtbl.GetTimes(self, pftCreation, pftWrite, pftAccess)
proc SetTimes*(self: ptr IShellItemResources, pftCreation: ptr FILETIME, pftWrite: ptr FILETIME, pftAccess: ptr FILETIME): HRESULT {.inline, discardable.} = self.lpVtbl.SetTimes(self, pftCreation, pftWrite, pftAccess)
proc GetResourceDescription*(self: ptr IShellItemResources, pcsir: ptr SHELL_ITEM_RESOURCE, ppszDescription: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetResourceDescription(self, pcsir, ppszDescription)
proc EnumResources*(self: ptr IShellItemResources, ppenumr: ptr ptr IEnumResources): HRESULT {.inline, discardable.} = self.lpVtbl.EnumResources(self, ppenumr)
proc SupportsResource*(self: ptr IShellItemResources, pcsir: ptr SHELL_ITEM_RESOURCE): HRESULT {.inline, discardable.} = self.lpVtbl.SupportsResource(self, pcsir)
proc OpenResource*(self: ptr IShellItemResources, pcsir: ptr SHELL_ITEM_RESOURCE, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.OpenResource(self, pcsir, riid, ppv)
proc CreateResource*(self: ptr IShellItemResources, pcsir: ptr SHELL_ITEM_RESOURCE, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.CreateResource(self, pcsir, riid, ppv)
proc MarkForDelete*(self: ptr IShellItemResources): HRESULT {.inline, discardable.} = self.lpVtbl.MarkForDelete(self)
converter winim_converter_ITransferDestination*(x: ptr ITransferDestination): ptr IUnknown = cast[ptr IUnknown](x)
proc Advise*(self: ptr ITransferDestination, psink: ptr ITransferAdviseSink, pdwCookie: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Advise(self, psink, pdwCookie)
proc Unadvise*(self: ptr ITransferDestination, dwCookie: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Unadvise(self, dwCookie)
proc CreateItem*(self: ptr ITransferDestination, pszName: LPCWSTR, dwAttributes: DWORD, ullSize: ULONGLONG, flags: TRANSFER_SOURCE_FLAGS, riidItem: REFIID, ppvItem: ptr pointer, riidResources: REFIID, ppvResources: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.CreateItem(self, pszName, dwAttributes, ullSize, flags, riidItem, ppvItem, riidResources, ppvResources)
converter winim_converter_IStreamAsync*(x: ptr IStreamAsync): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IStreamAsync*(x: ptr IStreamAsync): ptr IStream = cast[ptr IStream](x)
proc ReadAsync*(self: ptr IStreamAsync, pv: pointer, cb: DWORD, pcbRead: LPDWORD, lpOverlapped: LPOVERLAPPED): HRESULT {.inline, discardable.} = self.lpVtbl.ReadAsync(self, pv, cb, pcbRead, lpOverlapped)
proc WriteAsync*(self: ptr IStreamAsync, lpBuffer: pointer, cb: DWORD, pcbWritten: LPDWORD, lpOverlapped: LPOVERLAPPED): HRESULT {.inline, discardable.} = self.lpVtbl.WriteAsync(self, lpBuffer, cb, pcbWritten, lpOverlapped)
proc OverlappedResult*(self: ptr IStreamAsync, lpOverlapped: LPOVERLAPPED, lpNumberOfBytesTransferred: LPDWORD, bWait: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.OverlappedResult(self, lpOverlapped, lpNumberOfBytesTransferred, bWait)
proc CancelIo*(self: ptr IStreamAsync): HRESULT {.inline, discardable.} = self.lpVtbl.CancelIo(self)
converter winim_converter_IStreamUnbufferedInfo*(x: ptr IStreamUnbufferedInfo): ptr IUnknown = cast[ptr IUnknown](x)
proc GetSectorSize*(self: ptr IStreamUnbufferedInfo, pcbSectorSize: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetSectorSize(self, pcbSectorSize)
converter winim_converter_IFileOperationProgressSink*(x: ptr IFileOperationProgressSink): ptr IUnknown = cast[ptr IUnknown](x)
proc StartOperations*(self: ptr IFileOperationProgressSink): HRESULT {.inline, discardable.} = self.lpVtbl.StartOperations(self)
proc FinishOperations*(self: ptr IFileOperationProgressSink, hrResult: HRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.FinishOperations(self, hrResult)
proc PreRenameItem*(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, pszNewName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.PreRenameItem(self, dwFlags, psiItem, pszNewName)
proc PostRenameItem*(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, pszNewName: LPCWSTR, hrRename: HRESULT, psiNewlyCreated: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.PostRenameItem(self, dwFlags, psiItem, pszNewName, hrRename, psiNewlyCreated)
proc PreMoveItem*(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.PreMoveItem(self, dwFlags, psiItem, psiDestinationFolder, pszNewName)
proc PostMoveItem*(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR, hrMove: HRESULT, psiNewlyCreated: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.PostMoveItem(self, dwFlags, psiItem, psiDestinationFolder, pszNewName, hrMove, psiNewlyCreated)
proc PreCopyItem*(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.PreCopyItem(self, dwFlags, psiItem, psiDestinationFolder, pszNewName)
proc PostCopyItem*(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR, hrCopy: HRESULT, psiNewlyCreated: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.PostCopyItem(self, dwFlags, psiItem, psiDestinationFolder, pszNewName, hrCopy, psiNewlyCreated)
proc PreDeleteItem*(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.PreDeleteItem(self, dwFlags, psiItem)
proc PostDeleteItem*(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiItem: ptr IShellItem, hrDelete: HRESULT, psiNewlyCreated: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.PostDeleteItem(self, dwFlags, psiItem, hrDelete, psiNewlyCreated)
proc PreNewItem*(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.PreNewItem(self, dwFlags, psiDestinationFolder, pszNewName)
proc PostNewItem*(self: ptr IFileOperationProgressSink, dwFlags: DWORD, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR, pszTemplateName: LPCWSTR, dwFileAttributes: DWORD, hrNew: HRESULT, psiNewItem: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.PostNewItem(self, dwFlags, psiDestinationFolder, pszNewName, pszTemplateName, dwFileAttributes, hrNew, psiNewItem)
proc UpdateProgress*(self: ptr IFileOperationProgressSink, iWorkTotal: UINT, iWorkSoFar: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateProgress(self, iWorkTotal, iWorkSoFar)
proc ResetTimer*(self: ptr IFileOperationProgressSink): HRESULT {.inline, discardable.} = self.lpVtbl.ResetTimer(self)
proc PauseTimer*(self: ptr IFileOperationProgressSink): HRESULT {.inline, discardable.} = self.lpVtbl.PauseTimer(self)
proc ResumeTimer*(self: ptr IFileOperationProgressSink): HRESULT {.inline, discardable.} = self.lpVtbl.ResumeTimer(self)
converter winim_converter_IShellItemArray*(x: ptr IShellItemArray): ptr IUnknown = cast[ptr IUnknown](x)
proc BindToHandler*(self: ptr IShellItemArray, pbc: ptr IBindCtx, bhid: REFGUID, riid: REFIID, ppvOut: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.BindToHandler(self, pbc, bhid, riid, ppvOut)
proc GetPropertyStore*(self: ptr IShellItemArray, flags: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyStore(self, flags, riid, ppv)
proc GetPropertyDescriptionList*(self: ptr IShellItemArray, keyType: REFPROPERTYKEY, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyDescriptionList(self, keyType, riid, ppv)
proc GetAttributes*(self: ptr IShellItemArray, AttribFlags: int32, sfgaoMask: SFGAOF, psfgaoAttribs: ptr SFGAOF): HRESULT {.inline, discardable.} = self.lpVtbl.GetAttributes(self, AttribFlags, sfgaoMask, psfgaoAttribs)
proc GetCount*(self: ptr IShellItemArray, pdwNumItems: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetCount(self, pdwNumItems)
proc GetItemAt*(self: ptr IShellItemArray, dwIndex: DWORD, ppsi: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.GetItemAt(self, dwIndex, ppsi)
proc EnumItems*(self: ptr IShellItemArray, ppenumShellItems: ptr ptr IEnumShellItems): HRESULT {.inline, discardable.} = self.lpVtbl.EnumItems(self, ppenumShellItems)
converter winim_converter_IInitializeWithItem*(x: ptr IInitializeWithItem): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IInitializeWithItem, psi: ptr IShellItem, grfMode: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, psi, grfMode)
converter winim_converter_IObjectWithSelection*(x: ptr IObjectWithSelection): ptr IUnknown = cast[ptr IUnknown](x)
proc SetSelection*(self: ptr IObjectWithSelection, psia: ptr IShellItemArray): HRESULT {.inline, discardable.} = self.lpVtbl.SetSelection(self, psia)
proc GetSelection*(self: ptr IObjectWithSelection, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetSelection(self, riid, ppv)
converter winim_converter_IObjectWithBackReferences*(x: ptr IObjectWithBackReferences): ptr IUnknown = cast[ptr IUnknown](x)
proc RemoveBackReferences*(self: ptr IObjectWithBackReferences): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveBackReferences(self)
converter winim_converter_IPropertyUI*(x: ptr IPropertyUI): ptr IUnknown = cast[ptr IUnknown](x)
proc ParsePropertyName*(self: ptr IPropertyUI, pszName: LPCWSTR, pfmtid: ptr FMTID, ppid: ptr PROPID, pchEaten: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.ParsePropertyName(self, pszName, pfmtid, ppid, pchEaten)
proc GetCannonicalName*(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, pwszText: LPWSTR, cchText: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetCannonicalName(self, fmtid, pid, pwszText, cchText)
proc GetDisplayName*(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, flags: PROPERTYUI_NAME_FLAGS, pwszText: LPWSTR, cchText: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetDisplayName(self, fmtid, pid, flags, pwszText, cchText)
proc GetPropertyDescription*(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, pwszText: LPWSTR, cchText: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetPropertyDescription(self, fmtid, pid, pwszText, cchText)
proc GetDefaultWidth*(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, pcxChars: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetDefaultWidth(self, fmtid, pid, pcxChars)
proc GetFlags*(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, pflags: ptr PROPERTYUI_FLAGS): HRESULT {.inline, discardable.} = self.lpVtbl.GetFlags(self, fmtid, pid, pflags)
proc FormatForDisplay*(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, ppropvar: ptr PROPVARIANT, puiff: PROPERTYUI_FORMAT_FLAGS, pwszText: LPWSTR, cchText: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.FormatForDisplay(self, fmtid, pid, ppropvar, puiff, pwszText, cchText)
proc GetHelpInfo*(self: ptr IPropertyUI, fmtid: REFFMTID, pid: PROPID, pwszHelpFile: LPWSTR, cch: DWORD, puHelpID: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetHelpInfo(self, fmtid, pid, pwszHelpFile, cch, puHelpID)
converter winim_converter_ICategoryProvider*(x: ptr ICategoryProvider): ptr IUnknown = cast[ptr IUnknown](x)
proc CanCategorizeOnSCID*(self: ptr ICategoryProvider, pscid: ptr SHCOLUMNID): HRESULT {.inline, discardable.} = self.lpVtbl.CanCategorizeOnSCID(self, pscid)
proc GetDefaultCategory*(self: ptr ICategoryProvider, pguid: ptr GUID, pscid: ptr SHCOLUMNID): HRESULT {.inline, discardable.} = self.lpVtbl.GetDefaultCategory(self, pguid, pscid)
proc GetCategoryForSCID*(self: ptr ICategoryProvider, pscid: ptr SHCOLUMNID, pguid: ptr GUID): HRESULT {.inline, discardable.} = self.lpVtbl.GetCategoryForSCID(self, pscid, pguid)
proc EnumCategories*(self: ptr ICategoryProvider, penum: ptr ptr IEnumGUID): HRESULT {.inline, discardable.} = self.lpVtbl.EnumCategories(self, penum)
proc GetCategoryName*(self: ptr ICategoryProvider, pguid: ptr GUID, pszName: LPWSTR, cch: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetCategoryName(self, pguid, pszName, cch)
proc CreateCategory*(self: ptr ICategoryProvider, pguid: ptr GUID, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.CreateCategory(self, pguid, riid, ppv)
converter winim_converter_ICategorizer*(x: ptr ICategorizer): ptr IUnknown = cast[ptr IUnknown](x)
proc GetDescription*(self: ptr ICategorizer, pszDesc: LPWSTR, cch: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetDescription(self, pszDesc, cch)
proc GetCategory*(self: ptr ICategorizer, cidl: UINT, apidl: PCUITEMID_CHILD_ARRAY, rgCategoryIds: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetCategory(self, cidl, apidl, rgCategoryIds)
proc GetCategoryInfo*(self: ptr ICategorizer, dwCategoryId: DWORD, pci: ptr TCATEGORY_INFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetCategoryInfo(self, dwCategoryId, pci)
proc CompareCategory*(self: ptr ICategorizer, csfFlags: int32, dwCategoryId1: DWORD, dwCategoryId2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.CompareCategory(self, csfFlags, dwCategoryId1, dwCategoryId2)
converter winim_converter_IDragSourceHelper2*(x: ptr IDragSourceHelper2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IDragSourceHelper2*(x: ptr IDragSourceHelper2): ptr IDragSourceHelper = cast[ptr IDragSourceHelper](x)
proc SetFlags*(self: ptr IDragSourceHelper2, dwFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetFlags(self, dwFlags)
converter winim_converter_IShellLinkDataList*(x: ptr IShellLinkDataList): ptr IUnknown = cast[ptr IUnknown](x)
proc AddDataBlock*(self: ptr IShellLinkDataList, pDataBlock: pointer): HRESULT {.inline, discardable.} = self.lpVtbl.AddDataBlock(self, pDataBlock)
proc CopyDataBlock*(self: ptr IShellLinkDataList, dwSig: DWORD, ppDataBlock: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.CopyDataBlock(self, dwSig, ppDataBlock)
proc RemoveDataBlock*(self: ptr IShellLinkDataList, dwSig: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveDataBlock(self, dwSig)
proc GetFlags*(self: ptr IShellLinkDataList, pdwFlags: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetFlags(self, pdwFlags)
proc SetFlags*(self: ptr IShellLinkDataList, dwFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetFlags(self, dwFlags)
converter winim_converter_IResolveShellLink*(x: ptr IResolveShellLink): ptr IUnknown = cast[ptr IUnknown](x)
proc ResolveShellLink*(self: ptr IResolveShellLink, punkLink: ptr IUnknown, hwnd: HWND, fFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.ResolveShellLink(self, punkLink, hwnd, fFlags)
converter winim_converter_IActionProgressDialog*(x: ptr IActionProgressDialog): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IActionProgressDialog, flags: SPINITF, pszTitle: LPCWSTR, pszCancel: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, flags, pszTitle, pszCancel)
proc Stop*(self: ptr IActionProgressDialog): HRESULT {.inline, discardable.} = self.lpVtbl.Stop(self)
converter winim_converter_IHWEventHandler*(x: ptr IHWEventHandler): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IHWEventHandler, pszParams: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, pszParams)
proc HandleEvent*(self: ptr IHWEventHandler, pszDeviceID: LPCWSTR, pszAltDeviceID: LPCWSTR, pszEventType: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.HandleEvent(self, pszDeviceID, pszAltDeviceID, pszEventType)
proc HandleEventWithContent*(self: ptr IHWEventHandler, pszDeviceID: LPCWSTR, pszAltDeviceID: LPCWSTR, pszEventType: LPCWSTR, pszContentTypeHandler: LPCWSTR, pdataobject: ptr IDataObject): HRESULT {.inline, discardable.} = self.lpVtbl.HandleEventWithContent(self, pszDeviceID, pszAltDeviceID, pszEventType, pszContentTypeHandler, pdataobject)
converter winim_converter_IHWEventHandler2*(x: ptr IHWEventHandler2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IHWEventHandler2*(x: ptr IHWEventHandler2): ptr IHWEventHandler = cast[ptr IHWEventHandler](x)
proc HandleEventWithHWND*(self: ptr IHWEventHandler2, pszDeviceID: LPCWSTR, pszAltDeviceID: LPCWSTR, pszEventType: LPCWSTR, hwndOwner: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.HandleEventWithHWND(self, pszDeviceID, pszAltDeviceID, pszEventType, hwndOwner)
converter winim_converter_IQueryCancelAutoPlay*(x: ptr IQueryCancelAutoPlay): ptr IUnknown = cast[ptr IUnknown](x)
proc AllowAutoPlay*(self: ptr IQueryCancelAutoPlay, pszPath: LPCWSTR, dwContentType: DWORD, pszLabel: LPCWSTR, dwSerialNumber: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.AllowAutoPlay(self, pszPath, dwContentType, pszLabel, dwSerialNumber)
converter winim_converter_IDynamicHWHandler*(x: ptr IDynamicHWHandler): ptr IUnknown = cast[ptr IUnknown](x)
proc GetDynamicInfo*(self: ptr IDynamicHWHandler, pszDeviceID: LPCWSTR, dwContentType: DWORD, ppszAction: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetDynamicInfo(self, pszDeviceID, dwContentType, ppszAction)
converter winim_converter_IActionProgress*(x: ptr IActionProgress): ptr IUnknown = cast[ptr IUnknown](x)
proc Begin*(self: ptr IActionProgress, action: int32, flags: SPBEGINF): HRESULT {.inline, discardable.} = self.lpVtbl.Begin(self, action, flags)
proc UpdateProgress*(self: ptr IActionProgress, ulCompleted: ULONGLONG, ulTotal: ULONGLONG): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateProgress(self, ulCompleted, ulTotal)
proc UpdateText*(self: ptr IActionProgress, sptext: int32, pszText: LPCWSTR, fMayCompact: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateText(self, sptext, pszText, fMayCompact)
proc QueryCancel*(self: ptr IActionProgress, pfCancelled: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.QueryCancel(self, pfCancelled)
proc ResetCancel*(self: ptr IActionProgress): HRESULT {.inline, discardable.} = self.lpVtbl.ResetCancel(self)
proc End*(self: ptr IActionProgress): HRESULT {.inline, discardable.} = self.lpVtbl.End(self)
converter winim_converter_IRemoteComputer*(x: ptr IRemoteComputer): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IRemoteComputer, pszMachine: LPCWSTR, bEnumerating: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, pszMachine, bEnumerating)
converter winim_converter_IQueryContinue*(x: ptr IQueryContinue): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryContinue*(self: ptr IQueryContinue): HRESULT {.inline, discardable.} = self.lpVtbl.QueryContinue(self)
converter winim_converter_IObjectWithCancelEvent*(x: ptr IObjectWithCancelEvent): ptr IUnknown = cast[ptr IUnknown](x)
proc GetCancelEvent*(self: ptr IObjectWithCancelEvent, phEvent: ptr HANDLE): HRESULT {.inline, discardable.} = self.lpVtbl.GetCancelEvent(self, phEvent)
converter winim_converter_IUserNotification*(x: ptr IUserNotification): ptr IUnknown = cast[ptr IUnknown](x)
proc SetBalloonInfo*(self: ptr IUserNotification, pszTitle: LPCWSTR, pszText: LPCWSTR, dwInfoFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetBalloonInfo(self, pszTitle, pszText, dwInfoFlags)
proc SetBalloonRetry*(self: ptr IUserNotification, dwShowTime: DWORD, dwInterval: DWORD, cRetryCount: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetBalloonRetry(self, dwShowTime, dwInterval, cRetryCount)
proc SetIconInfo*(self: ptr IUserNotification, hIcon: HICON, pszToolTip: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetIconInfo(self, hIcon, pszToolTip)
proc Show*(self: ptr IUserNotification, pqc: ptr IQueryContinue, dwContinuePollInterval: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Show(self, pqc, dwContinuePollInterval)
proc PlaySound*(self: ptr IUserNotification, pszSoundName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.PlaySound(self, pszSoundName)
converter winim_converter_IUserNotificationCallback*(x: ptr IUserNotificationCallback): ptr IUnknown = cast[ptr IUnknown](x)
proc OnBalloonUserClick*(self: ptr IUserNotificationCallback, pt: ptr POINT): HRESULT {.inline, discardable.} = self.lpVtbl.OnBalloonUserClick(self, pt)
proc OnLeftClick*(self: ptr IUserNotificationCallback, pt: ptr POINT): HRESULT {.inline, discardable.} = self.lpVtbl.OnLeftClick(self, pt)
proc OnContextMenu*(self: ptr IUserNotificationCallback, pt: ptr POINT): HRESULT {.inline, discardable.} = self.lpVtbl.OnContextMenu(self, pt)
converter winim_converter_IUserNotification2*(x: ptr IUserNotification2): ptr IUnknown = cast[ptr IUnknown](x)
proc SetBalloonInfo*(self: ptr IUserNotification2, pszTitle: LPCWSTR, pszText: LPCWSTR, dwInfoFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetBalloonInfo(self, pszTitle, pszText, dwInfoFlags)
proc SetBalloonRetry*(self: ptr IUserNotification2, dwShowTime: DWORD, dwInterval: DWORD, cRetryCount: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetBalloonRetry(self, dwShowTime, dwInterval, cRetryCount)
proc SetIconInfo*(self: ptr IUserNotification2, hIcon: HICON, pszToolTip: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetIconInfo(self, hIcon, pszToolTip)
proc Show*(self: ptr IUserNotification2, pqc: ptr IQueryContinue, dwContinuePollInterval: DWORD, pSink: ptr IUserNotificationCallback): HRESULT {.inline, discardable.} = self.lpVtbl.Show(self, pqc, dwContinuePollInterval, pSink)
proc PlaySound*(self: ptr IUserNotification2, pszSoundName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.PlaySound(self, pszSoundName)
converter winim_converter_IItemNameLimits*(x: ptr IItemNameLimits): ptr IUnknown = cast[ptr IUnknown](x)
proc GetValidCharacters*(self: ptr IItemNameLimits, ppwszValidChars: ptr LPWSTR, ppwszInvalidChars: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetValidCharacters(self, ppwszValidChars, ppwszInvalidChars)
proc GetMaxLength*(self: ptr IItemNameLimits, pszName: LPCWSTR, piMaxNameLen: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetMaxLength(self, pszName, piMaxNameLen)
converter winim_converter_ISearchFolderItemFactory*(x: ptr ISearchFolderItemFactory): ptr IUnknown = cast[ptr IUnknown](x)
proc SetDisplayName*(self: ptr ISearchFolderItemFactory, pszDisplayName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetDisplayName(self, pszDisplayName)
proc SetFolderTypeID*(self: ptr ISearchFolderItemFactory, ftid: FOLDERTYPEID): HRESULT {.inline, discardable.} = self.lpVtbl.SetFolderTypeID(self, ftid)
proc SetFolderLogicalViewMode*(self: ptr ISearchFolderItemFactory, flvm: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetFolderLogicalViewMode(self, flvm)
proc SetIconSize*(self: ptr ISearchFolderItemFactory, iIconSize: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetIconSize(self, iIconSize)
proc SetVisibleColumns*(self: ptr ISearchFolderItemFactory, cVisibleColumns: UINT, rgKey: ptr PROPERTYKEY): HRESULT {.inline, discardable.} = self.lpVtbl.SetVisibleColumns(self, cVisibleColumns, rgKey)
proc SetSortColumns*(self: ptr ISearchFolderItemFactory, cSortColumns: UINT, rgSortColumns: ptr SORTCOLUMN): HRESULT {.inline, discardable.} = self.lpVtbl.SetSortColumns(self, cSortColumns, rgSortColumns)
proc SetGroupColumn*(self: ptr ISearchFolderItemFactory, keyGroup: REFPROPERTYKEY): HRESULT {.inline, discardable.} = self.lpVtbl.SetGroupColumn(self, keyGroup)
proc SetStacks*(self: ptr ISearchFolderItemFactory, cStackKeys: UINT, rgStackKeys: ptr PROPERTYKEY): HRESULT {.inline, discardable.} = self.lpVtbl.SetStacks(self, cStackKeys, rgStackKeys)
proc SetScope*(self: ptr ISearchFolderItemFactory, psiaScope: ptr IShellItemArray): HRESULT {.inline, discardable.} = self.lpVtbl.SetScope(self, psiaScope)
proc SetCondition*(self: ptr ISearchFolderItemFactory, pCondition: ptr ICondition): HRESULT {.inline, discardable.} = self.lpVtbl.SetCondition(self, pCondition)
proc GetShellItem*(self: ptr ISearchFolderItemFactory, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetShellItem(self, riid, ppv)
proc GetIDList*(self: ptr ISearchFolderItemFactory, ppidl: ptr PIDLIST_ABSOLUTE): HRESULT {.inline, discardable.} = self.lpVtbl.GetIDList(self, ppidl)
converter winim_converter_IExtractImage*(x: ptr IExtractImage): ptr IUnknown = cast[ptr IUnknown](x)
proc GetLocation*(self: ptr IExtractImage, pszPathBuffer: LPWSTR, cch: DWORD, pdwPriority: ptr DWORD, prgSize: ptr SIZE, dwRecClrDepth: DWORD, pdwFlags: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetLocation(self, pszPathBuffer, cch, pdwPriority, prgSize, dwRecClrDepth, pdwFlags)
proc Extract*(self: ptr IExtractImage, phBmpThumbnail: ptr HBITMAP): HRESULT {.inline, discardable.} = self.lpVtbl.Extract(self, phBmpThumbnail)
converter winim_converter_IExtractImage2*(x: ptr IExtractImage2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IExtractImage2*(x: ptr IExtractImage2): ptr IExtractImage = cast[ptr IExtractImage](x)
proc GetDateStamp*(self: ptr IExtractImage2, pDateStamp: ptr FILETIME): HRESULT {.inline, discardable.} = self.lpVtbl.GetDateStamp(self, pDateStamp)
converter winim_converter_IThumbnailHandlerFactory*(x: ptr IThumbnailHandlerFactory): ptr IUnknown = cast[ptr IUnknown](x)
proc GetThumbnailHandler*(self: ptr IThumbnailHandlerFactory, pidlChild: PCUITEMID_CHILD, pbc: ptr IBindCtx, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetThumbnailHandler(self, pidlChild, pbc, riid, ppv)
converter winim_converter_IParentAndItem*(x: ptr IParentAndItem): ptr IUnknown = cast[ptr IUnknown](x)
proc SetParentAndItem*(self: ptr IParentAndItem, pidlParent: PCIDLIST_ABSOLUTE, psf: ptr IShellFolder, pidlChild: PCUITEMID_CHILD): HRESULT {.inline, discardable.} = self.lpVtbl.SetParentAndItem(self, pidlParent, psf, pidlChild)
proc GetParentAndItem*(self: ptr IParentAndItem, ppidlParent: ptr PIDLIST_ABSOLUTE, ppsf: ptr ptr IShellFolder, ppidlChild: ptr PITEMID_CHILD): HRESULT {.inline, discardable.} = self.lpVtbl.GetParentAndItem(self, ppidlParent, ppsf, ppidlChild)
converter winim_converter_IDockingWindow*(x: ptr IDockingWindow): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IDockingWindow*(x: ptr IDockingWindow): ptr IOleWindow = cast[ptr IOleWindow](x)
proc ShowDW*(self: ptr IDockingWindow, fShow: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.ShowDW(self, fShow)
proc CloseDW*(self: ptr IDockingWindow, dwReserved: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.CloseDW(self, dwReserved)
proc ResizeBorderDW*(self: ptr IDockingWindow, prcBorder: LPCRECT, punkToolbarSite: ptr IUnknown, fReserved: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.ResizeBorderDW(self, prcBorder, punkToolbarSite, fReserved)
converter winim_converter_IDeskBand*(x: ptr IDeskBand): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IDeskBand*(x: ptr IDeskBand): ptr IDockingWindow = cast[ptr IDockingWindow](x)
converter winim_converter_IDeskBand*(x: ptr IDeskBand): ptr IOleWindow = cast[ptr IOleWindow](x)
proc GetBandInfo*(self: ptr IDeskBand, dwBandID: DWORD, dwViewMode: DWORD, pdbi: ptr DESKBANDINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetBandInfo(self, dwBandID, dwViewMode, pdbi)
converter winim_converter_IDeskBandInfo*(x: ptr IDeskBandInfo): ptr IUnknown = cast[ptr IUnknown](x)
proc GetDefaultBandWidth*(self: ptr IDeskBandInfo, dwBandID: DWORD, dwViewMode: DWORD, pnWidth: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetDefaultBandWidth(self, dwBandID, dwViewMode, pnWidth)
converter winim_converter_IDeskBand2*(x: ptr IDeskBand2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IDeskBand2*(x: ptr IDeskBand2): ptr IDeskBand = cast[ptr IDeskBand](x)
converter winim_converter_IDeskBand2*(x: ptr IDeskBand2): ptr IDockingWindow = cast[ptr IDockingWindow](x)
converter winim_converter_IDeskBand2*(x: ptr IDeskBand2): ptr IOleWindow = cast[ptr IOleWindow](x)
proc CanRenderComposited*(self: ptr IDeskBand2, pfCanRenderComposited: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.CanRenderComposited(self, pfCanRenderComposited)
proc SetCompositionState*(self: ptr IDeskBand2, fCompositionEnabled: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetCompositionState(self, fCompositionEnabled)
proc GetCompositionState*(self: ptr IDeskBand2, pfCompositionEnabled: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetCompositionState(self, pfCompositionEnabled)
converter winim_converter_ITaskbarList*(x: ptr ITaskbarList): ptr IUnknown = cast[ptr IUnknown](x)
proc HrInit*(self: ptr ITaskbarList): HRESULT {.inline, discardable.} = self.lpVtbl.HrInit(self)
proc AddTab*(self: ptr ITaskbarList, hwnd: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.AddTab(self, hwnd)
proc DeleteTab*(self: ptr ITaskbarList, hwnd: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.DeleteTab(self, hwnd)
proc ActivateTab*(self: ptr ITaskbarList, hwnd: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.ActivateTab(self, hwnd)
proc SetActiveAlt*(self: ptr ITaskbarList, hwnd: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.SetActiveAlt(self, hwnd)
converter winim_converter_ITaskbarList2*(x: ptr ITaskbarList2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ITaskbarList2*(x: ptr ITaskbarList2): ptr ITaskbarList = cast[ptr ITaskbarList](x)
proc MarkFullscreenWindow*(self: ptr ITaskbarList2, hwnd: HWND, fFullscreen: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.MarkFullscreenWindow(self, hwnd, fFullscreen)
converter winim_converter_ITaskbarList3*(x: ptr ITaskbarList3): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ITaskbarList3*(x: ptr ITaskbarList3): ptr ITaskbarList2 = cast[ptr ITaskbarList2](x)
converter winim_converter_ITaskbarList3*(x: ptr ITaskbarList3): ptr ITaskbarList = cast[ptr ITaskbarList](x)
proc SetProgressValue*(self: ptr ITaskbarList3, hwnd: HWND, ullCompleted: ULONGLONG, ullTotal: ULONGLONG): HRESULT {.inline, discardable.} = self.lpVtbl.SetProgressValue(self, hwnd, ullCompleted, ullTotal)
proc SetProgressState*(self: ptr ITaskbarList3, hwnd: HWND, tbpFlags: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetProgressState(self, hwnd, tbpFlags)
proc RegisterTab*(self: ptr ITaskbarList3, hwndTab: HWND, hwndMDI: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.RegisterTab(self, hwndTab, hwndMDI)
proc UnregisterTab*(self: ptr ITaskbarList3, hwndTab: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.UnregisterTab(self, hwndTab)
proc SetTabOrder*(self: ptr ITaskbarList3, hwndTab: HWND, hwndInsertBefore: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.SetTabOrder(self, hwndTab, hwndInsertBefore)
proc SetTabActive*(self: ptr ITaskbarList3, hwndTab: HWND, hwndMDI: HWND, dwReserved: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetTabActive(self, hwndTab, hwndMDI, dwReserved)
proc ThumbBarAddButtons*(self: ptr ITaskbarList3, hwnd: HWND, cButtons: UINT, pButton: LPTHUMBBUTTON): HRESULT {.inline, discardable.} = self.lpVtbl.ThumbBarAddButtons(self, hwnd, cButtons, pButton)
proc ThumbBarUpdateButtons*(self: ptr ITaskbarList3, hwnd: HWND, cButtons: UINT, pButton: LPTHUMBBUTTON): HRESULT {.inline, discardable.} = self.lpVtbl.ThumbBarUpdateButtons(self, hwnd, cButtons, pButton)
proc ThumbBarSetImageList*(self: ptr ITaskbarList3, hwnd: HWND, himl: HIMAGELIST): HRESULT {.inline, discardable.} = self.lpVtbl.ThumbBarSetImageList(self, hwnd, himl)
proc SetOverlayIcon*(self: ptr ITaskbarList3, hwnd: HWND, hIcon: HICON, pszDescription: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetOverlayIcon(self, hwnd, hIcon, pszDescription)
proc SetThumbnailTooltip*(self: ptr ITaskbarList3, hwnd: HWND, pszTip: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetThumbnailTooltip(self, hwnd, pszTip)
proc SetThumbnailClip*(self: ptr ITaskbarList3, hwnd: HWND, prcClip: ptr RECT): HRESULT {.inline, discardable.} = self.lpVtbl.SetThumbnailClip(self, hwnd, prcClip)
converter winim_converter_ITaskbarList4*(x: ptr ITaskbarList4): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ITaskbarList4*(x: ptr ITaskbarList4): ptr ITaskbarList3 = cast[ptr ITaskbarList3](x)
converter winim_converter_ITaskbarList4*(x: ptr ITaskbarList4): ptr ITaskbarList2 = cast[ptr ITaskbarList2](x)
converter winim_converter_ITaskbarList4*(x: ptr ITaskbarList4): ptr ITaskbarList = cast[ptr ITaskbarList](x)
proc SetTabProperties*(self: ptr ITaskbarList4, hwndTab: HWND, stpFlags: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetTabProperties(self, hwndTab, stpFlags)
converter winim_converter_IStartMenuPinnedList*(x: ptr IStartMenuPinnedList): ptr IUnknown = cast[ptr IUnknown](x)
proc RemoveFromList*(self: ptr IStartMenuPinnedList, pitem: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveFromList(self, pitem)
converter winim_converter_ICDBurn*(x: ptr ICDBurn): ptr IUnknown = cast[ptr IUnknown](x)
proc GetRecorderDriveLetter*(self: ptr ICDBurn, pszDrive: LPWSTR, cch: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetRecorderDriveLetter(self, pszDrive, cch)
proc Burn*(self: ptr ICDBurn, hwnd: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.Burn(self, hwnd)
proc HasRecordableDrive*(self: ptr ICDBurn, pfHasRecorder: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.HasRecordableDrive(self, pfHasRecorder)
converter winim_converter_IWizardSite*(x: ptr IWizardSite): ptr IUnknown = cast[ptr IUnknown](x)
proc GetPreviousPage*(self: ptr IWizardSite, phpage: ptr HPROPSHEETPAGE): HRESULT {.inline, discardable.} = self.lpVtbl.GetPreviousPage(self, phpage)
proc GetNextPage*(self: ptr IWizardSite, phpage: ptr HPROPSHEETPAGE): HRESULT {.inline, discardable.} = self.lpVtbl.GetNextPage(self, phpage)
proc GetCancelledPage*(self: ptr IWizardSite, phpage: ptr HPROPSHEETPAGE): HRESULT {.inline, discardable.} = self.lpVtbl.GetCancelledPage(self, phpage)
converter winim_converter_IWizardExtension*(x: ptr IWizardExtension): ptr IUnknown = cast[ptr IUnknown](x)
proc AddPages*(self: ptr IWizardExtension, aPages: ptr HPROPSHEETPAGE, cPages: UINT, pnPagesAdded: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.AddPages(self, aPages, cPages, pnPagesAdded)
proc GetFirstPage*(self: ptr IWizardExtension, phpage: ptr HPROPSHEETPAGE): HRESULT {.inline, discardable.} = self.lpVtbl.GetFirstPage(self, phpage)
proc GetLastPage*(self: ptr IWizardExtension, phpage: ptr HPROPSHEETPAGE): HRESULT {.inline, discardable.} = self.lpVtbl.GetLastPage(self, phpage)
converter winim_converter_IWebWizardExtension*(x: ptr IWebWizardExtension): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IWebWizardExtension*(x: ptr IWebWizardExtension): ptr IWizardExtension = cast[ptr IWizardExtension](x)
proc SetInitialURL*(self: ptr IWebWizardExtension, pszURL: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetInitialURL(self, pszURL)
proc SetErrorURL*(self: ptr IWebWizardExtension, pszErrorURL: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetErrorURL(self, pszErrorURL)
converter winim_converter_IPublishingWizard*(x: ptr IPublishingWizard): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPublishingWizard*(x: ptr IPublishingWizard): ptr IWizardExtension = cast[ptr IWizardExtension](x)
proc Initialize*(self: ptr IPublishingWizard, pdo: ptr IDataObject, dwOptions: DWORD, pszServiceScope: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, pdo, dwOptions, pszServiceScope)
proc GetTransferManifest*(self: ptr IPublishingWizard, phrFromTransfer: ptr HRESULT, pdocManifest: ptr ptr IXMLDOMDocument): HRESULT {.inline, discardable.} = self.lpVtbl.GetTransferManifest(self, phrFromTransfer, pdocManifest)
converter winim_converter_IFolderViewHost*(x: ptr IFolderViewHost): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IFolderViewHost, hwndParent: HWND, pdo: ptr IDataObject, prc: ptr RECT): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, hwndParent, pdo, prc)
converter winim_converter_IExplorerBrowserEvents*(x: ptr IExplorerBrowserEvents): ptr IUnknown = cast[ptr IUnknown](x)
proc OnNavigationPending*(self: ptr IExplorerBrowserEvents, pidlFolder: PCIDLIST_ABSOLUTE): HRESULT {.inline, discardable.} = self.lpVtbl.OnNavigationPending(self, pidlFolder)
proc OnViewCreated*(self: ptr IExplorerBrowserEvents, psv: ptr IShellView): HRESULT {.inline, discardable.} = self.lpVtbl.OnViewCreated(self, psv)
proc OnNavigationComplete*(self: ptr IExplorerBrowserEvents, pidlFolder: PCIDLIST_ABSOLUTE): HRESULT {.inline, discardable.} = self.lpVtbl.OnNavigationComplete(self, pidlFolder)
proc OnNavigationFailed*(self: ptr IExplorerBrowserEvents, pidlFolder: PCIDLIST_ABSOLUTE): HRESULT {.inline, discardable.} = self.lpVtbl.OnNavigationFailed(self, pidlFolder)
converter winim_converter_IExplorerBrowser*(x: ptr IExplorerBrowser): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IExplorerBrowser, hwndParent: HWND, prc: ptr RECT, pfs: ptr FOLDERSETTINGS): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, hwndParent, prc, pfs)
proc Destroy*(self: ptr IExplorerBrowser): HRESULT {.inline, discardable.} = self.lpVtbl.Destroy(self)
proc SetRect*(self: ptr IExplorerBrowser, phdwp: ptr HDWP, rcBrowser: RECT): HRESULT {.inline, discardable.} = self.lpVtbl.SetRect(self, phdwp, rcBrowser)
proc SetPropertyBag*(self: ptr IExplorerBrowser, pszPropertyBag: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetPropertyBag(self, pszPropertyBag)
proc SetEmptyText*(self: ptr IExplorerBrowser, pszEmptyText: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetEmptyText(self, pszEmptyText)
proc SetFolderSettings*(self: ptr IExplorerBrowser, pfs: ptr FOLDERSETTINGS): HRESULT {.inline, discardable.} = self.lpVtbl.SetFolderSettings(self, pfs)
proc Advise*(self: ptr IExplorerBrowser, psbe: ptr IExplorerBrowserEvents, pdwCookie: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Advise(self, psbe, pdwCookie)
proc Unadvise*(self: ptr IExplorerBrowser, dwCookie: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Unadvise(self, dwCookie)
proc SetOptions*(self: ptr IExplorerBrowser, dwFlag: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetOptions(self, dwFlag)
proc GetOptions*(self: ptr IExplorerBrowser, pdwFlag: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetOptions(self, pdwFlag)
proc BrowseToIDList*(self: ptr IExplorerBrowser, pidl: PCUIDLIST_RELATIVE, uFlags: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.BrowseToIDList(self, pidl, uFlags)
proc BrowseToObject*(self: ptr IExplorerBrowser, punk: ptr IUnknown, uFlags: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.BrowseToObject(self, punk, uFlags)
proc FillFromObject*(self: ptr IExplorerBrowser, punk: ptr IUnknown, dwFlags: int32): HRESULT {.inline, discardable.} = self.lpVtbl.FillFromObject(self, punk, dwFlags)
proc RemoveAll*(self: ptr IExplorerBrowser): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveAll(self)
proc GetCurrentView*(self: ptr IExplorerBrowser, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetCurrentView(self, riid, ppv)
converter winim_converter_IAccessibleObject*(x: ptr IAccessibleObject): ptr IUnknown = cast[ptr IUnknown](x)
proc SetAccessibleName*(self: ptr IAccessibleObject, pszName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetAccessibleName(self, pszName)
converter winim_converter_IResultsFolder*(x: ptr IResultsFolder): ptr IUnknown = cast[ptr IUnknown](x)
proc AddItem*(self: ptr IResultsFolder, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.AddItem(self, psi)
proc AddIDList*(self: ptr IResultsFolder, pidl: PCIDLIST_ABSOLUTE, ppidlAdded: ptr PITEMID_CHILD): HRESULT {.inline, discardable.} = self.lpVtbl.AddIDList(self, pidl, ppidlAdded)
proc RemoveItem*(self: ptr IResultsFolder, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveItem(self, psi)
proc RemoveIDList*(self: ptr IResultsFolder, pidl: PCIDLIST_ABSOLUTE): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveIDList(self, pidl)
proc RemoveAll*(self: ptr IResultsFolder): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveAll(self)
converter winim_converter_IEnumObjects*(x: ptr IEnumObjects): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumObjects, celt: ULONG, riid: REFIID, rgelt: ptr pointer, pceltFetched: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, celt, riid, rgelt, pceltFetched)
proc Skip*(self: ptr IEnumObjects, celt: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, celt)
proc Reset*(self: ptr IEnumObjects): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumObjects, ppenum: ptr ptr IEnumObjects): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, ppenum)
converter winim_converter_IOperationsProgressDialog*(x: ptr IOperationsProgressDialog): ptr IUnknown = cast[ptr IUnknown](x)
proc StartProgressDialog*(self: ptr IOperationsProgressDialog, hwndOwner: HWND, flags: OPPROGDLGF): HRESULT {.inline, discardable.} = self.lpVtbl.StartProgressDialog(self, hwndOwner, flags)
proc StopProgressDialog*(self: ptr IOperationsProgressDialog): HRESULT {.inline, discardable.} = self.lpVtbl.StopProgressDialog(self)
proc SetOperation*(self: ptr IOperationsProgressDialog, action: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetOperation(self, action)
proc SetMode*(self: ptr IOperationsProgressDialog, mode: PDMODE): HRESULT {.inline, discardable.} = self.lpVtbl.SetMode(self, mode)
proc UpdateProgress*(self: ptr IOperationsProgressDialog, ullPointsCurrent: ULONGLONG, ullPointsTotal: ULONGLONG, ullSizeCurrent: ULONGLONG, ullSizeTotal: ULONGLONG, ullItemsCurrent: ULONGLONG, ullItemsTotal: ULONGLONG): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateProgress(self, ullPointsCurrent, ullPointsTotal, ullSizeCurrent, ullSizeTotal, ullItemsCurrent, ullItemsTotal)
proc UpdateLocations*(self: ptr IOperationsProgressDialog, psiSource: ptr IShellItem, psiTarget: ptr IShellItem, psiItem: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.UpdateLocations(self, psiSource, psiTarget, psiItem)
proc ResetTimer*(self: ptr IOperationsProgressDialog): HRESULT {.inline, discardable.} = self.lpVtbl.ResetTimer(self)
proc PauseTimer*(self: ptr IOperationsProgressDialog): HRESULT {.inline, discardable.} = self.lpVtbl.PauseTimer(self)
proc ResumeTimer*(self: ptr IOperationsProgressDialog): HRESULT {.inline, discardable.} = self.lpVtbl.ResumeTimer(self)
proc GetMilliseconds*(self: ptr IOperationsProgressDialog, pullElapsed: ptr ULONGLONG, pullRemaining: ptr ULONGLONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetMilliseconds(self, pullElapsed, pullRemaining)
proc GetOperationStatus*(self: ptr IOperationsProgressDialog, popstatus: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetOperationStatus(self, popstatus)
converter winim_converter_IIOCancelInformation*(x: ptr IIOCancelInformation): ptr IUnknown = cast[ptr IUnknown](x)
proc SetCancelInformation*(self: ptr IIOCancelInformation, dwThreadID: DWORD, uMsgCancel: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetCancelInformation(self, dwThreadID, uMsgCancel)
proc GetCancelInformation*(self: ptr IIOCancelInformation, pdwThreadID: ptr DWORD, puMsgCancel: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetCancelInformation(self, pdwThreadID, puMsgCancel)
converter winim_converter_IFileOperation*(x: ptr IFileOperation): ptr IUnknown = cast[ptr IUnknown](x)
proc Advise*(self: ptr IFileOperation, pfops: ptr IFileOperationProgressSink, pdwCookie: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Advise(self, pfops, pdwCookie)
proc Unadvise*(self: ptr IFileOperation, dwCookie: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Unadvise(self, dwCookie)
proc SetOperationFlags*(self: ptr IFileOperation, dwOperationFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetOperationFlags(self, dwOperationFlags)
proc SetProgressMessage*(self: ptr IFileOperation, pszMessage: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetProgressMessage(self, pszMessage)
proc SetProgressDialog*(self: ptr IFileOperation, popd: ptr IOperationsProgressDialog): HRESULT {.inline, discardable.} = self.lpVtbl.SetProgressDialog(self, popd)
proc SetProperties*(self: ptr IFileOperation, pproparray: ptr IPropertyChangeArray): HRESULT {.inline, discardable.} = self.lpVtbl.SetProperties(self, pproparray)
proc SetOwnerWindow*(self: ptr IFileOperation, hwndOwner: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.SetOwnerWindow(self, hwndOwner)
proc ApplyPropertiesToItem*(self: ptr IFileOperation, psiItem: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.ApplyPropertiesToItem(self, psiItem)
proc ApplyPropertiesToItems*(self: ptr IFileOperation, punkItems: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.ApplyPropertiesToItems(self, punkItems)
proc RenameItem*(self: ptr IFileOperation, psiItem: ptr IShellItem, pszNewName: LPCWSTR, pfopsItem: ptr IFileOperationProgressSink): HRESULT {.inline, discardable.} = self.lpVtbl.RenameItem(self, psiItem, pszNewName, pfopsItem)
proc RenameItems*(self: ptr IFileOperation, pUnkItems: ptr IUnknown, pszNewName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.RenameItems(self, pUnkItems, pszNewName)
proc MoveItem*(self: ptr IFileOperation, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszNewName: LPCWSTR, pfopsItem: ptr IFileOperationProgressSink): HRESULT {.inline, discardable.} = self.lpVtbl.MoveItem(self, psiItem, psiDestinationFolder, pszNewName, pfopsItem)
proc MoveItems*(self: ptr IFileOperation, punkItems: ptr IUnknown, psiDestinationFolder: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.MoveItems(self, punkItems, psiDestinationFolder)
proc CopyItem*(self: ptr IFileOperation, psiItem: ptr IShellItem, psiDestinationFolder: ptr IShellItem, pszCopyName: LPCWSTR, pfopsItem: ptr IFileOperationProgressSink): HRESULT {.inline, discardable.} = self.lpVtbl.CopyItem(self, psiItem, psiDestinationFolder, pszCopyName, pfopsItem)
proc CopyItems*(self: ptr IFileOperation, punkItems: ptr IUnknown, psiDestinationFolder: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.CopyItems(self, punkItems, psiDestinationFolder)
proc DeleteItem*(self: ptr IFileOperation, psiItem: ptr IShellItem, pfopsItem: ptr IFileOperationProgressSink): HRESULT {.inline, discardable.} = self.lpVtbl.DeleteItem(self, psiItem, pfopsItem)
proc DeleteItems*(self: ptr IFileOperation, punkItems: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.DeleteItems(self, punkItems)
proc NewItem*(self: ptr IFileOperation, psiDestinationFolder: ptr IShellItem, dwFileAttributes: DWORD, pszName: LPCWSTR, pszTemplateName: LPCWSTR, pfopsItem: ptr IFileOperationProgressSink): HRESULT {.inline, discardable.} = self.lpVtbl.NewItem(self, psiDestinationFolder, dwFileAttributes, pszName, pszTemplateName, pfopsItem)
proc PerformOperations*(self: ptr IFileOperation): HRESULT {.inline, discardable.} = self.lpVtbl.PerformOperations(self)
proc GetAnyOperationsAborted*(self: ptr IFileOperation, pfAnyOperationsAborted: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetAnyOperationsAborted(self, pfAnyOperationsAborted)
converter winim_converter_IObjectProvider*(x: ptr IObjectProvider): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryObject*(self: ptr IObjectProvider, guidObject: REFGUID, riid: REFIID, ppvOut: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.QueryObject(self, guidObject, riid, ppvOut)
converter winim_converter_INamespaceWalkCB*(x: ptr INamespaceWalkCB): ptr IUnknown = cast[ptr IUnknown](x)
proc FoundItem*(self: ptr INamespaceWalkCB, psf: ptr IShellFolder, pidl: PCUITEMID_CHILD): HRESULT {.inline, discardable.} = self.lpVtbl.FoundItem(self, psf, pidl)
proc EnterFolder*(self: ptr INamespaceWalkCB, psf: ptr IShellFolder, pidl: PCUITEMID_CHILD): HRESULT {.inline, discardable.} = self.lpVtbl.EnterFolder(self, psf, pidl)
proc LeaveFolder*(self: ptr INamespaceWalkCB, psf: ptr IShellFolder, pidl: PCUITEMID_CHILD): HRESULT {.inline, discardable.} = self.lpVtbl.LeaveFolder(self, psf, pidl)
proc InitializeProgressDialog*(self: ptr INamespaceWalkCB, ppszTitle: ptr LPWSTR, ppszCancel: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.InitializeProgressDialog(self, ppszTitle, ppszCancel)
converter winim_converter_INamespaceWalkCB2*(x: ptr INamespaceWalkCB2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_INamespaceWalkCB2*(x: ptr INamespaceWalkCB2): ptr INamespaceWalkCB = cast[ptr INamespaceWalkCB](x)
proc WalkComplete*(self: ptr INamespaceWalkCB2, hr: HRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.WalkComplete(self, hr)
converter winim_converter_INamespaceWalk*(x: ptr INamespaceWalk): ptr IUnknown = cast[ptr IUnknown](x)
proc Walk*(self: ptr INamespaceWalk, punkToWalk: ptr IUnknown, dwFlags: DWORD, cDepth: int32, pnswcb: ptr INamespaceWalkCB): HRESULT {.inline, discardable.} = self.lpVtbl.Walk(self, punkToWalk, dwFlags, cDepth, pnswcb)
proc GetIDArrayResult*(self: ptr INamespaceWalk, pcItems: ptr UINT, prgpidl: ptr ptr PIDLIST_ABSOLUTE): HRESULT {.inline, discardable.} = self.lpVtbl.GetIDArrayResult(self, pcItems, prgpidl)
converter winim_converter_IAutoCompleteDropDown*(x: ptr IAutoCompleteDropDown): ptr IUnknown = cast[ptr IUnknown](x)
proc GetDropDownStatus*(self: ptr IAutoCompleteDropDown, pdwFlags: ptr DWORD, ppwszString: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetDropDownStatus(self, pdwFlags, ppwszString)
proc ResetEnumerator*(self: ptr IAutoCompleteDropDown): HRESULT {.inline, discardable.} = self.lpVtbl.ResetEnumerator(self)
converter winim_converter_IBandSite*(x: ptr IBandSite): ptr IUnknown = cast[ptr IUnknown](x)
proc AddBand*(self: ptr IBandSite, punk: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.AddBand(self, punk)
proc EnumBands*(self: ptr IBandSite, uBand: UINT, pdwBandID: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.EnumBands(self, uBand, pdwBandID)
proc QueryBand*(self: ptr IBandSite, dwBandID: DWORD, ppstb: ptr ptr IDeskBand, pdwState: ptr DWORD, pszName: LPWSTR, cchName: int32): HRESULT {.inline, discardable.} = self.lpVtbl.QueryBand(self, dwBandID, ppstb, pdwState, pszName, cchName)
proc SetBandState*(self: ptr IBandSite, dwBandID: DWORD, dwMask: DWORD, dwState: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetBandState(self, dwBandID, dwMask, dwState)
proc RemoveBand*(self: ptr IBandSite, dwBandID: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveBand(self, dwBandID)
proc GetBandObject*(self: ptr IBandSite, dwBandID: DWORD, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetBandObject(self, dwBandID, riid, ppv)
proc SetBandSiteInfo*(self: ptr IBandSite, pbsinfo: ptr BANDSITEINFO): HRESULT {.inline, discardable.} = self.lpVtbl.SetBandSiteInfo(self, pbsinfo)
proc GetBandSiteInfo*(self: ptr IBandSite, pbsinfo: ptr BANDSITEINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetBandSiteInfo(self, pbsinfo)
converter winim_converter_IModalWindow*(x: ptr IModalWindow): ptr IUnknown = cast[ptr IUnknown](x)
proc Show*(self: ptr IModalWindow, hwndOwner: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.Show(self, hwndOwner)
converter winim_converter_ICDBurnExt*(x: ptr ICDBurnExt): ptr IUnknown = cast[ptr IUnknown](x)
proc GetSupportedActionTypes*(self: ptr ICDBurnExt, pdwActions: ptr CDBE_ACTIONS): HRESULT {.inline, discardable.} = self.lpVtbl.GetSupportedActionTypes(self, pdwActions)
converter winim_converter_IContextMenuSite*(x: ptr IContextMenuSite): ptr IUnknown = cast[ptr IUnknown](x)
proc DoContextMenuPopup*(self: ptr IContextMenuSite, punkContextMenu: ptr IUnknown, fFlags: UINT, pt: POINT): HRESULT {.inline, discardable.} = self.lpVtbl.DoContextMenuPopup(self, punkContextMenu, fFlags, pt)
converter winim_converter_IEnumReadyCallback*(x: ptr IEnumReadyCallback): ptr IUnknown = cast[ptr IUnknown](x)
proc EnumReady*(self: ptr IEnumReadyCallback): HRESULT {.inline, discardable.} = self.lpVtbl.EnumReady(self)
converter winim_converter_IEnumerableView*(x: ptr IEnumerableView): ptr IUnknown = cast[ptr IUnknown](x)
proc SetEnumReadyCallback*(self: ptr IEnumerableView, percb: ptr IEnumReadyCallback): HRESULT {.inline, discardable.} = self.lpVtbl.SetEnumReadyCallback(self, percb)
proc CreateEnumIDListFromContents*(self: ptr IEnumerableView, pidlFolder: PCIDLIST_ABSOLUTE, dwEnumFlags: DWORD, ppEnumIDList: ptr ptr IEnumIDList): HRESULT {.inline, discardable.} = self.lpVtbl.CreateEnumIDListFromContents(self, pidlFolder, dwEnumFlags, ppEnumIDList)
converter winim_converter_IInsertItem*(x: ptr IInsertItem): ptr IUnknown = cast[ptr IUnknown](x)
proc InsertItem*(self: ptr IInsertItem, pidl: PCUIDLIST_RELATIVE): HRESULT {.inline, discardable.} = self.lpVtbl.InsertItem(self, pidl)
converter winim_converter_IMenuBand*(x: ptr IMenuBand): ptr IUnknown = cast[ptr IUnknown](x)
proc IsMenuMessage*(self: ptr IMenuBand, pmsg: ptr MSG): HRESULT {.inline, discardable.} = self.lpVtbl.IsMenuMessage(self, pmsg)
proc TranslateMenuMessage*(self: ptr IMenuBand, pmsg: ptr MSG, plRet: ptr LRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateMenuMessage(self, pmsg, plRet)
converter winim_converter_IFolderBandPriv*(x: ptr IFolderBandPriv): ptr IUnknown = cast[ptr IUnknown](x)
proc SetCascade*(self: ptr IFolderBandPriv, fCascade: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetCascade(self, fCascade)
proc SetAccelerators*(self: ptr IFolderBandPriv, fAccelerators: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetAccelerators(self, fAccelerators)
proc SetNoIcons*(self: ptr IFolderBandPriv, fNoIcons: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetNoIcons(self, fNoIcons)
proc SetNoText*(self: ptr IFolderBandPriv, fNoText: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetNoText(self, fNoText)
converter winim_converter_IRegTreeItem*(x: ptr IRegTreeItem): ptr IUnknown = cast[ptr IUnknown](x)
proc GetCheckState*(self: ptr IRegTreeItem, pbCheck: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetCheckState(self, pbCheck)
proc SetCheckState*(self: ptr IRegTreeItem, bCheck: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetCheckState(self, bCheck)
converter winim_converter_IImageRecompress*(x: ptr IImageRecompress): ptr IUnknown = cast[ptr IUnknown](x)
proc RecompressImage*(self: ptr IImageRecompress, psi: ptr IShellItem, cx: int32, cy: int32, iQuality: int32, pstg: ptr IStorage, ppstrmOut: ptr ptr IStream): HRESULT {.inline, discardable.} = self.lpVtbl.RecompressImage(self, psi, cx, cy, iQuality, pstg, ppstrmOut)
converter winim_converter_IDeskBar*(x: ptr IDeskBar): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IDeskBar*(x: ptr IDeskBar): ptr IOleWindow = cast[ptr IOleWindow](x)
proc SetClient*(self: ptr IDeskBar, punkClient: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.SetClient(self, punkClient)
proc GetClient*(self: ptr IDeskBar, ppunkClient: ptr ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.GetClient(self, ppunkClient)
proc OnPosRectChangeDB*(self: ptr IDeskBar, prc: ptr RECT): HRESULT {.inline, discardable.} = self.lpVtbl.OnPosRectChangeDB(self, prc)
converter winim_converter_IMenuPopup*(x: ptr IMenuPopup): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IMenuPopup*(x: ptr IMenuPopup): ptr IDeskBar = cast[ptr IDeskBar](x)
converter winim_converter_IMenuPopup*(x: ptr IMenuPopup): ptr IOleWindow = cast[ptr IOleWindow](x)
proc Popup*(self: ptr IMenuPopup, ppt: ptr POINTL, prcExclude: ptr RECTL, dwFlags: MP_POPUPFLAGS): HRESULT {.inline, discardable.} = self.lpVtbl.Popup(self, ppt, prcExclude, dwFlags)
proc OnSelect*(self: ptr IMenuPopup, dwSelectType: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OnSelect(self, dwSelectType)
proc SetSubMenu*(self: ptr IMenuPopup, pmp: ptr IMenuPopup, fSet: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetSubMenu(self, pmp, fSet)
converter winim_converter_IFileIsInUse*(x: ptr IFileIsInUse): ptr IUnknown = cast[ptr IUnknown](x)
proc GetAppName*(self: ptr IFileIsInUse, ppszName: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetAppName(self, ppszName)
proc GetUsage*(self: ptr IFileIsInUse, pfut: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetUsage(self, pfut)
proc GetCapabilities*(self: ptr IFileIsInUse, pdwCapFlags: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetCapabilities(self, pdwCapFlags)
proc GetSwitchToHWND*(self: ptr IFileIsInUse, phwnd: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.GetSwitchToHWND(self, phwnd)
proc CloseFile*(self: ptr IFileIsInUse): HRESULT {.inline, discardable.} = self.lpVtbl.CloseFile(self)
converter winim_converter_IFileDialogEvents*(x: ptr IFileDialogEvents): ptr IUnknown = cast[ptr IUnknown](x)
proc OnFileOk*(self: ptr IFileDialogEvents, pfd: ptr IFileDialog): HRESULT {.inline, discardable.} = self.lpVtbl.OnFileOk(self, pfd)
proc OnFolderChanging*(self: ptr IFileDialogEvents, pfd: ptr IFileDialog, psiFolder: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.OnFolderChanging(self, pfd, psiFolder)
proc OnFolderChange*(self: ptr IFileDialogEvents, pfd: ptr IFileDialog): HRESULT {.inline, discardable.} = self.lpVtbl.OnFolderChange(self, pfd)
proc OnSelectionChange*(self: ptr IFileDialogEvents, pfd: ptr IFileDialog): HRESULT {.inline, discardable.} = self.lpVtbl.OnSelectionChange(self, pfd)
proc OnShareViolation*(self: ptr IFileDialogEvents, pfd: ptr IFileDialog, psi: ptr IShellItem, pResponse: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.OnShareViolation(self, pfd, psi, pResponse)
proc OnTypeChange*(self: ptr IFileDialogEvents, pfd: ptr IFileDialog): HRESULT {.inline, discardable.} = self.lpVtbl.OnTypeChange(self, pfd)
proc OnOverwrite*(self: ptr IFileDialogEvents, pfd: ptr IFileDialog, psi: ptr IShellItem, pResponse: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.OnOverwrite(self, pfd, psi, pResponse)
converter winim_converter_IFileDialog*(x: ptr IFileDialog): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IFileDialog*(x: ptr IFileDialog): ptr IModalWindow = cast[ptr IModalWindow](x)
proc SetFileTypes*(self: ptr IFileDialog, cFileTypes: UINT, rgFilterSpec: ptr COMDLG_FILTERSPEC): HRESULT {.inline, discardable.} = self.lpVtbl.SetFileTypes(self, cFileTypes, rgFilterSpec)
proc SetFileTypeIndex*(self: ptr IFileDialog, iFileType: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetFileTypeIndex(self, iFileType)
proc GetFileTypeIndex*(self: ptr IFileDialog, piFileType: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetFileTypeIndex(self, piFileType)
proc Advise*(self: ptr IFileDialog, pfde: ptr IFileDialogEvents, pdwCookie: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Advise(self, pfde, pdwCookie)
proc Unadvise*(self: ptr IFileDialog, dwCookie: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Unadvise(self, dwCookie)
proc SetOptions*(self: ptr IFileDialog, fos: FILEOPENDIALOGOPTIONS): HRESULT {.inline, discardable.} = self.lpVtbl.SetOptions(self, fos)
proc GetOptions*(self: ptr IFileDialog, pfos: ptr FILEOPENDIALOGOPTIONS): HRESULT {.inline, discardable.} = self.lpVtbl.GetOptions(self, pfos)
proc SetDefaultFolder*(self: ptr IFileDialog, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.SetDefaultFolder(self, psi)
proc SetFolder*(self: ptr IFileDialog, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.SetFolder(self, psi)
proc GetFolder*(self: ptr IFileDialog, ppsi: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolder(self, ppsi)
proc GetCurrentSelection*(self: ptr IFileDialog, ppsi: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.GetCurrentSelection(self, ppsi)
proc SetFileName*(self: ptr IFileDialog, pszName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetFileName(self, pszName)
proc GetFileName*(self: ptr IFileDialog, pszName: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetFileName(self, pszName)
proc SetTitle*(self: ptr IFileDialog, pszTitle: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetTitle(self, pszTitle)
proc SetOkButtonLabel*(self: ptr IFileDialog, pszText: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetOkButtonLabel(self, pszText)
proc SetFileNameLabel*(self: ptr IFileDialog, pszLabel: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetFileNameLabel(self, pszLabel)
proc GetResult*(self: ptr IFileDialog, ppsi: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.GetResult(self, ppsi)
proc AddPlace*(self: ptr IFileDialog, psi: ptr IShellItem, fdap: int32): HRESULT {.inline, discardable.} = self.lpVtbl.AddPlace(self, psi, fdap)
proc SetDefaultExtension*(self: ptr IFileDialog, pszDefaultExtension: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetDefaultExtension(self, pszDefaultExtension)
proc Close*(self: ptr IFileDialog, hr: HRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.Close(self, hr)
proc SetClientGuid*(self: ptr IFileDialog, guid: REFGUID): HRESULT {.inline, discardable.} = self.lpVtbl.SetClientGuid(self, guid)
proc ClearClientData*(self: ptr IFileDialog): HRESULT {.inline, discardable.} = self.lpVtbl.ClearClientData(self)
proc SetFilter*(self: ptr IFileDialog, pFilter: ptr IShellItemFilter): HRESULT {.inline, discardable.} = self.lpVtbl.SetFilter(self, pFilter)
converter winim_converter_IFileSaveDialog*(x: ptr IFileSaveDialog): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IFileSaveDialog*(x: ptr IFileSaveDialog): ptr IFileDialog = cast[ptr IFileDialog](x)
converter winim_converter_IFileSaveDialog*(x: ptr IFileSaveDialog): ptr IModalWindow = cast[ptr IModalWindow](x)
proc SetSaveAsItem*(self: ptr IFileSaveDialog, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.SetSaveAsItem(self, psi)
proc SetProperties*(self: ptr IFileSaveDialog, pStore: ptr IPropertyStore): HRESULT {.inline, discardable.} = self.lpVtbl.SetProperties(self, pStore)
proc SetCollectedProperties*(self: ptr IFileSaveDialog, pList: ptr IPropertyDescriptionList, fAppendDefault: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetCollectedProperties(self, pList, fAppendDefault)
proc GetProperties*(self: ptr IFileSaveDialog, ppStore: ptr ptr IPropertyStore): HRESULT {.inline, discardable.} = self.lpVtbl.GetProperties(self, ppStore)
proc ApplyProperties*(self: ptr IFileSaveDialog, psi: ptr IShellItem, pStore: ptr IPropertyStore, hwnd: HWND, pSink: ptr IFileOperationProgressSink): HRESULT {.inline, discardable.} = self.lpVtbl.ApplyProperties(self, psi, pStore, hwnd, pSink)
converter winim_converter_IFileOpenDialog*(x: ptr IFileOpenDialog): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IFileOpenDialog*(x: ptr IFileOpenDialog): ptr IFileDialog = cast[ptr IFileDialog](x)
converter winim_converter_IFileOpenDialog*(x: ptr IFileOpenDialog): ptr IModalWindow = cast[ptr IModalWindow](x)
proc GetResults*(self: ptr IFileOpenDialog, ppenum: ptr ptr IShellItemArray): HRESULT {.inline, discardable.} = self.lpVtbl.GetResults(self, ppenum)
proc GetSelectedItems*(self: ptr IFileOpenDialog, ppsai: ptr ptr IShellItemArray): HRESULT {.inline, discardable.} = self.lpVtbl.GetSelectedItems(self, ppsai)
converter winim_converter_IFileDialogCustomize*(x: ptr IFileDialogCustomize): ptr IUnknown = cast[ptr IUnknown](x)
proc EnableOpenDropDown*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.EnableOpenDropDown(self, dwIDCtl)
proc AddMenu*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszLabel: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.AddMenu(self, dwIDCtl, pszLabel)
proc AddPushButton*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszLabel: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.AddPushButton(self, dwIDCtl, pszLabel)
proc AddComboBox*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.AddComboBox(self, dwIDCtl)
proc AddRadioButtonList*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.AddRadioButtonList(self, dwIDCtl)
proc AddCheckButton*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszLabel: LPCWSTR, bChecked: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.AddCheckButton(self, dwIDCtl, pszLabel, bChecked)
proc AddEditBox*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszText: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.AddEditBox(self, dwIDCtl, pszText)
proc AddSeparator*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.AddSeparator(self, dwIDCtl)
proc AddText*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszText: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.AddText(self, dwIDCtl, pszText)
proc SetControlLabel*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszLabel: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetControlLabel(self, dwIDCtl, pszLabel)
proc GetControlState*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pdwState: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetControlState(self, dwIDCtl, pdwState)
proc SetControlState*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwState: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetControlState(self, dwIDCtl, dwState)
proc GetEditBoxText*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, ppszText: ptr ptr WCHAR): HRESULT {.inline, discardable.} = self.lpVtbl.GetEditBoxText(self, dwIDCtl, ppszText)
proc SetEditBoxText*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszText: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetEditBoxText(self, dwIDCtl, pszText)
proc GetCheckButtonState*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pbChecked: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetCheckButtonState(self, dwIDCtl, pbChecked)
proc SetCheckButtonState*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, bChecked: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetCheckButtonState(self, dwIDCtl, bChecked)
proc AddControlItem*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD, pszLabel: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.AddControlItem(self, dwIDCtl, dwIDItem, pszLabel)
proc RemoveControlItem*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveControlItem(self, dwIDCtl, dwIDItem)
proc RemoveAllControlItems*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveAllControlItems(self, dwIDCtl)
proc GetControlItemState*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD, pdwState: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetControlItemState(self, dwIDCtl, dwIDItem, pdwState)
proc SetControlItemState*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD, dwState: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetControlItemState(self, dwIDCtl, dwIDItem, dwState)
proc GetSelectedControlItem*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pdwIDItem: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetSelectedControlItem(self, dwIDCtl, pdwIDItem)
proc SetSelectedControlItem*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetSelectedControlItem(self, dwIDCtl, dwIDItem)
proc StartVisualGroup*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, pszLabel: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.StartVisualGroup(self, dwIDCtl, pszLabel)
proc EndVisualGroup*(self: ptr IFileDialogCustomize): HRESULT {.inline, discardable.} = self.lpVtbl.EndVisualGroup(self)
proc MakeProminent*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.MakeProminent(self, dwIDCtl)
proc SetControlItemText*(self: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD, pszLabel: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetControlItemText(self, dwIDCtl, dwIDItem, pszLabel)
converter winim_converter_IFileDialogControlEvents*(x: ptr IFileDialogControlEvents): ptr IUnknown = cast[ptr IUnknown](x)
proc OnItemSelected*(self: ptr IFileDialogControlEvents, pfdc: ptr IFileDialogCustomize, dwIDCtl: DWORD, dwIDItem: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OnItemSelected(self, pfdc, dwIDCtl, dwIDItem)
proc OnButtonClicked*(self: ptr IFileDialogControlEvents, pfdc: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OnButtonClicked(self, pfdc, dwIDCtl)
proc OnCheckButtonToggled*(self: ptr IFileDialogControlEvents, pfdc: ptr IFileDialogCustomize, dwIDCtl: DWORD, bChecked: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.OnCheckButtonToggled(self, pfdc, dwIDCtl, bChecked)
proc OnControlActivating*(self: ptr IFileDialogControlEvents, pfdc: ptr IFileDialogCustomize, dwIDCtl: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OnControlActivating(self, pfdc, dwIDCtl)
converter winim_converter_IFileDialog2*(x: ptr IFileDialog2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IFileDialog2*(x: ptr IFileDialog2): ptr IFileDialog = cast[ptr IFileDialog](x)
converter winim_converter_IFileDialog2*(x: ptr IFileDialog2): ptr IModalWindow = cast[ptr IModalWindow](x)
proc SetCancelButtonLabel*(self: ptr IFileDialog2, pszLabel: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetCancelButtonLabel(self, pszLabel)
proc SetNavigationRoot*(self: ptr IFileDialog2, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.SetNavigationRoot(self, psi)
converter winim_converter_IApplicationAssociationRegistration*(x: ptr IApplicationAssociationRegistration): ptr IUnknown = cast[ptr IUnknown](x)
proc QueryCurrentDefault*(self: ptr IApplicationAssociationRegistration, pszQuery: LPCWSTR, atQueryType: int32, alQueryLevel: int32, ppszAssociation: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.QueryCurrentDefault(self, pszQuery, atQueryType, alQueryLevel, ppszAssociation)
proc QueryAppIsDefault*(self: ptr IApplicationAssociationRegistration, pszQuery: LPCWSTR, atQueryType: int32, alQueryLevel: int32, pszAppRegistryName: LPCWSTR, pfDefault: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.QueryAppIsDefault(self, pszQuery, atQueryType, alQueryLevel, pszAppRegistryName, pfDefault)
proc QueryAppIsDefaultAll*(self: ptr IApplicationAssociationRegistration, alQueryLevel: int32, pszAppRegistryName: LPCWSTR, pfDefault: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.QueryAppIsDefaultAll(self, alQueryLevel, pszAppRegistryName, pfDefault)
proc SetAppAsDefault*(self: ptr IApplicationAssociationRegistration, pszAppRegistryName: LPCWSTR, pszSet: LPCWSTR, atSetType: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetAppAsDefault(self, pszAppRegistryName, pszSet, atSetType)
proc SetAppAsDefaultAll*(self: ptr IApplicationAssociationRegistration, pszAppRegistryName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetAppAsDefaultAll(self, pszAppRegistryName)
proc ClearUserAssociations*(self: ptr IApplicationAssociationRegistration): HRESULT {.inline, discardable.} = self.lpVtbl.ClearUserAssociations(self)
converter winim_converter_IApplicationAssociationRegistrationUI*(x: ptr IApplicationAssociationRegistrationUI): ptr IUnknown = cast[ptr IUnknown](x)
proc LaunchAdvancedAssociationUI*(self: ptr IApplicationAssociationRegistrationUI, pszAppRegistryName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.LaunchAdvancedAssociationUI(self, pszAppRegistryName)
converter winim_converter_IDelegateFolder*(x: ptr IDelegateFolder): ptr IUnknown = cast[ptr IUnknown](x)
proc SetItemAlloc*(self: ptr IDelegateFolder, pmalloc: ptr IMalloc): HRESULT {.inline, discardable.} = self.lpVtbl.SetItemAlloc(self, pmalloc)
converter winim_converter_IBrowserFrameOptions*(x: ptr IBrowserFrameOptions): ptr IUnknown = cast[ptr IUnknown](x)
proc GetFrameOptions*(self: ptr IBrowserFrameOptions, dwMask: BROWSERFRAMEOPTIONS, pdwOptions: ptr BROWSERFRAMEOPTIONS): HRESULT {.inline, discardable.} = self.lpVtbl.GetFrameOptions(self, dwMask, pdwOptions)
converter winim_converter_INewWindowManager*(x: ptr INewWindowManager): ptr IUnknown = cast[ptr IUnknown](x)
proc EvaluateNewWindow*(self: ptr INewWindowManager, pszUrl: LPCWSTR, pszName: LPCWSTR, pszUrlContext: LPCWSTR, pszFeatures: LPCWSTR, fReplace: WINBOOL, dwFlags: DWORD, dwUserActionTime: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.EvaluateNewWindow(self, pszUrl, pszName, pszUrlContext, pszFeatures, fReplace, dwFlags, dwUserActionTime)
converter winim_converter_IAttachmentExecute*(x: ptr IAttachmentExecute): ptr IUnknown = cast[ptr IUnknown](x)
proc SetClientTitle*(self: ptr IAttachmentExecute, pszTitle: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetClientTitle(self, pszTitle)
proc SetClientGuid*(self: ptr IAttachmentExecute, guid: REFGUID): HRESULT {.inline, discardable.} = self.lpVtbl.SetClientGuid(self, guid)
proc SetLocalPath*(self: ptr IAttachmentExecute, pszLocalPath: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetLocalPath(self, pszLocalPath)
proc SetFileName*(self: ptr IAttachmentExecute, pszFileName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetFileName(self, pszFileName)
proc SetSource*(self: ptr IAttachmentExecute, pszSource: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetSource(self, pszSource)
proc SetReferrer*(self: ptr IAttachmentExecute, pszReferrer: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetReferrer(self, pszReferrer)
proc CheckPolicy*(self: ptr IAttachmentExecute): HRESULT {.inline, discardable.} = self.lpVtbl.CheckPolicy(self)
proc Prompt*(self: ptr IAttachmentExecute, hwnd: HWND, prompt: int32, paction: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.Prompt(self, hwnd, prompt, paction)
proc Save*(self: ptr IAttachmentExecute): HRESULT {.inline, discardable.} = self.lpVtbl.Save(self)
proc Execute*(self: ptr IAttachmentExecute, hwnd: HWND, pszVerb: LPCWSTR, phProcess: ptr HANDLE): HRESULT {.inline, discardable.} = self.lpVtbl.Execute(self, hwnd, pszVerb, phProcess)
proc SaveWithUI*(self: ptr IAttachmentExecute, hwnd: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.SaveWithUI(self, hwnd)
proc ClearClientState*(self: ptr IAttachmentExecute): HRESULT {.inline, discardable.} = self.lpVtbl.ClearClientState(self)
converter winim_converter_IShellMenuCallback*(x: ptr IShellMenuCallback): ptr IUnknown = cast[ptr IUnknown](x)
proc CallbackSM*(self: ptr IShellMenuCallback, psmd: LPSMDATA, uMsg: UINT, wParam: WPARAM, lParam: LPARAM): HRESULT {.inline, discardable.} = self.lpVtbl.CallbackSM(self, psmd, uMsg, wParam, lParam)
converter winim_converter_IShellMenu*(x: ptr IShellMenu): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IShellMenu, psmc: ptr IShellMenuCallback, uId: UINT, uIdAncestor: UINT, dwFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, psmc, uId, uIdAncestor, dwFlags)
proc GetMenuInfo*(self: ptr IShellMenu, ppsmc: ptr ptr IShellMenuCallback, puId: ptr UINT, puIdAncestor: ptr UINT, pdwFlags: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetMenuInfo(self, ppsmc, puId, puIdAncestor, pdwFlags)
proc SetShellFolder*(self: ptr IShellMenu, psf: ptr IShellFolder, pidlFolder: PCIDLIST_ABSOLUTE, hKey: HKEY, dwFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetShellFolder(self, psf, pidlFolder, hKey, dwFlags)
proc GetShellFolder*(self: ptr IShellMenu, pdwFlags: ptr DWORD, ppidl: ptr PIDLIST_ABSOLUTE, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetShellFolder(self, pdwFlags, ppidl, riid, ppv)
proc SetMenu*(self: ptr IShellMenu, hmenu: HMENU, hwnd: HWND, dwFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetMenu(self, hmenu, hwnd, dwFlags)
proc GetMenu*(self: ptr IShellMenu, phmenu: ptr HMENU, phwnd: ptr HWND, pdwFlags: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.GetMenu(self, phmenu, phwnd, pdwFlags)
proc InvalidateItem*(self: ptr IShellMenu, psmd: LPSMDATA, dwFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.InvalidateItem(self, psmd, dwFlags)
proc GetState*(self: ptr IShellMenu, psmd: LPSMDATA): HRESULT {.inline, discardable.} = self.lpVtbl.GetState(self, psmd)
proc SetMenuToolbar*(self: ptr IShellMenu, punk: ptr IUnknown, dwFlags: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetMenuToolbar(self, punk, dwFlags)
converter winim_converter_IShellRunDll*(x: ptr IShellRunDll): ptr IUnknown = cast[ptr IUnknown](x)
proc Run*(self: ptr IShellRunDll, pszArgs: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.Run(self, pszArgs)
converter winim_converter_IKnownFolder*(x: ptr IKnownFolder): ptr IUnknown = cast[ptr IUnknown](x)
proc GetId*(self: ptr IKnownFolder, pkfid: ptr KNOWNFOLDERID): HRESULT {.inline, discardable.} = self.lpVtbl.GetId(self, pkfid)
proc GetCategory*(self: ptr IKnownFolder, pCategory: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetCategory(self, pCategory)
proc GetShellItem*(self: ptr IKnownFolder, dwFlags: DWORD, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetShellItem(self, dwFlags, riid, ppv)
proc GetPath*(self: ptr IKnownFolder, dwFlags: DWORD, ppszPath: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetPath(self, dwFlags, ppszPath)
proc SetPath*(self: ptr IKnownFolder, dwFlags: DWORD, pszPath: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetPath(self, dwFlags, pszPath)
proc GetIDList*(self: ptr IKnownFolder, dwFlags: DWORD, ppidl: ptr PIDLIST_ABSOLUTE): HRESULT {.inline, discardable.} = self.lpVtbl.GetIDList(self, dwFlags, ppidl)
proc GetFolderType*(self: ptr IKnownFolder, pftid: ptr FOLDERTYPEID): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolderType(self, pftid)
proc GetRedirectionCapabilities*(self: ptr IKnownFolder, pCapabilities: ptr KF_REDIRECTION_CAPABILITIES): HRESULT {.inline, discardable.} = self.lpVtbl.GetRedirectionCapabilities(self, pCapabilities)
proc GetFolderDefinition*(self: ptr IKnownFolder, pKFD: ptr KNOWNFOLDER_DEFINITION): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolderDefinition(self, pKFD)
converter winim_converter_IKnownFolderManager*(x: ptr IKnownFolderManager): ptr IUnknown = cast[ptr IUnknown](x)
proc FolderIdFromCsidl*(self: ptr IKnownFolderManager, nCsidl: int32, pfid: ptr KNOWNFOLDERID): HRESULT {.inline, discardable.} = self.lpVtbl.FolderIdFromCsidl(self, nCsidl, pfid)
proc FolderIdToCsidl*(self: ptr IKnownFolderManager, rfid: REFKNOWNFOLDERID, pnCsidl: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.FolderIdToCsidl(self, rfid, pnCsidl)
proc GetFolderIds*(self: ptr IKnownFolderManager, ppKFId: ptr ptr KNOWNFOLDERID, pCount: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolderIds(self, ppKFId, pCount)
proc GetFolder*(self: ptr IKnownFolderManager, rfid: REFKNOWNFOLDERID, ppkf: ptr ptr IKnownFolder): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolder(self, rfid, ppkf)
proc GetFolderByName*(self: ptr IKnownFolderManager, pszCanonicalName: LPCWSTR, ppkf: ptr ptr IKnownFolder): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolderByName(self, pszCanonicalName, ppkf)
proc RegisterFolder*(self: ptr IKnownFolderManager, rfid: REFKNOWNFOLDERID, pKFD: ptr KNOWNFOLDER_DEFINITION): HRESULT {.inline, discardable.} = self.lpVtbl.RegisterFolder(self, rfid, pKFD)
proc UnregisterFolder*(self: ptr IKnownFolderManager, rfid: REFKNOWNFOLDERID): HRESULT {.inline, discardable.} = self.lpVtbl.UnregisterFolder(self, rfid)
proc FindFolderFromPath*(self: ptr IKnownFolderManager, pszPath: LPCWSTR, mode: int32, ppkf: ptr ptr IKnownFolder): HRESULT {.inline, discardable.} = self.lpVtbl.FindFolderFromPath(self, pszPath, mode, ppkf)
proc FindFolderFromIDList*(self: ptr IKnownFolderManager, pidl: PCIDLIST_ABSOLUTE, ppkf: ptr ptr IKnownFolder): HRESULT {.inline, discardable.} = self.lpVtbl.FindFolderFromIDList(self, pidl, ppkf)
proc Redirect*(self: ptr IKnownFolderManager, rfid: REFKNOWNFOLDERID, hwnd: HWND, flags: KF_REDIRECT_FLAGS, pszTargetPath: LPCWSTR, cFolders: UINT, pExclusion: ptr KNOWNFOLDERID, ppszError: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.Redirect(self, rfid, hwnd, flags, pszTargetPath, cFolders, pExclusion, ppszError)
converter winim_converter_ISharingConfigurationManager*(x: ptr ISharingConfigurationManager): ptr IUnknown = cast[ptr IUnknown](x)
proc CreateShare*(self: ptr ISharingConfigurationManager, dsid: int32, role: int32): HRESULT {.inline, discardable.} = self.lpVtbl.CreateShare(self, dsid, role)
proc DeleteShare*(self: ptr ISharingConfigurationManager, dsid: int32): HRESULT {.inline, discardable.} = self.lpVtbl.DeleteShare(self, dsid)
proc ShareExists*(self: ptr ISharingConfigurationManager, dsid: int32): HRESULT {.inline, discardable.} = self.lpVtbl.ShareExists(self, dsid)
proc GetSharePermissions*(self: ptr ISharingConfigurationManager, dsid: int32, pRole: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetSharePermissions(self, dsid, pRole)
proc SharePrinters*(self: ptr ISharingConfigurationManager): HRESULT {.inline, discardable.} = self.lpVtbl.SharePrinters(self)
proc StopSharingPrinters*(self: ptr ISharingConfigurationManager): HRESULT {.inline, discardable.} = self.lpVtbl.StopSharingPrinters(self)
proc ArePrintersShared*(self: ptr ISharingConfigurationManager): HRESULT {.inline, discardable.} = self.lpVtbl.ArePrintersShared(self)
converter winim_converter_IPreviousVersionsInfo*(x: ptr IPreviousVersionsInfo): ptr IUnknown = cast[ptr IUnknown](x)
proc AreSnapshotsAvailable*(self: ptr IPreviousVersionsInfo, pszPath: LPCWSTR, fOkToBeSlow: WINBOOL, pfAvailable: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.AreSnapshotsAvailable(self, pszPath, fOkToBeSlow, pfAvailable)
converter winim_converter_IRelatedItem*(x: ptr IRelatedItem): ptr IUnknown = cast[ptr IUnknown](x)
proc GetItemIDList*(self: ptr IRelatedItem, ppidl: ptr PIDLIST_ABSOLUTE): HRESULT {.inline, discardable.} = self.lpVtbl.GetItemIDList(self, ppidl)
proc GetItem*(self: ptr IRelatedItem, ppsi: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.GetItem(self, ppsi)
converter winim_converter_IIdentityName*(x: ptr IIdentityName): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IIdentityName*(x: ptr IIdentityName): ptr IRelatedItem = cast[ptr IRelatedItem](x)
converter winim_converter_IDelegateItem*(x: ptr IDelegateItem): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IDelegateItem*(x: ptr IDelegateItem): ptr IRelatedItem = cast[ptr IRelatedItem](x)
converter winim_converter_ICurrentItem*(x: ptr ICurrentItem): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ICurrentItem*(x: ptr ICurrentItem): ptr IRelatedItem = cast[ptr IRelatedItem](x)
converter winim_converter_ITransferMediumItem*(x: ptr ITransferMediumItem): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_ITransferMediumItem*(x: ptr ITransferMediumItem): ptr IRelatedItem = cast[ptr IRelatedItem](x)
converter winim_converter_IUseToBrowseItem*(x: ptr IUseToBrowseItem): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IUseToBrowseItem*(x: ptr IUseToBrowseItem): ptr IRelatedItem = cast[ptr IRelatedItem](x)
converter winim_converter_IDisplayItem*(x: ptr IDisplayItem): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IDisplayItem*(x: ptr IDisplayItem): ptr IRelatedItem = cast[ptr IRelatedItem](x)
converter winim_converter_IViewStateIdentityItem*(x: ptr IViewStateIdentityItem): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IViewStateIdentityItem*(x: ptr IViewStateIdentityItem): ptr IRelatedItem = cast[ptr IRelatedItem](x)
converter winim_converter_IPreviewItem*(x: ptr IPreviewItem): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IPreviewItem*(x: ptr IPreviewItem): ptr IRelatedItem = cast[ptr IRelatedItem](x)
converter winim_converter_IDestinationStreamFactory*(x: ptr IDestinationStreamFactory): ptr IUnknown = cast[ptr IUnknown](x)
proc GetDestinationStream*(self: ptr IDestinationStreamFactory, ppstm: ptr ptr IStream): HRESULT {.inline, discardable.} = self.lpVtbl.GetDestinationStream(self, ppstm)
converter winim_converter_INewMenuClient*(x: ptr INewMenuClient): ptr IUnknown = cast[ptr IUnknown](x)
proc IncludeItems*(self: ptr INewMenuClient, pflags: ptr NMCII_FLAGS): HRESULT {.inline, discardable.} = self.lpVtbl.IncludeItems(self, pflags)
proc SelectAndEditItem*(self: ptr INewMenuClient, pidlItem: PCIDLIST_ABSOLUTE, flags: NMCSAEI_FLAGS): HRESULT {.inline, discardable.} = self.lpVtbl.SelectAndEditItem(self, pidlItem, flags)
converter winim_converter_IInitializeWithBindCtx*(x: ptr IInitializeWithBindCtx): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IInitializeWithBindCtx, pbc: ptr IBindCtx): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, pbc)
converter winim_converter_IShellItemFilter*(x: ptr IShellItemFilter): ptr IUnknown = cast[ptr IUnknown](x)
proc IncludeItem*(self: ptr IShellItemFilter, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.IncludeItem(self, psi)
proc GetEnumFlagsForItem*(self: ptr IShellItemFilter, psi: ptr IShellItem, pgrfFlags: ptr SHCONTF): HRESULT {.inline, discardable.} = self.lpVtbl.GetEnumFlagsForItem(self, psi, pgrfFlags)
converter winim_converter_INameSpaceTreeControl*(x: ptr INameSpaceTreeControl): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr INameSpaceTreeControl, hwndParent: HWND, prc: ptr RECT, nsctsFlags: NSTCSTYLE): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, hwndParent, prc, nsctsFlags)
proc TreeAdvise*(self: ptr INameSpaceTreeControl, punk: ptr IUnknown, pdwCookie: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.TreeAdvise(self, punk, pdwCookie)
proc TreeUnadvise*(self: ptr INameSpaceTreeControl, dwCookie: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.TreeUnadvise(self, dwCookie)
proc AppendRoot*(self: ptr INameSpaceTreeControl, psiRoot: ptr IShellItem, grfEnumFlags: SHCONTF, grfRootStyle: NSTCROOTSTYLE, pif: ptr IShellItemFilter): HRESULT {.inline, discardable.} = self.lpVtbl.AppendRoot(self, psiRoot, grfEnumFlags, grfRootStyle, pif)
proc InsertRoot*(self: ptr INameSpaceTreeControl, iIndex: int32, psiRoot: ptr IShellItem, grfEnumFlags: SHCONTF, grfRootStyle: NSTCROOTSTYLE, pif: ptr IShellItemFilter): HRESULT {.inline, discardable.} = self.lpVtbl.InsertRoot(self, iIndex, psiRoot, grfEnumFlags, grfRootStyle, pif)
proc RemoveRoot*(self: ptr INameSpaceTreeControl, psiRoot: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveRoot(self, psiRoot)
proc RemoveAllRoots*(self: ptr INameSpaceTreeControl): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveAllRoots(self)
proc GetRootItems*(self: ptr INameSpaceTreeControl, ppsiaRootItems: ptr ptr IShellItemArray): HRESULT {.inline, discardable.} = self.lpVtbl.GetRootItems(self, ppsiaRootItems)
proc SetItemState*(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, nstcisMask: NSTCITEMSTATE, nstcisFlags: NSTCITEMSTATE): HRESULT {.inline, discardable.} = self.lpVtbl.SetItemState(self, psi, nstcisMask, nstcisFlags)
proc GetItemState*(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, nstcisMask: NSTCITEMSTATE, pnstcisFlags: ptr NSTCITEMSTATE): HRESULT {.inline, discardable.} = self.lpVtbl.GetItemState(self, psi, nstcisMask, pnstcisFlags)
proc GetSelectedItems*(self: ptr INameSpaceTreeControl, psiaItems: ptr ptr IShellItemArray): HRESULT {.inline, discardable.} = self.lpVtbl.GetSelectedItems(self, psiaItems)
proc GetItemCustomState*(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, piStateNumber: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetItemCustomState(self, psi, piStateNumber)
proc SetItemCustomState*(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, iStateNumber: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetItemCustomState(self, psi, iStateNumber)
proc EnsureItemVisible*(self: ptr INameSpaceTreeControl, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.EnsureItemVisible(self, psi)
proc SetTheme*(self: ptr INameSpaceTreeControl, pszTheme: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetTheme(self, pszTheme)
proc GetNextItem*(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, nstcgi: int32, ppsiNext: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.GetNextItem(self, psi, nstcgi, ppsiNext)
proc HitTest*(self: ptr INameSpaceTreeControl, ppt: ptr POINT, ppsiOut: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.HitTest(self, ppt, ppsiOut)
proc GetItemRect*(self: ptr INameSpaceTreeControl, psi: ptr IShellItem, prect: ptr RECT): HRESULT {.inline, discardable.} = self.lpVtbl.GetItemRect(self, psi, prect)
proc CollapseAll*(self: ptr INameSpaceTreeControl): HRESULT {.inline, discardable.} = self.lpVtbl.CollapseAll(self)
converter winim_converter_INameSpaceTreeControl2*(x: ptr INameSpaceTreeControl2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_INameSpaceTreeControl2*(x: ptr INameSpaceTreeControl2): ptr INameSpaceTreeControl = cast[ptr INameSpaceTreeControl](x)
proc SetControlStyle*(self: ptr INameSpaceTreeControl2, nstcsMask: NSTCSTYLE, nstcsStyle: NSTCSTYLE): HRESULT {.inline, discardable.} = self.lpVtbl.SetControlStyle(self, nstcsMask, nstcsStyle)
proc GetControlStyle*(self: ptr INameSpaceTreeControl2, nstcsMask: NSTCSTYLE, pnstcsStyle: ptr NSTCSTYLE): HRESULT {.inline, discardable.} = self.lpVtbl.GetControlStyle(self, nstcsMask, pnstcsStyle)
proc SetControlStyle2*(self: ptr INameSpaceTreeControl2, nstcsMask: int32, nstcsStyle: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetControlStyle2(self, nstcsMask, nstcsStyle)
proc GetControlStyle2*(self: ptr INameSpaceTreeControl2, nstcsMask: int32, pnstcsStyle: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetControlStyle2(self, nstcsMask, pnstcsStyle)
converter winim_converter_INameSpaceTreeControlEvents*(x: ptr INameSpaceTreeControlEvents): ptr IUnknown = cast[ptr IUnknown](x)
proc OnItemClick*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, nstceHitTest: NSTCEHITTEST, nstceClickType: NSTCECLICKTYPE): HRESULT {.inline, discardable.} = self.lpVtbl.OnItemClick(self, psi, nstceHitTest, nstceClickType)
proc OnPropertyItemCommit*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.OnPropertyItemCommit(self, psi)
proc OnItemStateChanging*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, nstcisMask: NSTCITEMSTATE, nstcisState: NSTCITEMSTATE): HRESULT {.inline, discardable.} = self.lpVtbl.OnItemStateChanging(self, psi, nstcisMask, nstcisState)
proc OnItemStateChanged*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, nstcisMask: NSTCITEMSTATE, nstcisState: NSTCITEMSTATE): HRESULT {.inline, discardable.} = self.lpVtbl.OnItemStateChanged(self, psi, nstcisMask, nstcisState)
proc OnSelectionChanged*(self: ptr INameSpaceTreeControlEvents, psiaSelection: ptr IShellItemArray): HRESULT {.inline, discardable.} = self.lpVtbl.OnSelectionChanged(self, psiaSelection)
proc OnKeyboardInput*(self: ptr INameSpaceTreeControlEvents, uMsg: UINT, wParam: WPARAM, lParam: LPARAM): HRESULT {.inline, discardable.} = self.lpVtbl.OnKeyboardInput(self, uMsg, wParam, lParam)
proc OnBeforeExpand*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.OnBeforeExpand(self, psi)
proc OnAfterExpand*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.OnAfterExpand(self, psi)
proc OnBeginLabelEdit*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.OnBeginLabelEdit(self, psi)
proc OnEndLabelEdit*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.OnEndLabelEdit(self, psi)
proc OnGetToolTip*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, pszTip: LPWSTR, cchTip: int32): HRESULT {.inline, discardable.} = self.lpVtbl.OnGetToolTip(self, psi, pszTip, cchTip)
proc OnBeforeItemDelete*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.OnBeforeItemDelete(self, psi)
proc OnItemAdded*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, fIsRoot: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.OnItemAdded(self, psi, fIsRoot)
proc OnItemDeleted*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, fIsRoot: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.OnItemDeleted(self, psi, fIsRoot)
proc OnBeforeContextMenu*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.OnBeforeContextMenu(self, psi, riid, ppv)
proc OnAfterContextMenu*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, pcmIn: ptr IContextMenu, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.OnAfterContextMenu(self, psi, pcmIn, riid, ppv)
proc OnBeforeStateImageChange*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.OnBeforeStateImageChange(self, psi)
proc OnGetDefaultIconIndex*(self: ptr INameSpaceTreeControlEvents, psi: ptr IShellItem, piDefaultIcon: ptr int32, piOpenIcon: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.OnGetDefaultIconIndex(self, psi, piDefaultIcon, piOpenIcon)
converter winim_converter_INameSpaceTreeControlDropHandler*(x: ptr INameSpaceTreeControlDropHandler): ptr IUnknown = cast[ptr IUnknown](x)
proc OnDragEnter*(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem, psiaData: ptr IShellItemArray, fOutsideSource: WINBOOL, grfKeyState: DWORD, pdwEffect: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OnDragEnter(self, psiOver, psiaData, fOutsideSource, grfKeyState, pdwEffect)
proc OnDragOver*(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem, psiaData: ptr IShellItemArray, grfKeyState: DWORD, pdwEffect: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OnDragOver(self, psiOver, psiaData, grfKeyState, pdwEffect)
proc OnDragPosition*(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem, psiaData: ptr IShellItemArray, iNewPosition: int32, iOldPosition: int32): HRESULT {.inline, discardable.} = self.lpVtbl.OnDragPosition(self, psiOver, psiaData, iNewPosition, iOldPosition)
proc OnDrop*(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem, psiaData: ptr IShellItemArray, iPosition: int32, grfKeyState: DWORD, pdwEffect: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.OnDrop(self, psiOver, psiaData, iPosition, grfKeyState, pdwEffect)
proc OnDropPosition*(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem, psiaData: ptr IShellItemArray, iNewPosition: int32, iOldPosition: int32): HRESULT {.inline, discardable.} = self.lpVtbl.OnDropPosition(self, psiOver, psiaData, iNewPosition, iOldPosition)
proc OnDragLeave*(self: ptr INameSpaceTreeControlDropHandler, psiOver: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.OnDragLeave(self, psiOver)
converter winim_converter_INameSpaceTreeAccessible*(x: ptr INameSpaceTreeAccessible): ptr IUnknown = cast[ptr IUnknown](x)
proc OnGetDefaultAccessibilityAction*(self: ptr INameSpaceTreeAccessible, psi: ptr IShellItem, pbstrDefaultAction: ptr BSTR): HRESULT {.inline, discardable.} = self.lpVtbl.OnGetDefaultAccessibilityAction(self, psi, pbstrDefaultAction)
proc OnDoDefaultAccessibilityAction*(self: ptr INameSpaceTreeAccessible, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.OnDoDefaultAccessibilityAction(self, psi)
proc OnGetAccessibilityRole*(self: ptr INameSpaceTreeAccessible, psi: ptr IShellItem, pvarRole: ptr VARIANT): HRESULT {.inline, discardable.} = self.lpVtbl.OnGetAccessibilityRole(self, psi, pvarRole)
converter winim_converter_INameSpaceTreeControlCustomDraw*(x: ptr INameSpaceTreeControlCustomDraw): ptr IUnknown = cast[ptr IUnknown](x)
proc PrePaint*(self: ptr INameSpaceTreeControlCustomDraw, hdc: HDC, prc: ptr RECT, plres: ptr LRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.PrePaint(self, hdc, prc, plres)
proc PostPaint*(self: ptr INameSpaceTreeControlCustomDraw, hdc: HDC, prc: ptr RECT): HRESULT {.inline, discardable.} = self.lpVtbl.PostPaint(self, hdc, prc)
proc ItemPrePaint*(self: ptr INameSpaceTreeControlCustomDraw, hdc: HDC, prc: ptr RECT, pnstccdItem: ptr NSTCCUSTOMDRAW, pclrText: ptr COLORREF, pclrTextBk: ptr COLORREF, plres: ptr LRESULT): HRESULT {.inline, discardable.} = self.lpVtbl.ItemPrePaint(self, hdc, prc, pnstccdItem, pclrText, pclrTextBk, plres)
proc ItemPostPaint*(self: ptr INameSpaceTreeControlCustomDraw, hdc: HDC, prc: ptr RECT, pnstccdItem: ptr NSTCCUSTOMDRAW): HRESULT {.inline, discardable.} = self.lpVtbl.ItemPostPaint(self, hdc, prc, pnstccdItem)
converter winim_converter_INameSpaceTreeControlFolderCapabilities*(x: ptr INameSpaceTreeControlFolderCapabilities): ptr IUnknown = cast[ptr IUnknown](x)
proc GetFolderCapabilities*(self: ptr INameSpaceTreeControlFolderCapabilities, nfcMask: int32, pnfcValue: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolderCapabilities(self, nfcMask, pnfcValue)
converter winim_converter_IPreviewHandler*(x: ptr IPreviewHandler): ptr IUnknown = cast[ptr IUnknown](x)
proc SetWindow*(self: ptr IPreviewHandler, hwnd: HWND, prc: ptr RECT): HRESULT {.inline, discardable.} = self.lpVtbl.SetWindow(self, hwnd, prc)
proc SetRect*(self: ptr IPreviewHandler, prc: ptr RECT): HRESULT {.inline, discardable.} = self.lpVtbl.SetRect(self, prc)
proc DoPreview*(self: ptr IPreviewHandler): HRESULT {.inline, discardable.} = self.lpVtbl.DoPreview(self)
proc Unload*(self: ptr IPreviewHandler): HRESULT {.inline, discardable.} = self.lpVtbl.Unload(self)
proc SetFocus*(self: ptr IPreviewHandler): HRESULT {.inline, discardable.} = self.lpVtbl.SetFocus(self)
proc QueryFocus*(self: ptr IPreviewHandler, phwnd: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.QueryFocus(self, phwnd)
proc TranslateAccelerator*(self: ptr IPreviewHandler, pmsg: ptr MSG): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateAccelerator(self, pmsg)
converter winim_converter_IPreviewHandlerFrame*(x: ptr IPreviewHandlerFrame): ptr IUnknown = cast[ptr IUnknown](x)
proc GetWindowContext*(self: ptr IPreviewHandlerFrame, pinfo: ptr PREVIEWHANDLERFRAMEINFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetWindowContext(self, pinfo)
proc TranslateAccelerator*(self: ptr IPreviewHandlerFrame, pmsg: ptr MSG): HRESULT {.inline, discardable.} = self.lpVtbl.TranslateAccelerator(self, pmsg)
converter winim_converter_ITrayDeskBand*(x: ptr ITrayDeskBand): ptr IUnknown = cast[ptr IUnknown](x)
proc ShowDeskBand*(self: ptr ITrayDeskBand, clsid: REFCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.ShowDeskBand(self, clsid)
proc HideDeskBand*(self: ptr ITrayDeskBand, clsid: REFCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.HideDeskBand(self, clsid)
proc IsDeskBandShown*(self: ptr ITrayDeskBand, clsid: REFCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.IsDeskBandShown(self, clsid)
proc DeskBandRegistrationChanged*(self: ptr ITrayDeskBand): HRESULT {.inline, discardable.} = self.lpVtbl.DeskBandRegistrationChanged(self)
converter winim_converter_IBandHost*(x: ptr IBandHost): ptr IUnknown = cast[ptr IUnknown](x)
proc CreateBand*(self: ptr IBandHost, rclsidBand: REFCLSID, fAvailable: WINBOOL, fVisible: WINBOOL, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.CreateBand(self, rclsidBand, fAvailable, fVisible, riid, ppv)
proc SetBandAvailability*(self: ptr IBandHost, rclsidBand: REFCLSID, fAvailable: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.SetBandAvailability(self, rclsidBand, fAvailable)
proc DestroyBand*(self: ptr IBandHost, rclsidBand: REFCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.DestroyBand(self, rclsidBand)
converter winim_converter_IExplorerPaneVisibility*(x: ptr IExplorerPaneVisibility): ptr IUnknown = cast[ptr IUnknown](x)
proc GetPaneState*(self: ptr IExplorerPaneVisibility, ep: REFEXPLORERPANE, peps: ptr EXPLORERPANESTATE): HRESULT {.inline, discardable.} = self.lpVtbl.GetPaneState(self, ep, peps)
converter winim_converter_IContextMenuCB*(x: ptr IContextMenuCB): ptr IUnknown = cast[ptr IUnknown](x)
proc CallBack*(self: ptr IContextMenuCB, psf: ptr IShellFolder, hwndOwner: HWND, pdtobj: ptr IDataObject, uMsg: UINT, wParam: WPARAM, lParam: LPARAM): HRESULT {.inline, discardable.} = self.lpVtbl.CallBack(self, psf, hwndOwner, pdtobj, uMsg, wParam, lParam)
converter winim_converter_IDefaultExtractIconInit*(x: ptr IDefaultExtractIconInit): ptr IUnknown = cast[ptr IUnknown](x)
proc SetFlags*(self: ptr IDefaultExtractIconInit, uFlags: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetFlags(self, uFlags)
proc SetKey*(self: ptr IDefaultExtractIconInit, hkey: HKEY): HRESULT {.inline, discardable.} = self.lpVtbl.SetKey(self, hkey)
proc SetNormalIcon*(self: ptr IDefaultExtractIconInit, pszFile: LPCWSTR, iIcon: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetNormalIcon(self, pszFile, iIcon)
proc SetOpenIcon*(self: ptr IDefaultExtractIconInit, pszFile: LPCWSTR, iIcon: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetOpenIcon(self, pszFile, iIcon)
proc SetShortcutIcon*(self: ptr IDefaultExtractIconInit, pszFile: LPCWSTR, iIcon: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetShortcutIcon(self, pszFile, iIcon)
proc SetDefaultIcon*(self: ptr IDefaultExtractIconInit, pszFile: LPCWSTR, iIcon: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetDefaultIcon(self, pszFile, iIcon)
converter winim_converter_IExplorerCommand*(x: ptr IExplorerCommand): ptr IUnknown = cast[ptr IUnknown](x)
proc GetTitle*(self: ptr IExplorerCommand, psiItemArray: ptr IShellItemArray, ppszName: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetTitle(self, psiItemArray, ppszName)
proc GetIcon*(self: ptr IExplorerCommand, psiItemArray: ptr IShellItemArray, ppszIcon: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetIcon(self, psiItemArray, ppszIcon)
proc GetToolTip*(self: ptr IExplorerCommand, psiItemArray: ptr IShellItemArray, ppszInfotip: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetToolTip(self, psiItemArray, ppszInfotip)
proc GetCanonicalName*(self: ptr IExplorerCommand, pguidCommandName: ptr GUID): HRESULT {.inline, discardable.} = self.lpVtbl.GetCanonicalName(self, pguidCommandName)
proc GetState*(self: ptr IExplorerCommand, psiItemArray: ptr IShellItemArray, fOkToBeSlow: WINBOOL, pCmdState: ptr EXPCMDSTATE): HRESULT {.inline, discardable.} = self.lpVtbl.GetState(self, psiItemArray, fOkToBeSlow, pCmdState)
proc Invoke*(self: ptr IExplorerCommand, psiItemArray: ptr IShellItemArray, pbc: ptr IBindCtx): HRESULT {.inline, discardable.} = self.lpVtbl.Invoke(self, psiItemArray, pbc)
proc GetFlags*(self: ptr IExplorerCommand, pFlags: ptr EXPCMDFLAGS): HRESULT {.inline, discardable.} = self.lpVtbl.GetFlags(self, pFlags)
proc EnumSubCommands*(self: ptr IExplorerCommand, ppEnum: ptr ptr IEnumExplorerCommand): HRESULT {.inline, discardable.} = self.lpVtbl.EnumSubCommands(self, ppEnum)
converter winim_converter_IExplorerCommandState*(x: ptr IExplorerCommandState): ptr IUnknown = cast[ptr IUnknown](x)
proc GetState*(self: ptr IExplorerCommandState, psiItemArray: ptr IShellItemArray, fOkToBeSlow: WINBOOL, pCmdState: ptr EXPCMDSTATE): HRESULT {.inline, discardable.} = self.lpVtbl.GetState(self, psiItemArray, fOkToBeSlow, pCmdState)
converter winim_converter_IInitializeCommand*(x: ptr IInitializeCommand): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IInitializeCommand, pszCommandName: LPCWSTR, ppb: ptr IPropertyBag): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, pszCommandName, ppb)
converter winim_converter_IEnumExplorerCommand*(x: ptr IEnumExplorerCommand): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumExplorerCommand, celt: ULONG, pUICommand: ptr ptr IExplorerCommand, pceltFetched: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, celt, pUICommand, pceltFetched)
proc Skip*(self: ptr IEnumExplorerCommand, celt: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Skip(self, celt)
proc Reset*(self: ptr IEnumExplorerCommand): HRESULT {.inline, discardable.} = self.lpVtbl.Reset(self)
proc Clone*(self: ptr IEnumExplorerCommand, ppenum: ptr ptr IEnumExplorerCommand): HRESULT {.inline, discardable.} = self.lpVtbl.Clone(self, ppenum)
converter winim_converter_IExplorerCommandProvider*(x: ptr IExplorerCommandProvider): ptr IUnknown = cast[ptr IUnknown](x)
proc GetCommands*(self: ptr IExplorerCommandProvider, punkSite: ptr IUnknown, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetCommands(self, punkSite, riid, ppv)
proc GetCommand*(self: ptr IExplorerCommandProvider, rguidCommandId: REFGUID, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetCommand(self, rguidCommandId, riid, ppv)
converter winim_converter_IInitializeNetworkFolder*(x: ptr IInitializeNetworkFolder): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IInitializeNetworkFolder, pidl: PCIDLIST_ABSOLUTE, pidlTarget: PCIDLIST_ABSOLUTE, uDisplayType: UINT, pszResName: LPCWSTR, pszProvider: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, pidl, pidlTarget, uDisplayType, pszResName, pszProvider)
converter winim_converter_IOpenControlPanel*(x: ptr IOpenControlPanel): ptr IUnknown = cast[ptr IUnknown](x)
proc Open*(self: ptr IOpenControlPanel, pszName: LPCWSTR, pszPage: LPCWSTR, punkSite: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.Open(self, pszName, pszPage, punkSite)
proc GetPath*(self: ptr IOpenControlPanel, pszName: LPCWSTR, pszPath: LPWSTR, cchPath: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetPath(self, pszName, pszPath, cchPath)
proc GetCurrentView*(self: ptr IOpenControlPanel, pView: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetCurrentView(self, pView)
converter winim_converter_IComputerInfoChangeNotify*(x: ptr IComputerInfoChangeNotify): ptr IUnknown = cast[ptr IUnknown](x)
proc ComputerInfoChanged*(self: ptr IComputerInfoChangeNotify): HRESULT {.inline, discardable.} = self.lpVtbl.ComputerInfoChanged(self)
converter winim_converter_IFileSystemBindData2*(x: ptr IFileSystemBindData2): ptr IUnknown = cast[ptr IUnknown](x)
converter winim_converter_IFileSystemBindData2*(x: ptr IFileSystemBindData2): ptr IFileSystemBindData = cast[ptr IFileSystemBindData](x)
proc SetFileID*(self: ptr IFileSystemBindData2, liFileID: LARGE_INTEGER): HRESULT {.inline, discardable.} = self.lpVtbl.SetFileID(self, liFileID)
proc GetFileID*(self: ptr IFileSystemBindData2, pliFileID: ptr LARGE_INTEGER): HRESULT {.inline, discardable.} = self.lpVtbl.GetFileID(self, pliFileID)
proc SetJunctionCLSID*(self: ptr IFileSystemBindData2, clsid: REFCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.SetJunctionCLSID(self, clsid)
proc GetJunctionCLSID*(self: ptr IFileSystemBindData2, pclsid: ptr CLSID): HRESULT {.inline, discardable.} = self.lpVtbl.GetJunctionCLSID(self, pclsid)
converter winim_converter_ICustomDestinationList*(x: ptr ICustomDestinationList): ptr IUnknown = cast[ptr IUnknown](x)
proc SetAppID*(self: ptr ICustomDestinationList, pszAppID: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetAppID(self, pszAppID)
proc BeginList*(self: ptr ICustomDestinationList, pcMinSlots: ptr UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.BeginList(self, pcMinSlots, riid, ppv)
proc AppendCategory*(self: ptr ICustomDestinationList, pszCategory: LPCWSTR, poa: ptr IObjectArray): HRESULT {.inline, discardable.} = self.lpVtbl.AppendCategory(self, pszCategory, poa)
proc AppendKnownCategory*(self: ptr ICustomDestinationList, category: int32): HRESULT {.inline, discardable.} = self.lpVtbl.AppendKnownCategory(self, category)
proc AddUserTasks*(self: ptr ICustomDestinationList, poa: ptr IObjectArray): HRESULT {.inline, discardable.} = self.lpVtbl.AddUserTasks(self, poa)
proc CommitList*(self: ptr ICustomDestinationList): HRESULT {.inline, discardable.} = self.lpVtbl.CommitList(self)
proc GetRemovedDestinations*(self: ptr ICustomDestinationList, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetRemovedDestinations(self, riid, ppv)
proc DeleteList*(self: ptr ICustomDestinationList, pszAppID: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.DeleteList(self, pszAppID)
proc AbortList*(self: ptr ICustomDestinationList): HRESULT {.inline, discardable.} = self.lpVtbl.AbortList(self)
converter winim_converter_IApplicationDestinations*(x: ptr IApplicationDestinations): ptr IUnknown = cast[ptr IUnknown](x)
proc SetAppID*(self: ptr IApplicationDestinations, pszAppID: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetAppID(self, pszAppID)
proc RemoveDestination*(self: ptr IApplicationDestinations, punk: ptr IUnknown): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveDestination(self, punk)
proc RemoveAllDestinations*(self: ptr IApplicationDestinations): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveAllDestinations(self)
converter winim_converter_IApplicationDocumentLists*(x: ptr IApplicationDocumentLists): ptr IUnknown = cast[ptr IUnknown](x)
proc SetAppID*(self: ptr IApplicationDocumentLists, pszAppID: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetAppID(self, pszAppID)
proc GetList*(self: ptr IApplicationDocumentLists, listtype: int32, cItemsDesired: UINT, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetList(self, listtype, cItemsDesired, riid, ppv)
converter winim_converter_IObjectWithAppUserModelID*(x: ptr IObjectWithAppUserModelID): ptr IUnknown = cast[ptr IUnknown](x)
proc SetAppID*(self: ptr IObjectWithAppUserModelID, pszAppID: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetAppID(self, pszAppID)
proc GetAppID*(self: ptr IObjectWithAppUserModelID, ppszAppID: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetAppID(self, ppszAppID)
converter winim_converter_IObjectWithProgID*(x: ptr IObjectWithProgID): ptr IUnknown = cast[ptr IUnknown](x)
proc SetProgID*(self: ptr IObjectWithProgID, pszProgID: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetProgID(self, pszProgID)
proc GetProgID*(self: ptr IObjectWithProgID, ppszProgID: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetProgID(self, ppszProgID)
converter winim_converter_IUpdateIDList*(x: ptr IUpdateIDList): ptr IUnknown = cast[ptr IUnknown](x)
proc Update*(self: ptr IUpdateIDList, pbc: ptr IBindCtx, pidlIn: PCUITEMID_CHILD, ppidlOut: ptr PITEMID_CHILD): HRESULT {.inline, discardable.} = self.lpVtbl.Update(self, pbc, pidlIn, ppidlOut)
converter winim_converter_IDesktopGadget*(x: ptr IDesktopGadget): ptr IUnknown = cast[ptr IUnknown](x)
proc RunGadget*(self: ptr IDesktopGadget, gadgetPath: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.RunGadget(self, gadgetPath)
converter winim_converter_IDesktopWallpaper*(x: ptr IDesktopWallpaper): ptr IUnknown = cast[ptr IUnknown](x)
proc SetWallpaper*(self: ptr IDesktopWallpaper, monitorID: LPCWSTR, wallpaper: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetWallpaper(self, monitorID, wallpaper)
proc GetWallpaper*(self: ptr IDesktopWallpaper, monitorID: LPCWSTR, wallpaper: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetWallpaper(self, monitorID, wallpaper)
proc GetMonitorDevicePathAt*(self: ptr IDesktopWallpaper, monitorIndex: UINT, monitorID: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetMonitorDevicePathAt(self, monitorIndex, monitorID)
proc GetMonitorDevicePathCount*(self: ptr IDesktopWallpaper, count: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetMonitorDevicePathCount(self, count)
proc GetMonitorRECT*(self: ptr IDesktopWallpaper, monitorID: LPCWSTR, displayRect: ptr RECT): HRESULT {.inline, discardable.} = self.lpVtbl.GetMonitorRECT(self, monitorID, displayRect)
proc SetBackgroundColor*(self: ptr IDesktopWallpaper, color: COLORREF): HRESULT {.inline, discardable.} = self.lpVtbl.SetBackgroundColor(self, color)
proc GetBackgroundColor*(self: ptr IDesktopWallpaper, color: ptr COLORREF): HRESULT {.inline, discardable.} = self.lpVtbl.GetBackgroundColor(self, color)
proc SetPosition*(self: ptr IDesktopWallpaper, position: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetPosition(self, position)
proc GetPosition*(self: ptr IDesktopWallpaper, position: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetPosition(self, position)
proc SetSlideshow*(self: ptr IDesktopWallpaper, items: ptr IShellItemArray): HRESULT {.inline, discardable.} = self.lpVtbl.SetSlideshow(self, items)
proc GetSlideshow*(self: ptr IDesktopWallpaper, items: ptr ptr IShellItemArray): HRESULT {.inline, discardable.} = self.lpVtbl.GetSlideshow(self, items)
proc SetSlideshowOptions*(self: ptr IDesktopWallpaper, options: int32, slideshowTick: UINT): HRESULT {.inline, discardable.} = self.lpVtbl.SetSlideshowOptions(self, options, slideshowTick)
proc GetSlideshowOptions*(self: ptr IDesktopWallpaper, options: ptr int32, slideshowTick: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetSlideshowOptions(self, options, slideshowTick)
proc AdvanceSlideshow*(self: ptr IDesktopWallpaper, monitorID: LPCWSTR, direction: int32): HRESULT {.inline, discardable.} = self.lpVtbl.AdvanceSlideshow(self, monitorID, direction)
proc GetStatus*(self: ptr IDesktopWallpaper, state: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetStatus(self, state)
proc Enable*(self: ptr IDesktopWallpaper, enable: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Enable(self, enable)
converter winim_converter_IHomeGroup*(x: ptr IHomeGroup): ptr IUnknown = cast[ptr IUnknown](x)
proc IsMember*(self: ptr IHomeGroup, member: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.IsMember(self, member)
proc ShowSharingWizard*(self: ptr IHomeGroup, owner: HWND, sharingchoices: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.ShowSharingWizard(self, owner, sharingchoices)
converter winim_converter_IInitializeWithPropertyStore*(x: ptr IInitializeWithPropertyStore): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IInitializeWithPropertyStore, pps: ptr IPropertyStore): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, pps)
converter winim_converter_IOpenSearchSource*(x: ptr IOpenSearchSource): ptr IUnknown = cast[ptr IUnknown](x)
proc GetResults*(self: ptr IOpenSearchSource, hwnd: HWND, pszQuery: LPCWSTR, dwStartIndex: DWORD, dwCount: DWORD, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetResults(self, hwnd, pszQuery, dwStartIndex, dwCount, riid, ppv)
converter winim_converter_IShellLibrary*(x: ptr IShellLibrary): ptr IUnknown = cast[ptr IUnknown](x)
proc LoadLibraryFromItem*(self: ptr IShellLibrary, psiLibrary: ptr IShellItem, grfMode: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.LoadLibraryFromItem(self, psiLibrary, grfMode)
proc LoadLibraryFromKnownFolder*(self: ptr IShellLibrary, kfidLibrary: REFKNOWNFOLDERID, grfMode: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.LoadLibraryFromKnownFolder(self, kfidLibrary, grfMode)
proc AddFolder*(self: ptr IShellLibrary, psiLocation: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.AddFolder(self, psiLocation)
proc RemoveFolder*(self: ptr IShellLibrary, psiLocation: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.RemoveFolder(self, psiLocation)
proc GetFolders*(self: ptr IShellLibrary, lff: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolders(self, lff, riid, ppv)
proc ResolveFolder*(self: ptr IShellLibrary, psiFolderToResolve: ptr IShellItem, dwTimeout: DWORD, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.ResolveFolder(self, psiFolderToResolve, dwTimeout, riid, ppv)
proc GetDefaultSaveFolder*(self: ptr IShellLibrary, dsft: int32, riid: REFIID, ppv: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetDefaultSaveFolder(self, dsft, riid, ppv)
proc SetDefaultSaveFolder*(self: ptr IShellLibrary, dsft: int32, psi: ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.SetDefaultSaveFolder(self, dsft, psi)
proc GetOptions*(self: ptr IShellLibrary, plofOptions: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetOptions(self, plofOptions)
proc SetOptions*(self: ptr IShellLibrary, lofMask: int32, lofOptions: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetOptions(self, lofMask, lofOptions)
proc GetFolderType*(self: ptr IShellLibrary, pftid: ptr FOLDERTYPEID): HRESULT {.inline, discardable.} = self.lpVtbl.GetFolderType(self, pftid)
proc SetFolderType*(self: ptr IShellLibrary, ftid: REFFOLDERTYPEID): HRESULT {.inline, discardable.} = self.lpVtbl.SetFolderType(self, ftid)
proc GetIcon*(self: ptr IShellLibrary, ppszIcon: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetIcon(self, ppszIcon)
proc SetIcon*(self: ptr IShellLibrary, pszIcon: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.SetIcon(self, pszIcon)
proc Commit*(self: ptr IShellLibrary): HRESULT {.inline, discardable.} = self.lpVtbl.Commit(self)
proc Save*(self: ptr IShellLibrary, psiFolderToSaveIn: ptr IShellItem, pszLibraryName: LPCWSTR, lsf: int32, ppsiSavedTo: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.Save(self, psiFolderToSaveIn, pszLibraryName, lsf, ppsiSavedTo)
proc SaveInKnownFolder*(self: ptr IShellLibrary, kfidToSaveIn: REFKNOWNFOLDERID, pszLibraryName: LPCWSTR, lsf: int32, ppsiSavedTo: ptr ptr IShellItem): HRESULT {.inline, discardable.} = self.lpVtbl.SaveInKnownFolder(self, kfidToSaveIn, pszLibraryName, lsf, ppsiSavedTo)
converter winim_converter_IPlaybackManagerEvents*(x: ptr IPlaybackManagerEvents): ptr IUnknown = cast[ptr IUnknown](x)
proc OnPlaybackManagerEvent*(self: ptr IPlaybackManagerEvents, dwSessionId: DWORD, mediaEvent: int32): HRESULT {.inline, discardable.} = self.lpVtbl.OnPlaybackManagerEvent(self, dwSessionId, mediaEvent)
converter winim_converter_IPlaybackManager*(x: ptr IPlaybackManager): ptr IUnknown = cast[ptr IUnknown](x)
proc Advise*(self: ptr IPlaybackManager, typ: int32, pEvents: ptr IPlaybackManagerEvents, pdwSessionId: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Advise(self, typ, pEvents, pdwSessionId)
proc Unadvise*(self: ptr IPlaybackManager, dwSessionId: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Unadvise(self, dwSessionId)
proc ChangeSessionState*(self: ptr IPlaybackManager, dwSessionId: DWORD, state: int32, mute: int32): HRESULT {.inline, discardable.} = self.lpVtbl.ChangeSessionState(self, dwSessionId, state, mute)
converter winim_converter_IDefaultFolderMenuInitialize*(x: ptr IDefaultFolderMenuInitialize): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IDefaultFolderMenuInitialize, hwnd: HWND, pcmcb: ptr IContextMenuCB, pidlFolder: PCIDLIST_ABSOLUTE, psf: ptr IShellFolder, cidl: UINT, apidl: PCUITEMID_CHILD_ARRAY, punkAssociation: ptr IUnknown, cKeys: UINT, aKeys: ptr HKEY): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, hwnd, pcmcb, pidlFolder, psf, cidl, apidl, punkAssociation, cKeys, aKeys)
proc SetMenuRestrictions*(self: ptr IDefaultFolderMenuInitialize, dfmrValues: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetMenuRestrictions(self, dfmrValues)
proc GetMenuRestrictions*(self: ptr IDefaultFolderMenuInitialize, dfmrMask: int32, pdfmrValues: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetMenuRestrictions(self, dfmrMask, pdfmrValues)
proc SetHandlerClsid*(self: ptr IDefaultFolderMenuInitialize, rclsid: REFCLSID): HRESULT {.inline, discardable.} = self.lpVtbl.SetHandlerClsid(self, rclsid)
converter winim_converter_IApplicationActivationManager*(x: ptr IApplicationActivationManager): ptr IUnknown = cast[ptr IUnknown](x)
proc ActivateApplication*(self: ptr IApplicationActivationManager, appUserModelId: LPCWSTR, arguments: LPCWSTR, options: int32, processId: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.ActivateApplication(self, appUserModelId, arguments, options, processId)
proc ActivateForFile*(self: ptr IApplicationActivationManager, appUserModelId: LPCWSTR, itemArray: ptr IShellItemArray, verb: LPCWSTR, processId: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.ActivateForFile(self, appUserModelId, itemArray, verb, processId)
proc ActivateForProtocol*(self: ptr IApplicationActivationManager, appUserModelId: LPCWSTR, itemArray: ptr IShellItemArray, processId: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.ActivateForProtocol(self, appUserModelId, itemArray, processId)
converter winim_converter_IAssocHandlerInvoker*(x: ptr IAssocHandlerInvoker): ptr IUnknown = cast[ptr IUnknown](x)
proc SupportsSelection*(self: ptr IAssocHandlerInvoker): HRESULT {.inline, discardable.} = self.lpVtbl.SupportsSelection(self)
proc Invoke*(self: ptr IAssocHandlerInvoker): HRESULT {.inline, discardable.} = self.lpVtbl.Invoke(self)
converter winim_converter_IAssocHandler*(x: ptr IAssocHandler): ptr IUnknown = cast[ptr IUnknown](x)
proc GetName*(self: ptr IAssocHandler, ppsz: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetName(self, ppsz)
proc GetUIName*(self: ptr IAssocHandler, ppsz: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetUIName(self, ppsz)
proc GetIconLocation*(self: ptr IAssocHandler, ppszPath: ptr LPWSTR, pIndex: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetIconLocation(self, ppszPath, pIndex)
proc IsRecommended*(self: ptr IAssocHandler): HRESULT {.inline, discardable.} = self.lpVtbl.IsRecommended(self)
proc MakeDefault*(self: ptr IAssocHandler, pszDescription: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.MakeDefault(self, pszDescription)
proc Invoke*(self: ptr IAssocHandler, pdo: ptr IDataObject): HRESULT {.inline, discardable.} = self.lpVtbl.Invoke(self, pdo)
proc CreateInvoker*(self: ptr IAssocHandler, pdo: ptr IDataObject, ppInvoker: ptr ptr IAssocHandlerInvoker): HRESULT {.inline, discardable.} = self.lpVtbl.CreateInvoker(self, pdo, ppInvoker)
converter winim_converter_IEnumAssocHandlers*(x: ptr IEnumAssocHandlers): ptr IUnknown = cast[ptr IUnknown](x)
proc Next*(self: ptr IEnumAssocHandlers, celt: ULONG, rgelt: ptr ptr IAssocHandler, pceltFetched: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.Next(self, celt, rgelt, pceltFetched)
converter winim_converter_IDataObjectProvider*(x: ptr IDataObjectProvider): ptr IUnknown = cast[ptr IUnknown](x)
proc GetDataObject*(self: ptr IDataObjectProvider, dataObject: ptr ptr IDataObject): HRESULT {.inline, discardable.} = self.lpVtbl.GetDataObject(self, dataObject)
proc SetDataObject*(self: ptr IDataObjectProvider, dataObject: ptr IDataObject): HRESULT {.inline, discardable.} = self.lpVtbl.SetDataObject(self, dataObject)
converter winim_converter_IDataTransferManagerInterop*(x: ptr IDataTransferManagerInterop): ptr IUnknown = cast[ptr IUnknown](x)
proc GetForWindow*(self: ptr IDataTransferManagerInterop, appWindow: HWND, riid: REFIID, dataTransferManager: ptr pointer): HRESULT {.inline, discardable.} = self.lpVtbl.GetForWindow(self, appWindow, riid, dataTransferManager)
proc ShowShareUIForWindow*(self: ptr IDataTransferManagerInterop, appWindow: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.ShowShareUIForWindow(self, appWindow)
converter winim_converter_IFrameworkInputPaneHandler*(x: ptr IFrameworkInputPaneHandler): ptr IUnknown = cast[ptr IUnknown](x)
proc Showing*(self: ptr IFrameworkInputPaneHandler, prcInputPaneScreenLocation: ptr RECT, fEnsureFocusedElementInView: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Showing(self, prcInputPaneScreenLocation, fEnsureFocusedElementInView)
proc Hiding*(self: ptr IFrameworkInputPaneHandler, fEnsureFocusedElementInView: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.Hiding(self, fEnsureFocusedElementInView)
converter winim_converter_IFrameworkInputPane*(x: ptr IFrameworkInputPane): ptr IUnknown = cast[ptr IUnknown](x)
proc Advise*(self: ptr IFrameworkInputPane, pWindow: ptr IUnknown, pHandler: ptr IFrameworkInputPaneHandler, pdwCookie: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Advise(self, pWindow, pHandler, pdwCookie)
proc AdviseWithHWND*(self: ptr IFrameworkInputPane, hwnd: HWND, pHandler: ptr IFrameworkInputPaneHandler, pdwCookie: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.AdviseWithHWND(self, hwnd, pHandler, pdwCookie)
proc Unadvise*(self: ptr IFrameworkInputPane, dwCookie: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Unadvise(self, dwCookie)
proc Location*(self: ptr IFrameworkInputPane, prcInputPaneScreenLocation: ptr RECT): HRESULT {.inline, discardable.} = self.lpVtbl.Location(self, prcInputPaneScreenLocation)
converter winim_converter_ISearchableApplication*(x: ptr ISearchableApplication): ptr IUnknown = cast[ptr IUnknown](x)
proc GetSearchWindow*(self: ptr ISearchableApplication, hwnd: ptr HWND): HRESULT {.inline, discardable.} = self.lpVtbl.GetSearchWindow(self, hwnd)
converter winim_converter_IAccessibilityDockingServiceCallback*(x: ptr IAccessibilityDockingServiceCallback): ptr IUnknown = cast[ptr IUnknown](x)
proc Undocked*(self: ptr IAccessibilityDockingServiceCallback, undockReason: int32): HRESULT {.inline, discardable.} = self.lpVtbl.Undocked(self, undockReason)
converter winim_converter_IAccessibilityDockingService*(x: ptr IAccessibilityDockingService): ptr IUnknown = cast[ptr IUnknown](x)
proc GetAvailableSize*(self: ptr IAccessibilityDockingService, hMonitor: HMONITOR, pcxFixed: ptr UINT, pcyMax: ptr UINT): HRESULT {.inline, discardable.} = self.lpVtbl.GetAvailableSize(self, hMonitor, pcxFixed, pcyMax)
proc DockWindow*(self: ptr IAccessibilityDockingService, hwnd: HWND, hMonitor: HMONITOR, cyRequested: UINT, pCallback: ptr IAccessibilityDockingServiceCallback): HRESULT {.inline, discardable.} = self.lpVtbl.DockWindow(self, hwnd, hMonitor, cyRequested, pCallback)
proc UndockWindow*(self: ptr IAccessibilityDockingService, hwnd: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.UndockWindow(self, hwnd)
converter winim_converter_IAppVisibilityEvents*(x: ptr IAppVisibilityEvents): ptr IUnknown = cast[ptr IUnknown](x)
proc AppVisibilityOnMonitorChanged*(self: ptr IAppVisibilityEvents, hMonitor: HMONITOR, previousMode: int32, currentMode: int32): HRESULT {.inline, discardable.} = self.lpVtbl.AppVisibilityOnMonitorChanged(self, hMonitor, previousMode, currentMode)
proc LauncherVisibilityChange*(self: ptr IAppVisibilityEvents, currentVisibleState: WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.LauncherVisibilityChange(self, currentVisibleState)
converter winim_converter_IAppVisibility*(x: ptr IAppVisibility): ptr IUnknown = cast[ptr IUnknown](x)
proc GetAppVisibilityOnMonitor*(self: ptr IAppVisibility, hMonitor: HMONITOR, pMode: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetAppVisibilityOnMonitor(self, hMonitor, pMode)
proc IsLauncherVisible*(self: ptr IAppVisibility, pfVisible: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.IsLauncherVisible(self, pfVisible)
proc Advise*(self: ptr IAppVisibility, pCallback: ptr IAppVisibilityEvents, pdwCookie: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Advise(self, pCallback, pdwCookie)
proc Unadvise*(self: ptr IAppVisibility, dwCookie: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.Unadvise(self, dwCookie)
converter winim_converter_IPackageExecutionStateChangeNotification*(x: ptr IPackageExecutionStateChangeNotification): ptr IUnknown = cast[ptr IUnknown](x)
proc OnStateChanged*(self: ptr IPackageExecutionStateChangeNotification, pszPackageFullName: LPCWSTR, pesNewState: int32): HRESULT {.inline, discardable.} = self.lpVtbl.OnStateChanged(self, pszPackageFullName, pesNewState)
converter winim_converter_IPackageDebugSettings*(x: ptr IPackageDebugSettings): ptr IUnknown = cast[ptr IUnknown](x)
proc EnableDebugging*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR, debuggerCommandLine: LPCWSTR, environment: PZZWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.EnableDebugging(self, packageFullName, debuggerCommandLine, environment)
proc DisableDebugging*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.DisableDebugging(self, packageFullName)
proc Suspend*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.Suspend(self, packageFullName)
proc Resume*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.Resume(self, packageFullName)
proc TerminateAllProcesses*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.TerminateAllProcesses(self, packageFullName)
proc SetTargetSessionId*(self: ptr IPackageDebugSettings, sessionId: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.SetTargetSessionId(self, sessionId)
proc EnumerateBackgroundTasks*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR, taskCount: ptr ULONG, taskIds: ptr LPCGUID, taskNames: ptr ptr LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.EnumerateBackgroundTasks(self, packageFullName, taskCount, taskIds, taskNames)
proc ActivateBackgroundTask*(self: ptr IPackageDebugSettings, taskId: LPCGUID): HRESULT {.inline, discardable.} = self.lpVtbl.ActivateBackgroundTask(self, taskId)
proc StartServicing*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.StartServicing(self, packageFullName)
proc StopServicing*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.StopServicing(self, packageFullName)
proc StartSessionRedirection*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR, sessionId: ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.StartSessionRedirection(self, packageFullName, sessionId)
proc StopSessionRedirection*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.StopSessionRedirection(self, packageFullName)
proc GetPackageExecutionState*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR, packageExecutionState: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetPackageExecutionState(self, packageFullName, packageExecutionState)
proc RegisterForPackageStateChanges*(self: ptr IPackageDebugSettings, packageFullName: LPCWSTR, pPackageExecutionStateChangeNotification: ptr IPackageExecutionStateChangeNotification, pdwCookie: ptr DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.RegisterForPackageStateChanges(self, packageFullName, pPackageExecutionStateChangeNotification, pdwCookie)
proc UnregisterForPackageStateChanges*(self: ptr IPackageDebugSettings, dwCookie: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.UnregisterForPackageStateChanges(self, dwCookie)
converter winim_converter_IExecuteCommandApplicationHostEnvironment*(x: ptr IExecuteCommandApplicationHostEnvironment): ptr IUnknown = cast[ptr IUnknown](x)
proc GetValue*(self: ptr IExecuteCommandApplicationHostEnvironment, pahe: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetValue(self, pahe)
converter winim_converter_IExecuteCommandHost*(x: ptr IExecuteCommandHost): ptr IUnknown = cast[ptr IUnknown](x)
proc GetUIMode*(self: ptr IExecuteCommandHost, pUIMode: ptr int32): HRESULT {.inline, discardable.} = self.lpVtbl.GetUIMode(self, pUIMode)
converter winim_converter_IApplicationDesignModeSettings*(x: ptr IApplicationDesignModeSettings): ptr IUnknown = cast[ptr IUnknown](x)
proc SetNativeDisplaySize*(self: ptr IApplicationDesignModeSettings, sizeNativeDisplay: SIZE): HRESULT {.inline, discardable.} = self.lpVtbl.SetNativeDisplaySize(self, sizeNativeDisplay)
proc SetScaleFactor*(self: ptr IApplicationDesignModeSettings, scaleFactor: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetScaleFactor(self, scaleFactor)
proc SetApplicationViewState*(self: ptr IApplicationDesignModeSettings, viewState: int32): HRESULT {.inline, discardable.} = self.lpVtbl.SetApplicationViewState(self, viewState)
proc ComputeApplicationSize*(self: ptr IApplicationDesignModeSettings, psizeApplication: ptr SIZE): HRESULT {.inline, discardable.} = self.lpVtbl.ComputeApplicationSize(self, psizeApplication)
proc IsApplicationViewStateSupported*(self: ptr IApplicationDesignModeSettings, viewState: int32, sizeNativeDisplay: SIZE, scaleFactor: int32, pfSupported: ptr WINBOOL): HRESULT {.inline, discardable.} = self.lpVtbl.IsApplicationViewStateSupported(self, viewState, sizeNativeDisplay, scaleFactor, pfSupported)
proc TriggerEdgeGesture*(self: ptr IApplicationDesignModeSettings, edgeGestureKind: int32): HRESULT {.inline, discardable.} = self.lpVtbl.TriggerEdgeGesture(self, edgeGestureKind)
converter winim_converter_IInitializeWithWindow*(x: ptr IInitializeWithWindow): ptr IUnknown = cast[ptr IUnknown](x)
proc Initialize*(self: ptr IInitializeWithWindow, hwnd: HWND): HRESULT {.inline, discardable.} = self.lpVtbl.Initialize(self, hwnd)
converter winim_converter_IHandlerInfo*(x: ptr IHandlerInfo): ptr IUnknown = cast[ptr IUnknown](x)
proc GetApplicationDisplayName*(self: ptr IHandlerInfo, value: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetApplicationDisplayName(self, value)
proc GetApplicationPublisher*(self: ptr IHandlerInfo, value: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetApplicationPublisher(self, value)
proc GetApplicationIconReference*(self: ptr IHandlerInfo, value: ptr LPWSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetApplicationIconReference(self, value)
converter winim_converter_IHandlerActivationHost*(x: ptr IHandlerActivationHost): ptr IUnknown = cast[ptr IUnknown](x)
proc BeforeCoCreateInstance*(self: ptr IHandlerActivationHost, clsidHandler: REFCLSID, itemsBeingActivated: ptr IShellItemArray, handlerInfo: ptr IHandlerInfo): HRESULT {.inline, discardable.} = self.lpVtbl.BeforeCoCreateInstance(self, clsidHandler, itemsBeingActivated, handlerInfo)
proc BeforeCreateProcess*(self: ptr IHandlerActivationHost, applicationPath: LPCWSTR, commandLine: LPCWSTR, handlerInfo: ptr IHandlerInfo): HRESULT {.inline, discardable.} = self.lpVtbl.BeforeCreateProcess(self, applicationPath, commandLine, handlerInfo)



# ext/imagehlp.nim
const
  # IMAGEHLP_STATUS_REASON* = enum
  BindOutOfMemory* = 0
  BindRvaToVaFailed* = 1
  BindNoRoomInImage* = 2
  BindImportModuleFailed* = 3
  BindImportProcedureFailed* = 4
  BindImportModule* = 5
  BindImportProcedure* = 6
  BindForwarder* = 7
  BindForwarderNOT* = 8
  BindImageModified* = 9
  BindExpandFileHeaders* = 10
  BindImageComplete* = 11
  BindMismatchedSymbols* = 12
  BindSymbolsNotUpdated* = 13
  # ADDRESS_MODE* = enum
  AddrMode1616* = 0
  AddrMode1632* = 1
  AddrModeReal* = 2
  AddrModeFlat* = 3
  # SYM_TYPE* = enum
  SymNone* = 0
  SymCoff* = 1
  SymCv* = 2
  SymPdb* = 3
  SymExport* = 4
  SymDeferred* = 5
  SymSym* = 6
  SymDia* = 7
  SymVirtual* = 8

const
  API_VERSION_NUMBER* = 7
  BIND_NO_BOUND_IMPORTS* = 1
  BIND_NO_UPDATE* = 2
  BIND_ALL_IMAGES* = 4
  BIND_CACHE_IMPORT_DLLS* = 8
  CBA_DEFERRED_SYMBOL_LOAD_START* = 1
  CBA_DEFERRED_SYMBOL_LOAD_COMPLETE* = 2
  CBA_DEFERRED_SYMBOL_LOAD_FAILURE* = 3
  CBA_SYMBOLS_UNLOADED* = 4
  CBA_DUPLICATE_SYMBOL* = 5
  CERT_PE_IMAGE_DIGEST_DEBUG_INFO* = 1
  CERT_PE_IMAGE_DIGEST_RESOURCES* = 2
  CERT_PE_IMAGE_DIGEST_ALL_IMPORT_INFO* = 4
  CERT_PE_IMAGE_DIGEST_NON_PE_INFO* = 8
  CERT_SECTION_TYPE_ANY* = 255
  CHECKSUM_SUCCESS* = 0
  CHECKSUM_OPEN_FAILURE* = 1
  CHECKSUM_MAP_FAILURE* = 2
  CHECKSUM_MAPVIEW_FAILURE* = 3
  CHECKSUM_UNICODE_FAILURE* = 4
  IMAGE_SEPARATION* = 65536
  SPLITSYM_REMOVE_PRIVATE* = 1
  SPLITSYM_EXTRACT_ALL* = 2
  SPLITSYM_SYMBOLPATH_IS_SRC* = 4
  SYMF_OMAP_GENERATED* = 1
  SYMF_OMAP_MODIFIED* = 2
  SYMOPT_CASE_INSENSITIVE* = 1
  SYMOPT_UNDNAME* = 2
  SYMOPT_DEFERRED_LOADS* = 4
  SYMOPT_NO_CPP* = 8
  SYMOPT_LOAD_LINES* = 16
  SYMOPT_OMAP_FIND_NEAREST* = 32
  UNDNAME_COMPLETE* = 0
  UNDNAME_NO_LEADING_UNDERSCORES* = 1
  UNDNAME_NO_MS_KEYWORDS* = 2
  UNDNAME_NO_FUNCTION_RETURNS* = 4
  UNDNAME_NO_ALLOCATION_MODEL* = 8
  UNDNAME_NO_ALLOCATION_LANGUAGE* = 16
  UNDNAME_NO_MS_THISTYPE* = 32
  UNDNAME_NO_CV_THISTYPE* = 64
  UNDNAME_NO_THISTYPE* = 96
  UNDNAME_NO_ACCESS_SPECIFIERS* = 128
  UNDNAME_NO_THROW_SIGNATURES* = 256
  UNDNAME_NO_MEMBER_TYPE* = 512
  UNDNAME_NO_RETURN_UDT_MODEL* = 1024
  UNDNAME_32_BIT_DECODE* = 2048
  UNDNAME_NAME_ONLY* = 4096
  UNDNAME_NO_ARGUMENTS* = 8192
  UNDNAME_NO_SPECIAL_SYMS* = 16384

type
  IMAGEHLP_STATUS_REASON* = int32
  LOADED_IMAGE* {.final, pure.} = object
    ModuleName*: LPSTR
    hFile*: HANDLE
    MappedAddress*: PUCHAR
    FileHeader*: PIMAGE_NT_HEADERS
    LastRvaSection*: PIMAGE_SECTION_HEADER
    NumberOfSections*: ULONG
    Sections*: PIMAGE_SECTION_HEADER
    Characteristics*: ULONG
    fSystemImage*: BOOLEAN
    fDOSImage*: BOOLEAN
    Links*: LIST_ENTRY
    SizeOfImage*: ULONG
  PLOADED_IMAGE* = ptr LOADED_IMAGE
  IMAGE_DEBUG_INFORMATION* {.final, pure.} = object
    List*: LIST_ENTRY
    Size*: DWORD
    MappedBase*: PVOID
    Machine*: USHORT
    Characteristics*: USHORT
    CheckSum*: DWORD
    ImageBase*: DWORD
    SizeOfImage*: DWORD
    NumberOfSections*: DWORD
    Sections*: PIMAGE_SECTION_HEADER
    ExportedNamesSize*: DWORD
    ExportedNames*: LPSTR
    NumberOfFunctionTableEntries*: DWORD
    FunctionTableEntries*: PIMAGE_FUNCTION_ENTRY
    LowestFunctionStartingAddress*: DWORD
    HighestFunctionEndingAddress*: DWORD
    NumberOfFpoTableEntries*: DWORD
    FpoTableEntries*: PFPO_DATA
    SizeOfCoffSymbols*: DWORD
    CoffSymbols*: PIMAGE_COFF_SYMBOLS_HEADER
    SizeOfCodeViewSymbols*: DWORD
    CodeViewSymbols*: PVOID
    ImageFilePath*: LPSTR
    ImageFileName*: LPSTR
    DebugFilePath*: LPSTR
    TimeDateStamp*: DWORD
    RomImage*: BOOL
    DebugDirectory*: PIMAGE_DEBUG_DIRECTORY
    NumberOfDebugDirectories*: DWORD
    Reserved*: array[3, DWORD]
  PIMAGE_DEBUG_INFORMATION* = ptr IMAGE_DEBUG_INFORMATION
  ADDRESS_MODE* = int32
  ADDRESS* {.final, pure.} = object
    Offset*: DWORD
    Segment*: WORD
    Mode*: ADDRESS_MODE
  LPADDRESS* = ptr ADDRESS
  KDHELP* {.final, pure.} = object
    Thread*: DWORD
    ThCallbackStack*: DWORD
    NextCallback*: DWORD
    FramePointer*: DWORD
    KiCallUserMode*: DWORD
    KeUserCallbackDispatcher*: DWORD
    SystemRangeStart*: DWORD
  PKDHELP* = ptr KDHELP
  STACKFRAME* {.final, pure.} = object
    AddrPC*: ADDRESS
    AddrReturn*: ADDRESS
    AddrFrame*: ADDRESS
    AddrStack*: ADDRESS
    FuncTableEntry*: LPVOID
    Params*: array[4, DWORD]
    Far*: BOOL
    Virtual*: BOOL
    Reserved*: array[3, DWORD]
    KdHelp*: KDHELP
  LPSTACKFRAME* = ptr STACKFRAME
  API_VERSION* {.final, pure.} = object
    MajorVersion*: USHORT
    MinorVersion*: USHORT
    Revision*: USHORT
    Reserved*: USHORT
  LPAPI_VERSION* = ptr API_VERSION
  SYM_TYPE* = int32
  IMAGEHLP_SYMBOL* {.final, pure.} = object
    SizeOfStruct*: DWORD
    Address*: DWORD
    Size*: DWORD
    Flags*: DWORD
    MaxNameLength*: DWORD
    Name*: array[1, CHAR]
  PIMAGEHLP_SYMBOL* = ptr IMAGEHLP_SYMBOL
  IMAGEHLP_MODULE* {.final, pure.} = object
    SizeOfStruct*: DWORD
    BaseOfImage*: DWORD
    ImageSize*: DWORD
    TimeDateStamp*: DWORD
    CheckSum*: DWORD
    NumSyms*: DWORD
    SymType*: SYM_TYPE
    ModuleName*: array[32, CHAR]
    ImageName*: array[256, CHAR]
    LoadedImageName*: array[256, CHAR]
  PIMAGEHLP_MODULE* = ptr IMAGEHLP_MODULE
  IMAGEHLP_LINE* {.final, pure.} = object
    SizeOfStruct*: DWORD
    Key*: DWORD
    LineNumber*: DWORD
    FileName*: PCHAR
    Address*: DWORD
  PIMAGEHLP_LINE* = ptr IMAGEHLP_LINE
  IMAGEHLP_DEFERRED_SYMBOL_LOAD* {.final, pure.} = object
    SizeOfStruct*: DWORD
    BaseOfImage*: DWORD
    CheckSum*: DWORD
    TimeDateStamp*: DWORD
    FileName*: array[MAX_PATH, CHAR]
    Reparse*: BOOLEAN
  PIMAGEHLP_DEFERRED_SYMBOL_LOAD* = ptr IMAGEHLP_DEFERRED_SYMBOL_LOAD
  IMAGEHLP_DUPLICATE_SYMBOL* {.final, pure.} = object
    SizeOfStruct*: DWORD
    NumberOfDups*: DWORD
    Symbol*: PIMAGEHLP_SYMBOL
    SelectedSymbol*: ULONG
  PIMAGEHLP_DUPLICATE_SYMBOL* = ptr IMAGEHLP_DUPLICATE_SYMBOL
  DIGEST_HANDLE* = HANDLE
  PIMAGEHLP_STATUS_ROUTINE* = proc (P1: IMAGEHLP_STATUS_REASON, P2: LPSTR, P3: LPSTR, P4: ULONG, P5: ULONG): BOOL {.stdcall.}
  PREAD_PROCESS_MEMORY_ROUTINE* = proc (P1: HANDLE, P2: LPCVOID, P3: LPVOID, P4: DWORD, P5: LPDWORD): BOOL {.stdcall.}
  PFUNCTION_TABLE_ACCESS_ROUTINE* = proc (P1: HANDLE, P2: DWORD): LPVOID {.stdcall.}
  PGET_MODULE_BASE_ROUTINE* = proc (P1: HANDLE, P2: DWORD): DWORD {.stdcall.}
  PTRANSLATE_ADDRESS_ROUTINE* = proc (P1: HANDLE, P2: HANDLE, P3: LPADDRESS): DWORD {.stdcall.}
  PSYM_ENUMMODULES_CALLBACK* = proc (P1: LPSTR, P2: ULONG, P3: PVOID): BOOL {.stdcall.}
  PSYM_ENUMSYMBOLS_CALLBACK* = proc (P1: LPSTR, P2: ULONG, P3: ULONG, P4: PVOID): BOOL {.stdcall.}
  PENUMLOADED_MODULES_CALLBACK* = proc (P1: LPSTR, P2: ULONG, P3: ULONG, P4: PVOID): BOOL {.stdcall.}
  PSYMBOL_REGISTERED_CALLBACK* = proc (P1: HANDLE, P2: ULONG, P3: PVOID, P4: PVOID): BOOL {.stdcall.}
  DIGEST_FUNCTION* = proc (refdata: DIGEST_HANDLE, pData: PBYTE, dwLength: DWORD): BOOL {.stdcall.}

proc CheckSumMappedFile*(P1: LPVOID, P2: DWORD, P3: LPDWORD, P4: LPDWORD): PIMAGE_NT_HEADERS {.winapi, dynlib: "imagehlp", importc.}
proc MapFileAndCheckSumA*(P1: LPSTR, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "imagehlp", importc.}
proc MapFileAndCheckSumW*(P1: PWSTR, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "imagehlp", importc.}
proc TouchFileTimes*(P1: HANDLE, P2: LPSYSTEMTIME): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SplitSymbols*(P1: LPSTR, P2: LPSTR, P3: LPSTR, P4: DWORD): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc FindDebugInfoFile*(P1: LPSTR, P2: LPSTR, P3: LPSTR): HANDLE {.winapi, dynlib: "imagehlp", importc.}
proc FindExecutableImage*(P1: LPSTR, P2: LPSTR, P3: LPSTR): HANDLE {.winapi, dynlib: "imagehlp", importc.}
proc UpdateDebugInfoFile*(P1: LPSTR, P2: LPSTR, P3: LPSTR, P4: PIMAGE_NT_HEADERS): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc UpdateDebugInfoFileEx*(P1: LPSTR, P2: LPSTR, P3: LPSTR, P4: PIMAGE_NT_HEADERS, P5: DWORD): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc BindImage*(P1: LPSTR, P2: LPSTR, P3: LPSTR): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc BindImageEx*(P1: DWORD, P2: LPSTR, P3: LPSTR, P4: LPSTR, P5: PIMAGEHLP_STATUS_ROUTINE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc ReBaseImage*(P1: LPSTR, P2: LPSTR, P3: BOOL, P4: BOOL, P5: BOOL, P6: ULONG, P7: ptr ULONG, P8: ptr ULONG, P9: ptr ULONG, P10: ptr ULONG, P11: ULONG): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc ImageLoad*(P1: LPSTR, P2: LPSTR): PLOADED_IMAGE {.winapi, dynlib: "imagehlp", importc.}
proc ImageUnload*(P1: PLOADED_IMAGE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc ImageNtHeader*(P1: PVOID): PIMAGE_NT_HEADERS {.winapi, dynlib: "imagehlp", importc.}
proc ImageDirectoryEntryToData*(P1: PVOID, P2: BOOLEAN, P3: USHORT, P4: PULONG): PVOID {.winapi, dynlib: "imagehlp", importc.}
proc ImageRvaToSection*(P1: PIMAGE_NT_HEADERS, P2: PVOID, P3: ULONG): PIMAGE_SECTION_HEADER {.winapi, dynlib: "imagehlp", importc.}
proc ImageRvaToVa*(P1: PIMAGE_NT_HEADERS, P2: PVOID, P3: ULONG, P4: ptr PIMAGE_SECTION_HEADER): PVOID {.winapi, dynlib: "imagehlp", importc.}
proc MapAndLoad*(P1: LPSTR, P2: LPSTR, P3: PLOADED_IMAGE, P4: BOOL, P5: BOOL): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc GetImageConfigInformation*(P1: PLOADED_IMAGE, P2: PIMAGE_LOAD_CONFIG_DIRECTORY): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc GetImageUnusedHeaderBytes*(P1: PLOADED_IMAGE, P2: LPDWORD): DWORD {.winapi, dynlib: "imagehlp", importc.}
proc SetImageConfigInformation*(P1: PLOADED_IMAGE, P2: PIMAGE_LOAD_CONFIG_DIRECTORY): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc UnMapAndLoad*(P1: PLOADED_IMAGE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc MapDebugInformation*(P1: HANDLE, P2: LPSTR, P3: LPSTR, P4: DWORD): PIMAGE_DEBUG_INFORMATION {.winapi, dynlib: "imagehlp", importc.}
proc UnmapDebugInformation*(P1: PIMAGE_DEBUG_INFORMATION): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SearchTreeForFile*(P1: LPSTR, P2: LPSTR, P3: LPSTR): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc MakeSureDirectoryPathExists*(P1: LPCSTR): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc UnDecorateSymbolName*(P1: LPCSTR, P2: LPSTR, P3: DWORD, P4: DWORD): DWORD {.winapi, dynlib: "imagehlp", importc.}
proc StackWalk*(P1: DWORD, P2: HANDLE, P3: HANDLE, P4: LPSTACKFRAME, P5: LPVOID, P6: PREAD_PROCESS_MEMORY_ROUTINE, P7: PFUNCTION_TABLE_ACCESS_ROUTINE, P8: PGET_MODULE_BASE_ROUTINE, P9: PTRANSLATE_ADDRESS_ROUTINE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc ImagehlpApiVersion*(): LPAPI_VERSION {.winapi, dynlib: "imagehlp", importc.}
proc ImagehlpApiVersionEx*(P1: LPAPI_VERSION): LPAPI_VERSION {.winapi, dynlib: "imagehlp", importc.}
proc GetTimestampForLoadedLibrary*(P1: HMODULE): DWORD {.winapi, dynlib: "imagehlp", importc.}
proc RemovePrivateCvSymbolic*(P1: PCHAR, P2: ptr PCHAR, P3: ptr ULONG): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc RemoveRelocations*(P1: PCHAR): VOID {.winapi, dynlib: "imagehlp", importc.}
proc SymSetOptions*(P1: DWORD): DWORD {.winapi, dynlib: "imagehlp", importc.}
proc SymGetOptions*(): DWORD {.winapi, dynlib: "imagehlp", importc.}
proc SymCleanup*(P1: HANDLE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymEnumerateModules*(P1: HANDLE, P2: PSYM_ENUMMODULES_CALLBACK, P3: PVOID): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymEnumerateSymbols*(P1: HANDLE, P2: DWORD, P3: PSYM_ENUMSYMBOLS_CALLBACK, P4: PVOID): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc EnumerateLoadedModules*(P1: HANDLE, P2: PENUMLOADED_MODULES_CALLBACK, P3: PVOID): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymFunctionTableAccess*(P1: HANDLE, P2: DWORD): LPVOID {.winapi, dynlib: "imagehlp", importc.}
proc SymGetModuleInfo*(P1: HANDLE, P2: DWORD, P3: PIMAGEHLP_MODULE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymGetModuleBase*(P1: HANDLE, P2: DWORD): DWORD {.winapi, dynlib: "imagehlp", importc.}
proc SymGetSymFromAddr*(P1: HANDLE, P2: DWORD, P3: PDWORD, P4: PIMAGEHLP_SYMBOL): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymGetSymFromName*(P1: HANDLE, P2: LPSTR, P3: PIMAGEHLP_SYMBOL): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymGetSymNext*(P1: HANDLE, P2: PIMAGEHLP_SYMBOL): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymGetSymPrev*(P1: HANDLE, P2: PIMAGEHLP_SYMBOL): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymGetLineFromAddr*(P1: HANDLE, P2: DWORD, P3: PDWORD, P4: PIMAGEHLP_LINE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymGetLineFromName*(P1: HANDLE, P2: LPSTR, P3: LPSTR, P4: DWORD, P5: PLONG, P6: PIMAGEHLP_LINE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymGetLineNext*(P1: HANDLE, P2: PIMAGEHLP_LINE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymGetLinePrev*(P1: HANDLE, P2: PIMAGEHLP_LINE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymMatchFileName*(P1: LPSTR, P2: LPSTR, P3: ptr LPSTR, P4: ptr LPSTR): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymInitialize*(P1: HANDLE, P2: LPSTR, P3: BOOL): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymGetSearchPath*(P1: HANDLE, P2: LPSTR, P3: DWORD): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymSetSearchPath*(P1: HANDLE, P2: LPSTR): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymLoadModule*(P1: HANDLE, P2: HANDLE, P3: PSTR, P4: PSTR, P5: DWORD, P6: DWORD): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymUnloadModule*(P1: HANDLE, P2: DWORD): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymUnDName*(P1: PIMAGEHLP_SYMBOL, P2: LPSTR, P3: DWORD): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc SymRegisterCallback*(P1: HANDLE, P2: PSYMBOL_REGISTERED_CALLBACK, P3: PVOID): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc ImageGetDigestStream*(P1: HANDLE, P2: DWORD, P3: DIGEST_FUNCTION, P4: DIGEST_HANDLE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc ImageAddCertificate*(P1: HANDLE, P2: LPWIN_CERTIFICATE, P3: PDWORD): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc ImageRemoveCertificate*(P1: HANDLE, P2: DWORD): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc ImageEnumerateCertificates*(P1: HANDLE, P2: WORD, P3: PDWORD, P4: PDWORD, P5: DWORD): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc ImageGetCertificateData*(P1: HANDLE, P2: DWORD, P3: LPWIN_CERTIFICATE, P4: PDWORD): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc ImageGetCertificateHeader*(P1: HANDLE, P2: DWORD, P3: LPWIN_CERTIFICATE): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc CopyPdb*(P1: ptr CHAR, P2: ptr CHAR, P3: BOOL): BOOL {.winapi, dynlib: "imagehlp", importc.}
proc RemovePrivateCvSymbolicEx*(P1: PCHAR, P2: ULONG, P3: ptr PCHAR, P4: ptr ULONG): BOOL {.winapi, dynlib: "imagehlp", importc.}

when not defined(winansi):
  proc MapFileAndCheckSum*(P1: PWSTR, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "imagehlp", importc: "MapFileAndCheckSumW".}

else:
  proc MapFileAndCheckSum*(P1: LPSTR, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "imagehlp", importc: "MapFileAndCheckSumA".}

# ext/imm.nim

const
  WM_CONVERTREQUESTEX* = 0x108
  WM_IME_STARTCOMPOSITION* = 0x10D
  WM_IME_ENDCOMPOSITION* = 0x10E
  WM_IME_COMPOSITION* = 0x10F
  WM_IME_KEYLAST* = 0x10F
  WM_IME_SETCONTEXT* = 0x281
  WM_IME_NOTIFY* = 0x282
  WM_IME_CONTROL* = 0x283
  WM_IME_COMPOSITIONFULL* = 0x284
  WM_IME_SELECT* = 0x285
  WM_IME_CHAR* = 0x286
  WM_IME_REQUEST* = 0x288
  WM_IME_KEYDOWN* = 0x290
  WM_IME_KEYUP* = 0x291
  IMC_GETCANDIDATEPOS* = 7
  IMC_SETCANDIDATEPOS* = 8
  IMC_GETCOMPOSITIONFONT* = 9
  IMC_SETCOMPOSITIONFONT* = 10
  IMC_GETCOMPOSITIONWINDOW* = 11
  IMC_SETCOMPOSITIONWINDOW* = 12
  IMC_GETSTATUSWINDOWPOS* = 15
  IMC_SETSTATUSWINDOWPOS* = 16
  IMC_CLOSESTATUSWINDOW* = 0x21
  IMC_OPENSTATUSWINDOW* = 0x22
  IMN_CLOSESTATUSWINDOW* = 1
  IMN_OPENSTATUSWINDOW* = 2
  IMN_CHANGECANDIDATE* = 3
  IMN_CLOSECANDIDATE* = 4
  IMN_OPENCANDIDATE* = 5
  IMN_SETCONVERSIONMODE* = 6
  IMN_SETSENTENCEMODE* = 7
  IMN_SETOPENSTATUS* = 8
  IMN_SETCANDIDATEPOS* = 9
  IMN_SETCOMPOSITIONFONT* = 10
  IMN_SETCOMPOSITIONWINDOW* = 11
  IMN_SETSTATUSWINDOWPOS* = 12
  IMN_GUIDELINE* = 13
  IMN_PRIVATE* = 14
  NI_OPENCANDIDATE* = 16
  NI_CLOSECANDIDATE* = 17
  NI_SELECTCANDIDATESTR* = 18
  NI_CHANGECANDIDATELIST* = 19
  NI_FINALIZECONVERSIONRESULT* = 20
  NI_COMPOSITIONSTR* = 21
  NI_SETCANDIDATE_PAGESTART* = 22
  NI_SETCANDIDATE_PAGESIZE* = 23
  NI_IMEMENUSELECTED* = 24
  ISC_SHOWUICANDIDATEWINDOW* = 1
  ISC_SHOWUICOMPOSITIONWINDOW* = 0x80000000'i32
  ISC_SHOWUIGUIDELINE* = 0x40000000
  ISC_SHOWUIALLCANDIDATEWINDOW* = 15
  ISC_SHOWUIALL* = -1073741809
  CPS_COMPLETE* = 1
  CPS_CONVERT* = 2
  CPS_REVERT* = 3
  CPS_CANCEL* = 4
  IME_CHOTKEY_IME_NONIME_TOGGLE* = 16
  IME_CHOTKEY_SHAPE_TOGGLE* = 17
  IME_CHOTKEY_SYMBOL_TOGGLE* = 18
  IME_JHOTKEY_CLOSE_OPEN* = 0x30
  IME_KHOTKEY_SHAPE_TOGGLE* = 0x50
  IME_KHOTKEY_HANJACONVERT* = 0x51
  IME_KHOTKEY_ENGLISH* = 0x52
  IME_THOTKEY_IME_NONIME_TOGGLE* = 0x70
  IME_THOTKEY_SHAPE_TOGGLE* = 0x71
  IME_THOTKEY_SYMBOL_TOGGLE* = 0x72
  IME_HOTKEY_DSWITCH_FIRST* = 256
  IME_HOTKEY_DSWITCH_LAST* = 0x11F
  IME_ITHOTKEY_RESEND_RESULTSTR* = 512
  IME_ITHOTKEY_PREVIOUS_COMPOSITION* = 513
  IME_ITHOTKEY_UISTYLE_TOGGLE* = 514
  GCS_COMPREADSTR* = 1
  GCS_COMPREADATTR* = 2
  GCS_COMPREADCLAUSE* = 4
  GCS_COMPSTR* = 8
  GCS_COMPATTR* = 16
  GCS_COMPCLAUSE* = 32
  GCS_CURSORPOS* = 128
  GCS_DELTASTART* = 256
  GCS_RESULTREADSTR* = 512
  GCS_RESULTREADCLAUSE* = 1024
  GCS_RESULTSTR* = 2048
  GCS_RESULTCLAUSE* = 4096
  CS_INSERTCHAR* = 0x2000
  CS_NOMOVECARET* = 0x4000
  IMEVER_0310* = 0x3000A
  IMEVER_0400* = 0x40000
  IME_PROP_AT_CARET* = 0x10000
  IME_PROP_SPECIAL_UI* = 0x20000
  IME_PROP_CANDLIST_START_FROM_1* = 0x40000
  IME_PROP_UNICODE* = 0x80000
  UI_CAP_2700* = 1
  UI_CAP_ROT90* = 2
  UI_CAP_ROTANY* = 4
  SCS_CAP_COMPSTR* = 1
  SCS_CAP_MAKEREAD* = 2
  SELECT_CAP_CONVERSION* = 1
  SELECT_CAP_SENTENCE* = 2
  GGL_LEVEL* = 1
  GGL_INDEX* = 2
  GGL_STRING* = 3
  GGL_PRIVATE* = 4
  GL_LEVEL_NOGUIDELINE* = 0
  GL_LEVEL_FATAL* = 1
  GL_LEVEL_ERROR* = 2
  GL_LEVEL_WARNING* = 3
  GL_LEVEL_INFORMATION* = 4
  GL_ID_UNKNOWN* = 0
  GL_ID_NOMODULE* = 1
  GL_ID_NODICTIONARY* = 16
  GL_ID_CANNOTSAVE* = 17
  GL_ID_NOCONVERT* = 32
  GL_ID_TYPINGERROR* = 33
  GL_ID_TOOMANYSTROKE* = 34
  GL_ID_READINGCONFLICT* = 35
  GL_ID_INPUTREADING* = 36
  GL_ID_INPUTRADICAL* = 37
  GL_ID_INPUTCODE* = 38
  GL_ID_INPUTSYMBOL* = 39
  GL_ID_CHOOSECANDIDATE* = 40
  GL_ID_REVERSECONVERSION* = 41
  GL_ID_PRIVATE_FIRST* = 0x8000
  GL_ID_PRIVATE_LAST* = 0xFFFF
  IGP_GETIMEVERSION* = 0xFFFFFFFC'u32
  IGP_PROPERTY* = 4
  IGP_CONVERSION* = 8
  IGP_SENTENCE* = 12
  IGP_UI* = 16
  IGP_SETCOMPSTR* = 0x14
  IGP_SELECT* = 0x18
  SCS_SETSTR* = GCS_COMPREADSTR or GCS_COMPSTR
  SCS_CHANGEATTR* = GCS_COMPREADATTR or GCS_COMPATTR
  SCS_CHANGECLAUSE* = GCS_COMPREADCLAUSE or GCS_COMPCLAUSE
  ATTR_INPUT* = 0
  ATTR_TARGET_CONVERTED* = 1
  ATTR_CONVERTED* = 2
  ATTR_TARGET_NOTCONVERTED* = 3
  ATTR_INPUT_ERROR* = 4
  ATTR_FIXEDCONVERTED* = 5
  CFS_DEFAULT* = 0
  CFS_RECT* = 1
  CFS_POINT* = 2
  CFS_SCREEN* = 4
  CFS_FORCE_POSITION* = 32
  CFS_CANDIDATEPOS* = 64
  CFS_EXCLUDE* = 128
  GCL_CONVERSION* = 1
  GCL_REVERSECONVERSION* = 2
  GCL_REVERSE_LENGTH* = 3
  IME_CMODE_ALPHANUMERIC* = 0
  IME_CMODE_NATIVE* = 1
  IME_CMODE_CHINESE* = IME_CMODE_NATIVE
  IME_CMODE_HANGEUL* = IME_CMODE_NATIVE
  IME_CMODE_HANGUL* = IME_CMODE_NATIVE
  IME_CMODE_JAPANESE* = IME_CMODE_NATIVE
  IME_CMODE_KATAKANA* = 2
  IME_CMODE_LANGUAGE* = 3
  IME_CMODE_FULLSHAPE* = 8
  IME_CMODE_ROMAN* = 16
  IME_CMODE_CHARCODE* = 32
  IME_CMODE_HANJACONVERT* = 64
  IME_CMODE_SOFTKBD* = 128
  IME_CMODE_NOCONVERSION* = 256
  IME_CMODE_EUDC* = 512
  IME_CMODE_SYMBOL* = 1024
  IME_CMODE_FIXED* = 2048
  IME_SMODE_NONE* = 0
  IME_SMODE_PLAURALCLAUSE* = 1
  IME_SMODE_SINGLECONVERT* = 2
  IME_SMODE_AUTOMATIC* = 4
  IME_SMODE_PHRASEPREDICT* = 8
  IME_CAND_UNKNOWN* = 0
  IME_CAND_READ* = 1
  IME_CAND_CODE* = 2
  IME_CAND_MEANING* = 3
  IME_CAND_RADICAL* = 4
  IME_CAND_STROKE* = 5
  IMM_ERROR_NODATA* = ( -1 )
  IMM_ERROR_GENERAL* = ( -2 )
  IME_CONFIG_GENERAL* = 1
  IME_CONFIG_REGISTERWORD* = 2
  IME_CONFIG_SELECTDICTIONARY* = 3
  IME_ESC_QUERY_SUPPORT* = 3
  IME_ESC_RESERVED_FIRST* = 4
  IME_ESC_RESERVED_LAST* = 0x7FF
  IME_ESC_PRIVATE_FIRST* = 0x800
  IME_ESC_PRIVATE_LAST* = 0xFFF
  IME_ESC_SEQUENCE_TO_INTERNAL* = 0x1001
  IME_ESC_GET_EUDC_DICTIONARY* = 0x1003
  IME_ESC_SET_EUDC_DICTIONARY* = 0x1004
  IME_ESC_MAX_KEY* = 0x1005
  IME_ESC_IME_NAME* = 0x1006
  IME_ESC_SYNC_HOTKEY* = 0x1007
  IME_ESC_HANJA_MODE* = 0x1008
  IME_ESC_AUTOMATA* = 0x1009
  IME_REGWORD_STYLE_EUDC* = 1
  IME_REGWORD_STYLE_USER_FIRST* = 0x80000000'i32
  IME_REGWORD_STYLE_USER_LAST* = -1
  SOFTKEYBOARD_TYPE_T1* = 1
  SOFTKEYBOARD_TYPE_C1* = 2
  IMEMENUITEM_STRING_SIZE* = 80
  # MOD_ALT* = 1
  # MOD_CONTROL* = 2
  # MOD_SHIFT* = 4
  # MOD_WIN* = 8
  # MOD_IGNORE_ALL_MODIFIER* = 1024
  # MOD_ON_KEYUP* = 2048
  # MOD_RIGHT* = 16384
  # MOD_LEFT* = 32768
  IACE_CHILDREN* = 1
  IACE_DEFAULT* = 16
  IACE_IGNORENOCONTEXT* = 32
  IGIMIF_RIGHTMENU* = 1
  IGIMII_CMODE* = 1
  IGIMII_SMODE* = 2
  IGIMII_CONFIGURE* = 4
  IGIMII_TOOLS* = 8
  IGIMII_HELP* = 16
  IGIMII_OTHER* = 32
  IGIMII_INPUTTOOLS* = 64
  IMFT_RADIOCHECK* = 1
  IMFT_SEPARATOR* = 2
  IMFT_SUBMENU* = 4
  IMFS_GRAYED* = MFS_GRAYED
  IMFS_DISABLED* = MFS_DISABLED
  IMFS_CHECKED* = MFS_CHECKED
  IMFS_HILITE* = MFS_HILITE
  IMFS_ENABLED* = MFS_ENABLED
  IMFS_UNCHECKED* = MFS_UNCHECKED
  IMFS_UNHILITE* = MFS_UNHILITE
  IMFS_DEFAULT* = MFS_DEFAULT
  STYLE_DESCRIPTION_SIZE* = 32

type
  HIMC* = DWORD
  HIMCC* = DWORD
  LPHKL* = ptr HKL
  COMPOSITIONFORM* {.final, pure.} = object
    dwStyle*: DWORD
    ptCurrentPos*: POINT
    rcArea*: RECT
  PCOMPOSITIONFORM* = ptr COMPOSITIONFORM
  LPCOMPOSITIONFORM* = ptr COMPOSITIONFORM
  CANDIDATEFORM* {.final, pure.} = object
    dwIndex*: DWORD
    dwStyle*: DWORD
    ptCurrentPos*: POINT
    rcArea*: RECT
  PCANDIDATEFORM* = ptr CANDIDATEFORM
  LPCANDIDATEFORM* = ptr CANDIDATEFORM
  CANDIDATELIST* {.final, pure.} = object
    dwSize*: DWORD
    dwStyle*: DWORD
    dwCount*: DWORD
    dwSelection*: DWORD
    dwPageStart*: DWORD
    dwPageSize*: DWORD
    dwOffset*: array[1, DWORD]
  PCANDIDATELIST* = ptr CANDIDATELIST
  LPCANDIDATELIST* = ptr CANDIDATELIST
  REGISTERWORDA* {.final, pure.} = object
    lpReading*: LPSTR
    lpWord*: LPSTR
  PREGISTERWORDA* = ptr REGISTERWORDA
  LPREGISTERWORDA* = ptr REGISTERWORDA
  REGISTERWORDW* {.final, pure.} = object
    lpReading*: LPWSTR
    lpWord*: LPWSTR
  PREGISTERWORDW* = ptr REGISTERWORDW
  LPREGISTERWORDW* = ptr REGISTERWORDW
  STYLEBUFA* {.final, pure.} = object
    dwStyle*: DWORD
    szDescription*: array[STYLE_DESCRIPTION_SIZE, CHAR]
  PSTYLEBUFA* = ptr STYLEBUFA
  LPSTYLEBUFA* = ptr STYLEBUFA
  STYLEBUFW* {.final, pure.} = object
    dwStyle*: DWORD
    szDescription*: array[STYLE_DESCRIPTION_SIZE, WCHAR]
  PSTYLEBUFW* = ptr STYLEBUFW
  LPSTYLEBUFW* = ptr STYLEBUFW
  IMEMENUITEMINFOA* {.final, pure.} = object
    cbSize*: UINT
    fType*: UINT
    fState*: UINT
    wID*: UINT
    hbmpChecked*: HBITMAP
    hbmpUnchecked*: HBITMAP
    dwItemData*: DWORD
    szString*: array[IMEMENUITEM_STRING_SIZE, CHAR]
    hbmpItem*: HBITMAP
  PIMEMENUITEMINFOA* = ptr IMEMENUITEMINFOA
  LPIMEMENUITEMINFOA* = ptr IMEMENUITEMINFOA
  IMEMENUITEMINFOW* {.final, pure.} = object
    cbSize*: UINT
    fType*: UINT
    fState*: UINT
    wID*: UINT
    hbmpChecked*: HBITMAP
    hbmpUnchecked*: HBITMAP
    dwItemData*: DWORD
    szString*: array[IMEMENUITEM_STRING_SIZE, WCHAR]
    hbmpItem*: HBITMAP
  PIMEMENUITEMINFOW* = ptr IMEMENUITEMINFOW
  LPIMEMENUITEMINFOW* = ptr IMEMENUITEMINFOW
  REGISTERWORDENUMPROCA* = proc (P1: LPCSTR, P2: DWORD, P3: LPCSTR, P4: LPVOID): int32 {.cdecl.}
  REGISTERWORDENUMPROCW* = proc (P1: LPCWSTR, P2: DWORD, P3: LPCWSTR, P4: LPVOID): int32 {.cdecl.}

when not defined(winansi):
  type
    REGISTERWORDENUMPROC* = REGISTERWORDENUMPROCW
    REGISTERWORD* = REGISTERWORDW
    IMEMENUITEMINFO* = IMEMENUITEMINFOW
    STYLEBUF* = STYLEBUFW

else:
  type
    REGISTERWORDENUMPROC* = REGISTERWORDENUMPROCA
    REGISTERWORD* = REGISTERWORDA
    IMEMENUITEMINFO* = IMEMENUITEMINFOA
    STYLEBUF* = STYLEBUFA

type
  PSTYLEBUF* = ptr STYLEBUF
  LPSTYLEBUF* = ptr STYLEBUF
  PREGISTERWORD* = ptr REGISTERWORD
  LPREGISTERWORD* = ptr REGISTERWORD
  PIMEMENUITEMINFO* = ptr IMEMENUITEMINFO
  LPIMEMENUITEMINFO* = ptr IMEMENUITEMINFO

proc ImmInstallIMEA*(P1: LPCSTR, P2: LPCSTR): HKL {.winapi, dynlib: "imm32", importc.}
proc ImmInstallIMEW*(P1: LPCWSTR, P2: LPCWSTR): HKL {.winapi, dynlib: "imm32", importc.}
proc ImmGetDefaultIMEWnd*(P1: HWND): HWND {.winapi, dynlib: "imm32", importc.}
proc ImmGetDescriptionA*(P1: HKL, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "imm32", importc.}
proc ImmGetDescriptionW*(P1: HKL, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "imm32", importc.}
proc ImmGetIMEFileNameA*(P1: HKL, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "imm32", importc.}
proc ImmGetIMEFileNameW*(P1: HKL, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "imm32", importc.}
proc ImmGetProperty*(P1: HKL, P2: DWORD): DWORD {.winapi, dynlib: "imm32", importc.}
proc ImmIsIME*(P1: HKL): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmSimulateHotKey*(P1: HWND, P2: DWORD): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmCreateContext*(): HIMC {.winapi, dynlib: "imm32", importc.}
proc ImmDestroyContext*(P1: HIMC): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmGetContext*(P1: HWND): HIMC {.winapi, dynlib: "imm32", importc.}
proc ImmReleaseContext*(P1: HWND, P2: HIMC): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmAssociateContext*(P1: HWND, P2: HIMC): HIMC {.winapi, dynlib: "imm32", importc.}
proc ImmGetCompositionStringA*(P1: HIMC, P2: DWORD, P3: PVOID, P4: DWORD): LONG {.winapi, dynlib: "imm32", importc.}
proc ImmGetCompositionStringW*(P1: HIMC, P2: DWORD, P3: PVOID, P4: DWORD): LONG {.winapi, dynlib: "imm32", importc.}
proc ImmSetCompositionStringA*(P1: HIMC, P2: DWORD, P3: PCVOID, P4: DWORD, P5: PCVOID, P6: DWORD): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmSetCompositionStringW*(P1: HIMC, P2: DWORD, P3: PCVOID, P4: DWORD, P5: PCVOID, P6: DWORD): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmGetCandidateListCountA*(P1: HIMC, P2: PDWORD): DWORD {.winapi, dynlib: "imm32", importc.}
proc ImmGetCandidateListCountW*(P1: HIMC, P2: PDWORD): DWORD {.winapi, dynlib: "imm32", importc.}
proc ImmGetCandidateListA*(P1: HIMC, P2: DWORD, P3: PCANDIDATELIST, P4: DWORD): DWORD {.winapi, dynlib: "imm32", importc.}
proc ImmGetCandidateListW*(P1: HIMC, P2: DWORD, P3: PCANDIDATELIST, P4: DWORD): DWORD {.winapi, dynlib: "imm32", importc.}
proc ImmGetGuideLineA*(P1: HIMC, P2: DWORD, P3: LPSTR, P4: DWORD): DWORD {.winapi, dynlib: "imm32", importc.}
proc ImmGetGuideLineW*(P1: HIMC, P2: DWORD, P3: LPWSTR, P4: DWORD): DWORD {.winapi, dynlib: "imm32", importc.}
proc ImmGetConversionStatus*(P1: HIMC, P2: LPDWORD, P3: PDWORD): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmSetConversionStatus*(P1: HIMC, P2: DWORD, P3: DWORD): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmGetOpenStatus*(P1: HIMC): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmSetOpenStatus*(P1: HIMC, P2: BOOL): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmGetCompositionFontA*(P1: HIMC, P2: LPLOGFONTA): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmGetCompositionFontW*(P1: HIMC, P2: LPLOGFONTW): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmSetCompositionFontA*(P1: HIMC, P2: LPLOGFONTA): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmSetCompositionFontW*(P1: HIMC, P2: LPLOGFONTW): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmConfigureIMEA*(P1: HKL, P2: HWND, P3: DWORD, P4: PVOID): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmConfigureIMEW*(P1: HKL, P2: HWND, P3: DWORD, P4: PVOID): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmEscapeA*(P1: HKL, P2: HIMC, P3: UINT, P4: PVOID): LRESULT {.winapi, dynlib: "imm32", importc.}
proc ImmEscapeW*(P1: HKL, P2: HIMC, P3: UINT, P4: PVOID): LRESULT {.winapi, dynlib: "imm32", importc.}
proc ImmGetConversionListA*(P1: HKL, P2: HIMC, P3: LPCSTR, P4: PCANDIDATELIST, P5: DWORD, P6: UINT): DWORD {.winapi, dynlib: "imm32", importc.}
proc ImmGetConversionListW*(P1: HKL, P2: HIMC, P3: LPCWSTR, P4: PCANDIDATELIST, P5: DWORD, P6: UINT): DWORD {.winapi, dynlib: "imm32", importc.}
proc ImmNotifyIME*(P1: HIMC, P2: DWORD, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmGetStatusWindowPos*(P1: HIMC, P2: LPPOINT): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmSetStatusWindowPos*(P1: HIMC, P2: LPPOINT): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmGetCompositionWindow*(P1: HIMC, P2: PCOMPOSITIONFORM): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmSetCompositionWindow*(P1: HIMC, P2: PCOMPOSITIONFORM): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmGetCandidateWindow*(P1: HIMC, P2: DWORD, P3: PCANDIDATEFORM): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmSetCandidateWindow*(P1: HIMC, P2: PCANDIDATEFORM): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmIsUIMessageA*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmIsUIMessageW*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmGetVirtualKey*(P1: HWND): UINT {.winapi, dynlib: "imm32", importc.}
proc ImmRegisterWordA*(P1: HKL, P2: LPCSTR, P3: DWORD, P4: LPCSTR): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmRegisterWordW*(P1: HKL, P2: LPCWSTR, P3: DWORD, P4: LPCWSTR): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmUnregisterWordA*(P1: HKL, P2: LPCSTR, P3: DWORD, P4: LPCSTR): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmUnregisterWordW*(P1: HKL, P2: LPCWSTR, P3: DWORD, P4: LPCWSTR): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmGetRegisterWordStyleA*(P1: HKL, P2: UINT, P3: PSTYLEBUFA): UINT {.winapi, dynlib: "imm32", importc.}
proc ImmGetRegisterWordStyleW*(P1: HKL, P2: UINT, P3: PSTYLEBUFW): UINT {.winapi, dynlib: "imm32", importc.}
proc ImmEnumRegisterWordA*(P1: HKL, P2: REGISTERWORDENUMPROCA, P3: LPCSTR, P4: DWORD, P5: LPCSTR, P6: PVOID): UINT {.winapi, dynlib: "imm32", importc.}
proc ImmEnumRegisterWordW*(P1: HKL, P2: REGISTERWORDENUMPROCW, P3: LPCWSTR, P4: DWORD, P5: LPCWSTR, P6: PVOID): UINT {.winapi, dynlib: "imm32", importc.}
proc EnableEUDC*(P1: BOOL): BOOL {.winapi, dynlib: "gdi32", importc.}
proc ImmDisableIME*(P1: DWORD): BOOL {.winapi, dynlib: "imm32", importc.}
proc ImmGetImeMenuItemsA*(P1: HIMC, P2: DWORD, P3: DWORD, P4: LPIMEMENUITEMINFOA, P5: LPIMEMENUITEMINFOA, P6: DWORD): DWORD {.winapi, dynlib: "imm32", importc.}
proc ImmGetImeMenuItemsW*(P1: HIMC, P2: DWORD, P3: DWORD, P4: LPIMEMENUITEMINFOW, P5: LPIMEMENUITEMINFOW, P6: DWORD): DWORD {.winapi, dynlib: "imm32", importc.}

when not defined(winansi):
  proc ImmEnumRegisterWord*(P1: HKL, P2: REGISTERWORDENUMPROCW, P3: LPCWSTR, P4: DWORD, P5: LPCWSTR, P6: PVOID): UINT {.winapi, dynlib: "imm32", importc: "ImmEnumRegisterWordW".}
  proc ImmGetRegisterWordStyle*(P1: HKL, P2: UINT, P3: PSTYLEBUFW): UINT {.winapi, dynlib: "imm32", importc: "ImmGetRegisterWordStyleW".}
  proc ImmUnregisterWord*(P1: HKL, P2: LPCWSTR, P3: DWORD, P4: LPCWSTR): BOOL {.winapi, dynlib: "imm32", importc: "ImmUnregisterWordW".}
  proc ImmRegisterWord*(P1: HKL, P2: LPCWSTR, P3: DWORD, P4: LPCWSTR): BOOL {.winapi, dynlib: "imm32", importc: "ImmRegisterWordW".}
  proc ImmInstallIME*(P1: LPCWSTR, P2: LPCWSTR): HKL {.winapi, dynlib: "imm32", importc: "ImmInstallIMEW".}
  proc ImmIsUIMessage*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): BOOL {.winapi, dynlib: "imm32", importc: "ImmIsUIMessageW".}
  proc ImmGetConversionList*(P1: HKL, P2: HIMC, P3: LPCWSTR, P4: PCANDIDATELIST, P5: DWORD, P6: UINT): DWORD {.winapi, dynlib: "imm32", importc: "ImmGetConversionListW".}
  proc ImmEscape*(P1: HKL, P2: HIMC, P3: UINT, P4: PVOID): LRESULT {.winapi, dynlib: "imm32", importc: "ImmEscapeW".}
  proc ImmConfigureIME*(P1: HKL, P2: HWND, P3: DWORD, P4: PVOID): BOOL {.winapi, dynlib: "imm32", importc: "ImmConfigureIMEW".}
  proc ImmSetCompositionFont*(P1: HIMC, P2: LPLOGFONTW): BOOL {.winapi, dynlib: "imm32", importc: "ImmSetCompositionFontW".}
  proc ImmGetCompositionFont*(P1: HIMC, P2: LPLOGFONTW): BOOL {.winapi, dynlib: "imm32", importc: "ImmGetCompositionFontW".}
  proc ImmGetGuideLine*(P1: HIMC, P2: DWORD, P3: LPWSTR, P4: DWORD): DWORD {.winapi, dynlib: "imm32", importc: "ImmGetGuideLineW".}
  proc ImmGetCandidateList*(P1: HIMC, P2: DWORD, P3: PCANDIDATELIST, P4: DWORD): DWORD {.winapi, dynlib: "imm32", importc: "ImmGetCandidateListW".}
  proc ImmGetCandidateListCount*(P1: HIMC, P2: PDWORD): DWORD {.winapi, dynlib: "imm32", importc: "ImmGetCandidateListCountW".}
  proc ImmSetCompositionString*(P1: HIMC, P2: DWORD, P3: PCVOID, P4: DWORD, P5: PCVOID, P6: DWORD): BOOL {.winapi, dynlib: "imm32", importc: "ImmSetCompositionStringW".}
  proc ImmGetCompositionString*(P1: HIMC, P2: DWORD, P3: PVOID, P4: DWORD): LONG {.winapi, dynlib: "imm32", importc: "ImmGetCompositionStringW".}
  proc ImmGetDescription*(P1: HKL, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "imm32", importc: "ImmGetDescriptionW".}
  proc ImmGetIMEFileName*(P1: HKL, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "imm32", importc: "ImmGetIMEFileNameW".}
  proc ImmGetImeMenuItems*(P1: HIMC, P2: DWORD, P3: DWORD, P4: LPIMEMENUITEMINFOW, P5: LPIMEMENUITEMINFOW, P6: DWORD): DWORD {.winapi, dynlib: "imm32", importc: "ImmGetImeMenuItemsW".}

else:
  proc ImmEnumRegisterWord*(P1: HKL, P2: REGISTERWORDENUMPROCA, P3: LPCSTR, P4: DWORD, P5: LPCSTR, P6: PVOID): UINT {.winapi, dynlib: "imm32", importc: "ImmEnumRegisterWordA".}
  proc ImmGetRegisterWordStyle*(P1: HKL, P2: UINT, P3: PSTYLEBUFA): UINT {.winapi, dynlib: "imm32", importc: "ImmGetRegisterWordStyleA".}
  proc ImmUnregisterWord*(P1: HKL, P2: LPCSTR, P3: DWORD, P4: LPCSTR): BOOL {.winapi, dynlib: "imm32", importc: "ImmUnregisterWordA".}
  proc ImmRegisterWord*(P1: HKL, P2: LPCSTR, P3: DWORD, P4: LPCSTR): BOOL {.winapi, dynlib: "imm32", importc: "ImmRegisterWordA".}
  proc ImmInstallIME*(P1: LPCSTR, P2: LPCSTR): HKL {.winapi, dynlib: "imm32", importc: "ImmInstallIMEA".}
  proc ImmIsUIMessage*(P1: HWND, P2: UINT, P3: WPARAM, P4: LPARAM): BOOL {.winapi, dynlib: "imm32", importc: "ImmIsUIMessageA".}
  proc ImmGetConversionList*(P1: HKL, P2: HIMC, P3: LPCSTR, P4: PCANDIDATELIST, P5: DWORD, P6: UINT): DWORD {.winapi, dynlib: "imm32", importc: "ImmGetConversionListA".}
  proc ImmEscape*(P1: HKL, P2: HIMC, P3: UINT, P4: PVOID): LRESULT {.winapi, dynlib: "imm32", importc: "ImmEscapeA".}
  proc ImmConfigureIME*(P1: HKL, P2: HWND, P3: DWORD, P4: PVOID): BOOL {.winapi, dynlib: "imm32", importc: "ImmConfigureIMEA".}
  proc ImmSetCompositionFont*(P1: HIMC, P2: LPLOGFONTA): BOOL {.winapi, dynlib: "imm32", importc: "ImmSetCompositionFontA".}
  proc ImmGetCompositionFont*(P1: HIMC, P2: LPLOGFONTA): BOOL {.winapi, dynlib: "imm32", importc: "ImmGetCompositionFontA".}
  proc ImmGetGuideLine*(P1: HIMC, P2: DWORD, P3: LPSTR, P4: DWORD): DWORD {.winapi, dynlib: "imm32", importc: "ImmGetGuideLineA".}
  proc ImmGetCandidateList*(P1: HIMC, P2: DWORD, P3: PCANDIDATELIST, P4: DWORD): DWORD {.winapi, dynlib: "imm32", importc: "ImmGetCandidateListA".}
  proc ImmGetCandidateListCount*(P1: HIMC, P2: PDWORD): DWORD {.winapi, dynlib: "imm32", importc: "ImmGetCandidateListCountA".}
  proc ImmSetCompositionString*(P1: HIMC, P2: DWORD, P3: PCVOID, P4: DWORD, P5: PCVOID, P6: DWORD): BOOL {.winapi, dynlib: "imm32", importc: "ImmSetCompositionStringA".}
  proc ImmGetCompositionString*(P1: HIMC, P2: DWORD, P3: PVOID, P4: DWORD): LONG {.winapi, dynlib: "imm32", importc: "ImmGetCompositionStringA".}
  proc ImmGetDescription*(P1: HKL, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "imm32", importc: "ImmGetDescriptionA".}
  proc ImmGetIMEFileName*(P1: HKL, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "imm32", importc: "ImmGetIMEFileNameA".}
  proc ImmGetImeMenuItems*(P1: HIMC, P2: DWORD, P3: DWORD, P4: LPIMEMENUITEMINFOW, P5: LPIMEMENUITEMINFOW, P6: DWORD): DWORD {.winapi, dynlib: "imm32", importc: "ImmGetImeMenuItemsW".}

# ext/sqltypes.nim
const
  # T_SQLINTERVAL* = enum
  SQL_IS_YEAR* = 1
  SQL_IS_MONTH* = 2
  SQL_IS_DAY* = 3
  SQL_IS_HOUR* = 4
  SQL_IS_MINUTE* = 5
  SQL_IS_SECOND* = 6
  SQL_IS_YEAR_TO_MONTH* = 7
  SQL_IS_DAY_TO_HOUR* = 8
  SQL_IS_DAY_TO_MINUTE* = 9
  SQL_IS_DAY_TO_SECOND* = 10
  SQL_IS_HOUR_TO_MINUTE* = 11
  SQL_IS_HOUR_TO_SECOND* = 12
  SQL_IS_MINUTE_TO_SECOND* = 13

type
  SCHAR* = int8
  SDWORD* = int32
  SLONG* = int32
  SWORD* = int16
  SSHORT* = int16
  RETCODE* = int16
  UDWORD* = ULONG
  UWORD* = USHORT
  SDOUBLE* = float64
  LDOUBLE* = float64
  SFLOAT* = float32
  PTR* = PVOID
  HENV* = PVOID
  HDBC* = PVOID
  HSTMT* = PVOID
  T_SQLCHAR* = UCHAR  # renamed from SQLCHAR
  T_SQLINTEGER* = int32 # renamed from SQLINTEGER
  T_SQLPOINTER* = PVOID # renamed from SQLPOINTER
  T_SQLSCHAR* = int8  # renamed from SQLSCHAR
  T_SQLSMALLINT* = int16  # renamed from SQLSMALLINT
  T_SQLUINTEGER* = UDWORD # renamed from SQLUINTEGER
  T_SQLUSMALLINT* = USHORT  # renamed from SQLUSMALLINT
  T_SQLWCHAR* = uint16  # renamed from SQLWCHAR
  SQLHANDLE* = HANDLE
  SQLHENV* = SQLHANDLE
  SQLHDBC* = SQLHANDLE
  SQLHSTMT* = SQLHANDLE
  SQLHDESC* = SQLHANDLE
  SQLRETURN* = T_SQLSMALLINT
  SQLHWND* = HWND
  BOOKMARK* = ULONG
  SQLLEN* = T_SQLINTEGER
  T_SQLROWOFFSET* = T_SQLINTEGER # renamed from SQLROWOFFSET
  T_SQLROWCOUNT* = T_SQLUINTEGER # renamed from SQLROWCOUNT
  SQLULEN* = T_SQLUINTEGER
  SQLTRANSID* = DWORD
  SQLSETPOSIROW* = T_SQLUSMALLINT

when not defined(winansi):
  type
    T_SQLTCHAR* = T_SQLWCHAR # renamed from SQLTCHAR

else:
  type
    T_SQLTCHAR* = T_SQLCHAR # renamed from SQLTCHAR

type
  T_SQLDATE* = uint8 # renamed from SQLDATE
  T_SQLDECIMAL* = uint8 # renamed from SQLDECIMAL
  T_SQLDOUBLE* = float64 # renamed from SQLDOUBLE
  T_SQLFLOAT* = float64 # renamed from SQLFLOAT
  T_SQLNUMERIC* = uint8 # renamed from SQLNUMERIC
  T_SQLREAL* = float32 # renamed from SQLREAL
  T_SQLTIME* = uint8 # renamed from SQLTIME
  T_SQLTIMESTAMP* = uint8 # renamed from SQLTIMESTAMP
  T_SQLVARCHAR* = uint8 # renamed from SQLVARCHAR
  ODBCINT64* = int64
  T_SQLBIGINT* = int64 # renamed from SQLBIGINT
  T_SQLUBIGINT* = uint64 # renamed from SQLUBIGINT
  DATE_STRUCT* {.final, pure.} = object
    year*: T_SQLSMALLINT
    month*: T_SQLUSMALLINT
    day*: T_SQLUSMALLINT
  TIME_STRUCT* {.final, pure.} = object
    hour*: T_SQLUSMALLINT
    minute*: T_SQLUSMALLINT
    second*: T_SQLUSMALLINT
  TIMESTAMP_STRUCT* {.final, pure.} = object
    year*: T_SQLSMALLINT
    month*: T_SQLUSMALLINT
    day*: T_SQLUSMALLINT
    hour*: T_SQLUSMALLINT
    minute*: T_SQLUSMALLINT
    second*: T_SQLUSMALLINT
    fraction*: T_SQLUINTEGER
  SQL_DATE_STRUCT* = DATE_STRUCT
  SQL_TIME_STRUCT* = TIME_STRUCT
  SQL_TIMESTAMP_STRUCT* = TIMESTAMP_STRUCT
  T_SQLINTERVAL* = int32 # renamed from SQLINTERVAL
  SQL_YEAR_MONTH_STRUCT* {.final, pure.} = object
    year*: T_SQLUINTEGER
    month*: T_SQLUINTEGER
  SQL_DAY_SECOND_STRUCT* {.final, pure.} = object
    day*: T_SQLUINTEGER
    hour*: T_SQLUINTEGER
    minute*: T_SQLUINTEGER
    second*: T_SQLUINTEGER
    fraction*: T_SQLUINTEGER
  SQL_INTERVAL_STRUCT_intval* {.final, union, pure.} = object
    year_month*: SQL_YEAR_MONTH_STRUCT
    day_second*: SQL_DAY_SECOND_STRUCT
  SQL_INTERVAL_STRUCT* {.final, pure.} = object
    interval_type*: T_SQLINTERVAL
    interval_sign*: T_SQLSMALLINT
    intval*: SQL_INTERVAL_STRUCT_intval

const
  SQL_MAX_NUMERIC_LEN* = 16

type
  SQL_NUMERIC_STRUCT* {.final, pure.} = object
    precision*: T_SQLCHAR
    scale*: T_SQLSCHAR
    sign*: T_SQLCHAR
    val*: array[SQL_MAX_NUMERIC_LEN, T_SQLCHAR]
  T_SQLGUID* = GUID # renamed from SQLGUID

# ext/sql.nim

const
  ODBCVER* = 0x0351
  SQL_ACCESSIBLE_PROCEDURES* = 20
  SQL_ACCESSIBLE_TABLES* = 19
  SQL_ALL_TYPES* = 0
  SQL_ALTER_TABLE* = 86
  SQL_API_SQLALLOCCONNECT* = 1
  SQL_API_SQLALLOCENV* = 2
  SQL_API_SQLALLOCSTMT* = 3
  SQL_API_SQLBINDCOL* = 4
  SQL_API_SQLCANCEL* = 5
  SQL_API_SQLCOLUMNS* = 40
  SQL_API_SQLCONNECT* = 7
  SQL_API_SQLDATASOURCES* = 57
  SQL_API_SQLDESCRIBECOL* = 8
  SQL_API_SQLDISCONNECT* = 9
  SQL_API_SQLERROR* = 10
  SQL_API_SQLEXECDIRECT* = 11
  SQL_API_SQLEXECUTE* = 12
  SQL_API_SQLFETCH* = 13
  SQL_API_SQLFREECONNECT* = 14
  SQL_API_SQLFREEENV* = 15
  SQL_API_SQLFREESTMT* = 16
  SQL_API_SQLGETCONNECTOPTION* = 42
  SQL_API_SQLGETCURSORNAME* = 17
  SQL_API_SQLGETDATA* = 43
  SQL_API_SQLGETFUNCTIONS* = 44
  SQL_API_SQLGETINFO* = 45
  SQL_API_SQLGETSTMTOPTION* = 46
  SQL_API_SQLGETTYPEINFO* = 47
  SQL_API_SQLNUMRESULTCOLS* = 18
  SQL_API_SQLPARAMDATA* = 48
  SQL_API_SQLPREPARE* = 19
  SQL_API_SQLPUTDATA* = 49
  SQL_API_SQLROWCOUNT* = 20
  SQL_API_SQLSETCONNECTOPTION* = 50
  SQL_API_SQLSETCURSORNAME* = 21
  SQL_API_SQLSETPARAM* = 22
  SQL_API_SQLSETSTMTOPTION* = 51
  SQL_API_SQLSPECIALCOLUMNS* = 52
  SQL_API_SQLSTATISTICS* = 53
  SQL_API_SQLTABLES* = 54
  SQL_API_SQLTRANSACT* = 23
  SQL_CB_DELETE* = 0
  SQL_CB_CLOSE* = 1
  SQL_CB_PRESERVE* = 2
  SQL_CHAR* = 1
  SQL_CLOSE* = 0
  SQL_COMMIT* = 0
  SQL_CURSOR_COMMIT_BEHAVIOR* = 23
  SQL_DATA_AT_EXEC* = -2
  SQL_DATA_SOURCE_NAME* = 2
  SQL_DATA_SOURCE_READ_ONLY* = 25
  SQL_DBMS_NAME* = 17
  SQL_DBMS_VER* = 18
  SQL_DECIMAL* = 3
  SQL_DEFAULT_TXN_ISOLATION* = 26
  SQL_DOUBLE* = 8
  SQL_DROP* = 1
  # SQL_ERROR* = -1
  SQL_FD_FETCH_NEXT* = 1
  SQL_FD_FETCH_FIRST* = 2
  SQL_FD_FETCH_LAST* = 4
  SQL_FD_FETCH_PRIOR* = 8
  SQL_FD_FETCH_ABSOLUTE* = 16
  SQL_FD_FETCH_RELATIVE* = 32
  SQL_FETCH_ABSOLUTE* = 5
  SQL_FETCH_DIRECTION* = 8
  SQL_FETCH_FIRST* = 2
  SQL_FETCH_LAST* = 3
  SQL_FETCH_NEXT* = 1
  SQL_FETCH_PRIOR* = 4
  SQL_FETCH_RELATIVE* = 6
  SQL_FLOAT* = 6
  SQL_GD_ANY_COLUMN* = 1
  SQL_GD_ANY_ORDER* = 2
  SQL_GETDATA_EXTENSIONS* = 81
  SQL_IC_LOWER* = 2
  SQL_IC_MIXED* = 4
  SQL_IC_SENSITIVE* = 3
  SQL_IC_UPPER* = 1
  SQL_IDENTIFIER_CASE* = 28
  SQL_IDENTIFIER_QUOTE_CHAR* = 29
  SQL_INDEX_ALL* = 1
  SQL_INDEX_CLUSTERED* = 1
  SQL_INDEX_HASHED* = 2
  SQL_INDEX_OTHER* = 3
  SQL_INDEX_UNIQUE* = 0
  SQL_INTEGER* = 4
  SQL_INTEGRITY* = 73
  SQL_INVALID_HANDLE* = -2
  SQL_MAX_CATALOG_NAME_LEN* = 34
  SQL_MAX_COLUMN_NAME_LEN* = 30
  SQL_MAX_COLUMNS_IN_GROUP_BY* = 97
  SQL_MAX_COLUMNS_IN_INDEX* = 98
  SQL_MAX_COLUMNS_IN_ORDER_BY* = 99
  SQL_MAX_COLUMNS_IN_SELECT* = 100
  SQL_MAX_COLUMNS_IN_TABLE* = 101
  SQL_MAX_CURSOR_NAME_LEN* = 31
  SQL_MAX_INDEX_SIZE* = 102
  SQL_MAX_MESSAGE_LENGTH* = 512
  SQL_MAX_ROW_SIZE* = 104
  SQL_MAX_SCHEMA_NAME_LEN* = 32
  SQL_MAX_STATEMENT_LEN* = 105
  SQL_MAX_TABLE_NAME_LEN* = 35
  SQL_MAX_TABLES_IN_SELECT* = 106
  SQL_MAX_USER_NAME_LEN* = 107
  SQL_MAXIMUM_CATALOG_NAME_LENGTH* = SQL_MAX_CATALOG_NAME_LEN
  SQL_MAXIMUM_COLUMN_NAME_LENGTH* = SQL_MAX_COLUMN_NAME_LEN
  SQL_MAXIMUM_COLUMNS_IN_GROUP_BY* = SQL_MAX_COLUMNS_IN_GROUP_BY
  SQL_MAXIMUM_COLUMNS_IN_INDEX* = SQL_MAX_COLUMNS_IN_INDEX
  SQL_MAXIMUM_COLUMNS_IN_ORDER_BY* = SQL_MAX_COLUMNS_IN_ORDER_BY
  SQL_MAXIMUM_COLUMNS_IN_SELECT* = SQL_MAX_COLUMNS_IN_SELECT
  SQL_MAXIMUM_CURSOR_NAME_LENGTH* = SQL_MAX_CURSOR_NAME_LEN
  SQL_MAXIMUM_INDEX_SIZE* = SQL_MAX_INDEX_SIZE
  SQL_MAXIMUM_ROW_SIZE* = SQL_MAX_ROW_SIZE
  SQL_MAXIMUM_SCHEMA_NAME_LENGTH* = SQL_MAX_SCHEMA_NAME_LEN
  SQL_MAXIMUM_STATEMENT_LENGTH* = SQL_MAX_STATEMENT_LEN
  SQL_MAXIMUM_TABLES_IN_SELECT* = SQL_MAX_TABLES_IN_SELECT
  SQL_MAXIMUM_USER_NAME_LENGTH* = SQL_MAX_USER_NAME_LEN
  SQL_NC_HIGH* = 0
  SQL_NC_LOW* = 1
  SQL_NEED_DATA* = 99
  SQL_NO_NULLS* = 0
  SQL_NTS* = -3
  SQL_NTSL* = -3
  SQL_NULL_COLLATION* = 85
  SQL_NULL_DATA* = -1
  SQL_NULL_HDBC* = 0
  SQL_NULL_HENV* = 0
  SQL_NULL_HSTMT* = 0
  SQL_NULLABLE* = 1
  SQL_NULLABLE_UNKNOWN* = 2
  SQL_NUMERIC* = 2
  SQL_ORDER_BY_COLUMNS_IN_SELECT* = 90
  SQL_PC_PSEUDO* = 2
  SQL_PC_UNKNOWN* = 0
  SQL_REAL* = 7
  SQL_RESET_PARAMS* = 3
  SQL_ROLLBACK* = 1
  SQL_SCCO_LOCK* = 2
  SQL_SCCO_OPT_ROWVER* = 4
  SQL_SCCO_OPT_VALUES* = 8
  SQL_SCCO_READ_ONLY* = 1
  SQL_SCOPE_CURROW* = 0
  SQL_SCOPE_SESSION* = 2
  SQL_SCOPE_TRANSACTION* = 1
  SQL_SCROLL_CONCURRENCY* = 43
  SQL_SEARCH_PATTERN_ESCAPE* = 14
  SQL_SERVER_NAME* = 13
  SQL_SMALLINT* = 5
  SQL_SPECIAL_CHARACTERS* = 94
  SQL_STILL_EXECUTING* = 2
  SQL_SUCCESS* = 0
  SQL_SUCCESS_WITH_INFO* = 1
  SQL_TC_ALL* = 2
  SQL_TC_DDL_COMMIT* = 3
  SQL_TC_DDL_IGNORE* = 4
  SQL_TC_DML* = 1
  SQL_TC_NONE* = 0
  SQL_TXN_CAPABLE* = 46
  SQL_TXN_ISOLATION_OPTION* = 72
  SQL_TXN_READ_COMMITTED* = 2
  SQL_TXN_READ_UNCOMMITTED* = 1
  SQL_TXN_REPEATABLE_READ* = 4
  SQL_TXN_SERIALIZABLE* = 8
  SQL_TRANSACTION_CAPABLE* = SQL_TXN_CAPABLE
  SQL_TRANSACTION_ISOLATION_OPTION* = SQL_TXN_ISOLATION_OPTION
  SQL_TRANSACTION_READ_COMMITTED* = SQL_TXN_READ_COMMITTED
  SQL_TRANSACTION_READ_UNCOMMITTED* = SQL_TXN_READ_UNCOMMITTED
  SQL_TRANSACTION_REPEATABLE_READ* = SQL_TXN_REPEATABLE_READ
  SQL_TRANSACTION_SERIALIZABLE* = SQL_TXN_SERIALIZABLE
  SQL_UNBIND* = 2
  SQL_UNKNOWN_TYPE* = 0
  SQL_USER_NAME* = 47
  SQL_VARCHAR* = 12
  SQL_AT_ADD_COLUMN* = 1
  SQL_AT_DROP_COLUMN* = 2
  SQL_OJ_LEFT* = 1
  SQL_OJ_RIGHT* = 2
  SQL_OJ_FULL* = 4
  SQL_OJ_NESTED* = 8
  SQL_OJ_NOT_ORDERED* = 16
  SQL_OJ_INNER* = 32
  SQL_OJ_ALL_COMPARISON_OPS* = 64
  SQL_AM_CONNECTION* = 1
  SQL_AM_NONE* = 0
  SQL_AM_STATEMENT* = 2
  SQL_API_SQLALLOCHANDLE* = 1001
  SQL_API_SQLBINDPARAM* = 1002
  SQL_API_SQLCLOSECURSOR* = 1003
  SQL_API_SQLCOLATTRIBUTE* = 6
  SQL_API_SQLCOPYDESC* = 1004
  SQL_API_SQLENDTRAN* = 1005
  SQL_API_SQLFETCHSCROLL* = 1021
  SQL_API_SQLFREEHANDLE* = 1006
  SQL_API_SQLGETCONNECTATTR* = 1007
  SQL_API_SQLGETDESCFIELD* = 1008
  SQL_API_SQLGETDESCREC* = 1009
  SQL_API_SQLGETDIAGFIELD* = 1010
  SQL_API_SQLGETDIAGREC* = 1011
  SQL_API_SQLGETENVATTR* = 1012
  SQL_API_SQLGETSTMTATTR* = 1014
  SQL_API_SQLSETCONNECTATTR* = 1016
  SQL_API_SQLSETDESCFIELD* = 1017
  SQL_API_SQLSETDESCREC* = 1018
  SQL_API_SQLSETENVATTR* = 1019
  SQL_API_SQLSETSTMTATTR* = 1020
  SQL_ARD_TYPE* = -99
  SQL_AT_ADD_CONSTRAINT* = 8
  SQL_ATTR_APP_PARAM_DESC* = 10011
  SQL_ATTR_APP_ROW_DESC* = 10010
  SQL_ATTR_AUTO_IPD* = 10001
  SQL_ATTR_CURSOR_SCROLLABLE* = -1
  SQL_ATTR_CURSOR_SENSITIVITY* = -2
  SQL_ATTR_IMP_PARAM_DESC* = 10013
  SQL_ATTR_IMP_ROW_DESC* = 10012
  SQL_ATTR_METADATA_ID* = 10014
  SQL_ATTR_OUTPUT_NTS* = 10001
  SQL_CATALOG_NAME* = 10003
  SQL_CODE_DATE* = 1
  SQL_CODE_TIME* = 2
  SQL_CODE_TIMESTAMP* = 3
  SQL_COLLATION_SEQ* = 10004
  SQL_CURSOR_SENSITIVITY* = 10001
  SQL_DATE_LEN* = 10
  SQL_DATETIME* = 9
  SQL_DEFAULT* = 99
  SQL_DESC_ALLOC_AUTO* = 1
  SQL_DESC_ALLOC_USER* = 2
  SQL_DESC_ALLOC_TYPE* = 1099
  SQL_DESC_COUNT* = 1001
  SQL_DESC_TYPE* = 1002
  SQL_DESC_LENGTH* = 1003
  SQL_DESC_OCTET_LENGTH_PTR* = 1004
  SQL_DESC_PRECISION* = 1005
  SQL_DESC_SCALE* = 1006
  SQL_DESC_DATETIME_INTERVAL_CODE* = 1007
  SQL_DESC_NULLABLE* = 1008
  SQL_DESC_INDICATOR_PTR* = 1009
  SQL_DESC_DATA_PTR* = 1010
  SQL_DESC_NAME* = 1011
  SQL_DESC_UNNAMED* = 1012
  SQL_DESC_OCTET_LENGTH* = 1013
  SQL_DESCRIBE_PARAMETER* = 10002
  SQL_DIAG_ALTER_DOMAIN* = 3
  SQL_DIAG_ALTER_TABLE* = 4
  SQL_DIAG_CALL* = 7
  SQL_DIAG_CLASS_ORIGIN* = 8
  SQL_DIAG_CONNECTION_NAME* = 10
  SQL_DIAG_CREATE_ASSERTION* = 6
  SQL_DIAG_CREATE_CHARACTER_SET* = 8
  SQL_DIAG_CREATE_COLLATION* = 10
  SQL_DIAG_CREATE_DOMAIN* = 23
  SQL_DIAG_CREATE_INDEX* = -1
  SQL_DIAG_CREATE_SCHEMA* = 64
  SQL_DIAG_CREATE_TABLE* = 77
  SQL_DIAG_CREATE_TRANSLATION* = 79
  SQL_DIAG_CREATE_VIEW* = 84
  SQL_DIAG_DELETE_WHERE* = 19
  SQL_DIAG_DROP_ASSERTION* = 24
  SQL_DIAG_DROP_CHARACTER_SET* = 25
  SQL_DIAG_DROP_COLLATION* = 26
  SQL_DIAG_DROP_DOMAIN* = 27
  SQL_DIAG_DROP_INDEX* = ( -2 )
  SQL_DIAG_DROP_SCHEMA* = 31
  SQL_DIAG_DROP_TABLE* = 32
  SQL_DIAG_DROP_TRANSLATION* = 33
  SQL_DIAG_DROP_VIEW* = 36
  SQL_DIAG_DYNAMIC_DELETE_CURSOR* = 38
  SQL_DIAG_DYNAMIC_FUNCTION* = 7
  SQL_DIAG_DYNAMIC_FUNCTION_CODE* = 12
  SQL_DIAG_DYNAMIC_UPDATE_CURSOR* = 81
  SQL_DIAG_GRANT* = 48
  SQL_DIAG_INSERT* = 50
  SQL_DIAG_MESSAGE_TEXT* = 6
  SQL_DIAG_NATIVE* = 5
  SQL_DIAG_NUMBER* = 2
  SQL_DIAG_RETURNCODE* = 1
  SQL_DIAG_REVOKE* = 59
  SQL_DIAG_ROW_COUNT* = 3
  SQL_DIAG_SELECT_CURSOR* = 85
  SQL_DIAG_SERVER_NAME* = 11
  SQL_DIAG_SQLSTATE* = 4
  SQL_DIAG_SUBCLASS_ORIGIN* = 9
  SQL_DIAG_UNKNOWN_STATEMENT* = 0
  SQL_DIAG_UPDATE_WHERE* = 82
  SQL_FALSE* = 0
  SQL_HANDLE_DBC* = 2
  SQL_HANDLE_DESC* = 4
  SQL_HANDLE_ENV* = 1
  SQL_HANDLE_STMT* = 3
  SQL_INSENSITIVE* = 1
  SQL_MAX_CONCURRENT_ACTIVITIES* = 1
  SQL_MAX_DRIVER_CONNECTIONS* = 0
  SQL_MAX_IDENTIFIER_LEN* = 10005
  SQL_MAXIMUM_CONCURRENT_ACTIVITIES* = SQL_MAX_CONCURRENT_ACTIVITIES
  SQL_MAXIMUM_DRIVER_CONNECTIONS* = SQL_MAX_DRIVER_CONNECTIONS
  SQL_MAXIMUM_IDENTIFIER_LENGTH* = SQL_MAX_IDENTIFIER_LEN
  SQL_NAMED* = 0
  SQL_NO_DATA* = 100
  SQL_NONSCROLLABLE* = 0
  SQL_NULL_HANDLE* = 0
  SQL_NULL_HDESC* = 0
  SQL_OJ_CAPABILITIES* = 115
  SQL_OUTER_JOIN_CAPABILITIES* = SQL_OJ_CAPABILITIES
  SQL_PC_NON_PSEUDO* = 1
  SQL_PRED_NONE* = 0
  SQL_PRED_CHAR* = 1
  SQL_PRED_BASIC* = 2
  SQL_ROW_IDENTIFIER* = 1
  SQL_SCROLLABLE* = 1
  SQL_SENSITIVE* = 2
  SQL_TIME_LEN* = 8
  SQL_TIMESTAMP_LEN* = 19
  SQL_TRUE* = 1
  SQL_TYPE_DATE* = 91
  SQL_TYPE_TIME* = 92
  SQL_TYPE_TIMESTAMP* = 93
  SQL_UNNAMED* = 1
  SQL_UNSPECIFIED* = 0
  SQL_XOPEN_CLI_YEAR* = 10000

proc SQLAllocConnect*(P1: SQLHENV, P2: ptr SQLHDBC): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLAllocEnv*(P1: ptr SQLHENV): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLAllocStmt*(P1: SQLHDBC, P2: ptr SQLHSTMT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLError*(P1: SQLHENV, P2: SQLHDBC, P3: SQLHSTMT, P4: ptr T_SQLCHAR, P5: ptr T_SQLINTEGER, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLFreeConnect*(P1: SQLHDBC): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLFreeEnv*(P1: SQLHENV): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetParam*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLSMALLINT, P5: SQLULEN, P6: T_SQLSMALLINT, P7: T_SQLPOINTER, P8: ptr SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetConnectOption*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: T_SQLPOINTER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetStmtOption*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLPOINTER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetConnectOption*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: SQLULEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetStmtOption*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLROWCOUNT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLBindCol*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLPOINTER, P5: SQLLEN, P6: ptr SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLCancel*(P1: SQLHSTMT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLConnect*(P1: SQLHDBC, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDescribeCol*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr SQLULEN, P8: ptr T_SQLSMALLINT, P9: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDisconnect*(P1: SQLHDBC): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLExecDirect*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLExecute*(P1: SQLHSTMT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLFetch*(P1: SQLHSTMT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLFreeStmt*(P1: SQLHSTMT, P2: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetCursorName*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLNumResultCols*(P1: SQLHSTMT, P2: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLPrepare*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLRowCount*(P1: SQLHSTMT, P2: ptr SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetCursorName*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLTransact*(P1: SQLHENV, P2: SQLHDBC, P3: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColumns*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetData*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLPOINTER, P5: SQLLEN, P6: ptr SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetFunctions*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: ptr T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetInfo*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: T_SQLPOINTER, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetTypeInfo*(P1: SQLHSTMT, P2: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLParamData*(P1: SQLHSTMT, P2: ptr T_SQLPOINTER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLPutData*(P1: SQLHSTMT, P2: T_SQLPOINTER, P3: SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSpecialColumns*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLCHAR, P6: T_SQLSMALLINT, P7: ptr T_SQLCHAR, P8: T_SQLSMALLINT, P9: T_SQLUSMALLINT, P10: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLStatistics*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: T_SQLUSMALLINT, P9: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLTables*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDataSources*(P1: SQLHENV, P2: T_SQLUSMALLINT, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLAllocHandle*(P1: T_SQLSMALLINT, P2: SQLHANDLE, P3: ptr SQLHANDLE): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLBindParam*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLSMALLINT, P5: SQLULEN, P6: T_SQLSMALLINT, P7: T_SQLPOINTER, P8: ptr SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLCloseCursor*(P1: SQLHSTMT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColAttribute*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLUSMALLINT, P4: T_SQLPOINTER, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: T_SQLPOINTER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLCopyDesc*(P1: SQLHDESC, P2: SQLHDESC): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLEndTran*(P1: T_SQLSMALLINT, P2: SQLHANDLE, P3: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLFetchScroll*(P1: SQLHSTMT, P2: T_SQLSMALLINT, P3: T_SQLROWOFFSET): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLFreeHandle*(P1: T_SQLSMALLINT, P2: SQLHANDLE): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetConnectAttr*(P1: SQLHDBC, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER, P5: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDescField*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLPOINTER, P5: T_SQLINTEGER, P6: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDescRec*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr T_SQLSMALLINT, P8: ptr SQLLEN, P9: ptr T_SQLSMALLINT, P10: ptr T_SQLSMALLINT, P11: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDiagField*(P1: T_SQLSMALLINT, P2: SQLHANDLE, P3: T_SQLSMALLINT, P4: T_SQLSMALLINT, P5: T_SQLPOINTER, P6: T_SQLSMALLINT, P7: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDiagRec*(P1: T_SQLSMALLINT, P2: SQLHANDLE, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: ptr T_SQLINTEGER, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetEnvAttr*(P1: SQLHENV, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER, P5: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetStmtAttr*(P1: SQLHSTMT, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER, P5: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetConnectAttr*(P1: SQLHDBC, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetDescField*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLPOINTER, P5: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetDescRec*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLSMALLINT, P5: SQLLEN, P6: T_SQLSMALLINT, P7: T_SQLSMALLINT, P8: T_SQLPOINTER, P9: ptr SQLLEN, P10: ptr SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetEnvAttr*(P1: SQLHENV, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetStmtAttr*(P1: SQLHSTMT, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}

# ext/sqlext.nim

const
  # SQL_UNICODE_LONGVARCHAR* = -97
  SQL_SPEC_MAJOR* = 3
  SQL_SPEC_MINOR* = 51
  SQL_SPEC_STRING* = "03.51"
  SQL_ACCESS_MODE* = 101
  SQL_ACTIVE_CONNECTIONS* = 0
  SQL_ACTIVE_STATEMENTS* = 1
  SQL_DATE* = 9
  SQL_TIME* = 10
  SQL_SIGNED_OFFSET* = -20
  SQL_TINYINT* = -6
  SQL_TIMESTAMP* = 11
  SQL_UNSIGNED_OFFSET* = -22
  SQL_ADD* = 4
  SQL_ALL_EXCEPT_LIKE* = 2
  SQL_API_ALL_FUNCTIONS* = 0
  SQL_API_SQLCOLATTRIBUTES* = 6
  SQL_API_SQLDRIVERCONNECT* = 41
  SQL_API_SQLBROWSECONNECT* = 55
  SQL_API_SQLCOLUMNPRIVILEGES* = 56
  SQL_API_SQLDESCRIBEPARAM* = 58
  SQL_API_SQLEXTENDEDFETCH* = 59
  SQL_API_SQLFOREIGNKEYS* = 60
  SQL_API_SQLMORERESULTS* = 61
  SQL_API_SQLNATIVESQL* = 62
  SQL_API_SQLNUMPARAMS* = 63
  SQL_API_SQLPARAMOPTIONS* = 64
  SQL_API_SQLPRIMARYKEYS* = 65
  SQL_API_SQLPROCEDURECOLUMNS* = 66
  SQL_API_SQLPROCEDURES* = 67
  SQL_API_SQLSETPOS* = 68
  SQL_API_SQLSETSCROLLOPTIONS* = 69
  SQL_API_SQLTABLEPRIVILEGES* = 70
  SQL_API_SQLDRIVERS* = 71
  SQL_API_SQLBINDPARAMETER* = 72
  SQL_API_LOADBYORDINAL* = 199
  SQL_ASYNC_ENABLE* = 4
  SQL_ASYNC_ENABLE_OFF* = 0
  SQL_ASYNC_ENABLE_ON* = 1
  SQL_ASYNC_ENABLE_DEFAULT* = SQL_ASYNC_ENABLE_OFF
  SQL_ATTR_CONNECTION_DEAD* = 1209
  SQL_ATTR_READONLY* = 0
  SQL_ATTR_READWRITE_UNKNOWN* = 2
  SQL_ATTR_WRITE* = 1
  SQL_AUTOCOMMIT* = 102
  SQL_AUTOCOMMIT_OFF* = 0
  SQL_AUTOCOMMIT_ON* = 1
  SQL_AUTOCOMMIT_DEFAULT* = SQL_AUTOCOMMIT_ON
  SQL_BEST_ROWID* = 1
  SQL_BIGINT* = -5
  SQL_BINARY* = -2
  SQL_BIND_BY_COLUMN* = 0
  SQL_BIND_TYPE* = 5
  SQL_BIND_TYPE_DEFAULT* = SQL_BIND_BY_COLUMN
  SQL_BIT* = -7
  SQL_BOOKMARK_PERSISTENCE* = 82
  SQL_BP_CLOSE* = 1
  SQL_BP_DELETE* = 2
  SQL_BP_DROP* = 4
  SQL_BP_TRANSACTION* = 8
  SQL_BP_UPDATE* = 16
  SQL_BP_OTHER_HSTMT* = 32
  SQL_BP_SCROLL* = 64
  SQL_C_BINARY* = SQL_BINARY
  SQL_C_BIT* = SQL_BIT
  SQL_C_CHAR* = SQL_CHAR
  SQL_C_DATE* = SQL_DATE
  SQL_C_DOUBLE* = SQL_DOUBLE
  SQL_C_FLOAT* = SQL_REAL
  SQL_C_LONG* = SQL_INTEGER
  SQL_C_SHORT* = SQL_SMALLINT
  SQL_C_SLONG* = SQL_C_LONG+SQL_SIGNED_OFFSET
  SQL_C_SSHORT* = SQL_C_SHORT+SQL_SIGNED_OFFSET
  SQL_C_STINYINT* = SQL_TINYINT+SQL_SIGNED_OFFSET
  SQL_C_TIME* = SQL_TIME
  SQL_C_TIMESTAMP* = SQL_TIMESTAMP
  SQL_C_TINYINT* = SQL_TINYINT
  SQL_C_ULONG* = SQL_C_LONG+SQL_UNSIGNED_OFFSET
  SQL_C_USHORT* = SQL_C_SHORT+SQL_UNSIGNED_OFFSET
  SQL_C_UTINYINT* = SQL_TINYINT+SQL_UNSIGNED_OFFSET
  SQL_C_BOOKMARK* = SQL_C_ULONG
  SQL_C_DEFAULT* = 99
  SQL_CASCADE* = 0
  SQL_CB_NON_NULL* = 1
  SQL_CB_NULL* = 0
  SQL_CC_CLOSE* = SQL_CB_CLOSE
  SQL_CC_DELETE* = SQL_CB_DELETE
  SQL_CC_PRESERVE* = SQL_CB_PRESERVE
  SQL_CD_FALSE* = 0
  SQL_CD_TRUE* = 1
  SQL_CN_ANY* = 2
  SQL_CN_DIFFERENT* = 1
  SQL_CN_NONE* = 0
  SQL_COLUMN_ALIAS* = 87
  SQL_COLUMN_COUNT* = 0
  SQL_COLUMN_NAME* = 1
  SQL_COLUMN_DISPLAY_SIZE* = 6
  SQL_COLUMN_LABEL* = 18
  SQL_COLUMN_LENGTH* = 3
  SQL_COLUMN_MONEY* = 9
  SQL_COLUMN_NULLABLE* = 7
  SQL_COLUMN_OWNER_NAME* = 16
  SQL_COLUMN_PRECISION* = 4
  SQL_COLUMN_QUALIFIER_NAME* = 17
  SQL_COLUMN_SCALE* = 5
  SQL_COLUMN_UNSIGNED* = 8
  SQL_COLUMN_UPDATABLE* = 10
  SQL_COLUMN_AUTO_INCREMENT* = 11
  SQL_COLUMN_CASE_SENSITIVE* = 12
  SQL_COLUMN_SEARCHABLE* = 13
  SQL_COLUMN_TYPE* = 2
  SQL_COLUMN_TYPE_NAME* = 14
  SQL_COLUMN_TABLE_NAME* = 15
  SQL_CONCAT_NULL_BEHAVIOR* = 22
  SQL_CONCUR_READ_ONLY* = 1
  SQL_CONCUR_DEFAULT* = SQL_CONCUR_READ_ONLY
  SQL_CONCUR_LOCK* = 2
  SQL_CONCUR_ROWVER* = 3
  SQL_CONCUR_TIMESTAMP* = SQL_CONCUR_ROWVER
  SQL_CONCUR_VALUES* = 4
  SQL_CONCURRENCY* = 7
  SQL_CONVERT_BIGINT* = 53
  SQL_CONVERT_BINARY* = 54
  SQL_CONVERT_BIT* = 55
  SQL_CONVERT_CHAR* = 56
  SQL_CONVERT_DATE* = 57
  SQL_CONVERT_DECIMAL* = 58
  SQL_CONVERT_DOUBLE* = 59
  SQL_CONVERT_FLOAT* = 60
  SQL_CONVERT_FUNCTIONS* = 48
  SQL_CONVERT_INTEGER* = 61
  SQL_CONVERT_LONGVARBINARY* = 71
  SQL_CONVERT_LONGVARCHAR* = 62
  SQL_CONVERT_NUMERIC* = 63
  SQL_CONVERT_REAL* = 64
  SQL_CONVERT_SMALLINT* = 65
  SQL_CONVERT_TIME* = 66
  SQL_CONVERT_TIMESTAMP* = 67
  SQL_CONVERT_TINYINT* = 68
  SQL_CONVERT_VARBINARY* = 69
  SQL_CONVERT_VARCHAR* = 70
  SQL_CORRELATION_NAME* = 74
  SQL_CR_CLOSE* = SQL_CB_CLOSE
  SQL_CR_DELETE* = SQL_CB_DELETE
  SQL_CR_PRESERVE* = SQL_CB_PRESERVE
  SQL_CUR_USE_IF_NEEDED* = 0
  SQL_CUR_USE_ODBC* = 1
  SQL_CUR_USE_DRIVER* = 2
  SQL_CUR_DEFAULT* = SQL_CUR_USE_DRIVER.ULONG
  SQL_CURRENT_QUALIFIER* = 109
  SQL_CURSOR_DYNAMIC* = 2
  SQL_CURSOR_FORWARD_ONLY* = 0
  SQL_CURSOR_KEYSET_DRIVEN* = 1
  SQL_CURSOR_ROLLBACK_BEHAVIOR* = 24
  SQL_CURSOR_STATIC* = 3
  SQL_CURSOR_TYPE* = 6
  SQL_CURSOR_TYPE_DEFAULT* = SQL_CURSOR_FORWARD_ONLY
  SQL_CV_CASCADED* = 0x00000004
  SQL_CV_CHECK_OPTION* = 0x00000002
  SQL_CV_CREATE_VIEW* = 0x00000001
  SQL_CV_LOCAL* = 0x00000008
  SQL_CVT_BIGINT* = 0x00004000
  SQL_CVT_BINARY* = 0x00000400
  SQL_CVT_BIT* = 0x00001000
  SQL_CVT_CHAR* = 0x00000001
  SQL_CVT_DATE* = 0x00008000
  SQL_CVT_DECIMAL* = 0x00000004
  SQL_CVT_DOUBLE* = 0x00000080
  SQL_CVT_FLOAT* = 0x00000020
  SQL_CVT_INTEGER* = 0x00000008
  SQL_CVT_LONGVARBINARY* = 0x00040000
  SQL_CVT_LONGVARCHAR* = 0x00000200
  SQL_CVT_NUMERIC* = 0x00000002
  SQL_CVT_REAL* = 0x00000040
  SQL_CVT_SMALLINT* = 0x00000010
  SQL_CVT_TIME* = 0x00010000
  SQL_CVT_TIMESTAMP* = 0x00020000
  SQL_CVT_TINYINT* = 0x00002000
  SQL_CVT_VARBINARY* = 0x00000800
  SQL_CVT_VARCHAR* = 0x00000100
  SQL_DATABASE_NAME* = 16
  SQL_DEFAULT_PARAM* = -5
  SQL_DELETE* = 3
  SQL_DRIVER_COMPLETE* = 1
  SQL_DRIVER_COMPLETE_REQUIRED* = 3
  SQL_DRIVER_HDBC* = 3
  SQL_DRIVER_HENV* = 4
  SQL_DRIVER_HLIB* = 76
  SQL_DRIVER_HSTMT* = 5
  SQL_DRIVER_NAME* = 6
  SQL_DRIVER_NOPROMPT* = 0
  SQL_DRIVER_ODBC_VER* = 77
  SQL_DRIVER_PROMPT* = 2
  SQL_DRIVER_VER* = 7
  SQL_DTC_ENLIST_EXPENSIVE* = 1
  SQL_DTC_UNENLIST_EXPENSIVE* = 2
  SQL_DTC_TRANSITION_COST* = 1750
  SQL_ENSURE* = 1
  SQL_ENTIRE_ROWSET* = 0
  SQL_EXPRESSIONS_IN_ORDERBY* = 27
  SQL_FD_FETCH_BOOKMARK* = 128
  SQL_FD_FETCH_PREV* = SQL_FD_FETCH_PRIOR
  SQL_FD_FETCH_RESUME* = 64
  SQL_FETCH_BOOKMARK* = 8
  SQL_FETCH_PREV* = SQL_FETCH_PRIOR
  SQL_FETCH_RESUME* = 7
  SQL_FILE_NOT_SUPPORTED* = 0x0000
  SQL_FILE_TABLE* = 0x0001
  SQL_FILE_QUALIFIER* = 0x0002
  SQL_FILE_CATALOG* = SQL_FILE_QUALIFIER
  SQL_FILE_USAGE* = 84
  SQL_FN_CVT_CONVERT* = 0x00000001
  SQL_FN_NUM_ABS* = 0x00000001
  SQL_FN_NUM_ACOS* = 0x00000002
  SQL_FN_NUM_ASIN* = 0x00000004
  SQL_FN_NUM_ATAN* = 0x00000008
  SQL_FN_NUM_ATAN2* = 0x00000010
  SQL_FN_NUM_CEILING* = 0x00000020
  SQL_FN_NUM_COS* = 0x00000040
  SQL_FN_NUM_COT* = 0x00000080
  SQL_FN_NUM_DEGREES* = 0x00040000
  SQL_FN_NUM_EXP* = 0x00000100
  SQL_FN_NUM_FLOOR* = 0x00000200
  SQL_FN_NUM_LOG* = 0x00000400
  SQL_FN_NUM_LOG10* = 0x00080000
  SQL_FN_NUM_MOD* = 0x00000800
  SQL_FN_NUM_PI* = 0x00010000
  SQL_FN_NUM_POWER* = 0x00100000
  SQL_FN_NUM_RADIANS* = 0x00200000
  SQL_FN_NUM_RAND* = 0x00020000
  SQL_FN_NUM_ROUND* = 0x00400000
  SQL_FN_NUM_SIGN* = 0x00001000
  SQL_FN_NUM_SIN* = 0x00002000
  SQL_FN_NUM_SQRT* = 0x00004000
  SQL_FN_NUM_TAN* = 0x00008000
  SQL_FN_NUM_TRUNCATE* = 0x00800000
  SQL_FN_STR_ASCII* = 0x00002000
  SQL_FN_STR_CHAR* = 0x00004000
  SQL_FN_STR_CONCAT* = 0x00000001
  SQL_FN_STR_DIFFERENCE* = 0x00008000
  SQL_FN_STR_INSERT* = 0x00000002
  SQL_FN_STR_LCASE* = 0x00000040
  SQL_FN_STR_LEFT* = 0x00000004
  SQL_FN_STR_LENGTH* = 0x00000010
  SQL_FN_STR_LOCATE* = 0x00000020
  SQL_FN_STR_LOCATE_2* = 0x00010000
  SQL_FN_STR_LTRIM* = 0x00000008
  SQL_FN_STR_REPEAT* = 0x00000080
  SQL_FN_STR_REPLACE* = 0x00000100
  SQL_FN_STR_RIGHT* = 0x00000200
  SQL_FN_STR_RTRIM* = 0x00000400
  SQL_FN_STR_SOUNDEX* = 0x00020000
  SQL_FN_STR_SPACE* = 0x00040000
  SQL_FN_STR_SUBSTRING* = 0x00000800
  SQL_FN_STR_UCASE* = 0x00001000
  SQL_FN_SYS_DBNAME* = 0x00000002
  SQL_FN_SYS_IFNULL* = 0x00000004
  SQL_FN_SYS_USERNAME* = 0x00000001
  SQL_FN_TD_CURDATE* = 0x00000002
  SQL_FN_TD_CURTIME* = 0x00000200
  SQL_FN_TD_DAYNAME* = 0x00008000
  SQL_FN_TD_DAYOFMONTH* = 0x00000004
  SQL_FN_TD_DAYOFWEEK* = 0x00000008
  SQL_FN_TD_DAYOFYEAR* = 0x00000010
  SQL_FN_TD_HOUR* = 0x00000400
  SQL_FN_TD_MINUTE* = 0x00000800
  SQL_FN_TD_MONTH* = 0x00000020
  SQL_FN_TD_MONTHNAME* = 0x00010000
  SQL_FN_TD_NOW* = 0x00000001
  SQL_FN_TD_QUARTER* = 0x00000040
  SQL_FN_TD_SECOND* = 0x00001000
  SQL_FN_TD_TIMESTAMPADD* = 0x00002000
  SQL_FN_TD_TIMESTAMPDIFF* = 0x00004000
  SQL_FN_TD_WEEK* = 0x00000080
  SQL_FN_TD_YEAR* = 0x00000100
  SQL_FN_TSI_DAY* = 0x00000010
  SQL_FN_TSI_FRAC_SECOND* = 0x00000001
  SQL_FN_TSI_HOUR* = 0x00000008
  SQL_FN_TSI_MINUTE* = 0x00000004
  SQL_FN_TSI_MONTH* = 0x00000040
  SQL_FN_TSI_QUARTER* = 0x00000080
  SQL_FN_TSI_SECOND* = 0x00000002
  SQL_FN_TSI_WEEK* = 0x00000020
  SQL_FN_TSI_YEAR* = 0x00000100
  SQL_GB_GROUP_BY_CONTAINS_SELECT* = 2
  SQL_GB_GROUP_BY_EQUALS_SELECT* = 1
  SQL_GB_NO_RELATION* = 3
  SQL_GB_NOT_SUPPORTED* = 0
  SQL_GD_BLOCK* = 4
  SQL_GD_BOUND* = 8
  SQL_GET_BOOKMARK* = 13
  SQL_GROUP_BY* = 88
  SQL_IGNORE* = -6
  SQL_INFO_FIRST* = 0
  SQL_KEYSET_SIZE* = 8
  SQL_KEYSET_SIZE_DEFAULT* = 0
  SQL_KEYWORDS* = 89
  SQL_LCK_EXCLUSIVE* = 2
  SQL_LCK_NO_CHANGE* = 1
  SQL_LCK_UNLOCK* = 4
  SQL_LEN_BINARY_ATTR_OFFSET* = -100
  SQL_LEN_DATA_AT_EXEC_OFFSET* = -100
  SQL_LIKE_ESCAPE_CLAUSE* = 113
  SQL_LIKE_ONLY* = 1
  SQL_LOCK_EXCLUSIVE* = 1
  SQL_LOCK_NO_CHANGE* = 0
  SQL_LOCK_TYPES* = 78
  SQL_LOCK_UNLOCK* = 2
  SQL_LOGIN_TIMEOUT* = 103
  SQL_LOGIN_TIMEOUT_DEFAULT* = 15
  SQL_LONGVARBINARY* = -4
  SQL_LONGVARCHAR* = -1
  SQL_MAX_BINARY_LITERAL_LEN* = 112
  SQL_MAX_CHAR_LITERAL_LEN* = 108
  SQL_MAX_DSN_LENGTH* = 32
  SQL_MAX_LENGTH* = 3
  SQL_MAX_LENGTH_DEFAULT* = 0
  SQL_MAX_OPTION_STRING_LENGTH* = 256
  SQL_MAX_OWNER_NAME_LEN* = 32
  SQL_MAX_PROCEDURE_NAME_LEN* = 33
  SQL_MAX_QUALIFIER_NAME_LEN* = 34
  SQL_MAX_ROW_SIZE_INCLUDES_LONG* = 103
  SQL_MAX_ROWS* = 1
  SQL_MAX_ROWS_DEFAULT* = 0
  SQL_MODE_READ_WRITE* = 0
  SQL_MODE_READ_ONLY* = 1
  SQL_MODE_DEFAULT* = SQL_MODE_READ_WRITE
  SQL_MULT_RESULT_SETS* = 36
  SQL_MULTIPLE_ACTIVE_TXN* = 37
  SQL_NC_END* = 0x0004
  SQL_NC_START* = 0x0002
  SQL_NEED_LONG_DATA_LEN* = 111
  SQL_NNC_NON_NULL* = 0x0001
  SQL_NNC_NULL* = 0x0000
  SQL_NO_TOTAL* = -4
  SQL_NON_NULLABLE_COLUMNS* = 75
  SQL_NOSCAN_OFF* = 0
  SQL_NOSCAN_ON* = 1
  SQL_NOSCAN* = 2
  SQL_NOSCAN_DEFAULT* = SQL_NOSCAN_OFF
  SQL_NUMERIC_FUNCTIONS* = 49
  SQL_OAC_LEVEL1* = 0x0001
  SQL_OAC_LEVEL2* = 0x0002
  SQL_OAC_NONE* = 0x0000
  SQL_ODBC_API_CONFORMANCE* = 9
  SQL_ODBC_CURSORS* = 110
  SQL_ODBC_SAG_CLI_CONFORMANCE* = 12
  SQL_ODBC_SQL_CONFORMANCE* = 15
  SQL_ODBC_SQL_OPT_IEF* = 73
  SQL_ODBC_VER* = 10
  SQL_OPT_TRACE* = 104
  SQL_OPT_TRACE_FILE_DEFAULT* = "\\SQL.LOG"
  SQL_OPT_TRACE_OFF* = 0
  SQL_OPT_TRACE_DEFAULT* = SQL_OPT_TRACE_OFF
  SQL_OPT_TRACE_ON* = 1
  SQL_OPT_TRACEFILE* = 105
  SQL_OSC_CORE* = 1
  SQL_OSC_EXTENDED* = 2
  SQL_OSC_MINIMUM* = 0
  SQL_OSCC_COMPLIANT* = 1
  SQL_OSCC_NOT_COMPLIANT* = 0
  SQL_OU_DML_STATEMENTS* = 1
  SQL_OU_INDEX_DEFINITION* = 8
  SQL_OU_PRIVILEGE_DEFINITION* = 16
  SQL_OU_PROCEDURE_INVOCATION* = 2
  SQL_OU_TABLE_DEFINITION* = 4
  SQL_OUTER_JOINS* = 38
  SQL_OWNER_TERM* = 39
  SQL_OWNER_USAGE* = 91
  SQL_PACKET_SIZE* = 112
  SQL_PARAM_INPUT* = 1
  SQL_PARAM_INPUT_OUTPUT* = 2
  SQL_PARAM_OUTPUT* = 4
  SQL_PARAM_TYPE_DEFAULT* = SQL_PARAM_INPUT_OUTPUT
  SQL_PARAM_TYPE_UNKNOWN* = 0
  SQL_PC_NOT_PSEUDO* = 1
  SQL_POS_ADD* = 16
  SQL_POS_DELETE* = 8
  SQL_POS_OPERATIONS* = 79
  SQL_POS_POSITION* = 1
  SQL_POS_REFRESH* = 2
  SQL_POS_UPDATE* = 4
  SQL_POSITION* = 0
  SQL_POSITIONED_STATEMENTS* = 80
  SQL_PROCEDURE_TERM* = 40
  # SQL_PROCEDURES* = 21
  SQL_PS_POSITIONED_DELETE* = 1
  SQL_PS_POSITIONED_UPDATE* = 2
  SQL_PS_SELECT_FOR_UPDATE* = 4
  SQL_PT_FUNCTION* = 2
  SQL_PT_PROCEDURE* = 1
  SQL_PT_UNKNOWN* = 0
  SQL_QL_END* = 0x0002
  SQL_QL_START* = 0x0001
  SQL_QU_DML_STATEMENTS* = 1
  SQL_QU_INDEX_DEFINITION* = 8
  SQL_QU_PRIVILEGE_DEFINITION* = 16
  SQL_QU_PROCEDURE_INVOCATION* = 2
  SQL_QU_TABLE_DEFINITION* = 4
  SQL_QUALIFIER_LOCATION* = 114
  SQL_QUALIFIER_NAME_SEPARATOR* = 41
  SQL_QUALIFIER_TERM* = 42
  SQL_QUALIFIER_USAGE* = 92
  SQL_QUERY_TIMEOUT* = 0
  SQL_QUERY_TIMEOUT_DEFAULT* = 0
  SQL_QUICK* = 0
  SQL_QUIET_MODE* = 111
  SQL_QUOTED_IDENTIFIER_CASE* = 93
  SQL_RD_OFF* = 0
  SQL_RD_ON* = 1
  SQL_RD_DEFAULT* = SQL_RD_ON
  SQL_REFRESH* = 1
  SQL_RESTRICT* = 1
  SQL_RESULT_COL* = 3
  SQL_RETRIEVE_DATA* = 11
  SQL_RETURN_VALUE* = 5
  SQL_ROW_ADDED* = 4
  SQL_ROW_DELETED* = 1
  SQL_ROW_ERROR* = 5
  SQL_ROW_NOROW* = 3
  SQL_ROW_NUMBER* = 14
  SQL_ROW_SUCCESS* = 0
  SQL_ROW_UPDATED* = 2
  SQL_ROW_UPDATES* = 11
  SQL_ROWSET_SIZE* = 9
  SQL_ROWSET_SIZE_DEFAULT* = 1
  SQL_ROWVER* = 2
  SQL_SC_NON_UNIQUE* = 0
  SQL_SC_TRY_UNIQUE* = 1
  SQL_SC_UNIQUE* = 2
  SQL_SCCO_OPT_TIMESTAMP* = SQL_SCCO_OPT_ROWVER
  SQL_SCROLL_DYNAMIC* = -2
  SQL_SCROLL_FORWARD_ONLY* = 0
  SQL_SCROLL_KEYSET_DRIVEN* = -1
  SQL_SCROLL_OPTIONS* = 44
  SQL_SCROLL_STATIC* = -3
  SQL_SEARCHABLE* = 3
  SQL_SET_NULL* = 2
  SQL_SETPARAM_VALUE_MAX* = -1
  SQL_SETPOS_MAX_LOCK_VALUE* = SQL_LOCK_UNLOCK
  SQL_SETPOS_MAX_OPTION_VALUE* = SQL_ADD
  SQL_SIMULATE_CURSOR* = 10
  SQL_SO_DYNAMIC* = 4
  SQL_SO_FORWARD_ONLY* = 1
  SQL_SO_KEYSET_DRIVEN* = 2
  SQL_SO_MIXED* = 8
  SQL_SO_STATIC* = 16
  SQL_SQ_COMPARISON* = 1
  SQL_SQ_CORRELATED_SUBQUERIES* = 16
  SQL_SQ_EXISTS* = 2
  SQL_SQ_IN* = 4
  SQL_SQ_QUANTIFIED* = 8
  SQL_SQLSTATE_SIZE* = 5
  SQL_SS_ADDITIONS* = 1
  SQL_SS_DELETIONS* = 2
  SQL_SS_UPDATES* = 4
  SQL_STATIC_SENSITIVITY* = 83
  SQL_STRING_FUNCTIONS* = 50
  SQL_SUBQUERIES* = 95
  SQL_SYSTEM_FUNCTIONS* = 51
  SQL_TABLE_STAT* = 0
  SQL_TABLE_TERM* = 45
  SQL_TIMEDATE_ADD_INTERVALS* = 109
  SQL_TIMEDATE_DIFF_INTERVALS* = 110
  SQL_TIMEDATE_FUNCTIONS* = 52
  SQL_TRANSLATE_DLL* = 106
  SQL_TRANSLATE_OPTION* = 107
  SQL_TXN_ISOLATION* = 108
  SQL_TXN_VERSIONING* = 16
  SQL_TYPE_NULL* = 0
  SQL_U_UNION* = 1
  SQL_U_UNION_ALL* = 2
  SQL_UB_OFF* = 0U
  SQL_UB_DEFAULT* = SQL_UB_OFF
  SQL_UB_ON* = 01U
  SQL_UNION* = 96
  SQL_UNSEARCHABLE* = 0
  SQL_UPDATE* = 2
  SQL_USE_BOOKMARKS* = 12
  SQL_VARBINARY* = -3
  SQL_COLATT_OPT_MAX* = SQL_COLUMN_LABEL
  SQL_COLATT_OPT_MIN* = SQL_COLUMN_COUNT
  SQL_PRED_SEARCHABLE* = SQL_SEARCHABLE
  SQL_NO_DATA_FOUND* = SQL_NO_DATA
  SQL_CODE_YEAR* = 1
  SQL_CODE_MONTH* = 2
  SQL_CODE_DAY* = 3
  SQL_CODE_HOUR* = 4
  SQL_CODE_MINUTE* = 5
  SQL_CODE_SECOND* = 6
  SQL_CODE_YEAR_TO_MONTH* = 7
  SQL_CODE_DAY_TO_HOUR* = 8
  SQL_CODE_DAY_TO_MINUTE* = 9
  SQL_CODE_DAY_TO_SECOND* = 10
  SQL_CODE_HOUR_TO_MINUTE* = 11
  SQL_CODE_HOUR_TO_SECOND* = 12
  SQL_CODE_MINUTE_TO_SECOND* = 13
  SQL_INTERVAL_YEAR* = 100 + SQL_CODE_YEAR
  SQL_INTERVAL_MONTH* = 100 + SQL_CODE_MONTH
  SQL_INTERVAL_DAY* = 100 + SQL_CODE_DAY
  SQL_INTERVAL_HOUR* = 100 + SQL_CODE_HOUR
  SQL_INTERVAL_MINUTE* = 100 + SQL_CODE_MINUTE
  SQL_INTERVAL_SECOND* = 100 + SQL_CODE_SECOND
  SQL_INTERVAL_YEAR_TO_MONTH* = 100 + SQL_CODE_YEAR_TO_MONTH
  SQL_INTERVAL_DAY_TO_HOUR* = 100 + SQL_CODE_DAY_TO_HOUR
  SQL_INTERVAL_DAY_TO_MINUTE* = 100 + SQL_CODE_DAY_TO_MINUTE
  SQL_INTERVAL_DAY_TO_SECOND* = 100 + SQL_CODE_DAY_TO_SECOND
  SQL_INTERVAL_HOUR_TO_MINUTE* = 100 + SQL_CODE_HOUR_TO_MINUTE
  SQL_INTERVAL_HOUR_TO_SECOND* = 100 + SQL_CODE_HOUR_TO_SECOND
  SQL_INTERVAL_MINUTE_TO_SECOND* = 100 + SQL_CODE_MINUTE_TO_SECOND
  # SQL_OJ_CAPABILITIES* = 65003
  SQL_NO_ACTION* = 3
  SQL_SET_DEFAULT* = 4
  SQL_ACTIVE_ENVIRONMENTS* = 116
  SQL_AD_ADD_CONSTRAINT_DEFERRABLE* = 0x00000080
  SQL_AD_ADD_CONSTRAINT_INITIALLY_DEFERRED* = 0x00000020
  SQL_AD_ADD_CONSTRAINT_INITIALLY_IMMEDIATE* = 0x00000040
  SQL_AD_ADD_CONSTRAINT_NON_DEFERRABLE* = 0x00000100
  SQL_AD_ADD_DOMAIN_CONSTRAINT* = 0x00000002
  SQL_AD_ADD_DOMAIN_DEFAULT* = 0x00000008
  SQL_AD_CONSTRAINT_NAME_DEFINITION* = 0x00000001
  SQL_AD_DROP_DOMAIN_CONSTRAINT* = 0x00000004
  SQL_AD_DROP_DOMAIN_DEFAULT* = 0x00000010
  SQL_AF_ALL* = 0x00000040
  SQL_AF_AVG* = 0x00000001
  SQL_AF_COUNT* = 0x00000002
  SQL_AF_DISTINCT* = 0x00000020
  SQL_AF_MAX* = 0x00000004
  SQL_AF_MIN* = 0x00000008
  SQL_AF_SUM* = 0x00000010
  SQL_AGGREGATE_FUNCTIONS* = 169
  SQL_ALL_CATALOGS* = "%"
  SQL_ALL_SCHEMAS* = "%"
  SQL_ALL_TABLE_TYPES* = "%"
  SQL_ALTER_DOMAIN* = 117
  # SQL_AM_CONNECTION* = 1
  # SQL_AM_NONE* = 0
  # SQL_AM_STATEMENT* = 2
  SQL_API_ODBC3_ALL_FUNCTIONS* = 999
  SQL_API_ODBC3_ALL_FUNCTIONS_SIZE* = 250
  SQL_API_SQLALLOCHANDLESTD* = 73
  SQL_API_SQLBULKOPERATIONS* = 24
  SQL_ASYNC_MODE* = 10021
  SQL_AT_ADD_COLUMN_COLLATION* = 0x00000080
  SQL_AT_ADD_COLUMN_DEFAULT* = 0x00000040
  SQL_AT_ADD_COLUMN_SINGLE* = 0x00000020
  SQL_AT_ADD_TABLE_CONSTRAINT* = 0x00001000
  SQL_AT_CONSTRAINT_DEFERRABLE* = 0x00040000
  SQL_AT_CONSTRAINT_INITIALLY_DEFERRED* = 0x00010000
  SQL_AT_CONSTRAINT_INITIALLY_IMMEDIATE* = 0x00020000
  SQL_AT_CONSTRAINT_NAME_DEFINITION* = 0x00008000
  SQL_AT_CONSTRAINT_NON_DEFERRABLE* = 0x00080000
  SQL_AT_DROP_COLUMN_CASCADE* = 0x00000400
  SQL_AT_DROP_COLUMN_DEFAULT* = 0x00000200
  SQL_AT_DROP_COLUMN_RESTRICT* = 0x00000800
  SQL_AT_DROP_TABLE_CONSTRAINT_CASCADE* = 0x00002000
  SQL_AT_DROP_TABLE_CONSTRAINT_RESTRICT* = 0x00004000
  SQL_AT_SET_COLUMN_DEFAULT* = 0x00000100
  SQL_ATTR_ACCESS_MODE* = SQL_ACCESS_MODE
  SQL_ATTR_ASYNC_ENABLE* = 4
  SQL_ATTR_AUTOCOMMIT* = SQL_AUTOCOMMIT
  SQL_ATTR_CONCURRENCY* = SQL_CONCURRENCY
  SQL_ATTR_CONNECTION_POOLING* = 201
  SQL_ATTR_CONNECTION_TIMEOUT* = 113
  SQL_ATTR_CP_MATCH* = 202
  SQL_ATTR_CURRENT_CATALOG* = SQL_CURRENT_QUALIFIER
  SQL_ATTR_CURSOR_TYPE* = SQL_CURSOR_TYPE
  SQL_ATTR_DISCONNECT_BEHAVIOR* = 114
  SQL_ATTR_ENABLE_AUTO_IPD* = 15
  SQL_ATTR_ENLIST_IN_DTC* = 1207
  SQL_ATTR_ENLIST_IN_XA* = 1208
  SQL_ATTR_FETCH_BOOKMARK_PTR* = 16
  SQL_ATTR_KEYSET_SIZE* = SQL_KEYSET_SIZE
  SQL_ATTR_LOGIN_TIMEOUT* = SQL_LOGIN_TIMEOUT
  SQL_ATTR_MAX_LENGTH* = SQL_MAX_LENGTH
  SQL_ATTR_MAX_ROWS* = SQL_MAX_ROWS
  SQL_ATTR_NOSCAN* = SQL_NOSCAN
  SQL_ATTR_ODBC_CURSORS* = SQL_ODBC_CURSORS
  SQL_ATTR_ODBC_VERSION* = 200
  SQL_ATTR_PACKET_SIZE* = SQL_PACKET_SIZE
  SQL_ATTR_PARAM_BIND_OFFSET_PTR* = 17
  SQL_ATTR_PARAM_BIND_TYPE* = 18
  SQL_ATTR_PARAM_OPERATION_PTR* = 19
  SQL_ATTR_PARAM_STATUS_PTR* = 20
  SQL_ATTR_PARAMS_PROCESSED_PTR* = 21
  SQL_ATTR_PARAMSET_SIZE* = 22
  SQL_ATTR_QUERY_TIMEOUT* = SQL_QUERY_TIMEOUT
  SQL_ATTR_QUIET_MODE* = SQL_QUIET_MODE
  SQL_ATTR_RETRIEVE_DATA* = SQL_RETRIEVE_DATA
  SQL_ATTR_ROW_ARRAY_SIZE* = 27
  SQL_ATTR_ROW_BIND_OFFSET_PTR* = 23
  SQL_ATTR_ROW_BIND_TYPE* = SQL_BIND_TYPE
  SQL_ATTR_ROW_NUMBER* = SQL_ROW_NUMBER
  SQL_ATTR_ROW_OPERATION_PTR* = 24
  SQL_ATTR_ROW_STATUS_PTR* = 25
  SQL_ATTR_ROWS_FETCHED_PTR* = 26
  SQL_ATTR_SIMULATE_CURSOR* = SQL_SIMULATE_CURSOR
  SQL_ATTR_TRACE* = SQL_OPT_TRACE
  SQL_ATTR_TRACEFILE* = SQL_OPT_TRACEFILE
  SQL_ATTR_TRANSLATE_LIB* = SQL_TRANSLATE_DLL
  SQL_ATTR_TRANSLATE_OPTION* = SQL_TRANSLATE_OPTION
  SQL_ATTR_TXN_ISOLATION* = SQL_TXN_ISOLATION
  SQL_ATTR_USE_BOOKMARKS* = SQL_USE_BOOKMARKS
  SQL_BATCH_ROW_COUNT* = 120
  SQL_BATCH_SUPPORT* = 121
  SQL_BRC_EXPLICIT* = 0x0000002
  SQL_BRC_PROCEDURES* = 0x0000001
  SQL_BRC_ROLLED_UP* = 0x0000004
  SQL_BS_ROW_COUNT_EXPLICIT* = 0x00000002
  SQL_BS_ROW_COUNT_PROC* = 0x00000008
  SQL_BS_SELECT_EXPLICIT* = 0x00000001
  SQL_BS_SELECT_PROC* = 0x00000004
  SQL_C_INTERVAL_DAY* = SQL_INTERVAL_DAY
  SQL_C_INTERVAL_DAY_TO_HOUR* = SQL_INTERVAL_DAY_TO_HOUR
  SQL_C_INTERVAL_DAY_TO_MINUTE* = SQL_INTERVAL_DAY_TO_MINUTE
  SQL_C_INTERVAL_DAY_TO_SECOND* = SQL_INTERVAL_DAY_TO_SECOND
  SQL_C_INTERVAL_HOUR* = SQL_INTERVAL_HOUR
  SQL_C_INTERVAL_HOUR_TO_MINUTE* = SQL_INTERVAL_HOUR_TO_MINUTE
  SQL_C_INTERVAL_HOUR_TO_SECOND* = SQL_INTERVAL_HOUR_TO_SECOND
  SQL_C_INTERVAL_MINUTE* = SQL_INTERVAL_MINUTE
  SQL_C_INTERVAL_MINUTE_TO_SECOND* = SQL_INTERVAL_MINUTE_TO_SECOND
  SQL_C_INTERVAL_MONTH* = SQL_INTERVAL_MONTH
  SQL_C_INTERVAL_SECOND* = SQL_INTERVAL_SECOND
  SQL_C_INTERVAL_YEAR* = SQL_INTERVAL_YEAR
  SQL_C_INTERVAL_YEAR_TO_MONTH* = SQL_INTERVAL_YEAR_TO_MONTH
  SQL_C_NUMERIC* = SQL_NUMERIC
  SQL_C_SBIGINT* = SQL_BIGINT+SQL_SIGNED_OFFSET
  SQL_C_TYPE_DATE* = SQL_TYPE_DATE
  SQL_C_TYPE_TIME* = SQL_TYPE_TIME
  SQL_C_TYPE_TIMESTAMP* = SQL_TYPE_TIMESTAMP
  SQL_C_UBIGINT* = SQL_BIGINT+SQL_UNSIGNED_OFFSET
  SQL_C_VARBOOKMARK* = SQL_C_BINARY
  SQL_CA_CONSTRAINT_DEFERRABLE* = 0x00000040
  SQL_CA_CONSTRAINT_INITIALLY_DEFERRED* = 0x00000010
  SQL_CA_CONSTRAINT_INITIALLY_IMMEDIATE* = 0x00000020
  SQL_CA_CONSTRAINT_NON_DEFERRABLE* = 0x00000080
  SQL_CA_CREATE_ASSERTION* = 0x00000001
  SQL_CA1_ABSOLUTE* = 0x00000002
  SQL_CA1_BOOKMARK* = 0x00000008
  SQL_CA1_BULK_ADD* = 0x00010000
  SQL_CA1_BULK_DELETE_BY_BOOKMARK* = 0x00040000
  SQL_CA1_BULK_FETCH_BY_BOOKMARK* = 0x00080000
  SQL_CA1_BULK_UPDATE_BY_BOOKMARK* = 0x00020000
  SQL_CA1_LOCK_EXCLUSIVE* = 0x00000080
  SQL_CA1_LOCK_NO_CHANGE* = 0x00000040
  SQL_CA1_LOCK_UNLOCK* = 0x00000100
  SQL_CA1_NEXT* = 0x00000001
  SQL_CA1_POS_DELETE* = 0x00000800
  SQL_CA1_POS_POSITION* = 0x00000200
  SQL_CA1_POS_REFRESH* = 0x00001000
  SQL_CA1_POS_UPDATE* = 0x00000400
  SQL_CA1_POSITIONED_DELETE* = 0x00004000
  SQL_CA1_POSITIONED_UPDATE* = 0x00002000
  SQL_CA1_RELATIVE* = 0x00000004
  SQL_CA1_SELECT_FOR_UPDATE* = 0x00008000
  SQL_CA2_CRC_APPROXIMATE* = 0x00002000
  SQL_CA2_CRC_EXACT* = 0x00001000
  SQL_CA2_LOCK_CONCURRENCY* = 0x00000002
  SQL_CA2_MAX_ROWS_CATALOG* = 0x00000800
  SQL_CA2_MAX_ROWS_DELETE* = 0x00000200
  SQL_CA2_MAX_ROWS_INSERT* = 0x00000100
  SQL_CA2_MAX_ROWS_SELECT* = 0x00000080
  SQL_CA2_MAX_ROWS_UPDATE* = 0x00000400
  SQL_CA2_MAX_ROWS_AFFECTS_ALL* = SQL_CA2_MAX_ROWS_SELECT or SQL_CA2_MAX_ROWS_INSERT or SQL_CA2_MAX_ROWS_DELETE or SQL_CA2_MAX_ROWS_UPDATE or SQL_CA2_MAX_ROWS_CATALOG
  SQL_CA2_OPT_ROWVER_CONCURRENCY* = 0x00000004
  SQL_CA2_OPT_VALUES_CONCURRENCY* = 0x00000008
  SQL_CA2_READ_ONLY_CONCURRENCY* = 0x00000001
  SQL_CA2_SENSITIVITY_ADDITIONS* = 0x00000010
  SQL_CA2_SENSITIVITY_DELETIONS* = 0x00000020
  SQL_CA2_SENSITIVITY_UPDATES* = 0x00000040
  SQL_CA2_SIMULATE_NON_UNIQUE* = 0x00004000
  SQL_CA2_SIMULATE_TRY_UNIQUE* = 0x00008000
  SQL_CA2_SIMULATE_UNIQUE* = 0x00010000
  SQL_CATALOG_LOCATION* = SQL_QUALIFIER_LOCATION
  SQL_CATALOG_NAME_SEPARATOR* = SQL_QUALIFIER_NAME_SEPARATOR
  SQL_CATALOG_TERM* = SQL_QUALIFIER_TERM
  SQL_CATALOG_USAGE* = SQL_QUALIFIER_USAGE
  SQL_CCOL_CREATE_COLLATION* = 0x00000001
  SQL_CCS_COLLATE_CLAUSE* = 0x00000002
  SQL_CCS_CREATE_CHARACTER_SET* = 0x00000001
  SQL_CCS_LIMITED_COLLATION* = 0x00000004
  SQL_CDO_COLLATION* = 0x00000008
  SQL_CDO_CONSTRAINT* = 0x00000004
  SQL_CDO_CONSTRAINT_DEFERRABLE* = 0x00000080
  SQL_CDO_CONSTRAINT_INITIALLY_DEFERRED* = 0x00000020
  SQL_CDO_CONSTRAINT_INITIALLY_IMMEDIATE* = 0x00000040
  SQL_CDO_CONSTRAINT_NAME_DEFINITION* = 0x00000010
  SQL_CDO_CONSTRAINT_NON_DEFERRABLE* = 0x00000100
  SQL_CDO_CREATE_DOMAIN* = 0x00000001
  SQL_CDO_DEFAULT* = 0x00000002
  SQL_CL_END* = SQL_QL_END
  SQL_CL_START* = SQL_QL_START
  SQL_COL_PRED_BASIC* = SQL_ALL_EXCEPT_LIKE
  SQL_COL_PRED_CHAR* = SQL_LIKE_ONLY
  SQL_COLUMN_DRIVER_START* = 1000
  SQL_COLUMN_IGNORE* = SQL_IGNORE
  SQL_COLUMN_NUMBER_UNKNOWN* = -2
  SQL_CONVERT_GUID* = 173
  SQL_CONVERT_WCHAR* = 122
  SQL_CONVERT_INTERVAL_DAY_TIME* = 123
  SQL_CONVERT_INTERVAL_YEAR_MONTH* = 124
  SQL_CONVERT_WLONGVARCHAR* = 125
  SQL_CONVERT_WVARCHAR* = 126
  SQL_CREATE_ASSERTION* = 127
  SQL_CREATE_CHARACTER_SET* = 128
  SQL_CREATE_COLLATION* = 129
  SQL_CREATE_DOMAIN* = 130
  SQL_CREATE_SCHEMA* = 131
  SQL_CREATE_TABLE* = 132
  SQL_CREATE_TRANSLATION* = 133
  SQL_CREATE_VIEW* = 134
  SQL_CP_OFF* = 0
  SQL_CP_DEFAULT* = SQL_CP_OFF
  SQL_CP_ONE_PER_DRIVER* = 1
  SQL_CP_ONE_PER_HENV* = 2
  SQL_CP_STRICT_MATCH* = 0
  SQL_CP_MATCH_DEFAULT* = SQL_CP_STRICT_MATCH
  SQL_CP_RELAXED_MATCH* = 1
  SQL_CS_CREATE_SCHEMA* = 0x00000001
  SQL_CS_AUTHORIZATION* = 0x00000002
  SQL_CS_DEFAULT_CHARACTER_SET* = 0x00000004
  SQL_CT_COLUMN_COLLATION* = 0x00000800
  SQL_CT_COLUMN_CONSTRAINT* = 0x00000200
  SQL_CT_COLUMN_DEFAULT* = 0x00000400
  SQL_CT_COMMIT_DELETE* = 0x00000004
  SQL_CT_COMMIT_PRESERVE* = 0x00000002
  SQL_CT_CONSTRAINT_DEFERRABLE* = 0x00000080
  SQL_CT_CONSTRAINT_INITIALLY_DEFERRED* = 0x00000020
  SQL_CT_CONSTRAINT_INITIALLY_IMMEDIATE* = 0x00000040
  SQL_CT_CONSTRAINT_NAME_DEFINITION* = 0x00002000
  SQL_CT_CONSTRAINT_NON_DEFERRABLE* = 0x00000100
  SQL_CT_CREATE_TABLE* = 0x00000001
  SQL_CT_GLOBAL_TEMPORARY* = 0x00000008
  SQL_CT_LOCAL_TEMPORARY* = 0x00000010
  SQL_CT_TABLE_CONSTRAINT* = 0x00001000
  SQL_CTR_CREATE_TRANSLATION* = 0x00000001
  SQL_CU_DML_STATEMENTS* = SQL_QU_DML_STATEMENTS
  SQL_CU_INDEX_DEFINITION* = SQL_QU_INDEX_DEFINITION
  SQL_CU_PRIVILEGE_DEFINITION* = SQL_QU_PRIVILEGE_DEFINITION
  SQL_CU_PROCEDURE_INVOCATION* = SQL_QU_PROCEDURE_INVOCATION
  SQL_CU_TABLE_DEFINITION* = SQL_QU_TABLE_DEFINITION
  SQL_CVT_INTERVAL_YEAR_MONTH* = 0x00080000
  SQL_CVT_INTERVAL_DAY_TIME* = 0x00100000
  SQL_CVT_WCHAR* = 0x00200000
  SQL_CVT_WLONGVARCHAR* = 0x00400000
  SQL_CVT_WVARCHAR* = 0x00800000
  SQL_CVT_GUID* = 0x01000000
  SQL_DA_DROP_ASSERTION* = 0x00000001
  SQL_DATETIME_LITERALS* = 11
  SQL_DB_DISCONNECT* = 1U
  SQL_DB_RETURN_TO_POOL* = 0U
  SQL_DB_DEFAULT* = SQL_DB_RETURN_TO_POOL
  SQL_DC_DROP_COLLATION* = 0x00000001
  SQL_DCS_DROP_CHARACTER_SET* = 0x00000001
  SQL_DD_CASCADE* = 0x00000004
  SQL_DD_DROP_DOMAIN* = 0x00000001
  SQL_DD_RESTRICT* = 0x00000002
  SQL_DDL_INDEX* = 170
  SQL_DELETE_BY_BOOKMARK* = 6
  SQL_DESC_ARRAY_SIZE* = 20
  SQL_DESC_ARRAY_STATUS_PTR* = 21
  SQL_DESC_AUTO_UNIQUE_VALUE* = SQL_COLUMN_AUTO_INCREMENT
  SQL_DESC_BASE_COLUMN_NAME* = 22
  SQL_DESC_BASE_TABLE_NAME* = 23
  SQL_DESC_BIND_OFFSET_PTR* = 24
  SQL_DESC_BIND_TYPE* = 25
  SQL_DESC_CASE_SENSITIVE* = SQL_COLUMN_CASE_SENSITIVE
  SQL_DESC_CATALOG_NAME* = SQL_COLUMN_QUALIFIER_NAME
  SQL_DESC_CONCISE_TYPE* = SQL_COLUMN_TYPE
  SQL_DESC_DATETIME_INTERVAL_PRECISION* = 26
  SQL_DESC_DISPLAY_SIZE* = SQL_COLUMN_DISPLAY_SIZE
  SQL_DESC_FIXED_PREC_SCALE* = SQL_COLUMN_MONEY
  SQL_DESC_LABEL* = SQL_COLUMN_LABEL
  SQL_DESC_LITERAL_PREFIX* = 27
  SQL_DESC_LITERAL_SUFFIX* = 28
  SQL_DESC_LOCAL_TYPE_NAME* = 29
  SQL_DESC_MAXIMUM_SCALE* = 30
  SQL_DESC_MINIMUM_SCALE* = 31
  SQL_DESC_NUM_PREC_RADIX* = 32
  SQL_DESC_PARAMETER_TYPE* = 33
  SQL_DESC_ROWS_PROCESSED_PTR* = 34
  SQL_DESC_SCHEMA_NAME* = SQL_COLUMN_OWNER_NAME
  SQL_DESC_SEARCHABLE* = SQL_COLUMN_SEARCHABLE
  SQL_DESC_TABLE_NAME* = SQL_COLUMN_TABLE_NAME
  SQL_DESC_TYPE_NAME* = SQL_COLUMN_TYPE_NAME
  SQL_DESC_UNSIGNED* = SQL_COLUMN_UNSIGNED
  SQL_DESC_UPDATABLE* = SQL_COLUMN_UPDATABLE
  SQL_DI_CREATE_INDEX* = 0x00000001
  SQL_DI_DROP_INDEX* = 0x00000002
  SQL_DIAG_COLUMN_NUMBER* = -124
  SQL_DIAG_ROW_NUMBER* = -124
  SQL_DIAG_CURSOR_ROW_COUNT* = -124
  SQL_DL_SQL92_DATE* = 0x00000001
  SQL_DL_SQL92_INTERVAL_DAY* = 0x00000020
  SQL_DL_SQL92_INTERVAL_DAY_TO_HOUR* = 0x00000400
  SQL_DL_SQL92_INTERVAL_DAY_TO_MINUTE* = 0x00000800
  SQL_DL_SQL92_INTERVAL_DAY_TO_SECOND* = 0x00001000
  SQL_DL_SQL92_INTERVAL_HOUR* = 0x00000040
  SQL_DL_SQL92_INTERVAL_HOUR_TO_MINUTE* = 0x00002000
  SQL_DL_SQL92_INTERVAL_HOUR_TO_SECOND* = 0x00004000
  SQL_DL_SQL92_INTERVAL_MINUTE* = 0x00000080
  SQL_DL_SQL92_INTERVAL_MINUTE_TO_SECOND* = 0x00008000
  SQL_DL_SQL92_INTERVAL_MONTH* = 0x00000010
  SQL_DL_SQL92_INTERVAL_SECOND* = 0x00000100
  SQL_DL_SQL92_INTERVAL_YEAR* = 0x00000008
  SQL_DL_SQL92_INTERVAL_YEAR_TO_MONTH* = 0x00000200
  SQL_DL_SQL92_TIME* = 0x00000002
  SQL_DL_SQL92_TIMESTAMP* = 0x00000004
  SQL_DM_VER* = 171
  SQL_DRIVER_HDESC* = 135
  SQL_DROP_ASSERTION* = 136
  SQL_DROP_CHARACTER_SET* = 137
  SQL_DROP_COLLATION* = 138
  SQL_DROP_DOMAIN* = 139
  SQL_DROP_SCHEMA* = 140
  SQL_DROP_TABLE* = 141
  SQL_DROP_TRANSLATION* = 142
  SQL_DROP_VIEW* = 143
  SQL_DS_CASCADE* = 0x00000004
  SQL_DS_DROP_SCHEMA* = 0x00000001
  SQL_DS_RESTRICT* = 0x00000002
  SQL_DT_CASCADE* = 0x00000004
  SQL_DT_DROP_TABLE* = 0x00000001
  SQL_DT_RESTRICT* = 0x00000002
  SQL_DTC_DONE* = 0
  SQL_DTR_DROP_TRANSLATION* = 0x00000001
  SQL_DV_CASCADE* = 0x00000004
  SQL_DV_DROP_VIEW* = 0x00000001
  SQL_DV_RESTRICT* = 0x00000002
  SQL_DYNAMIC_CURSOR_ATTRIBUTES1* = 144
  SQL_DYNAMIC_CURSOR_ATTRIBUTES2* = 145
  SQL_EXT_API_LAST* = SQL_API_SQLBINDPARAMETER
  SQL_EXT_API_START* = 40
  SQL_FETCH_BY_BOOKMARK* = 7
  SQL_FETCH_FIRST_SYSTEM* = 32
  SQL_FETCH_FIRST_USER* = 31
  SQL_FN_CVT_CAST* = 0x00000002
  SQL_FN_STR_BIT_LENGTH* = 0x00080000
  SQL_FN_STR_CHAR_LENGTH* = 0x00100000
  SQL_FN_STR_CHARACTER_LENGTH* = 0x00200000
  SQL_FN_STR_OCTET_LENGTH* = 0x00400000
  SQL_FN_STR_POSITION* = 0x00800000
  SQL_FN_TD_CURRENT_DATE* = 0x00020000
  SQL_FN_TD_CURRENT_TIME* = 0x00040000
  SQL_FN_TD_CURRENT_TIMESTAMP* = 0x00080000
  SQL_FN_TD_EXTRACT* = 0x00100000
  SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1* = 146
  SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES2* = 147
  SQL_GB_COLLATE* = 0x0004
  SQL_HANDLE_SENV* = 5
  SQL_IK_NONE* = 0
  SQL_IK_ASC* = 1
  SQL_IK_DESC* = 2
  SQL_IK_ALL* = SQL_IK_ASC or SQL_IK_DESC
  SQL_INDEX_KEYWORDS* = 148
  SQL_INFO_DRIVER_START* = 1000
  SQL_INFO_LAST* = SQL_QUALIFIER_LOCATION
  SQL_INFO_SCHEMA_VIEWS* = 149
  SQL_INITIALLY_DEFERRED* = 5
  SQL_INITIALLY_IMMEDIATE* = 6
  SQL_INSERT_STATEMENT* = 172
  SQL_INTERVAL* = 10
  SQL_IS_INSERT_LITERALS* = 0x00000001
  SQL_IS_INSERT_SEARCHED* = 0x00000002
  SQL_IS_INTEGER* = -6
  SQL_IS_POINTER* = -4
  SQL_IS_SELECT_INTO* = 0x00000004
  SQL_IS_SMALLINT* = -8
  SQL_IS_UINTEGER* = -5
  SQL_IS_USMALLINT* = -7
  SQL_ISV_ASSERTIONS* = 0x00000001
  SQL_ISV_CHARACTER_SETS* = 0x00000002
  SQL_ISV_CHECK_CONSTRAINTS* = 0x00000004
  SQL_ISV_COLLATIONS* = 0x00000008
  SQL_ISV_COLUMN_DOMAIN_USAGE* = 0x00000010
  SQL_ISV_COLUMN_PRIVILEGES* = 0x00000020
  SQL_ISV_COLUMNS* = 0x00000040
  SQL_ISV_CONSTRAINT_COLUMN_USAGE* = 0x00000080
  SQL_ISV_CONSTRAINT_TABLE_USAGE* = 0x00000100
  SQL_ISV_DOMAIN_CONSTRAINTS* = 0x00000200
  SQL_ISV_DOMAINS* = 0x00000400
  SQL_ISV_KEY_COLUMN_USAGE* = 0x00000800
  SQL_ISV_REFERENTIAL_CONSTRAINTS* = 0x00001000
  SQL_ISV_SCHEMATA* = 0x00002000
  SQL_ISV_SQL_LANGUAGES* = 0x00004000
  SQL_ISV_TABLE_CONSTRAINTS* = 0x00008000
  SQL_ISV_TABLE_PRIVILEGES* = 0x00010000
  SQL_ISV_TABLES* = 0x00020000
  SQL_ISV_TRANSLATIONS* = 0x00040000
  SQL_ISV_USAGE_PRIVILEGES* = 0x00080000
  SQL_ISV_VIEW_COLUMN_USAGE* = 0x00100000
  SQL_ISV_VIEW_TABLE_USAGE* = 0x00200000
  SQL_ISV_VIEWS* = 0x00400000
  SQL_KEYSET_CURSOR_ATTRIBUTES1* = 150
  SQL_KEYSET_CURSOR_ATTRIBUTES2* = 151
  SQL_MAX_ASYNC_CONCURRENT_STATEMENTS* = 10022
  SQL_NO_COLUMN_NUMBER* = -1
  SQL_NO_ROW_NUMBER* = -1
  SQL_NOT_DEFERRABLE* = 7
  SQL_NUM_EXTENSIONS* = SQL_EXT_API_LAST-SQL_EXT_API_START+1
  SQL_NUM_FUNCTIONS* = 23
  SQL_ODBC_INTERFACE_CONFORMANCE* = 152
  SQL_OIC_CORE* = 1
  SQL_OIC_LEVEL1* = 2
  SQL_OIC_LEVEL2* = 3
  SQL_OV_ODBC2* = 2
  SQL_OV_ODBC3* = 3
  SQL_PARAM_BIND_BY_COLUMN* = 0
  SQL_PARAM_BIND_TYPE_DEFAULT* = SQL_PARAM_BIND_BY_COLUMN.ULONG
  SQL_PARAM_ARRAY_ROW_COUNTS* = 153
  SQL_PARAM_ARRAY_SELECTS* = 154
  SQL_PARAM_DIAG_UNAVAILABLE* = 1
  SQL_PARAM_ERROR* = 5
  SQL_PARAM_IGNORE* = 1
  SQL_PARAM_PROCEED* = 0
  SQL_PARAM_SUCCESS* = 0
  SQL_PARAM_SUCCESS_WITH_INFO* = 6
  SQL_PARAM_UNUSED* = 7
  SQL_PARC_BATCH* = 1
  SQL_PARC_NO_BATCH* = 2
  SQL_PAS_BATCH* = 1
  SQL_PAS_NO_BATCH* = 2
  SQL_PAS_NO_SELECT* = 3
  SQL_ROW_IGNORE* = 1
  SQL_ROW_NUMBER_UNKNOWN* = -2
  SQL_ROW_PROCEED* = 0
  SQL_ROW_SUCCESS_WITH_INFO* = 6
  SQL_SC_FIPS127_2_TRANSITIONAL* = 0x00000002
  SQL_SC_SQL92_ENTRY* = 0x00000001
  SQL_SC_SQL92_FULL* = 0x00000008
  SQL_SC_SQL92_INTERMEDIATE* = 0x00000004
  SQL_SCC_ISO92_CLI* = 0x00000002
  SQL_SCC_XOPEN_CLI_VERSION1* = 0x00000001
  SQL_SCHEMA_TERM* = SQL_OWNER_TERM
  SQL_SCHEMA_USAGE* = SQL_OWNER_USAGE
  SQL_SDF_CURRENT_DATE* = 0x00000001
  SQL_SDF_CURRENT_TIME* = 0x00000002
  SQL_SDF_CURRENT_TIMESTAMP* = 0x00000004
  SQL_SFKD_CASCADE* = 0x00000001
  SQL_SFKD_NO_ACTION* = 0x00000002
  SQL_SFKD_SET_DEFAULT* = 0x00000004
  SQL_SFKD_SET_NULL* = 0x00000008
  SQL_SFKU_CASCADE* = 0x00000001
  SQL_SFKU_NO_ACTION* = 0x00000002
  SQL_SFKU_SET_DEFAULT* = 0x00000004
  SQL_SFKU_SET_NULL* = 0x00000008
  SQL_SG_DELETE_TABLE* = 0x00000020
  SQL_SG_INSERT_COLUMN* = 0x00000080
  SQL_SG_INSERT_TABLE* = 0x00000040
  SQL_SG_REFERENCES_COLUMN* = 0x00000200
  SQL_SG_REFERENCES_TABLE* = 0x00000100
  SQL_SG_SELECT_TABLE* = 0x00000400
  SQL_SG_UPDATE_COLUMN* = 0x00001000
  SQL_SG_UPDATE_TABLE* = 0x00000800
  SQL_SG_USAGE_ON_CHARACTER_SET* = 0x00000002
  SQL_SG_USAGE_ON_COLLATION* = 0x00000004
  SQL_SG_USAGE_ON_DOMAIN* = 0x00000001
  SQL_SG_USAGE_ON_TRANSLATION* = 0x00000008
  SQL_SG_WITH_GRANT_OPTION* = 0x00000010
  SQL_SNVF_BIT_LENGTH* = 0x00000001
  SQL_SNVF_CHAR_LENGTH* = 0x00000002
  SQL_SNVF_CHARACTER_LENGTH* = 0x00000004
  SQL_SNVF_EXTRACT* = 0x00000008
  SQL_SNVF_OCTET_LENGTH* = 0x00000010
  SQL_SNVF_POSITION* = 0x00000020
  SQL_SP_BETWEEN* = 0x00000800
  SQL_SP_COMPARISON* = 0x00001000
  SQL_SP_EXISTS* = 0x00000001
  SQL_SP_IN* = 0x00000400
  SQL_SP_ISNOTNULL* = 0x00000002
  SQL_SP_ISNULL* = 0x00000004
  SQL_SP_LIKE* = 0x00000200
  SQL_SP_MATCH_FULL* = 0x00000008
  SQL_SP_MATCH_PARTIAL* = 0x00000010
  SQL_SP_MATCH_UNIQUE_FULL* = 0x00000020
  SQL_SP_MATCH_UNIQUE_PARTIAL* = 0x00000040
  SQL_SP_OVERLAPS* = 0x00000080
  SQL_SP_QUANTIFIED_COMPARISON* = 0x00002000
  SQL_SP_UNIQUE* = 0x00000100
  SQL_SQL_CONFORMANCE* = 118
  SQL_SQL92_DATETIME_FUNCTIONS* = 155
  SQL_SQL92_FOREIGN_KEY_DELETE_RULE* = 156
  SQL_SQL92_FOREIGN_KEY_UPDATE_RULE* = 157
  SQL_SQL92_GRANT* = 158
  SQL_SQL92_NUMERIC_VALUE_FUNCTIONS* = 159
  SQL_SQL92_PREDICATES* = 160
  SQL_SQL92_RELATIONAL_JOIN_OPERATORS* = 161
  SQL_SQL92_REVOKE* = 162
  SQL_SQL92_ROW_VALUE_CONSTRUCTOR* = 163
  SQL_SQL92_STRING_FUNCTIONS* = 164
  SQL_SQL92_VALUE_EXPRESSIONS* = 165
  SQL_SR_CASCADE* = 0x00000020
  SQL_SR_DELETE_TABLE* = 0x00000080
  SQL_SR_GRANT_OPTION_FOR* = 0x00000010
  SQL_SR_INSERT_COLUMN* = 0x00000200
  SQL_SR_INSERT_TABLE* = 0x00000100
  SQL_SR_REFERENCES_COLUMN* = 0x00000800
  SQL_SR_REFERENCES_TABLE* = 0x00000400
  SQL_SR_RESTRICT* = 0x00000040
  SQL_SR_SELECT_TABLE* = 0x00001000
  SQL_SR_UPDATE_COLUMN* = 0x00004000
  SQL_SR_UPDATE_TABLE* = 0x00002000
  SQL_SR_USAGE_ON_CHARACTER_SET* = 0x00000002
  SQL_SR_USAGE_ON_COLLATION* = 0x00000004
  SQL_SR_USAGE_ON_DOMAIN* = 0x00000001
  SQL_SR_USAGE_ON_TRANSLATION* = 0x00000008
  SQL_SRJO_CORRESPONDING_CLAUSE* = 0x00000001
  SQL_SRJO_CROSS_JOIN* = 0x00000002
  SQL_SRJO_EXCEPT_JOIN* = 0x00000004
  SQL_SRJO_FULL_OUTER_JOIN* = 0x00000008
  SQL_SRJO_INNER_JOIN* = 0x00000010
  SQL_SRJO_INTERSECT_JOIN* = 0x00000020
  SQL_SRJO_LEFT_OUTER_JOIN* = 0x00000040
  SQL_SRJO_NATURAL_JOIN* = 0x00000080
  SQL_SRJO_RIGHT_OUTER_JOIN* = 0x00000100
  SQL_SRJO_UNION_JOIN* = 0x00000200
  SQL_SRVC_DEFAULT* = 0x00000004
  SQL_SRVC_NULL* = 0x00000002
  SQL_SRVC_ROW_SUBQUERY* = 0x00000008
  SQL_SRVC_VALUE_EXPRESSION* = 0x00000001
  SQL_SSF_CONVERT* = 0x00000001
  SQL_SSF_LOWER* = 0x00000002
  SQL_SSF_SUBSTRING* = 0x00000008
  SQL_SSF_TRANSLATE* = 0x00000010
  SQL_SSF_TRIM_BOTH* = 0x00000020
  SQL_SSF_TRIM_LEADING* = 0x00000040
  SQL_SSF_TRIM_TRAILING* = 0x00000080
  SQL_SSF_UPPER* = 0x00000004
  SQL_STANDARD_CLI_CONFORMANCE* = 166
  SQL_STATIC_CURSOR_ATTRIBUTES1* = 167
  SQL_STATIC_CURSOR_ATTRIBUTES2* = 168
  SQL_SU_DML_STATEMENTS* = SQL_OU_DML_STATEMENTS
  SQL_SU_INDEX_DEFINITION* = SQL_OU_INDEX_DEFINITION
  SQL_SU_PRIVILEGE_DEFINITION* = SQL_OU_PRIVILEGE_DEFINITION
  SQL_SU_PROCEDURE_INVOCATION* = SQL_OU_PROCEDURE_INVOCATION
  SQL_SU_TABLE_DEFINITION* = SQL_OU_TABLE_DEFINITION
  SQL_SVE_CASE* = 0x00000001
  SQL_SVE_CAST* = 0x00000002
  SQL_SVE_COALESCE* = 0x00000004
  SQL_SVE_NULLIF* = 0x00000008
  SQL_UB_FIXED* = SQL_UB_ON
  SQL_UB_VARIABLE* = 2
  SQL_UNION_STATEMENT* = SQL_UNION
  SQL_UPDATE_BY_BOOKMARK* = 5
  SQL_US_UNION* = SQL_U_UNION
  SQL_US_UNION_ALL* = SQL_U_UNION_ALL
  SQL_DESC_ROWVER* = 35
  SQL_GUID* = -11
  SQL_C_GUID* = SQL_GUID
  SQL_ATTR_ANSI_APP* = 115
  SQL_AA_TRUE* = 1
  SQL_AA_FALSE* = 0
  # TRACE_VERSION* = 1000
  TRACE_ON* = 1
  SQL_ODBC_KEYWORDS* = "ABSOLUTE, ACTION, ADA, ADD, ALL, ALLOCATE, ALTER, AND, ANY, ARE, AS, " &
    "ASC, ASSERTION, AT, AUTHORIZATION, AVG, " &
    "BEGIN, BETWEEN, BIT, BIT_LENGTH, BOTH, BY, CASCADE, CASCADED, CASE, CAST, CATALOG, " &
    "CHAR, CHAR_LENGTH, CHARACTER, CHARACTER_LENGTH, CHECK, CLOSE, COALESCE, " &
    "COLLATE, COLLATION, COLUMN, COMMIT, CONNECT, CONNECTION, CONSTRAINT, " &
    "CONSTRAINTS, CONTINUE, CONVERT, CORRESPONDING, COUNT, CREATE, CROSS, CURRENT, " &
    "CURRENT_DATE, CURRENT_TIME, CURRENT_TIMESTAMP, CURRENT_USER, CURSOR, " &
    "DATE, DAY, DEALLOCATE, DEC, DECIMAL, DECLARE, DEFAULT, DEFERRABLE, " &
    "DEFERRED, DELETE, DESC, DESCRIBE, DESCRIPTOR, DIAGNOSTICS, DISCONNECT, " &
    "DISTINCT, DOMAIN, DOUBLE, DROP, " &
    "ELSE, END, END-EXEC, ESCAPE, EXCEPT, EXCEPTION, EXEC, EXECUTE, " &
    "EXISTS, EXTERNAL, EXTRACT, " &
    "FALSE, FETCH, FIRST, FLOAT, FOR, FOREIGN, FORTRAN, FOUND, FROM, FULL, " &
    "GET, GLOBAL, GO, GOTO, GRANT, GROUP, HAVING, HOUR, " &
    "IDENTITY, IMMEDIATE, IN, INCLUDE, INDEX, INDICATOR, INITIALLY, INNER, " &
    "INPUT, INSENSITIVE, INSERT, INT, INTEGER, INTERSECT, INTERVAL, INTO, IS, ISOLATION, " &
    "JOIN, KEY, LANGUAGE, LAST, LEADING, LEFT, LEVEL, LIKE, LOCAL, LOWER, " &
    "MATCH, MAX, MIN, MINUTE, MODULE, MONTH, " &
    "NAMES, NATIONAL, NATURAL, NCHAR, NEXT, NO, NONE, NOT, NULL, NULLIF, NUMERIC, " &
    "OCTET_LENGTH, OF, ON, ONLY, OPEN, OPTION, OR, ORDER, OUTER, OUTPUT, OVERLAPS, " &
    "PAD, PARTIAL, PASCAL, PLI, POSITION, PRECISION, PREPARE, PRESERVE, " &
    "PRIMARY, PRIOR, PRIVILEGES, PROCEDURE, PUBLIC, " &
    "READ, REAL, REFERENCES, RELATIVE, RESTRICT, REVOKE, RIGHT, ROLLBACK, ROWS, " &
    "SCHEMA, SCROLL, SECOND, SECTION, SELECT, SESSION, SESSION_USER, SET, SIZE, " &
    "SMALLINT, SOME, SPACE, SQL, SQLCA, SQLCODE, SQLERROR, SQLSTATE, SQLWARNING, " &
    "SUBSTRING, SUM, SYSTEM_USER, " &
    "TABLE, TEMPORARY, THEN, TIME, TIMESTAMP, TIMEZONE_HOUR, TIMEZONE_MINUTE, " &
    "TO, TRAILING, TRANSACTION, TRANSLATE, TRANSLATION, TRIM, TRUE, " &
    "UNION, UNIQUE, UNKNOWN, UPDATE, UPPER, USAGE, USER, USING, " &
    "VALUE, VALUES, VARCHAR, VARYING, VIEW, WHEN, WHENEVER, WHERE, WITH, WORK, WRITE, " &
    "YEAR, ZONE"

proc SQLDriverConnect*(P1: SQLHDBC, P2: SQLHWND, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLCHAR, P6: T_SQLSMALLINT, P7: ptr T_SQLSMALLINT, P8: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLBrowseConnect*(P1: SQLHDBC, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColumnPrivileges*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColAttributes*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLUSMALLINT, P4: T_SQLPOINTER, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDescribeParam*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: ptr T_SQLSMALLINT, P4: ptr SQLULEN, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLExtendedFetch*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLINTEGER, P4: ptr T_SQLUINTEGER, P5: ptr T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLForeignKeys*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLCHAR, P9: T_SQLSMALLINT, P10: ptr T_SQLCHAR, P11: T_SQLSMALLINT, P12: ptr T_SQLCHAR, P13: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLMoreResults*(P1: SQLHSTMT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLNativeSql*(P1: SQLHDBC, P2: ptr T_SQLCHAR, P3: T_SQLINTEGER, P4: ptr T_SQLCHAR, P5: T_SQLINTEGER, P6: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLNumParams*(P1: SQLHSTMT, P2: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLParamOptions*(P1: SQLHSTMT, P2: T_SQLUINTEGER, P3: ptr T_SQLUINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLPrimaryKeys*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLProcedureColumns*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLProcedures*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetPos*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLUSMALLINT, P4: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLTablePrivileges*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDrivers*(P1: SQLHENV, P2: T_SQLUSMALLINT, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLBindParameter*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLSMALLINT, P5: T_SQLSMALLINT, P6: SQLULEN, P7: T_SQLSMALLINT, P8: T_SQLPOINTER, P9: SQLLEN, P10: ptr SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetScrollOptions*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: SQLLEN, P4: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc ODBCGetTryWaitValue*(): DWORD {.winapi, dynlib: "odbc32", importc.}
proc ODBCSetTryWaitValue*(P1: DWORD): BOOL {.winapi, dynlib: "odbc32", importc.}
proc TraceOpenLogFile*(P1: LPWSTR, P2: LPWSTR, P3: DWORD): RETCODE {.winapi, dynlib: "odbctrac", importc.}
proc TraceCloseLogFile*(): RETCODE {.winapi, dynlib: "odbctrac", importc.}
proc TraceReturn*(P1: RETCODE, P2: RETCODE): VOID {.winapi, dynlib: "odbctrac", importc.}
proc TraceVersion*(): DWORD {.winapi, dynlib: "odbctrac", importc.}
proc SQLBulkOperations*(P1: SQLHSTMT, P2: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLAllocHandleStd*(P1: T_SQLSMALLINT, P2: SQLHANDLE, P3: ptr SQLHANDLE): SQLRETURN {.winapi, dynlib: "odbc32", importc.}

# ext/sqlucode.nim

const
  SQL_WCHAR* = -8
  SQL_WVARCHAR* = -9
  SQL_WLONGVARCHAR* = -10
  SQL_C_WCHAR* = SQL_WCHAR
  SQL_SQLSTATE_SIZEW* = 10

when not defined(winansi):
  const
    SQL_C_TCHAR* = SQL_C_WCHAR

else:
  const
    SQL_C_TCHAR* = SQL_C_CHAR

const
  SQL_UNICODE* = SQL_WCHAR
  SQL_UNICODE_VARCHAR* = SQL_WVARCHAR
  SQL_UNICODE_LONGVARCHAR* = SQL_WLONGVARCHAR
  SQL_UNICODE_CHAR* = SQL_WCHAR

proc SQLBrowseConnectA*(P1: SQLHDBC, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLBrowseConnectW*(P1: SQLHDBC, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColAttributeA*(P1: SQLHSTMT, P2: T_SQLSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLPOINTER, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: T_SQLPOINTER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColAttributeW*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLUSMALLINT, P4: T_SQLPOINTER, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: T_SQLPOINTER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColAttributesA*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLUSMALLINT, P4: T_SQLPOINTER, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColAttributesW*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLUSMALLINT, P4: T_SQLPOINTER, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColumnPrivilegesA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColumnPrivilegesW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLWCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColumnsA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLColumnsW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLWCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLConnectA*(P1: SQLHDBC, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLConnectW*(P1: SQLHDBC, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDataSourcesA*(P1: SQLHENV, P2: T_SQLUSMALLINT, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDataSourcesW*(P1: SQLHENV, P2: T_SQLUSMALLINT, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDescribeColA*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr SQLULEN, P8: ptr T_SQLSMALLINT, P9: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDescribeColW*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr SQLULEN, P8: ptr T_SQLSMALLINT, P9: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDriverConnectA*(P1: SQLHDBC, P2: SQLHWND, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLCHAR, P6: T_SQLSMALLINT, P7: ptr T_SQLSMALLINT, P8: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDriverConnectW*(P1: SQLHDBC, P2: SQLHWND, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLWCHAR, P6: T_SQLSMALLINT, P7: ptr T_SQLSMALLINT, P8: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDriversA*(P1: SQLHENV, P2: T_SQLUSMALLINT, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLDriversW*(P1: SQLHENV, P2: T_SQLUSMALLINT, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLErrorA*(P1: SQLHENV, P2: SQLHDBC, P3: SQLHSTMT, P4: ptr T_SQLCHAR, P5: ptr T_SQLINTEGER, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLErrorW*(P1: SQLHENV, P2: SQLHDBC, P3: SQLHSTMT, P4: ptr T_SQLWCHAR, P5: ptr T_SQLINTEGER, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLExecDirectA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLExecDirectW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLForeignKeysA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLCHAR, P9: T_SQLSMALLINT, P10: ptr T_SQLCHAR, P11: T_SQLSMALLINT, P12: ptr T_SQLCHAR, P13: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLForeignKeysW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLWCHAR, P9: T_SQLSMALLINT, P10: ptr T_SQLWCHAR, P11: T_SQLSMALLINT, P12: ptr T_SQLWCHAR, P13: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetConnectAttrA*(P1: SQLHDBC, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER, P5: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetConnectAttrW*(P1: SQLHDBC, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER, P5: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetConnectOptionA*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: T_SQLPOINTER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetConnectOptionW*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: T_SQLPOINTER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetCursorNameA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetCursorNameW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetInfoA*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: T_SQLPOINTER, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetInfoW*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: T_SQLPOINTER, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetTypeInfoA*(P1: SQLHSTMT, P2: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetTypeInfoW*(P1: SQLHSTMT, P2: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLNativeSqlA*(P1: SQLHDBC, P2: ptr T_SQLCHAR, P3: T_SQLINTEGER, P4: ptr T_SQLCHAR, P5: T_SQLINTEGER, P6: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLNativeSqlW*(P1: SQLHDBC, P2: ptr T_SQLWCHAR, P3: T_SQLINTEGER, P4: ptr T_SQLWCHAR, P5: T_SQLINTEGER, P6: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLPrepareA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLPrepareW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLPrimaryKeysA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLPrimaryKeysW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLProcedureColumnsA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLProcedureColumnsW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLWCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLProceduresA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLProceduresW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetConnectAttrA*(P1: SQLHDBC, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetConnectAttrW*(P1: SQLHDBC, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetConnectOptionA*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: SQLULEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetConnectOptionW*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: SQLULEN): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetCursorNameA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetCursorNameW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSpecialColumnsA*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLCHAR, P6: T_SQLSMALLINT, P7: ptr T_SQLCHAR, P8: T_SQLSMALLINT, P9: T_SQLUSMALLINT, P10: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSpecialColumnsW*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLWCHAR, P6: T_SQLSMALLINT, P7: ptr T_SQLWCHAR, P8: T_SQLSMALLINT, P9: T_SQLUSMALLINT, P10: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLStatisticsA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: T_SQLUSMALLINT, P9: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLStatisticsW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: T_SQLUSMALLINT, P9: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLTablePrivilegesA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLTablePrivilegesW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLTablesA*(P1: SQLHSTMT, P2: ptr T_SQLCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLTablesW*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLWCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDescFieldA*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLPOINTER, P5: T_SQLINTEGER, P6: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDescFieldW*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLPOINTER, P5: T_SQLINTEGER, P6: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetDescFieldA*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLPOINTER, P5: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetDescFieldW*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLPOINTER, P5: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDescRecA*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: ptr T_SQLCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr T_SQLSMALLINT, P8: ptr SQLLEN, P9: ptr T_SQLSMALLINT, P10: ptr T_SQLSMALLINT, P11: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDescRecW*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr T_SQLSMALLINT, P8: ptr SQLLEN, P9: ptr T_SQLSMALLINT, P10: ptr T_SQLSMALLINT, P11: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDiagFieldA*(P1: T_SQLSMALLINT, P2: SQLHANDLE, P3: T_SQLSMALLINT, P4: T_SQLSMALLINT, P5: T_SQLPOINTER, P6: T_SQLSMALLINT, P7: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDiagFieldW*(P1: T_SQLSMALLINT, P2: SQLHANDLE, P3: T_SQLSMALLINT, P4: T_SQLSMALLINT, P5: T_SQLPOINTER, P6: T_SQLSMALLINT, P7: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDiagRecA*(P1: T_SQLSMALLINT, P2: SQLHANDLE, P3: T_SQLSMALLINT, P4: ptr T_SQLCHAR, P5: ptr T_SQLINTEGER, P6: ptr T_SQLCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetDiagRecW*(P1: T_SQLSMALLINT, P2: SQLHANDLE, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: ptr T_SQLINTEGER, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetStmtAttrA*(P1: SQLHSTMT, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER, P5: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLGetStmtAttrW*(P1: SQLHSTMT, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER, P5: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetStmtAttrA*(P1: SQLHSTMT, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}
proc SQLSetStmtAttrW*(P1: SQLHSTMT, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc.}

when not defined(winansi):
  proc SQLBrowseConnect*(P1: SQLHDBC, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLBrowseConnectW".}
  # proc SQLColAttribute*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLUSMALLINT, P4: T_SQLPOINTER, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: T_SQLPOINTER): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLColAttributeW".}
  # proc SQLColAttributes*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: T_SQLUSMALLINT, P4: T_SQLPOINTER, P5: T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr SQLLEN): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLColAttributesW".}
  proc SQLColumnPrivileges*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLWCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLColumnPrivilegesW".}
  proc SQLColumns*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLWCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLColumnsW".}
  proc SQLConnect*(P1: SQLHDBC, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLConnectW".}
  proc SQLDataSources*(P1: SQLHENV, P2: T_SQLUSMALLINT, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLDataSourcesW".}
  proc SQLDescribeCol*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr SQLULEN, P8: ptr T_SQLSMALLINT, P9: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLDescribeColW".}
  proc SQLDriverConnect*(P1: SQLHDBC, P2: SQLHWND, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLWCHAR, P6: T_SQLSMALLINT, P7: ptr T_SQLSMALLINT, P8: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLDriverConnectW".}
  proc SQLDrivers*(P1: SQLHENV, P2: T_SQLUSMALLINT, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLDriversW".}
  proc SQLError*(P1: SQLHENV, P2: SQLHDBC, P3: SQLHSTMT, P4: ptr T_SQLWCHAR, P5: ptr T_SQLINTEGER, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLErrorW".}
  proc SQLExecDirect*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLExecDirectW".}
  proc SQLForeignKeys*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLWCHAR, P9: T_SQLSMALLINT, P10: ptr T_SQLWCHAR, P11: T_SQLSMALLINT, P12: ptr T_SQLWCHAR, P13: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLForeignKeysW".}
  # proc SQLGetConnectAttr*(P1: SQLHDBC, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER, P5: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLGetConnectAttrW".}
  # proc SQLGetConnectOption*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: T_SQLPOINTER): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLGetConnectOptionW".}
  proc SQLGetCursorName*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLGetCursorNameW".}
  # proc SQLGetDescField*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLPOINTER, P5: T_SQLINTEGER, P6: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLGetDescFieldW".}
  proc SQLGetDescRec*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT, P6: ptr T_SQLSMALLINT, P7: ptr T_SQLSMALLINT, P8: ptr SQLLEN, P9: ptr T_SQLSMALLINT, P10: ptr T_SQLSMALLINT, P11: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLGetDescRecW".}
  # proc SQLGetDiagField*(P1: T_SQLSMALLINT, P2: SQLHANDLE, P3: T_SQLSMALLINT, P4: T_SQLSMALLINT, P5: T_SQLPOINTER, P6: T_SQLSMALLINT, P7: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLGetDiagFieldW".}
  proc SQLGetDiagRec*(P1: T_SQLSMALLINT, P2: SQLHANDLE, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: ptr T_SQLINTEGER, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLGetDiagRecW".}
  # proc SQLGetInfo*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: T_SQLPOINTER, P4: T_SQLSMALLINT, P5: ptr T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLGetInfoW".}
  # proc SQLGetStmtAttr*(P1: SQLHSTMT, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER, P5: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLGetStmtAttrW".}
  # proc SQLGetTypeInfo*(P1: SQLHSTMT, P2: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLGetTypeInfoW".}
  proc SQLNativeSql*(P1: SQLHDBC, P2: ptr T_SQLWCHAR, P3: T_SQLINTEGER, P4: ptr T_SQLWCHAR, P5: T_SQLINTEGER, P6: ptr T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLNativeSqlW".}
  proc SQLPrepare*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLPrepareW".}
  proc SQLPrimaryKeys*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLPrimaryKeysW".}
  proc SQLProcedureColumns*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLWCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLProcedureColumnsW".}
  proc SQLProcedures*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLProceduresW".}
  # proc SQLSetConnectAttr*(P1: SQLHDBC, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLSetConnectAttrW".}
  # proc SQLSetConnectOption*(P1: SQLHDBC, P2: T_SQLUSMALLINT, P3: SQLULEN): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLSetConnectOptionW".}
  proc SQLSetCursorName*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLSetCursorNameW".}
  # proc SQLSetDescField*(P1: SQLHDESC, P2: T_SQLSMALLINT, P3: T_SQLSMALLINT, P4: T_SQLPOINTER, P5: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLSetDescFieldW".}
  # proc SQLSetStmtAttr*(P1: SQLHSTMT, P2: T_SQLINTEGER, P3: T_SQLPOINTER, P4: T_SQLINTEGER): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLSetStmtAttrW".}
  proc SQLSpecialColumns*(P1: SQLHSTMT, P2: T_SQLUSMALLINT, P3: ptr T_SQLWCHAR, P4: T_SQLSMALLINT, P5: ptr T_SQLWCHAR, P6: T_SQLSMALLINT, P7: ptr T_SQLWCHAR, P8: T_SQLSMALLINT, P9: T_SQLUSMALLINT, P10: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLSpecialColumnsW".}
  proc SQLStatistics*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: T_SQLUSMALLINT, P9: T_SQLUSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLStatisticsW".}
  proc SQLTablePrivileges*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLTablePrivilegesW".}
  proc SQLTables*(P1: SQLHSTMT, P2: ptr T_SQLWCHAR, P3: T_SQLSMALLINT, P4: ptr T_SQLWCHAR, P5: T_SQLSMALLINT, P6: ptr T_SQLWCHAR, P7: T_SQLSMALLINT, P8: ptr T_SQLWCHAR, P9: T_SQLSMALLINT): SQLRETURN {.winapi, dynlib: "odbc32", importc: "SQLTablesW".}

# ext/odbcinst.nim

const
  ODBC_ADD_DSN* = 1
  ODBC_CONFIG_DSN* = 2
  ODBC_REMOVE_DSN* = 3
  ODBC_ADD_SYS_DSN* = 4
  ODBC_CONFIG_SYS_DSN* = 5
  ODBC_REMOVE_SYS_DSN* = 6
  ODBC_REMOVE_DEFAULT_DSN* = 7
  ODBC_INSTALL_INQUIRY* = 1
  ODBC_INSTALL_COMPLETE* = 2
  ODBC_INSTALL_DRIVER* = 1
  ODBC_REMOVE_DRIVER* = 2
  ODBC_CONFIG_DRIVER* = 3
  ODBC_CONFIG_DRIVER_MAX* = 100
  ODBC_BOTH_DSN* = 0
  ODBC_USER_DSN* = 1
  ODBC_SYSTEM_DSN* = 2
  ODBC_ERROR_GENERAL_ERR* = 1
  ODBC_ERROR_INVALID_BUFF_LEN* = 2
  ODBC_ERROR_INVALID_HWND* = 3
  ODBC_ERROR_INVALID_STR* = 4
  ODBC_ERROR_INVALID_REQUEST_TYPE* = 5
  ODBC_ERROR_COMPONENT_NOT_FOUND* = 6
  ODBC_ERROR_INVALID_NAME* = 7
  ODBC_ERROR_INVALID_KEYWORD_VALUE* = 8
  ODBC_ERROR_INVALID_DSN* = 9
  ODBC_ERROR_INVALID_INF* = 10
  ODBC_ERROR_REQUEST_FAILED* = 11
  ODBC_ERROR_INVALID_PATH* = 12
  ODBC_ERROR_LOAD_LIB_FAILED* = 13
  ODBC_ERROR_INVALID_PARAM_SEQUENCE* = 14
  ODBC_ERROR_INVALID_LOG_FILE* = 15
  ODBC_ERROR_USER_CANCELED* = 16
  ODBC_ERROR_USAGE_UPDATE_FAILED* = 17
  ODBC_ERROR_CREATE_DSN_FAILED* = 18
  ODBC_ERROR_WRITING_SYSINFO_FAILED* = 19
  ODBC_ERROR_REMOVE_DSN_FAILED* = 20
  ODBC_ERROR_OUT_OF_MEM* = 21
  ODBC_ERROR_OUTPUT_STRING_TRUNCATED* = 22

proc ConfigDSN*(P1: HWND, P2: WORD, P3: LPCSTR, P4: LPCSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc ConfigDSNW*(P1: HWND, P2: WORD, P3: LPCWSTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc ConfigTranslator*(P1: HWND, P2: ptr DWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLConfigDataSource*(P1: HWND, P2: WORD, P3: LPCSTR, P4: LPCSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLConfigDataSourceW*(P1: HWND, P2: WORD, P3: LPCWSTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLCreateDataSource*(P1: HWND, P2: LPCSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLCreateDataSourceW*(P1: HWND, P2: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLGetAvailableDrivers*(P1: LPCSTR, P2: LPSTR, P3: WORD, P4: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLGetAvailableDriversW*(P1: LPCWSTR, P2: LPWSTR, P3: WORD, P4: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLGetInstalledDrivers*(P1: LPSTR, P2: WORD, P3: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLGetInstalledDriversW*(P1: LPWSTR, P2: WORD, P3: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLGetPrivateProfileString*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: LPSTR, P5: int32, P6: LPCSTR): int32 {.winapi, dynlib: "odbccp32", importc.}
proc SQLGetPrivateProfileStringW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPWSTR, P5: int32, P6: LPCWSTR): int32 {.winapi, dynlib: "odbccp32", importc.}
proc SQLGetTranslator*(P1: HWND, P2: LPSTR, P3: WORD, P4: ptr WORD, P5: LPSTR, P6: WORD, P7: ptr WORD, P8: ptr DWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLGetTranslatorW*(P1: HWND, P2: LPWSTR, P3: WORD, P4: ptr WORD, P5: LPWSTR, P6: WORD, P7: ptr WORD, P8: ptr DWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallDriver*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR, P4: WORD, P5: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallDriverManager*(P1: LPSTR, P2: WORD, P3: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallDriverManagerW*(P1: LPWSTR, P2: WORD, P3: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallDriverW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: WORD, P5: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallODBC*(P1: HWND, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallODBCW*(P1: HWND, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLManageDataSources*(P1: HWND): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLRemoveDefaultDataSource*(): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLRemoveDSNFromIni*(P1: LPCSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLRemoveDSNFromIniW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLValidDSN*(P1: LPCSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLValidDSNW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLWriteDSNToIni*(P1: LPCSTR, P2: LPCSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLWriteDSNToIniW*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLWritePrivateProfileString*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLWritePrivateProfileStringW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc ConfigDriver*(P1: HWND, P2: WORD, P3: LPCSTR, P4: LPCSTR, P5: LPSTR, P6: WORD, P7: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc ConfigDriverW*(P1: HWND, P2: WORD, P3: LPCWSTR, P4: LPCWSTR, P5: LPWSTR, P6: WORD, P7: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLConfigDriver*(P1: HWND, P2: WORD, P3: LPCSTR, P4: LPCSTR, P5: LPSTR, P6: WORD, P7: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLConfigDriverW*(P1: HWND, P2: WORD, P3: LPCWSTR, P4: LPCWSTR, P5: LPWSTR, P6: WORD, P7: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallTranslator*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: LPSTR, P5: WORD, P6: ptr WORD, P7: WORD, P8: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallTranslatorW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPWSTR, P5: WORD, P6: ptr WORD, P7: WORD, P8: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLRemoveDriver*(P1: LPCSTR, P2: BOOL, P3: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLRemoveDriverManager*(P1: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLRemoveDriverW*(P1: LPCWSTR, P2: BOOL, P3: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLRemoveTranslator*(P1: LPCSTR, P2: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLRemoveTranslatorW*(P1: LPCWSTR, P2: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLGetConfigMode*(P1: ptr UWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallDriverEx*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR, P4: WORD, P5: ptr WORD, P6: WORD, P7: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallDriverExW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: WORD, P5: ptr WORD, P6: WORD, P7: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallerError*(P1: WORD, P2: ptr DWORD, P3: LPSTR, P4: WORD, P5: ptr WORD): SQLRETURN {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallerErrorW*(P1: WORD, P2: ptr DWORD, P3: LPWSTR, P4: WORD, P5: ptr WORD): SQLRETURN {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallTranslatorEx*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR, P4: WORD, P5: ptr WORD, P6: WORD, P7: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLInstallTranslatorExW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: WORD, P5: ptr WORD, P6: WORD, P7: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLPostInstallerError*(P1: DWORD, P2: LPCSTR): SQLRETURN {.winapi, dynlib: "odbccp32", importc.}
proc SQLPostInstallerErrorW*(P1: DWORD, P2: LPCWSTR): SQLRETURN {.winapi, dynlib: "odbccp32", importc.}
proc SQLReadFileDSN*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: LPSTR, P5: WORD, P6: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLReadFileDSNW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPWSTR, P5: WORD, P6: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLSetConfigMode*(P1: UWORD): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLWriteFileDSN*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}
proc SQLWriteFileDSNW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc.}

when not defined(winansi):
  proc SQLConfigDataSource*(P1: HWND, P2: WORD, P3: LPCWSTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLConfigDataSourceW".}
  proc SQLConfigDriver*(P1: HWND, P2: WORD, P3: LPCWSTR, P4: LPCWSTR, P5: LPWSTR, P6: WORD, P7: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLConfigDriverW".}
  proc SQLCreateDataSource*(P1: HWND, P2: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLCreateDataSourceW".}
  proc SQLGetAvailableDrivers*(P1: LPCWSTR, P2: LPWSTR, P3: WORD, P4: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLGetAvailableDriversW".}
  proc SQLGetInstalledDrivers*(P1: LPWSTR, P2: WORD, P3: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLGetInstalledDriversW".}
  proc SQLGetPrivateProfileString*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPWSTR, P5: int32, P6: LPCWSTR): int32 {.winapi, dynlib: "odbccp32", importc: "SQLGetPrivateProfileStringW".}
  proc SQLGetTranslator*(P1: HWND, P2: LPWSTR, P3: WORD, P4: ptr WORD, P5: LPWSTR, P6: WORD, P7: ptr WORD, P8: ptr DWORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLGetTranslatorW".}
  proc SQLInstallDriver*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: WORD, P5: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLInstallDriverW".}
  proc SQLInstallDriverEx*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: WORD, P5: ptr WORD, P6: WORD, P7: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLInstallDriverExW".}
  proc SQLInstallDriverManager*(P1: LPWSTR, P2: WORD, P3: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLInstallDriverManagerW".}
  proc SQLInstallerError*(P1: WORD, P2: ptr DWORD, P3: LPWSTR, P4: WORD, P5: ptr WORD): SQLRETURN {.winapi, dynlib: "odbccp32", importc: "SQLInstallerErrorW".}
  proc SQLInstallODBC*(P1: HWND, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLInstallODBCW".}
  proc SQLInstallTranslator*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPWSTR, P5: WORD, P6: ptr WORD, P7: WORD, P8: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLInstallTranslatorW".}
  proc SQLInstallTranslatorEx*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: WORD, P5: ptr WORD, P6: WORD, P7: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLInstallTranslatorExW".}
  proc SQLPostInstallerError*(P1: DWORD, P2: LPCWSTR): SQLRETURN {.winapi, dynlib: "odbccp32", importc: "SQLPostInstallerErrorW".}
  proc SQLReadFileDSN*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPWSTR, P5: WORD, P6: ptr WORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLReadFileDSNW".}
  proc SQLRemoveDriver*(P1: LPCWSTR, P2: BOOL, P3: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLRemoveDriverW".}
  proc SQLRemoveDSNFromIni*(P1: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLRemoveDSNFromIniW".}
  proc SQLRemoveTranslator*(P1: LPCWSTR, P2: LPDWORD): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLRemoveTranslatorW".}
  proc SQLValidDSN*(P1: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLValidDSNW".}
  proc SQLWriteDSNToIni*(P1: LPCWSTR, P2: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLWriteDSNToIniW".}
  proc SQLWriteFileDSN*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLWriteFileDSNW".}
  proc SQLWritePrivateProfileString*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR): BOOL {.winapi, dynlib: "odbccp32", importc: "SQLWritePrivateProfileStringW".}

# ext/ntdef.nim
const
  # SECTION_INHERIT* = enum
  ViewShare* = 1
  ViewUnmap* = 2

const
  OBJ_INHERIT* = 0x0002
  OBJ_PERMANENT* = 0x0010
  OBJ_EXCLUSIVE* = 0x0020
  OBJ_CASE_INSENSITIVE* = 0x0040
  OBJ_OPENIF* = 0x0080
  OBJ_OPENLINK* = 0x0100
  OBJ_VALID_ATTRIBUTES* = 0x01F2

type
  NTSTATUS* = int32
  PNTSTATUS* = ptr int32
  UNICODE_STRING* {.final, pure.} = object
    Length*: USHORT
    MaximumLength*: USHORT
    Buffer*: PWSTR
  PUNICODE_STRING* = ptr UNICODE_STRING
  PCUNICODE_STRING* = ptr UNICODE_STRING
  STRING* {.final, pure.} = object
    Length*: USHORT
    MaximumLength*: USHORT
    Buffer*: PCHAR
  ANSI_STRING* = STRING
  OEM_STRING* = STRING
  PSTRING* = ptr STRING
  PANSI_STRING* = ptr STRING
  POEM_STRING* = ptr STRING
  PHYSICAL_ADDRESS* = LARGE_INTEGER
  PPHYSICAL_ADDRESS* = ptr LARGE_INTEGER
  SECTION_INHERIT* = int32
  OBJECT_ATTRIBUTES* {.final, pure.} = object
    Length*: ULONG
    RootDirectory*: HANDLE
    ObjectName*: PUNICODE_STRING
    Attributes*: ULONG
    SecurityDescriptor*: PVOID
    SecurityQualityOfService*: PVOID
  POBJECT_ATTRIBUTES* = ptr OBJECT_ATTRIBUTES

proc InitializeObjectAttributes*(p: ptr OBJECT_ATTRIBUTES, n: ptr UNICODE_STRING, a: uint32, r: HANDLE, s: pointer): void =
  p.Length = OBJECT_ATTRIBUTES.sizeof.ULONG
  p.RootDirectory = r
  p.Attributes = a
  p.ObjectName = n
  p.SecurityDescriptor = s
  p.SecurityQualityOfService = nil

proc NT_SUCCESS*(x: int32): bool =
  return x >= 0

# ext/ntsecapi.nim
const
  # MSV1_0_LOGON_SUBMIT_TYPE* = enum
  MsV1_0InteractiveLogon* = 2
  MsV1_0Lm20Logon* = 3
  MsV1_0NetworkLogon* = 4
  MsV1_0SubAuthLogon* = 5
  MsV1_0WorkstationUnlockLogon* = 7
  # MSV1_0_PROFILE_BUFFER_TYPE* = enum
  MsV1_0InteractiveProfile* = 2
  MsV1_0Lm20LogonProfile* = 3
  MsV1_0SmartCardProfile* = 4
  # MSV1_0_AVID* = enum
  MsvAvEOL* = 0
  MsvAvNbComputerName* = 1
  MsvAvNbDomainName* = 2
  MsvAvDnsComputerName* = 3
  MsvAvDnsDomainName* = 4
  # MSV1_0_PROTOCOL_MESSAGE_TYPE* = enum
  MsV1_0Lm20ChallengeRequest* = 0
  MsV1_0Lm20GetChallengeResponse* = 1
  MsV1_0EnumerateUsers* = 2
  MsV1_0GetUserInfo* = 3
  MsV1_0ReLogonUsers* = 4
  MsV1_0ChangePassword* = 5
  MsV1_0ChangeCachedPassword* = 6
  MsV1_0GenericPassthrough* = 7
  MsV1_0CacheLogon* = 8
  MsV1_0SubAuth* = 9
  MsV1_0DeriveCredential* = 10
  MsV1_0CacheLookup* = 11
  # POLICY_LSA_SERVER_ROLE* = enum
  PolicyServerRoleBackup* = 2
  PolicyServerRolePrimary* = 3
  # POLICY_SERVER_ENABLE_STATE* = enum
  PolicyServerEnabled* = 2
  PolicyServerDisabled* = 3
  # POLICY_INFORMATION_CLASS* = enum
  PolicyAuditLogInformation* = 1
  PolicyAuditEventsInformation* = 2
  PolicyPrimaryDomainInformation* = 3
  PolicyPdAccountInformation* = 4
  PolicyAccountDomainInformation* = 5
  PolicyLsaServerRoleInformation* = 6
  PolicyReplicaSourceInformation* = 7
  PolicyDefaultQuotaInformation* = 8
  PolicyModificationInformation* = 9
  PolicyAuditFullSetInformation* = 10
  PolicyAuditFullQueryInformation* = 11
  PolicyDnsDomainInformation* = 12
  PolicyEfsInformation* = 13
  # POLICY_AUDIT_EVENT_TYPE* = enum
  AuditCategorySystem* = 0
  AuditCategoryLogon* = 1
  AuditCategoryObjectAccess* = 2
  AuditCategoryPrivilegeUse* = 3
  AuditCategoryDetailedTracking* = 4
  AuditCategoryPolicyChange* = 5
  AuditCategoryAccountManagement* = 6
  AuditCategoryDirectoryServiceAccess* = 7
  AuditCategoryAccountLogon* = 8
  # POLICY_LOCAL_INFORMATION_CLASS* = enum
  PolicyLocalAuditEventsInformation* = 1
  PolicyLocalPdAccountInformation* = 2
  PolicyLocalAccountDomainInformation* = 3
  PolicyLocalLsaServerRoleInformation* = 4
  PolicyLocalReplicaSourceInformation* = 5
  PolicyLocalModificationInformation* = 6
  PolicyLocalAuditFullSetInformation* = 7
  PolicyLocalAuditFullQueryInformation* = 8
  PolicyLocalDnsDomainInformation* = 9
  PolicyLocalIPSecReferenceInformation* = 10
  PolicyLocalMachinePasswordInformation* = 11
  PolicyLocalQualityOfServiceInformation* = 12
  PolicyLocalPolicyLocationInformation* = 13
  # POLICY_DOMAIN_INFORMATION_CLASS* = enum
  PolicyDomainIPSecReferenceInformation* = 1
  PolicyDomainQualityOfServiceInformation* = 2
  PolicyDomainEfsInformation* = 3
  PolicyDomainPublicKeyInformation* = 4
  PolicyDomainPasswordPolicyInformation* = 5
  PolicyDomainLockoutInformation* = 6
  PolicyDomainKerberosTicketInformation* = 7
  # SECURITY_LOGON_TYPE* = enum
  Interactive* = 2
  Network* = 3
  Batch* = 4
  Service* = 5
  Proxy* = 6
  Unlock* = 7
  # TRUSTED_INFORMATION_CLASS* = enum
  TrustedDomainNameInformation* = 1
  TrustedControllersInformation* = 2
  TrustedPosixOffsetInformation* = 3
  TrustedPasswordInformation* = 4
  TrustedDomainInformationBasic* = 5
  TrustedDomainInformationEx* = 6
  TrustedDomainAuthInformation* = 7
  TrustedDomainFullInformation* = 8

const
  KERB_WRAP_NO_ENCRYPT* = -2147483647
  LOGON_GUEST* = 0x00000001
  LOGON_NOENCRYPTION* = 0x00000002
  LOGON_CACHED_ACCOUNT* = 0x00000004
  LOGON_USED_LM_PASSWORD* = 0x00000008
  LOGON_EXTRA_SIDS* = 0x00000020
  LOGON_SUBAUTH_SESSION_KEY* = 0x00000040
  LOGON_SERVER_TRUST_ACCOUNT* = 0x00000080
  LOGON_NTLMV2_ENABLED* = 0x00000100
  LOGON_RESOURCE_GROUPS* = 0x00000200
  LOGON_PROFILE_PATH_RETURNED* = 0x00000400
  LOGON_GRACE_LOGON* = 0x01000000
  LSA_MODE_PASSWORD_PROTECTED* = 1
  LSA_MODE_INDIVIDUAL_ACCOUNTS* = 2
  LSA_MODE_MANDATORY_ACCESS* = 3
  LSA_MODE_LOG_FULL* = 4
  MSV1_0_CHALLENGE_LENGTH* = 8

proc LSA_SUCCESS*(x: int32): bool =
  return x >= 0

type
  LSA_UNICODE_STRING* = UNICODE_STRING
  PLSA_UNICODE_STRING* = ptr UNICODE_STRING
  LSA_STRING* = STRING
  PLSA_STRING* = ptr STRING
  MSV1_0_LOGON_SUBMIT_TYPE* = int32
  PMSV1_0_LOGON_SUBMIT_TYPE* = ptr MSV1_0_LOGON_SUBMIT_TYPE
  MSV1_0_PROFILE_BUFFER_TYPE* = int32
  PMSV1_0_PROFILE_BUFFER_TYPE* = ptr MSV1_0_PROFILE_BUFFER_TYPE
  MSV1_0_AVID* = int32
  MSV1_0_PROTOCOL_MESSAGE_TYPE* = int32
  PMSV1_0_PROTOCOL_MESSAGE_TYPE* = ptr MSV1_0_PROTOCOL_MESSAGE_TYPE
  POLICY_LSA_SERVER_ROLE* = int32
  PPOLICY_LSA_SERVER_ROLE* = ptr POLICY_LSA_SERVER_ROLE
  POLICY_SERVER_ENABLE_STATE* = int32
  PPOLICY_SERVER_ENABLE_STATE* = ptr POLICY_SERVER_ENABLE_STATE
  POLICY_INFORMATION_CLASS* = int32
  PPOLICY_INFORMATION_CLASS* = ptr POLICY_INFORMATION_CLASS
  POLICY_AUDIT_EVENT_TYPE* = int32
  PPOLICY_AUDIT_EVENT_TYPE* = ptr POLICY_AUDIT_EVENT_TYPE
  POLICY_LOCAL_INFORMATION_CLASS* = int32
  PPOLICY_LOCAL_INFORMATION_CLASS* = ptr POLICY_LOCAL_INFORMATION_CLASS
  POLICY_DOMAIN_INFORMATION_CLASS* = int32
  PPOLICY_DOMAIN_INFORMATION_CLASS* = ptr POLICY_DOMAIN_INFORMATION_CLASS
  SECURITY_LOGON_TYPE* = int32
  PSECURITY_LOGON_TYPE* = ptr SECURITY_LOGON_TYPE
  TRUSTED_INFORMATION_CLASS* = int32
  PTRUSTED_INFORMATION_CLASS* = ptr TRUSTED_INFORMATION_CLASS
  DOMAIN_PASSWORD_INFORMATION* {.final, pure.} = object
    MinPasswordLength*: USHORT
    PasswordHistoryLength*: USHORT
    PasswordProperties*: ULONG
    MaxPasswordAge*: LARGE_INTEGER
    MinPasswordAge*: LARGE_INTEGER
  PDOMAIN_PASSWORD_INFORMATION* = ptr DOMAIN_PASSWORD_INFORMATION
  LSA_ENUMERATION_INFORMATION* {.final, pure.} = object
    Sid*: PSID
  PLSA_ENUMERATION_INFORMATION* = ptr LSA_ENUMERATION_INFORMATION
  LSA_OBJECT_ATTRIBUTES* = OBJECT_ATTRIBUTES
  PLSA_OBJECT_ATTRIBUTES* = ptr OBJECT_ATTRIBUTES
  LSA_TRUST_INFORMATION* {.final, pure.} = object
    Name*: LSA_UNICODE_STRING
    Sid*: PSID
  # TRUSTED_DOMAIN_INFORMATION_BASIC* = LSA_TRUST_INFORMATION
  PLSA_TRUST_INFORMATION* = ptr LSA_TRUST_INFORMATION
  PTRUSTED_DOMAIN_INFORMATION_BASIC* = ptr ptr LSA_TRUST_INFORMATION
  LSA_REFERENCED_DOMAIN_LIST* {.final, pure.} = object
    Entries*: ULONG
    Domains*: PLSA_TRUST_INFORMATION
  PLSA_REFERENCED_DOMAIN_LIST* = ptr LSA_REFERENCED_DOMAIN_LIST
  LSA_TRANSLATED_SID* {.final, pure.} = object
    Use*: SID_NAME_USE
    RelativeId*: ULONG
    DomainIndex*: LONG
  PLSA_TRANSLATED_SID* = ptr LSA_TRANSLATED_SID
  LSA_TRANSLATED_NAME* {.final, pure.} = object
    Use*: SID_NAME_USE
    Name*: LSA_UNICODE_STRING
    DomainIndex*: LONG
  PLSA_TRANSLATED_NAME* = ptr LSA_TRANSLATED_NAME
  TMSV1_0_INTERACTIVE_LOGON* {.final, pure.} = object # renamed from MSV1_0_INTERACTIVE_LOGON
    MessageType*: MSV1_0_LOGON_SUBMIT_TYPE
    LogonDomainName*: UNICODE_STRING
    UserName*: UNICODE_STRING
    Password*: UNICODE_STRING
  PMSV1_0_INTERACTIVE_LOGON* = ptr TMSV1_0_INTERACTIVE_LOGON
  TMSV1_0_INTERACTIVE_PROFILE* {.final, pure.} = object # renamed from MSV1_0_INTERACTIVE_PROFILE
    MessageType*: MSV1_0_PROFILE_BUFFER_TYPE
    LogonCount*: USHORT
    BadPasswordCount*: USHORT
    LogonTime*: LARGE_INTEGER
    LogoffTime*: LARGE_INTEGER
    KickOffTime*: LARGE_INTEGER
    PasswordLastSet*: LARGE_INTEGER
    PasswordCanChange*: LARGE_INTEGER
    PasswordMustChange*: LARGE_INTEGER
    LogonScript*: UNICODE_STRING
    HomeDirectory*: UNICODE_STRING
    FullName*: UNICODE_STRING
    ProfilePath*: UNICODE_STRING
    HomeDirectoryDrive*: UNICODE_STRING
    LogonServer*: UNICODE_STRING
    UserFlags*: ULONG
  PMSV1_0_INTERACTIVE_PROFILE* = ptr TMSV1_0_INTERACTIVE_PROFILE
  TMSV1_0_LM20_LOGON* {.final, pure.} = object # renamed from MSV1_0_LM20_LOGON
    MessageType*: MSV1_0_LOGON_SUBMIT_TYPE
    LogonDomainName*: UNICODE_STRING
    UserName*: UNICODE_STRING
    Workstation*: UNICODE_STRING
    ChallengeToClient*: array[MSV1_0_CHALLENGE_LENGTH, UCHAR]
    CaseSensitiveChallengeResponse*: STRING
    CaseInsensitiveChallengeResponse*: STRING
    ParameterControl*: ULONG
  PMSV1_0_LM20_LOGON* = ptr TMSV1_0_LM20_LOGON

const
  MICROSOFT_KERBEROS_NAME_A* = "Kerberos"
  MICROSOFT_KERBEROS_NAME_W* = "Kerberos"
  MSV1_0_PACKAGE_NAME* = "MICROSOFT_AUTHENTICATION_PACKAGE_V1_0"
  MSV1_0_PACKAGE_NAMEW* = "MICROSOFT_AUTHENTICATION_PACKAGE_V1_0"
  MSV1_0_ALLOW_SERVER_TRUST_ACCOUNT* = 32
  MSV1_0_ALLOW_WORKSTATION_TRUST_ACCOUNT* = 2048
  MSV1_0_CLEARTEXT_PASSWORD_ALLOWED* = 2
  MSV1_0_CRED_LM_PRESENT* = 1
  MSV1_0_CRED_NT_PRESENT* = 2
  MSV1_0_CRED_VERSION* = 0
  MSV1_0_DONT_TRY_GUEST_ACCOUNT* = 16
  MSV1_0_MAX_NTLM3_LIFE* = 1800
  MSV1_0_MAX_AVL_SIZE* = 64000
  MSV1_0_MNS_LOGON* = 16777216
  MSV1_0_LANMAN_SESSION_KEY_LENGTH* = 8
  MSV1_0_NTLM3_RESPONSE_LENGTH* = 16
  MSV1_0_NTLM3_OWF_LENGTH* = 16
  MSV1_0_OWF_PASSWORD_LENGTH* = 16
  MSV1_0_PACKAGE_NAMEW_LENGTH* = (MSV1_0_PACKAGE_NAMEW.sizeof - WCHAR.sizeof)
  MSV1_0_RETURN_USER_PARAMETERS* = 8
  MSV1_0_RETURN_PASSWORD_EXPIRY* = 64
  MSV1_0_RETURN_PROFILE_PATH* = 512
  MSV1_0_SUBAUTHENTICATION_DLL_EX* = 1048576
  MSV1_0_SUBAUTHENTICATION_DLL* = -16777216
  MSV1_0_SUBAUTHENTICATION_DLL_SHIFT* = 24
  MSV1_0_SUBAUTHENTICATION_DLL_RAS* = 2
  MSV1_0_SUBAUTHENTICATION_DLL_IIS* = 132
  MSV1_0_SUBAUTHENTICATION_FLAGS* = -16777216
  MSV1_0_TRY_GUEST_ACCOUNT_ONLY* = 256
  MSV1_0_TRY_SPECIFIED_DOMAIN_ONLY* = 1024
  MSV1_0_UPDATE_LOGON_STATISTICS* = 4
  MSV1_0_USE_CLIENT_CHALLENGE* = 128
  MSV1_0_USER_SESSION_KEY_LENGTH* = 16
  MSV1_0_SUBAUTHENTICATION_KEY* = r"System\CurrentControlSet\Control\Lsa\MSV1_0"
  MSV1_0_SUBAUTHENTICATION_VALUE* = "Auth"
  POLICY_VIEW_LOCAL_INFORMATION* = 0x0001
  POLICY_VIEW_AUDIT_INFORMATION* = 0x0002
  POLICY_GET_PRIVATE_INFORMATION* = 0x0004
  POLICY_TRUST_ADMIN* = 0x0008
  POLICY_CREATE_ACCOUNT* = 0x0010
  POLICY_CREATE_SECRET* = 0x0020
  POLICY_CREATE_PRIVILEGE* = 0x0040
  POLICY_SET_DEFAULT_QUOTA_LIMITS* = 0x0080
  POLICY_SET_AUDIT_REQUIREMENTS* = 0x0100
  POLICY_AUDIT_LOG_ADMIN* = 0x0200
  POLICY_SERVER_ADMIN* = 0x0400
  POLICY_LOOKUP_NAMES* = 0x0800
  POLICY_READ* = (STANDARD_RIGHTS_READ or 0x0006).ACCESS_MASK
  POLICY_WRITE* = (STANDARD_RIGHTS_WRITE or 0x07F8).ACCESS_MASK
  POLICY_EXECUTE* = (STANDARD_RIGHTS_EXECUTE or 0x0801).ACCESS_MASK
  POLICY_ALL_ACCESS* = (STANDARD_RIGHTS_REQUIRED or 0x0FFF).ACCESS_MASK
  POLICY_AUDIT_EVENT_UNCHANGED* = 0
  POLICY_AUDIT_EVENT_SUCCESS* = 1
  POLICY_AUDIT_EVENT_FAILURE* = 2
  POLICY_AUDIT_EVENT_NONE* = 4
  POLICY_AUDIT_EVENT_MASK* = 7
  POLICY_LOCATION_LOCAL* = 1
  POLICY_LOCATION_DS* = 2
  POLICY_MACHINE_POLICY_LOCAL* = 0
  POLICY_MACHINE_POLICY_DEFAULTED* = 1
  POLICY_MACHINE_POLICY_EXPLICIT* = 2
  POLICY_MACHINE_POLICY_UNKNOWN* = 0xFFFFFFFF'u32
  POLICY_QOS_SCHANEL_REQUIRED* = 0x0001
  POLICY_QOS_OUTBOUND_INTEGRITY* = 0x0002
  POLICY_QOS_OUTBOUND_CONFIDENTIALITY* = 0x0004
  POLICY_QOS_INBOUND_INTEGREITY* = 0x0008
  POLICY_QOS_INBOUND_CONFIDENTIALITY* = 0x0010
  POLICY_QOS_ALLOW_LOCAL_ROOT_CERT_STORE* = 0x0020
  POLICY_QOS_RAS_SERVER_ALLOWED* = 0x0040
  POLICY_QOS_DHCP_SERVER_ALLOWD* = 0x0080
  POLICY_KERBEROS_FORWARDABLE* = 1
  POLICY_KERBEROS_PROXYABLE* = 2
  POLICY_KERBEROS_RENEWABLE* = 4
  POLICY_KERBEROS_POSTDATEABLE* = 8
  SAM_PASSWORD_CHANGE_NOTIFY_ROUTINE* = "PasswordChangeNotify"
  SAM_INIT_NOTIFICATION_ROUTINE* = "InitializeChangeNotify"
  SAM_PASSWORD_FILTER_ROUTINE* = "PasswordFilter"
  SE_INTERACTIVE_LOGON_NAME* = "SeInteractiveLogonRight"
  SE_NETWORK_LOGON_NAME* = "SeNetworkLogonRight"
  SE_BATCH_LOGON_NAME* = "SeBatchLogonRight"
  SE_SERVICE_LOGON_NAME* = "SeServiceLogonRight"
  TRUST_ATTRIBUTE_NON_TRANSITIVE* = 1
  TRUST_ATTRIBUTE_UPLEVEL_ONLY* = 2
  TRUST_ATTRIBUTE_TREE_PARENT* = 4194304
  TRUST_ATTRIBUTES_VALID* = -16580609
  TRUST_AUTH_TYPE_NONE* = 0
  TRUST_AUTH_TYPE_NT4OWF* = 1
  TRUST_AUTH_TYPE_CLEAR* = 2
  TRUST_DIRECTION_DISABLED* = 0
  TRUST_DIRECTION_INBOUND* = 1
  TRUST_DIRECTION_OUTBOUND* = 2
  TRUST_DIRECTION_BIDIRECTIONAL* = 3
  TRUST_TYPE_DOWNLEVEL* = 1
  TRUST_TYPE_UPLEVEL* = 2
  TRUST_TYPE_MIT* = 3
  TRUST_TYPE_DCE* = 4

type
  TMSV1_0_SUBAUTH_LOGON* {.final, pure.} = object # renamed from MSV1_0_SUBAUTH_LOGON
    MessageType*: MSV1_0_LOGON_SUBMIT_TYPE
    LogonDomainName*: UNICODE_STRING
    UserName*: UNICODE_STRING
    Workstation*: UNICODE_STRING
    ChallengeToClient*: array[MSV1_0_CHALLENGE_LENGTH, UCHAR]
    AuthenticationInfo1*: STRING
    AuthenticationInfo2*: STRING
    ParameterControl*: ULONG
    SubAuthPackageId*: ULONG
  PMSV1_0_SUBAUTH_LOGON* = ptr TMSV1_0_SUBAUTH_LOGON
  TMSV1_0_LM20_LOGON_PROFILE* {.final, pure.} = object # renamed from MSV1_0_LM20_LOGON_PROFILE
    MessageType*: MSV1_0_PROFILE_BUFFER_TYPE
    KickOffTime*: LARGE_INTEGER
    LogoffTime*: LARGE_INTEGER
    UserFlags*: ULONG
    UserSessionKey*: array[MSV1_0_USER_SESSION_KEY_LENGTH, UCHAR]
    LogonDomainName*: UNICODE_STRING
    LanmanSessionKey*: array[MSV1_0_LANMAN_SESSION_KEY_LENGTH, UCHAR]
    LogonServer*: UNICODE_STRING
    UserParameters*: UNICODE_STRING
  PMSV1_0_LM20_LOGON_PROFILE* = ptr TMSV1_0_LM20_LOGON_PROFILE
  MSV1_0_SUPPLEMENTAL_CREDENTIAL* {.final, pure.} = object
    Version*: ULONG
    Flags*: ULONG
    LmPassword*: array[MSV1_0_OWF_PASSWORD_LENGTH, UCHAR]
    NtPassword*: array[MSV1_0_OWF_PASSWORD_LENGTH, UCHAR]
  PMSV1_0_SUPPLEMENTAL_CREDENTIAL* = ptr MSV1_0_SUPPLEMENTAL_CREDENTIAL
  MSV1_0_NTLM3_RESPONSE* {.final, pure.} = object
    Response*: array[MSV1_0_NTLM3_RESPONSE_LENGTH, UCHAR]
    RespType*: UCHAR
    HiRespType*: UCHAR
    Flags*: USHORT
    MsgWord*: ULONG
    TimeStamp*: ULONGLONG
    ChallengeFromClient*: array[MSV1_0_CHALLENGE_LENGTH, UCHAR]
    AvPairsOff*: ULONG
    Buffer*: array[1, UCHAR]
  PMSV1_0_NTLM3_RESPONSE* = ptr MSV1_0_NTLM3_RESPONSE
  MSV1_0_AV_PAIR* {.final, pure.} = object
    AvId*: USHORT
    AvLen*: USHORT
  PMSV1_0_AV_PAIR* = ptr MSV1_0_AV_PAIR
  MSV1_0_CHANGEPASSWORD_REQUEST* {.final, pure.} = object
    MessageType*: MSV1_0_PROTOCOL_MESSAGE_TYPE
    DomainName*: UNICODE_STRING
    AccountName*: UNICODE_STRING
    OldPassword*: UNICODE_STRING
    NewPassword*: UNICODE_STRING
    Impersonating*: BOOLEAN
  PMSV1_0_CHANGEPASSWORD_REQUEST* = ptr MSV1_0_CHANGEPASSWORD_REQUEST
  MSV1_0_CHANGEPASSWORD_RESPONSE* {.final, pure.} = object
    MessageType*: MSV1_0_PROTOCOL_MESSAGE_TYPE
    PasswordInfoValid*: BOOLEAN
    DomainPasswordInfo*: DOMAIN_PASSWORD_INFORMATION
  PMSV1_0_CHANGEPASSWORD_RESPONSE* = ptr MSV1_0_CHANGEPASSWORD_RESPONSE
  MSV1_0_SUBAUTH_REQUEST* {.final, pure.} = object
    MessageType*: MSV1_0_PROTOCOL_MESSAGE_TYPE
    SubAuthPackageId*: ULONG
    SubAuthInfoLength*: ULONG
    SubAuthSubmitBuffer*: PUCHAR
  PMSV1_0_SUBAUTH_REQUEST* = ptr MSV1_0_SUBAUTH_REQUEST
  MSV1_0_SUBAUTH_RESPONSE* {.final, pure.} = object
    MessageType*: MSV1_0_PROTOCOL_MESSAGE_TYPE
    SubAuthInfoLength*: ULONG
    SubAuthReturnBuffer*: PUCHAR
  PMSV1_0_SUBAUTH_RESPONSE* = ptr MSV1_0_SUBAUTH_RESPONSE

const
  # MSV1_0_NTLM3_INPUT_LENGTH* = (MSV1_0_NTLM3_RESPONSE.sizeof - MSV1_0_NTLM3_RESPONSE_LENGTH.int).SIZE_T
  MSV1_0_DERIVECRED_TYPE_SHA1* = 0

type
  MSV1_0_DERIVECRED_REQUEST* {.final, pure.} = object
    MessageType*: MSV1_0_PROTOCOL_MESSAGE_TYPE
    LogonId*: LUID
    DeriveCredType*: ULONG
    DeriveCredInfoLength*: ULONG
    DeriveCredSubmitBuffer*: array[1, UCHAR]
  PMSV1_0_DERIVECRED_REQUEST* = ptr MSV1_0_DERIVECRED_REQUEST
  MSV1_0_DERIVECRED_RESPONSE* {.final, pure.} = object
    MessageType*: MSV1_0_PROTOCOL_MESSAGE_TYPE
    DeriveCredInfoLength*: ULONG
    DeriveCredReturnBuffer*: array[1, UCHAR]
  PMSV1_0_DERIVECRED_RESPONSE* = ptr MSV1_0_DERIVECRED_RESPONSE
  LSA_ENUMERATION_HANDLE* = uint32
  LSA_OPERATIONAL_MODE* = uint32
  POLICY_AUDIT_EVENT_OPTIONS* = uint32
  PLSA_ENUMERATION_HANDLE* = ptr uint32
  PLSA_OPERATIONAL_MODE* = ptr uint32
  PPOLICY_AUDIT_EVENT_OPTIONS* = ptr uint32
  POLICY_PRIVILEGE_DEFINITION* {.final, pure.} = object
    Name*: LSA_UNICODE_STRING
    LocalValue*: LUID
  PPOLICY_PRIVILEGE_DEFINITION* = ptr POLICY_PRIVILEGE_DEFINITION
  POLICY_AUDIT_LOG_INFO* {.final, pure.} = object
    AuditLogPercentFull*: ULONG
    MaximumLogSize*: ULONG
    AuditRetentionPeriod*: LARGE_INTEGER
    AuditLogFullShutdownInProgress*: BOOLEAN
    TimeToShutdown*: LARGE_INTEGER
    NextAuditRecordId*: ULONG
  PPOLICY_AUDIT_LOG_INFO* = ptr POLICY_AUDIT_LOG_INFO
  POLICY_AUDIT_EVENTS_INFO* {.final, pure.} = object
    AuditingMode*: BOOLEAN
    EventAuditingOptions*: PPOLICY_AUDIT_EVENT_OPTIONS
    MaximumAuditEventCount*: ULONG
  PPOLICY_AUDIT_EVENTS_INFO* = ptr POLICY_AUDIT_EVENTS_INFO
  POLICY_ACCOUNT_DOMAIN_INFO* {.final, pure.} = object
    DomainName*: LSA_UNICODE_STRING
    DomainSid*: PSID
  PPOLICY_ACCOUNT_DOMAIN_INFO* = ptr POLICY_ACCOUNT_DOMAIN_INFO
  POLICY_PRIMARY_DOMAIN_INFO* {.final, pure.} = object
    Name*: LSA_UNICODE_STRING
    Sid*: PSID
  PPOLICY_PRIMARY_DOMAIN_INFO* = ptr POLICY_PRIMARY_DOMAIN_INFO
  POLICY_DNS_DOMAIN_INFO* {.final, pure.} = object
    Name*: LSA_UNICODE_STRING
    DnsDomainName*: LSA_UNICODE_STRING
    DnsTreeName*: LSA_UNICODE_STRING
    DomainGuid*: GUID
    Sid*: PSID
  PPOLICY_DNS_DOMAIN_INFO* = ptr POLICY_DNS_DOMAIN_INFO
  POLICY_PD_ACCOUNT_INFO* {.final, pure.} = object
    Name*: LSA_UNICODE_STRING
  PPOLICY_PD_ACCOUNT_INFO* = ptr POLICY_PD_ACCOUNT_INFO
  POLICY_LSA_SERVER_ROLE_INFO* {.final, pure.} = object
    LsaServerRole*: POLICY_LSA_SERVER_ROLE
  PPOLICY_LSA_SERVER_ROLE_INFO* = ptr POLICY_LSA_SERVER_ROLE_INFO
  POLICY_REPLICA_SOURCE_INFO* {.final, pure.} = object
    ReplicaSource*: LSA_UNICODE_STRING
    ReplicaAccountName*: LSA_UNICODE_STRING
  PPOLICY_REPLICA_SOURCE_INFO* = ptr POLICY_REPLICA_SOURCE_INFO
  POLICY_DEFAULT_QUOTA_INFO* {.final, pure.} = object
    QuotaLimits*: QUOTA_LIMITS
  PPOLICY_DEFAULT_QUOTA_INFO* = ptr POLICY_DEFAULT_QUOTA_INFO
  POLICY_MODIFICATION_INFO* {.final, pure.} = object
    ModifiedId*: LARGE_INTEGER
    DatabaseCreationTime*: LARGE_INTEGER
  PPOLICY_MODIFICATION_INFO* = ptr POLICY_MODIFICATION_INFO
  POLICY_AUDIT_FULL_SET_INFO* {.final, pure.} = object
    ShutDownOnFull*: BOOLEAN
  PPOLICY_AUDIT_FULL_SET_INFO* = ptr POLICY_AUDIT_FULL_SET_INFO
  POLICY_AUDIT_FULL_QUERY_INFO* {.final, pure.} = object
    ShutDownOnFull*: BOOLEAN
    LogIsFull*: BOOLEAN
  PPOLICY_AUDIT_FULL_QUERY_INFO* = ptr POLICY_AUDIT_FULL_QUERY_INFO
  POLICY_EFS_INFO* {.final, pure.} = object
    InfoLength*: ULONG
    EfsBlob*: PUCHAR
  PPOLICY_EFS_INFO* = ptr POLICY_EFS_INFO
  POLICY_LOCAL_IPSEC_REFERENCE_INFO* {.final, pure.} = object
    ObjectPath*: LSA_UNICODE_STRING
  PPOLICY_LOCAL_IPSEC_REFERENCE_INFO* = ptr POLICY_LOCAL_IPSEC_REFERENCE_INFO
  POLICY_LOCAL_MACHINE_PASSWORD_INFO* {.final, pure.} = object
    PasswordChangeInterval*: LARGE_INTEGER
  PPOLICY_LOCAL_MACHINE_PASSWORD_INFO* = ptr POLICY_LOCAL_MACHINE_PASSWORD_INFO
  POLICY_LOCAL_POLICY_LOCATION_INFO* {.final, pure.} = object
    PolicyLocation*: ULONG
  PPOLICY_LOCAL_POLICY_LOCATION_INFO* = ptr POLICY_LOCAL_POLICY_LOCATION_INFO
  POLICY_LOCAL_QUALITY_OF_SERVICE_INFO* {.final, pure.} = object
    QualityOfService*: ULONG
  POLICY_DOMAIN_QUALITY_OF_SERVICE_INFO* = POLICY_LOCAL_QUALITY_OF_SERVICE_INFO
  PPOLICY_LOCAL_QUALITY_OF_SERVICE_INFO* = ptr POLICY_LOCAL_QUALITY_OF_SERVICE_INFO
  PPOLICY_DOMAIN_QUALITY_OF_SERVICE_INFO* = ptr POLICY_LOCAL_QUALITY_OF_SERVICE_INFO
  POLICY_DOMAIN_PUBLIC_KEY_INFO* {.final, pure.} = object
    InfoLength*: ULONG
    PublicKeyInfo*: PUCHAR
  PPOLICY_DOMAIN_PUBLIC_KEY_INFO* = ptr POLICY_DOMAIN_PUBLIC_KEY_INFO
  POLICY_DOMAIN_LOCKOUT_INFO* {.final, pure.} = object
    LockoutDuration*: LARGE_INTEGER
    LockoutObservationWindow*: LARGE_INTEGER
    LockoutThreshold*: USHORT
  PPOLICY_DOMAIN_LOCKOUT_INFO* = ptr POLICY_DOMAIN_LOCKOUT_INFO
  POLICY_DOMAIN_PASSWORD_INFO* {.final, pure.} = object
    MinPasswordLength*: USHORT
    PasswordHistoryLength*: USHORT
    PasswordProperties*: ULONG
    MaxPasswordAge*: LARGE_INTEGER
    MinPasswordAge*: LARGE_INTEGER
  PPOLICY_DOMAIN_PASSWORD_INFO* = ptr POLICY_DOMAIN_PASSWORD_INFO
  POLICY_DOMAIN_KERBEROS_TICKET_INFO* {.final, pure.} = object
    AuthenticationOptions*: ULONG
    MinTicketAge*: LARGE_INTEGER
    MaxTicketAge*: LARGE_INTEGER
    MaxRenewAge*: LARGE_INTEGER
    ProxyLifetime*: LARGE_INTEGER
    ForceLogoff*: LARGE_INTEGER
  PPOLICY_DOMAIN_KERBEROS_TICKET_INFO* = ptr POLICY_DOMAIN_KERBEROS_TICKET_INFO
  LSA_HANDLE* = HANDLE
  PLSA_HANDLE* = ptr HANDLE
  TRUSTED_DOMAIN_NAME_INFO* {.final, pure.} = object
    Name*: LSA_UNICODE_STRING
  PTRUSTED_DOMAIN_NAME_INFO* = ptr TRUSTED_DOMAIN_NAME_INFO
  TRUSTED_CONTROLLERS_INFO* {.final, pure.} = object
    Entries*: ULONG
    Names*: PLSA_UNICODE_STRING
  PTRUSTED_CONTROLLERS_INFO* = ptr TRUSTED_CONTROLLERS_INFO
  TRUSTED_POSIX_OFFSET_INFO* {.final, pure.} = object
    Offset*: ULONG
  PTRUSTED_POSIX_OFFSET_INFO* = ptr TRUSTED_POSIX_OFFSET_INFO
  TRUSTED_PASSWORD_INFO* {.final, pure.} = object
    Password*: LSA_UNICODE_STRING
    OldPassword*: LSA_UNICODE_STRING
  PTRUSTED_PASSWORD_INFO* = ptr TRUSTED_PASSWORD_INFO
  TTRUSTED_DOMAIN_INFORMATION_EX* {.final, pure.} = object # renamed from TRUSTED_DOMAIN_INFORMATION_EX
    Name*: LSA_UNICODE_STRING
    FlatName*: LSA_UNICODE_STRING
    Sid*: PSID
    TrustDirection*: ULONG
    TrustType*: ULONG
    TrustAttributes*: ULONG
  PTRUSTED_DOMAIN_INFORMATION_EX* = ptr TTRUSTED_DOMAIN_INFORMATION_EX
  LSA_AUTH_INFORMATION* {.final, pure.} = object
    LastUpdateTime*: LARGE_INTEGER
    AuthType*: ULONG
    AuthInfoLength*: ULONG
    AuthInfo*: PUCHAR
  PLSA_AUTH_INFORMATION* = ptr LSA_AUTH_INFORMATION
  TTRUSTED_DOMAIN_AUTH_INFORMATION* {.final, pure.} = object # renamed from TRUSTED_DOMAIN_AUTH_INFORMATION
    IncomingAuthInfos*: ULONG
    IncomingAuthenticationInformation*: PLSA_AUTH_INFORMATION
    IncomingPreviousAuthenticationInformation*: PLSA_AUTH_INFORMATION
    OutgoingAuthInfos*: ULONG
    OutgoingAuthenticationInformation*: PLSA_AUTH_INFORMATION
    OutgoingPreviousAuthenticationInformation*: PLSA_AUTH_INFORMATION
  PTRUSTED_DOMAIN_AUTH_INFORMATION* = ptr TTRUSTED_DOMAIN_AUTH_INFORMATION
  TTRUSTED_DOMAIN_FULL_INFORMATION* {.final, pure.} = object # renamed from TRUSTED_DOMAIN_FULL_INFORMATION
    Information*: TTRUSTED_DOMAIN_INFORMATION_EX
    PosixOffset*: TRUSTED_POSIX_OFFSET_INFO
    AuthInformation*: TTRUSTED_DOMAIN_AUTH_INFORMATION
  PTRUSTED_DOMAIN_FULL_INFORMATION* = ptr TTRUSTED_DOMAIN_FULL_INFORMATION

proc LsaAddAccountRights*(P1: LSA_HANDLE, P2: PSID, P3: PLSA_UNICODE_STRING, P4: ULONG): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaCallAuthenticationPackage*(P1: HANDLE, P2: ULONG, P3: PVOID, P4: ULONG, P5: ptr PVOID, P6: PULONG, P7: PNTSTATUS): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaClose*(P1: LSA_HANDLE): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaConnectUntrusted*(P1: PHANDLE): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaCreateTrustedDomainEx*(P1: LSA_HANDLE, P2: PTRUSTED_DOMAIN_INFORMATION_EX, P3: PTRUSTED_DOMAIN_AUTH_INFORMATION, P4: ACCESS_MASK, P5: PLSA_HANDLE): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaDeleteTrustedDomain*(P1: LSA_HANDLE, P2: PSID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaDeregisterLogonProcess*(P1: HANDLE): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaEnumerateAccountRights*(P1: LSA_HANDLE, P2: PSID, P3: ptr PLSA_UNICODE_STRING, P4: PULONG): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaEnumerateAccountsWithUserRight*(P1: LSA_HANDLE, P2: PLSA_UNICODE_STRING, P3: ptr PVOID, P4: PULONG): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaEnumerateTrustedDomains*(P1: LSA_HANDLE, P2: PLSA_ENUMERATION_HANDLE, P3: ptr PVOID, P4: ULONG, P5: PULONG): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaEnumerateTrustedDomainsEx*(P1: LSA_HANDLE, P2: PLSA_ENUMERATION_HANDLE, P3: TRUSTED_INFORMATION_CLASS, P4: ptr PVOID, P5: ULONG, P6: PULONG): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaFreeMemory*(P1: PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaFreeReturnBuffer*(P1: PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaLogonUser*(P1: HANDLE, P2: PLSA_STRING, P3: SECURITY_LOGON_TYPE, P4: ULONG, P5: PVOID, P6: ULONG, P7: PTOKEN_GROUPS, P8: PTOKEN_SOURCE, P9: ptr PVOID, P10: PULONG, P11: PLUID, P12: PHANDLE, P13: PQUOTA_LIMITS, P14: PNTSTATUS): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaLookupAuthenticationPackage*(P1: HANDLE, P2: PLSA_STRING, P3: PULONG): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaLookupNames*(P1: LSA_HANDLE, P2: ULONG, P3: PLSA_UNICODE_STRING, P4: ptr PLSA_REFERENCED_DOMAIN_LIST, P5: ptr PLSA_TRANSLATED_SID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaLookupSids*(P1: LSA_HANDLE, P2: ULONG, P3: ptr PSID, P4: ptr PLSA_REFERENCED_DOMAIN_LIST, P5: ptr PLSA_TRANSLATED_NAME): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaNtStatusToWinError*(P1: NTSTATUS): ULONG {.winapi, dynlib: "advapi32", importc.}
proc LsaOpenPolicy*(P1: PLSA_UNICODE_STRING, P2: PLSA_OBJECT_ATTRIBUTES, P3: ACCESS_MASK, P4: PLSA_HANDLE): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaQueryDomainInformationPolicy*(P1: LSA_HANDLE, P2: POLICY_DOMAIN_INFORMATION_CLASS, P3: ptr PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaQueryInformationPolicy*(P1: LSA_HANDLE, P2: POLICY_INFORMATION_CLASS, P3: ptr PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaQueryLocalInformationPolicy*(P1: LSA_HANDLE, P2: POLICY_LOCAL_INFORMATION_CLASS, P3: ptr PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaQueryTrustedDomainInfo*(P1: LSA_HANDLE, P2: PSID, P3: TRUSTED_INFORMATION_CLASS, P4: ptr PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaQueryTrustedDomainInfoByName*(P1: LSA_HANDLE, P2: PLSA_UNICODE_STRING, P3: TRUSTED_INFORMATION_CLASS, P4: ptr PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaRegisterLogonProcess*(P1: PLSA_STRING, P2: PHANDLE, P3: PLSA_OPERATIONAL_MODE): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaRemoveAccountRights*(P1: LSA_HANDLE, P2: PSID, P3: BOOLEAN, P4: PLSA_UNICODE_STRING, P5: ULONG): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaRetrievePrivateData*(P1: LSA_HANDLE, P2: PLSA_UNICODE_STRING, P3: ptr PLSA_UNICODE_STRING): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaSetDomainInformationPolicy*(P1: LSA_HANDLE, P2: POLICY_DOMAIN_INFORMATION_CLASS, P3: PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaSetInformationPolicy*(P1: LSA_HANDLE, P2: POLICY_INFORMATION_CLASS, P3: PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaSetLocalInformationPolicy*(P1: LSA_HANDLE, P2: POLICY_LOCAL_INFORMATION_CLASS, P3: PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaSetTrustedDomainInformation*(P1: LSA_HANDLE, P2: PSID, P3: TRUSTED_INFORMATION_CLASS, P4: PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaSetTrustedDomainInfoByName*(P1: LSA_HANDLE, P2: PLSA_UNICODE_STRING, P3: TRUSTED_INFORMATION_CLASS, P4: PVOID): NTSTATUS {.winapi, dynlib: "advapi32", importc.}
proc LsaStorePrivateData*(P1: LSA_HANDLE, P2: PLSA_UNICODE_STRING, P3: PLSA_UNICODE_STRING): NTSTATUS {.winapi, dynlib: "advapi32", importc.}

type
  PSAM_PASSWORD_NOTIFICATION_ROUTINE* = proc (P1: PUNICODE_STRING, P2: ULONG, P3: PUNICODE_STRING): NTSTATUS {.cdecl.}
  PSAM_INIT_NOTIFICATION_ROUTINE* = proc (): BOOLEAN {.cdecl.}
  PSAM_PASSWORD_FILTER_ROUTINE* = proc (P1: PUNICODE_STRING, P2: PUNICODE_STRING, P3: PUNICODE_STRING, P4: BOOLEAN): BOOLEAN {.cdecl.}

# ext/powrprof.nim

const
  EnableSysTrayBatteryMeter* = 1
  EnableMultiBatteryDisplay* = 2
  EnablePasswordLogon* = 4
  EnableWakeOnRing* = 8
  EnableVideoDimDisplay* = 16
  NEWSCHEME* = 0xFFFFFFFF'u32

type
  GLOBAL_MACHINE_POWER_POLICY* {.final, pure.} = object
    Revision*: ULONG
    LidOpenWakeAc*: SYSTEM_POWER_STATE
    LidOpenWakeDc*: SYSTEM_POWER_STATE
    BroadcastCapacityResolution*: ULONG
  PGLOBAL_MACHINE_POWER_POLICY* = ptr GLOBAL_MACHINE_POWER_POLICY
  GLOBAL_USER_POWER_POLICY* {.final, pure.} = object
    Revision*: ULONG
    PowerButtonAc*: POWER_ACTION_POLICY
    PowerButtonDc*: POWER_ACTION_POLICY
    SleepButtonAc*: POWER_ACTION_POLICY
    SleepButtonDc*: POWER_ACTION_POLICY
    LidCloseAc*: POWER_ACTION_POLICY
    LidCloseDc*: POWER_ACTION_POLICY
    DischargePolicy*: array[NUM_DISCHARGE_POLICIES, SYSTEM_POWER_LEVEL]
    GlobalFlags*: ULONG
  PGLOBAL_USER_POWER_POLICY* = ptr GLOBAL_USER_POWER_POLICY
  GLOBAL_POWER_POLICY* {.final, pure.} = object
    user*: GLOBAL_USER_POWER_POLICY
    mach*: GLOBAL_MACHINE_POWER_POLICY
  PGLOBAL_POWER_POLICY* = ptr GLOBAL_POWER_POLICY
  MACHINE_POWER_POLICY* {.final, pure.} = object
    Revision*: ULONG
    MinSleepAc*: SYSTEM_POWER_STATE
    MinSleepDc*: SYSTEM_POWER_STATE
    ReducedLatencySleepAc*: SYSTEM_POWER_STATE
    ReducedLatencySleepDc*: SYSTEM_POWER_STATE
    DozeTimeoutAc*: ULONG
    DozeTimeoutDc*: ULONG
    DozeS4TimeoutAc*: ULONG
    DozeS4TimeoutDc*: ULONG
    MinThrottleAc*: UCHAR
    MinThrottleDc*: UCHAR
    pad1*: array[2, UCHAR]
    OverThrottledAc*: POWER_ACTION_POLICY
    OverThrottledDc*: POWER_ACTION_POLICY
  PMACHINE_POWER_POLICY* = ptr MACHINE_POWER_POLICY
  MACHINE_PROCESSOR_POWER_POLICY* {.final, pure.} = object
    Revision*: ULONG
    ProcessorPolicyAc*: PROCESSOR_POWER_POLICY
    ProcessorPolicyDc*: PROCESSOR_POWER_POLICY
  PMACHINE_PROCESSOR_POWER_POLICY* = ptr MACHINE_PROCESSOR_POWER_POLICY
  USER_POWER_POLICY* {.final, pure.} = object
    Revision*: ULONG
    IdleAc*: POWER_ACTION_POLICY
    IdleDc*: POWER_ACTION_POLICY
    IdleTimeoutAc*: ULONG
    IdleTimeoutDc*: ULONG
    IdleSensitivityAc*: UCHAR
    IdleSensitivityDc*: UCHAR
    ThrottlePolicyAc*: UCHAR
    ThrottlePolicyDc*: UCHAR
    MaxSleepAc*: SYSTEM_POWER_STATE
    MaxSleepDc*: SYSTEM_POWER_STATE
    Reserved*: array[2, ULONG]
    VideoTimeoutAc*: ULONG
    VideoTimeoutDc*: ULONG
    SpindownTimeoutAc*: ULONG
    SpindownTimeoutDc*: ULONG
    OptimizeForPowerAc*: BOOLEAN
    OptimizeForPowerDc*: BOOLEAN
    FanThrottleToleranceAc*: UCHAR
    FanThrottleToleranceDc*: UCHAR
    ForcedThrottleAc*: UCHAR
    ForcedThrottleDc*: UCHAR
  PUSER_POWER_POLICY* = ptr USER_POWER_POLICY
  POWER_POLICY* {.final, pure.} = object
    user*: USER_POWER_POLICY
    mach*: MACHINE_POWER_POLICY
  PPOWER_POLICY* = ptr POWER_POLICY

type
  PWRSCHEMESENUMPROC* = proc (P1: UINT, P2: DWORD, P3: LPTSTR, P4: DWORD, P5: LPTSTR, P6: PPOWER_POLICY, P7: LPARAM): BOOLEAN {.stdcall.}
  PFNNTINITIATEPWRACTION* = proc (P1: POWER_ACTION, P2: SYSTEM_POWER_STATE, P3: ULONG, P4: BOOLEAN): BOOLEAN {.stdcall.}

proc CallNtPowerInformation*(P1: POWER_INFORMATION_LEVEL, P2: PVOID, P3: ULONG, P4: PVOID, P5: ULONG): NTSTATUS {.winapi, dynlib: "powrprof", importc.}
proc CanUserWritePwrScheme*(): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc DeletePwrScheme*(P1: UINT): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc EnumPwrSchemes*(P1: PWRSCHEMESENUMPROC, P2: LPARAM): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc GetActivePwrScheme*(P1: PUINT): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc GetCurrentPowerPolicies*(P1: PGLOBAL_POWER_POLICY, P2: PPOWER_POLICY): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc GetPwrCapabilities*(P1: PSYSTEM_POWER_CAPABILITIES): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc GetPwrDiskSpindownRange*(P1: PUINT, P2: PUINT): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc IsAdminOverrideActive*(P1: PADMINISTRATOR_POWER_POLICY): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc IsPwrHibernateAllowed*(): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc IsPwrShutdownAllowed*(): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc IsPwrSuspendAllowed*(): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc ReadGlobalPwrPolicy*(P1: PGLOBAL_POWER_POLICY): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc ReadProcessorPwrScheme*(P1: UINT, P2: PMACHINE_PROCESSOR_POWER_POLICY): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc ReadPwrScheme*(P1: UINT, P2: PPOWER_POLICY): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc SetActivePwrScheme*(P1: UINT, P2: PGLOBAL_POWER_POLICY, P3: PPOWER_POLICY): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc SetSuspendState*(P1: BOOLEAN, P2: BOOLEAN, P3: BOOLEAN): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc WriteGlobalPwrPolicy*(P1: PGLOBAL_POWER_POLICY): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc WriteProcessorPwrScheme*(P1: UINT, P2: PMACHINE_PROCESSOR_POWER_POLICY): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc ValidatePowerPolicies*(P1: PGLOBAL_POWER_POLICY, P2: PPOWER_POLICY): BOOLEAN {.winapi, dynlib: "powrprof", importc.}
proc WritePwrScheme*(P1: PUINT, P2: LPTSTR, P3: LPTSTR, P4: PPOWER_POLICY): BOOLEAN {.winapi, dynlib: "powrprof", importc.}

# ext/psapi.nim

type
  MODULEINFO* {.final, pure.} = object
    lpBaseOfDll*: LPVOID
    SizeOfImage*: DWORD
    EntryPoint*: LPVOID
  LPMODULEINFO* = ptr MODULEINFO
  PSAPI_WS_WATCH_INFORMATION* {.final, pure.} = object
    FaultingPc*: LPVOID
    FaultingVa*: LPVOID
  PPSAPI_WS_WATCH_INFORMATION* = ptr PSAPI_WS_WATCH_INFORMATION
  PSAPI_WS_WATCH_INFORMATION_EX* {.final, pure.} = object
    BasicInfo*: PSAPI_WS_WATCH_INFORMATION
    FaultingThreadId*: ULONG_PTR
    Flags*: ULONG_PTR
  PPSAPI_WS_WATCH_INFORMATION_EX* = ptr PSAPI_WS_WATCH_INFORMATION_EX
  PROCESS_MEMORY_COUNTERS* {.final, pure.} = object
    cb*: DWORD
    PageFaultCount*: DWORD
    PeakWorkingSetSize*: DWORD
    WorkingSetSize*: DWORD
    QuotaPeakPagedPoolUsage*: DWORD
    QuotaPagedPoolUsage*: DWORD
    QuotaPeakNonPagedPoolUsage*: DWORD
    QuotaNonPagedPoolUsage*: DWORD
    PagefileUsage*: DWORD
    PeakPagefileUsage*: DWORD
  PPROCESS_MEMORY_COUNTERS* = ptr PROCESS_MEMORY_COUNTERS
  PERFORMANCE_INFORMATION* {.final, pure.} = object
    cb*: DWORD
    CommitTotal*: SIZE_T
    CommitLimit*: SIZE_T
    CommitPeak*: SIZE_T
    PhysicalTotal*: SIZE_T
    PhysicalAvailable*: SIZE_T
    SystemCache*: SIZE_T
    KernelTotal*: SIZE_T
    KernelPaged*: SIZE_T
    KernelNonpaged*: SIZE_T
    PageSize*: SIZE_T
    HandleCount*: DWORD
    ProcessCount*: DWORD
    ThreadCount*: DWORD
  PPERFORMANCE_INFORMATION* = ptr PERFORMANCE_INFORMATION
  ENUM_PAGE_FILE_INFORMATION* {.final, pure.} = object
    cb*: DWORD
    Reserved*: DWORD
    TotalSize*: SIZE_T
    TotalInUse*: SIZE_T
    PeakUsage*: SIZE_T
  PENUM_PAGE_FILE_INFORMATION* = ptr ENUM_PAGE_FILE_INFORMATION

when not defined(winansi):
  type
    PENUM_PAGE_FILE_CALLBACK* = proc (P1: LPVOID, P2: PENUM_PAGE_FILE_INFORMATION, P3: LPCWSTR): BOOL {.stdcall.}

else:
  type
    PENUM_PAGE_FILE_CALLBACK* = proc (P1: LPVOID, P2: PENUM_PAGE_FILE_INFORMATION, P3: LPCSTR): BOOL {.stdcall.}

proc EnumProcesses*(P1: ptr DWORD, P2: DWORD, P3: ptr DWORD): BOOL {.winapi, dynlib: "psapi", importc.}
proc GetProcessImageFileNameA*(P1: HANDLE, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc GetProcessImageFileNameW*(P1: HANDLE, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc EnumProcessModules*(P1: HANDLE, P2: ptr HMODULE, P3: DWORD, P4: LPDWORD): BOOL {.winapi, dynlib: "psapi", importc.}
proc EnumProcessModulesEx*(P1: HANDLE, P2: ptr HMODULE, P3: DWORD, P4: LPDWORD, P5: DWORD): BOOL {.winapi, dynlib: "psapi", importc.}
proc GetModuleBaseNameA*(P1: HANDLE, P2: HMODULE, P3: LPSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc GetModuleBaseNameW*(P1: HANDLE, P2: HMODULE, P3: LPWSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc GetModuleFileNameExA*(P1: HANDLE, P2: HMODULE, P3: LPSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc GetModuleFileNameExW*(P1: HANDLE, P2: HMODULE, P3: LPWSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc GetModuleInformation*(P1: HANDLE, P2: HMODULE, P3: LPMODULEINFO, P4: DWORD): BOOL {.winapi, dynlib: "psapi", importc.}
proc EnumDeviceDrivers*(P1: ptr LPVOID, P2: DWORD, P3: LPDWORD): BOOL {.winapi, dynlib: "psapi", importc.}
proc GetDeviceDriverBaseNameA*(P1: LPVOID, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc GetDeviceDriverBaseNameW*(P1: LPVOID, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc GetDeviceDriverFileNameA*(P1: LPVOID, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc GetDeviceDriverFileNameW*(P1: LPVOID, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc GetProcessMemoryInfo*(P1: HANDLE, P2: PPROCESS_MEMORY_COUNTERS, P3: DWORD): BOOL {.winapi, dynlib: "psapi", importc.}
proc EmptyWorkingSet*(P1: HANDLE): BOOL {.winapi, dynlib: "psapi", importc.}
proc GetWsChanges*(P1: HANDLE, P2: PPSAPI_WS_WATCH_INFORMATION, P3: DWORD): BOOL {.winapi, dynlib: "psapi", importc.}
proc GetWsChangesEx*(P1: HANDLE, P2: PPSAPI_WS_WATCH_INFORMATION_EX, P3: DWORD): BOOL {.winapi, dynlib: "psapi", importc.}
proc InitializeProcessForWsWatch*(P1: HANDLE): BOOL {.winapi, dynlib: "psapi", importc.}
proc QueryWorkingSet*(P1: HANDLE, P2: PVOID, P3: DWORD): BOOL {.winapi, dynlib: "psapi", importc.}
proc QueryWorkingSetEx*(P1: HANDLE, P2: PVOID, P3: DWORD): BOOL {.winapi, dynlib: "psapi", importc.}
proc GetMappedFileNameW*(P1: HANDLE, P2: LPVOID, P3: LPWSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc GetMappedFileNameA*(P1: HANDLE, P2: LPVOID, P3: LPSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc.}
proc GetPerformanceInfo*(P1: PPERFORMANCE_INFORMATION, P2: DWORD): BOOL {.winapi, dynlib: "psapi", importc.}
proc EnumPageFilesW*(P1: PENUM_PAGE_FILE_CALLBACK, P2: LPVOID): BOOL {.winapi, dynlib: "psapi", importc.}
proc EnumPageFilesA*(P1: PENUM_PAGE_FILE_CALLBACK, P2: LPVOID): BOOL {.winapi, dynlib: "psapi", importc.}

when not defined(winansi):
  proc GetModuleBaseName*(P1: HANDLE, P2: HMODULE, P3: LPWSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetModuleBaseNameW".}
  proc GetModuleFileNameEx*(P1: HANDLE, P2: HMODULE, P3: LPWSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetModuleFileNameExW".}
  proc GetMappedFileName*(P1: HANDLE, P2: LPVOID, P3: LPWSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetMappedFileNameW".}
  proc GetDeviceDriverBaseName*(P1: LPVOID, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetDeviceDriverBaseNameW".}
  proc GetDeviceDriverFileName*(P1: LPVOID, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetDeviceDriverFileNameW".}
  proc EnumPageFiles*(P1: PENUM_PAGE_FILE_CALLBACK, P2: LPVOID): BOOL {.winapi, dynlib: "psapi", importc: "EnumPageFilesW".}
  proc GetProcessImageFileName*(P1: HANDLE, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetProcessImageFileNameW".}

else:
  proc GetModuleBaseName*(P1: HANDLE, P2: HMODULE, P3: LPSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetModuleBaseNameA".}
  proc GetModuleFileNameEx*(P1: HANDLE, P2: HMODULE, P3: LPSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetModuleFileNameExA".}
  proc GetMappedFileName*(P1: HANDLE, P2: LPVOID, P3: LPSTR, P4: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetMappedFileNameA".}
  proc GetDeviceDriverBaseName*(P1: LPVOID, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetDeviceDriverBaseNameA".}
  proc GetDeviceDriverFileName*(P1: LPVOID, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetDeviceDriverFileNameA".}
  proc EnumPageFiles*(P1: PENUM_PAGE_FILE_CALLBACK, P2: LPVOID): BOOL {.winapi, dynlib: "psapi", importc: "EnumPageFilesA".}
  proc GetProcessImageFileName*(P1: HANDLE, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "psapi", importc: "GetProcessImageFileNameA".}

# ext/wincrypt.nim

type
  ALG_ID* = UINT

const
  MS_DEF_PROV* = "Microsoft Base Cryptographic Provider v1.0"
  MS_ENHANCED_PROV* = "Microsoft Enhanced Cryptographic Provider v1.0"
  MS_STRONG_PROV* = "Microsoft Strong Cryptographic Provider"
  MS_DEF_RSA_SIG_PROV* = "Microsoft RSA Signature Cryptographic Provider"
  MS_DEF_RSA_SCHANNEL_PROV* = "Microsoft RSA SChannel Cryptographic Provider"
  MS_DEF_DSS_PROV* = "Microsoft Base DSS Cryptographic Provider"
  MS_DEF_DSS_DH_PROV* = "Microsoft Base DSS and Diffie-Hellman Cryptographic Provider"
  MS_ENH_DSS_DH_PROV* = "Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider"
  MS_DEF_DH_SCHANNEL_PROV* = "Microsoft DH SChannel Cryptographic Provider"
  MS_SCARD_PROV* = "Microsoft Base Smart Card Crypto Provider"
  MS_ENH_RSA_AES_PROV* = "Microsoft Enhanced RSA and AES Cryptographic Provider"

proc GET_ALG_CLASS*(x: ALG_ID): ALG_ID = x and 0xE000
proc GET_ALG_TYPE*(x: ALG_ID): ALG_ID = x and 0x1E00
proc GET_ALG_SID*(x: ALG_ID): ALG_ID = x and 0x01FF

const
  ALG_CLASS_ANY* = 0
  ALG_CLASS_SIGNATURE* = 0x2000
  ALG_CLASS_MSG_ENCRYPT* = 0x4000
  ALG_CLASS_DATA_ENCRYPT* = 0x6000
  ALG_CLASS_HASH* = 0x8000
  ALG_CLASS_KEY_EXCHANGE* = 0xA000
  ALG_CLASS_ALL* = 0xE000
  ALG_TYPE_ANY* = 0
  ALG_TYPE_DSS* = 0x0200
  ALG_TYPE_RSA* = 0x0400
  ALG_TYPE_BLOCK* = 0x0600
  ALG_TYPE_STREAM* = 0x0800
  ALG_TYPE_DH* = 0x0A00
  ALG_TYPE_SECURECHANNEL* = 0x0C00
  ALG_SID_ANY* = 0
  ALG_SID_RSA_ANY* = 0
  ALG_SID_RSA_PKCS* = 1
  ALG_SID_RSA_MSATWORK* = 2
  ALG_SID_RSA_ENTRUST* = 3
  ALG_SID_RSA_PGP* = 4
  ALG_SID_DSS_ANY* = 0
  ALG_SID_DSS_PKCS* = 1
  ALG_SID_DSS_DMS* = 2
  ALG_SID_DES* = 1
  ALG_SID_3DES* = 3
  ALG_SID_DESX* = 4
  ALG_SID_IDEA* = 5
  ALG_SID_CAST* = 6
  ALG_SID_SAFERSK64* = 7
  ALG_SID_SAFERSK128* = 8
  ALG_SID_3DES_112* = 9
  ALG_SID_SKIPJACK* = 10
  ALG_SID_TEK* = 11
  ALG_SID_CYLINK_MEK* = 12
  ALG_SID_RC5* = 13
  ALG_SID_RC2* = 2
  ALG_SID_RC4* = 1
  ALG_SID_SEAL* = 2
  ALG_SID_MD2* = 1
  ALG_SID_MD4* = 2
  ALG_SID_MD5* = 3
  ALG_SID_SHA* = 4
  ALG_SID_MAC* = 5
  ALG_SID_RIPEMD* = 6
  ALG_SID_RIPEMD160* = 7
  ALG_SID_SSL3SHAMD5* = 8
  ALG_SID_HMAC* = 9
  ALG_SID_TLS1PRF* = 10
  ALG_SID_AES_128* = 14
  ALG_SID_AES_192* = 15
  ALG_SID_AES_256* = 16
  ALG_SID_AES* = 17
  ALG_SID_EXAMPLE* = 80
  CALG_MD2* = (ALG_CLASS_HASH or ALG_TYPE_ANY or ALG_SID_MD2).ALG_ID
  CALG_MD4* = (ALG_CLASS_HASH or ALG_TYPE_ANY or ALG_SID_MD4).ALG_ID
  CALG_MD5* = (ALG_CLASS_HASH or ALG_TYPE_ANY or ALG_SID_MD5).ALG_ID
  CALG_SHA* = (ALG_CLASS_HASH or ALG_TYPE_ANY or ALG_SID_SHA).ALG_ID
  CALG_SHA1* = CALG_SHA.ALG_ID
  CALG_MAC* = (ALG_CLASS_HASH or ALG_TYPE_ANY or ALG_SID_MAC).ALG_ID
  CALG_3DES* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_BLOCK or 3).ALG_ID
  CALG_CYLINK_MEK* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_BLOCK or 12).ALG_ID
  CALG_SKIPJACK* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_BLOCK or 10).ALG_ID
  CALG_KEA_KEYX* = (ALG_CLASS_KEY_EXCHANGE or ALG_TYPE_STREAM or ALG_TYPE_DSS or 4).ALG_ID
  CALG_RSA_SIGN* = (ALG_CLASS_SIGNATURE or ALG_TYPE_RSA or ALG_SID_RSA_ANY).ALG_ID
  CALG_DSS_SIGN* = (ALG_CLASS_SIGNATURE or ALG_TYPE_DSS or ALG_SID_DSS_ANY).ALG_ID
  CALG_RSA_KEYX* = (ALG_CLASS_KEY_EXCHANGE or ALG_TYPE_RSA or ALG_SID_RSA_ANY).ALG_ID
  CALG_DES* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_BLOCK or ALG_SID_DES).ALG_ID
  CALG_RC2* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_BLOCK or ALG_SID_RC2).ALG_ID
  CALG_RC4* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_STREAM or ALG_SID_RC4).ALG_ID
  CALG_SEAL* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_STREAM or ALG_SID_SEAL).ALG_ID
  CALG_DH_EPHEM* = (ALG_CLASS_KEY_EXCHANGE or ALG_TYPE_STREAM or ALG_TYPE_DSS or ALG_SID_DSS_DMS).ALG_ID
  CALG_DESX* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_BLOCK or ALG_SID_DESX).ALG_ID
  CALG_TLS1PRF* = (ALG_CLASS_HASH or ALG_TYPE_ANY or ALG_SID_TLS1PRF).ALG_ID
  CALG_AES_128* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_BLOCK or ALG_SID_AES_128).ALG_ID
  CALG_AES_192* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_BLOCK or ALG_SID_AES_192).ALG_ID
  CALG_AES_256* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_BLOCK or ALG_SID_AES_256).ALG_ID
  CALG_AES* = (ALG_CLASS_DATA_ENCRYPT or ALG_TYPE_BLOCK or ALG_SID_AES).ALG_ID
  CRYPT_VERIFYCONTEXT* = -268435456
  CRYPT_NEWKEYSET* = 8
  CRYPT_DELETEKEYSET* = 16
  CRYPT_MACHINE_KEYSET* = 32
  CRYPT_SILENT* = 64
  CRYPT_EXPORTABLE* = 1
  CRYPT_USER_PROTECTED* = 2
  CRYPT_CREATE_SALT* = 4
  CRYPT_UPDATE_KEY* = 8
  SIMPLEBLOB* = 1
  PUBLICKEYBLOB* = 6
  PRIVATEKEYBLOB* = 7
  PLAINTEXTKEYBLOB* = 8
  OPAQUEKEYBLOB* = 9
  PUBLICKEYBLOBEX* = 10
  SYMMETRICWRAPKEYBLOB* = 11
  AT_KEYEXCHANGE* = 1
  AT_SIGNATURE* = 2
  CRYPT_USERDATA* = 1
  PKCS5_PADDING* = 1
  CRYPT_MODE_CBC* = 1
  CRYPT_MODE_ECB* = 2
  CRYPT_MODE_OFB* = 3
  CRYPT_MODE_CFB* = 4
  CRYPT_MODE_CTS* = 5
  CRYPT_MODE_CBCI* = 6
  CRYPT_MODE_CFBP* = 7
  CRYPT_MODE_OFBP* = 8
  CRYPT_MODE_CBCOFM* = 9
  CRYPT_MODE_CBCOFMI* = 10
  # CRYPT_ENCRYPT* = 1
  # CRYPT_DECRYPT* = 2
  CRYPT_EXPORT* = 4
  CRYPT_READ* = 8
  CRYPT_WRITE* = 16
  CRYPT_MAC* = 32
  HP_ALGID* = 1
  HP_HASHVAL* = 2
  HP_HASHSIZE* = 4
  HP_HMAC_INFO* = 5
  CRYPT_FAILED* = FALSE
  CRYPT_SUCCEED* = TRUE

template RCRYPT_SUCCEEDED*(r: untyped): untyped = ((r) == CRYPT_SUCCEED)
template RCRYPT_FAILED*(r: untyped): untyped = ((r) == CRYPT_FAILED)

const
  PP_ENUMALGS* = 1
  PP_ENUMCONTAINERS* = 2
  PP_IMPTYPE* = 3
  PP_NAME* = 4
  PP_VERSION* = 5
  PP_CONTAINER* = 6
  PP_CHANGE_PASSWORD* = 7
  PP_KEYSET_SEC_DESCR* = 8
  PP_CERTCHAIN* = 9
  PP_KEY_TYPE_SUBTYPE* = 10
  PP_PROVTYPE* = 16
  PP_KEYSTORAGE* = 17
  PP_APPLI_CERT* = 18
  PP_SYM_KEYSIZE* = 19
  PP_SESSION_KEYSIZE* = 20
  PP_UI_PROMPT* = 21
  PP_ENUMALGS_EX* = 22
  PP_ENUMMANDROOTS* = 25
  PP_ENUMELECTROOTS* = 26
  PP_KEYSET_TYPE* = 27
  PP_ADMIN_PIN* = 31
  PP_KEYEXCHANGE_PIN* = 32
  PP_SIGNATURE_PIN* = 33
  PP_SIG_KEYSIZE_INC* = 34
  PP_KEYX_KEYSIZE_INC* = 35
  PP_UNIQUE_CONTAINER* = 36
  PP_SGC_INFO* = 37
  PP_USE_HARDWARE_RNG* = 38
  PP_KEYSPEC* = 39
  PP_ENUMEX_SIGNING_PROT* = 40
  CRYPT_FIRST* = 1
  CRYPT_NEXT* = 2
  CRYPT_IMPL_HARDWARE* = 1
  CRYPT_IMPL_SOFTWARE* = 2
  CRYPT_IMPL_MIXED* = 3
  CRYPT_IMPL_UNKNOWN* = 4
  PROV_RSA_FULL* = 1
  PROV_RSA_SIG* = 2
  PROV_DSS* = 3
  PROV_FORTEZZA* = 4
  PROV_MS_MAIL* = 5
  PROV_SSL* = 6
  PROV_STT_MER* = 7
  PROV_STT_ACQ* = 8
  PROV_STT_BRND* = 9
  PROV_STT_ROOT* = 10
  PROV_STT_ISS* = 11
  PROV_RSA_SCHANNEL* = 12
  PROV_DSS_DH* = 13
  PROV_EC_ECDSA_SIG* = 14
  PROV_EC_ECNRA_SIG* = 15
  PROV_EC_ECDSA_FULL* = 16
  PROV_EC_ECNRA_FULL* = 17
  PROV_DH_SCHANNEL* = 18
  PROV_SPYRUS_LYNKS* = 20
  PROV_RNG* = 21
  PROV_INTEL_SEC* = 22
  PROV_RSA_AES* = 24
  MAXUIDLEN* = 64
  CUR_BLOB_VERSION* = 2
  X509_ASN_ENCODING* = 1
  PKCS_7_ASN_ENCODING* = 65536
  CERT_V1* = 0
  CERT_V2* = 1
  CERT_V3* = 2
  CERT_E_CHAINING* = (- 2146762486)
  CERT_E_CN_NO_MATCH* = (- 2146762481)
  CERT_E_EXPIRED* = (- 2146762495)
  CERT_E_PURPOSE* = (- 2146762490)
  CERT_E_REVOCATION_FAILURE* = (- 2146762482)
  CERT_E_REVOKED* = (- 2146762484)
  CERT_E_ROLE* = (- 2146762493)
  CERT_E_UNTRUSTEDROOT* = (- 2146762487)
  CERT_E_UNTRUSTEDTESTROOT* = (- 2146762483)
  CERT_E_VALIDITYPERIODNESTING* = (- 2146762494)
  CERT_E_WRONG_USAGE* = (- 2146762480)
  CERT_E_PATHLENCONST* = (- 2146762492)
  CERT_E_CRITICAL* = (- 2146762491)
  CERT_E_ISSUERCHAINING* = (- 2146762489)
  CERT_E_MALFORMED* = (- 2146762488)
  CRYPT_E_REVOCATION_OFFLINE* = (- 2146885613)
  CRYPT_E_REVOKED* = (- 2146885616)
  TRUST_E_BASIC_CONSTRAINTS* = (- 2146869223)
  TRUST_E_CERT_SIGNATURE* = (- 2146869244)
  TRUST_E_FAIL* = (- 2146762485)
  CERT_TRUST_NO_ERROR* = 0
  CERT_TRUST_IS_NOT_TIME_VALID* = 1
  CERT_TRUST_IS_NOT_TIME_NESTED* = 2
  CERT_TRUST_IS_REVOKED* = 4
  CERT_TRUST_IS_NOT_SIGNATURE_VALID* = 8
  CERT_TRUST_IS_NOT_VALID_FOR_USAGE* = 16
  CERT_TRUST_IS_UNTRUSTED_ROOT* = 32
  CERT_TRUST_REVOCATION_STATUS_UNKNOWN* = 64
  CERT_TRUST_IS_CYCLIC* = 128
  CERT_TRUST_IS_PARTIAL_CHAIN* = 65536
  CERT_TRUST_CTL_IS_NOT_TIME_VALID* = 131072
  CERT_TRUST_CTL_IS_NOT_SIGNATURE_VALID* = 262144
  CERT_TRUST_CTL_IS_NOT_VALID_FOR_USAGE* = 524288
  CERT_TRUST_HAS_EXACT_MATCH_ISSUER* = 1
  CERT_TRUST_HAS_KEY_MATCH_ISSUER* = 2
  CERT_TRUST_HAS_NAME_MATCH_ISSUER* = 4
  CERT_TRUST_IS_SELF_SIGNED* = 8
  CERT_TRUST_IS_COMPLEX_CHAIN* = 65536
  CERT_CHAIN_POLICY_BASE* = (cast[LPCSTR](1))
  CERT_CHAIN_POLICY_AUTHENTICODE* = (cast[LPCSTR](2))
  CERT_CHAIN_POLICY_AUTHENTICODE_TS* = (cast[LPCSTR](3))
  CERT_CHAIN_POLICY_SSL* = (cast[LPCSTR](4))
  CERT_CHAIN_POLICY_BASIC_CONSTRAINTS* = (cast[LPCSTR](5))
  CERT_CHAIN_POLICY_NT_AUTH* = (cast[LPCSTR](6))
  USAGE_MATCH_TYPE_AND* = 0
  USAGE_MATCH_TYPE_OR* = 1
  CERT_SIMPLE_NAME_STR* = 1
  CERT_OID_NAME_STR* = 2
  CERT_X500_NAME_STR* = 3
  CERT_NAME_STR_SEMICOLON_FLAG* = 1073741824
  CERT_NAME_STR_CRLF_FLAG* = 134217728
  CERT_NAME_STR_NO_PLUS_FLAG* = 536870912
  CERT_NAME_STR_NO_QUOTING_FLAG* = 268435456
  CERT_NAME_STR_REVERSE_FLAG* = 33554432
  CERT_NAME_STR_ENABLE_T61_UNICODE_FLAG* = 131072
  CERT_FIND_ANY* = 0
  CERT_FIND_CERT_ID* = 1048576
  CERT_FIND_CTL_USAGE* = 655360
  CERT_FIND_ENHKEY_USAGE* = 655360
  CERT_FIND_EXISTING* = 851968
  CERT_FIND_HASH* = 65536
  CERT_FIND_ISSUER_ATTR* = 196612
  CERT_FIND_ISSUER_NAME* = 131076
  CERT_FIND_ISSUER_OF* = 786432
  CERT_FIND_KEY_IDENTIFIER* = 983040
  CERT_FIND_KEY_SPEC* = 589824
  CERT_FIND_MD5_HASH* = 262144
  CERT_FIND_PROPERTY* = 327680
  CERT_FIND_PUBLIC_KEY* = 393216
  CERT_FIND_SHA1_HASH* = 65536
  CERT_FIND_SIGNATURE_HASH* = 917504
  CERT_FIND_SUBJECT_ATTR* = 196615
  CERT_FIND_SUBJECT_CERT* = 720896
  CERT_FIND_SUBJECT_NAME* = 131079
  CERT_FIND_SUBJECT_STR_A* = 458759
  CERT_FIND_SUBJECT_STR_W* = 524295
  CERT_FIND_ISSUER_STR_A* = 458756
  CERT_FIND_ISSUER_STR_W* = 524292
  CERT_FIND_OR_ENHKEY_USAGE_FLAG* = 16
  CERT_FIND_OPTIONAL_ENHKEY_USAGE_FLAG* = 1
  CERT_FIND_NO_ENHKEY_USAGE_FLAG* = 8
  CERT_FIND_VALID_ENHKEY_USAGE_FLAG* = 32
  CERT_FIND_EXT_ONLY_ENHKEY_USAGE_FLAG* = 2
  CERT_CASE_INSENSITIVE_IS_RDN_ATTRS_FLAG* = 2
  CERT_UNICODE_IS_RDN_ATTRS_FLAG* = 1
  CERT_CHAIN_FIND_BY_ISSUER* = 1
  CERT_CHAIN_FIND_BY_ISSUER_COMPARE_KEY_FLAG* = 1
  CERT_CHAIN_FIND_BY_ISSUER_COMPLEX_CHAIN_FLAG* = 2
  CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_FLAG* = 32768
  CERT_CHAIN_FIND_BY_ISSUER_CACHE_ONLY_URL_FLAG* = 4
  CERT_CHAIN_FIND_BY_ISSUER_LOCAL_MACHINE_FLAG* = 8
  CERT_CHAIN_FIND_BY_ISSUER_NO_KEY_FLAG* = 16384
  CERT_STORE_PROV_SYSTEM* = 10
  CERT_SYSTEM_STORE_LOCAL_MACHINE* = 131072
  szOID_PKIX_KP_SERVER_AUTH* = "4235600"
  szOID_SERVER_GATED_CRYPTO* = "4235658"
  szOID_SGC_NETSCAPE* = "2.16.840.1.113730.4.1"
  szOID_PKIX_KP_CLIENT_AUTH* = "1.3.6.1.5.5.7.3.2"
  CRYPT_NOHASHOID* = 0x00000001
  CRYPT_NO_SALT* = 0x00000010
  CRYPT_PREGEN* = 0x00000040
  CRYPT_RECIPIENT* = 0x00000010
  CRYPT_INITIATOR* = 0x00000040
  CRYPT_ONLINE* = 0x00000080
  CRYPT_SF* = 0x00000100
  CRYPT_CREATE_IV* = 0x00000200
  CRYPT_KEK* = 0x00000400
  CRYPT_DATA_KEY* = 0x00000800
  CRYPT_VOLATILE* = 0x00001000
  CRYPT_SGCKEY* = 0x00002000
  KP_IV* = 0x00000001
  KP_SALT* = 0x00000002
  KP_PADDING* = 0x00000003
  KP_MODE* = 0x00000004
  KP_MODE_BITS* = 0x00000005
  KP_PERMISSIONS* = 0x00000006
  KP_ALGID* = 0x00000007
  KP_BLOCKLEN* = 0x00000008
  KP_KEYLEN* = 0x00000009
  KP_SALT_EX* = 0x0000000A
  KP_P* = 0x0000000B
  KP_G* = 0x0000000C
  KP_Q* = 0x0000000D
  KP_X* = 0x0000000E
  KP_Y* = 0x0000000F
  KP_RA* = 0x00000010
  KP_RB* = 0x00000011
  KP_INFO* = 0x00000012
  KP_EFFECTIVE_KEYLEN* = 0x00000013
  KP_SCHANNEL_ALG* = 0x00000014
  KP_PUB_PARAMS* = 0x00000027
  CRYPT_FLAG_PCT1* = 0x00000001
  CRYPT_FLAG_SSL2* = 0x00000002
  CRYPT_FLAG_SSL3* = 0x00000004
  CRYPT_FLAG_TLS1* = 0x00000008
  CRYPT_FLAG_IPSEC* = 0x00000010
  CRYPT_FLAG_SIGNING* = 0x00000020
  SCHANNEL_MAC_KEY* = 0x00000000
  SCHANNEL_ENC_KEY* = 0x00000001
  INTERNATIONAL_USAGE* = 0x00000001

type
  HCRYPTPROV* = ULONG
  HCRYPTKEY* = ULONG
  HCRYPTHASH* = ULONG
  HCERTSTORE* = PVOID
  HCRYPTMSG* = PVOID
  HCERTCHAINENGINE* = PVOID
  VTableProvStruc* {.final, pure.} = object
    FuncVerifyImage*: FARPROC
  PVTableProvStruc* = ptr VTableProvStruc
  CRYPTOAPI_BLOB* {.final, pure.} = object
    cbData*: DWORD
    pbData*: ptr BYTE
  CRYPT_INTEGER_BLOB* = CRYPTOAPI_BLOB
  CRYPT_UINT_BLOB* = CRYPTOAPI_BLOB
  CRYPT_OBJID_BLOB* = CRYPTOAPI_BLOB
  CERT_NAME_BLOB* = CRYPTOAPI_BLOB
  CERT_RDN_VALUE_BLOB* = CRYPTOAPI_BLOB
  CERT_BLOB* = CRYPTOAPI_BLOB
  CRL_BLOB* = CRYPTOAPI_BLOB
  DATA_BLOB* = CRYPTOAPI_BLOB
  CRYPT_DATA_BLOB* = CRYPTOAPI_BLOB
  CRYPT_HASH_BLOB* = CRYPTOAPI_BLOB
  CRYPT_DIGEST_BLOB* = CRYPTOAPI_BLOB
  CRYPT_DER_BLOB* = CRYPTOAPI_BLOB
  CRYPT_ATTR_BLOB* = CRYPTOAPI_BLOB
  PCRYPT_INTEGER_BLOB* = ptr CRYPTOAPI_BLOB
  PCRYPT_UINT_BLOB* = ptr CRYPTOAPI_BLOB
  PCRYPT_OBJID_BLOB* = ptr CRYPTOAPI_BLOB
  PCERT_NAME_BLOB* = ptr CRYPTOAPI_BLOB
  PCERT_RDN_VALUE_BLOB* = ptr CRYPTOAPI_BLOB
  PCERT_BLOB* = ptr CRYPTOAPI_BLOB
  PCRL_BLOB* = ptr CRYPTOAPI_BLOB
  PDATA_BLOB* = ptr CRYPTOAPI_BLOB
  PCRYPT_DATA_BLOB* = ptr CRYPTOAPI_BLOB
  PCRYPT_HASH_BLOB* = ptr CRYPTOAPI_BLOB
  PCRYPT_DIGEST_BLOB* = ptr CRYPTOAPI_BLOB
  PCRYPT_DER_BLOB* = ptr CRYPTOAPI_BLOB
  PCRYPT_ATTR_BLOB* = ptr CRYPTOAPI_BLOB
  SSL_EXTRA_CERT_CHAIN_POLICY_PARA* {.final, pure.} = object
    cbStruct*: DWORD
    dwAuthType*: DWORD
    fdwChecks*: DWORD
    pwszServerName*: LPWSTR
  HTTPSPolicyCallbackData* = SSL_EXTRA_CERT_CHAIN_POLICY_PARA
  PSSL_EXTRA_CERT_CHAIN_POLICY_PARA* = ptr SSL_EXTRA_CERT_CHAIN_POLICY_PARA
  PHTTPSPolicyCallbackData* = ptr SSL_EXTRA_CERT_CHAIN_POLICY_PARA
  CERT_CHAIN_POLICY_PARA* {.final, pure.} = object
    cbSize*: DWORD
    dwFlags*: DWORD
    pvExtraPolicyPara*: pointer
  PCERT_CHAIN_POLICY_PARA* = ptr CERT_CHAIN_POLICY_PARA
  CERT_CHAIN_POLICY_STATUS* {.final, pure.} = object
    cbSize*: DWORD
    dwError*: DWORD
    lChainIndex*: LONG
    lElementIndex*: LONG
    pvExtraPolicyStatus*: pointer
  PCERT_CHAIN_POLICY_STATUS* = ptr CERT_CHAIN_POLICY_STATUS
  CRYPT_ALGORITHM_IDENTIFIER* {.final, pure.} = object
    pszObjId*: LPSTR
    Parameters*: CRYPT_OBJID_BLOB
  PCRYPT_ALGORITHM_IDENTIFIER* = ptr CRYPT_ALGORITHM_IDENTIFIER
  CRYPT_BIT_BLOB* {.final, pure.} = object
    cbData*: DWORD
    pbData*: ptr BYTE
    cUnusedBits*: DWORD
  PCRYPT_BIT_BLOB* = ptr CRYPT_BIT_BLOB
  CERT_PUBLIC_KEY_INFO* {.final, pure.} = object
    Algorithm*: CRYPT_ALGORITHM_IDENTIFIER
    PublicKey*: CRYPT_BIT_BLOB
  PCERT_PUBLIC_KEY_INFO* = ptr CERT_PUBLIC_KEY_INFO
  CERT_EXTENSION* {.final, pure.} = object
    pszObjId*: LPSTR
    fCritical*: BOOL
    Value*: CRYPT_OBJID_BLOB
  PCERT_EXTENSION* = ptr CERT_EXTENSION
  CERT_INFO* {.final, pure.} = object
    dwVersion*: DWORD
    SerialNumber*: CRYPT_INTEGER_BLOB
    SignatureAlgorithm*: CRYPT_ALGORITHM_IDENTIFIER
    Issuer*: CERT_NAME_BLOB
    NotBefore*: FILETIME
    NotAfter*: FILETIME
    Subject*: CERT_NAME_BLOB
    SubjectPublicKeyInfo*: CERT_PUBLIC_KEY_INFO
    IssuerUniqueId*: CRYPT_BIT_BLOB
    SubjectUniqueId*: CRYPT_BIT_BLOB
    cExtension*: DWORD
    rgExtension*: PCERT_EXTENSION
  PCERT_INFO* = ptr CERT_INFO
  CERT_CONTEXT* {.final, pure.} = object
    dwCertEncodingType*: DWORD
    pbCertEncoded*: ptr BYTE
    cbCertEncoded*: DWORD
    pCertInfo*: PCERT_INFO
    hCertStore*: HCERTSTORE
  PCERT_CONTEXT* = ptr CERT_CONTEXT
  PCCERT_CONTEXT* = ptr CERT_CONTEXT
  CTL_USAGE* {.final, pure.} = object
    cUsageIdentifier*: DWORD
    rgpszUsageIdentifier*: ptr LPSTR
  CERT_ENHKEY_USAGE* = CTL_USAGE
  PCTRL_USAGE* = ptr CTL_USAGE
  PCERT_ENHKEY_USAGE* = ptr CTL_USAGE
  CERT_USAGE_MATCH* {.final, pure.} = object
    dwType*: DWORD
    Usage*: CERT_ENHKEY_USAGE
  PCERT_USAGE_MATCH* = ptr CERT_USAGE_MATCH
  CERT_CHAIN_PARA* {.final, pure.} = object
    cbSize*: DWORD
    RequestedUsage*: CERT_USAGE_MATCH
    RequestedIssuancePolicy*: CERT_USAGE_MATCH
    dwUrlRetrievalTimeout*: DWORD
    fCheckRevocationFreshnessTime*: BOOL
    dwRevocationFreshnessTime*: DWORD
  PCERT_CHAIN_PARA* = ptr CERT_CHAIN_PARA
  PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK* = proc (P1: PCCERT_CONTEXT, P2: pointer): BOOL {.stdcall.}
  CERT_CHAIN_FIND_BY_ISSUER_PARA* {.final, pure.} = object
    cbSize*: DWORD
    pszUsageIdentifier*: LPCSTR
    dwKeySpec*: DWORD
    dwAcquirePrivateKeyFlags*: DWORD
    cIssuer*: DWORD
    rgIssuer*: ptr CERT_NAME_BLOB
    pfnFIndCallback*: PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK
    pvFindArg*: pointer
    pdwIssuerChainIndex*: ptr DWORD
    pdwIssuerElementIndex*: ptr DWORD
  PCERT_CHAIN_FIND_BY_ISSUER_PARA* = ptr CERT_CHAIN_FIND_BY_ISSUER_PARA
  CERT_TRUST_STATUS* {.final, pure.} = object
    dwErrorStatus*: DWORD
    dwInfoStatus*: DWORD
  PCERT_TRUST_STATUS* = ptr CERT_TRUST_STATUS
  CRL_ENTRY* {.final, pure.} = object
    SerialNumber*: CRYPT_INTEGER_BLOB
    RevocationDate*: FILETIME
    cExtension*: DWORD
    rgExtension*: PCERT_EXTENSION
  PCRL_ENTRY* = ptr CRL_ENTRY
  CRL_INFO* {.final, pure.} = object
    dwVersion*: DWORD
    SignatureAlgorithm*: CRYPT_ALGORITHM_IDENTIFIER
    Issuer*: CERT_NAME_BLOB
    ThisUpdate*: FILETIME
    NextUpdate*: FILETIME
    cCRLEntry*: DWORD
    rgCRLEntry*: PCRL_ENTRY
    cExtension*: DWORD
    rgExtension*: PCERT_EXTENSION
  PCRL_INFO* = ptr CRL_INFO
  CRL_CONTEXT* {.final, pure.} = object
    dwCertEncodingType*: DWORD
    pbCrlEncoded*: ptr BYTE
    cbCrlEncoded*: DWORD
    pCrlInfo*: PCRL_INFO
    hCertStore*: HCERTSTORE
  PCRL_CONTEXT* = ptr CRL_CONTEXT
  PCCRL_CONTEXT* = ptr CRL_CONTEXT
  CERT_REVOCATION_CRL_INFO* {.final, pure.} = object
    cbSize*: DWORD
    pBaseCRLContext*: PCCRL_CONTEXT
    pDeltaCRLContext*: PCCRL_CONTEXT
    pCrlEntry*: PCRL_ENTRY
    fDeltaCrlEntry*: BOOL
  PCERT_REVOCATION_CRL_INFO* = ptr CERT_REVOCATION_CRL_INFO
  CERT_REVOCATION_INFO* {.final, pure.} = object
    cbSize*: DWORD
    dwRevocationResult*: DWORD
    pszRevocationOid*: LPCSTR
    pvOidSpecificInfo*: LPVOID
    fHasFreshnessTime*: BOOL
    dwFreshnessTime*: DWORD
    pCrlInfo*: PCERT_REVOCATION_CRL_INFO
  PCERT_REVOCATION_INFO* = ptr CERT_REVOCATION_INFO
  CERT_CHAIN_ELEMENT* {.final, pure.} = object
    cbSize*: DWORD
    pCertContext*: PCCERT_CONTEXT
    TrustStatus*: CERT_TRUST_STATUS
    pRevocationInfo*: PCERT_REVOCATION_INFO
    pIssuanceUsage*: PCERT_ENHKEY_USAGE
    pApplicationUsage*: PCERT_ENHKEY_USAGE
  PCERT_CHAIN_ELEMENT* = ptr CERT_CHAIN_ELEMENT
  CRYPT_ATTRIBUTE* {.final, pure.} = object
    pszObjId*: LPSTR
    cValue*: DWORD
    rgValue*: PCRYPT_ATTR_BLOB
  PCRYPT_ATTRIBUTE* = ptr CRYPT_ATTRIBUTE
  CTL_ENTRY* {.final, pure.} = object
    SubjectIdentifier*: CRYPT_DATA_BLOB
    cAttribute*: DWORD
    rgAttribute*: PCRYPT_ATTRIBUTE
  PCTL_ENTRY* = ptr CTL_ENTRY
  CTL_INFO* {.final, pure.} = object
    dwVersion*: DWORD
    SubjectUsage*: CTL_USAGE
    ListIdentifier*: CRYPT_DATA_BLOB
    SequenceNumber*: CRYPT_INTEGER_BLOB
    ThisUpdate*: FILETIME
    NextUpdate*: FILETIME
    SubjectAlgorithm*: CRYPT_ALGORITHM_IDENTIFIER
    cCTLEntry*: DWORD
    rgCTLEntry*: PCTL_ENTRY
    cExtension*: DWORD
    rgExtension*: PCERT_EXTENSION
  PCTL_INFO* = ptr CTL_INFO
  CTL_CONTEXT* {.final, pure.} = object
    dwMsgAndCertEncodingType*: DWORD
    pbCtlEncoded*: ptr BYTE
    cbCtlEncoded*: DWORD
    pCtlInfo*: PCTL_INFO
    hCertStore*: HCERTSTORE
    hCryptMsg*: HCRYPTMSG
    pbCtlContent*: ptr BYTE
    cbCtlContent*: DWORD
  PCTL_CONTEXT* = ptr CTL_CONTEXT
  PCCTL_CONTEXT* = ptr CTL_CONTEXT
  CERT_TRUST_LIST_INFO* {.final, pure.} = object
    cbSize*: DWORD
    pCtlEntry*: PCTL_ENTRY
    pCtlContext*: PCCTL_CONTEXT
  PCERT_TRUST_LIST_INFO* = ptr CERT_TRUST_LIST_INFO
  CERT_SIMPLE_CHAIN* {.final, pure.} = object
    cbSize*: DWORD
    TrustStatus*: CERT_TRUST_STATUS
    cElement*: DWORD
    rgpElement*: ptr PCERT_CHAIN_ELEMENT
    pTrustListInfo*: PCERT_TRUST_LIST_INFO
    fHasRevocationFreshnessTime*: BOOL
    dwRevocationFreshnessTime*: DWORD
  PCERT_SIMPLE_CHAIN* = ptr CERT_SIMPLE_CHAIN
  PCCERT_CHAIN_CONTEXT* = ptr CERT_CHAIN_CONTEXT
  CERT_CHAIN_CONTEXT* {.final, pure.} = object
    cbSize*: DWORD
    TrustStatus*: CERT_TRUST_STATUS
    cChain*: DWORD
    rgpChain*: ptr PCERT_SIMPLE_CHAIN
    cLowerQualityChainContext*: DWORD
    rgpLowerQualityChainContext*: ptr PCCERT_CHAIN_CONTEXT
    fHasRevocationFreshnessTime*: BOOL
    dwRevocationFreshnessTime*: DWORD
  PCERT_CHAIN_CONTEXT* = ptr CERT_CHAIN_CONTEXT
  PROV_ENUMALGS* {.final, pure.} = object
    aiAlgid*: ALG_ID
    dwBitLen*: DWORD
    dwNameLen*: DWORD
    szName*: array[20, CHAR]
  PUBLICKEYSTRUC* {.final, pure.} = object
    bType*: BYTE
    bVersion*: BYTE
    reserved*: WORD
    aiKeyAlg*: ALG_ID
  BLOBHEADER* = PUBLICKEYSTRUC
  RSAPUBKEY* {.final, pure.} = object
    magic*: DWORD
    bitlen*: DWORD
    pubexp*: DWORD
  HMAC_INFO* {.final, pure.} = object
    HashAlgid*: ALG_ID
    pbInnerString*: ptr BYTE
    cbInnerString*: DWORD
    pbOuterString*: ptr BYTE
    cbOuterString*: DWORD
  PHMAC_INFO* = ptr HMAC_INFO

proc CertCloseStore*(P1: HCERTSTORE, P2: DWORD): BOOL {.winapi, dynlib: "crypt32", importc.}
proc CertGetCertificateChain*(P1: HCERTCHAINENGINE, P2: PCCERT_CONTEXT, P3: LPFILETIME, P4: HCERTSTORE, P5: PCERT_CHAIN_PARA, P6: DWORD, P7: LPVOID, P8: ptr PCCERT_CHAIN_CONTEXT): BOOL {.winapi, dynlib: "crypt32", importc.}
proc CertVerifyCertificateChainPolicy*(P1: LPCSTR, P2: PCCERT_CHAIN_CONTEXT, P3: PCERT_CHAIN_POLICY_PARA, P4: PCERT_CHAIN_POLICY_STATUS): BOOL {.winapi, dynlib: "crypt32", importc.}
proc CertFreeCertificateChain*(P1: PCCERT_CHAIN_CONTEXT): void {.winapi, dynlib: "crypt32", importc.}
proc CertNameToStrA*(P1: DWORD, P2: PCERT_NAME_BLOB, P3: DWORD, P4: LPSTR, P5: DWORD): DWORD {.winapi, dynlib: "crypt32", importc.}
proc CertNameToStrW*(P1: DWORD, P2: PCERT_NAME_BLOB, P3: DWORD, P4: LPWSTR, P5: DWORD): DWORD {.winapi, dynlib: "crypt32", importc.}
proc CertOpenSystemStoreA*(P1: HCRYPTPROV, P2: LPCSTR): HCERTSTORE {.winapi, dynlib: "crypt32", importc.}
proc CertOpenSystemStoreW*(P1: HCRYPTPROV, P2: LPCWSTR): HCERTSTORE {.winapi, dynlib: "crypt32", importc.}
proc CertOpenStore*(P1: LPCSTR, P2: DWORD, P3: HCRYPTPROV, P4: DWORD, P5: pointer): HCERTSTORE {.winapi, dynlib: "crypt32", importc.}
proc CertFindCertificateInStore*(P1: HCERTSTORE, P2: DWORD, P3: DWORD, P4: DWORD, P5: pointer, P6: PCCERT_CONTEXT): PCCERT_CONTEXT {.winapi, dynlib: "crypt32", importc.}
proc CertFreeCertificateContext*(P1: PCCERT_CONTEXT): BOOL {.winapi, dynlib: "crypt32", importc.}
proc CertGetIssuerCertificateFromStore*(P1: HCERTSTORE, P2: PCCERT_CONTEXT, P3: PCCERT_CONTEXT, P4: ptr DWORD): PCCERT_CONTEXT {.winapi, dynlib: "crypt32", importc.}
proc CertFindChainInStore*(P1: HCERTSTORE, P2: DWORD, P3: DWORD, P4: DWORD, P5: pointer, P6: PCCERT_CHAIN_CONTEXT): PCCERT_CHAIN_CONTEXT {.winapi, dynlib: "crypt32", importc.}
proc CryptAcquireContextA*(P1: ptr HCRYPTPROV, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptAcquireContextW*(P1: ptr HCRYPTPROV, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptContextAddRef*(P1: HCRYPTPROV, P2: ptr DWORD, P3: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptReleaseContext*(P1: HCRYPTPROV, P2: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptGenKey*(P1: HCRYPTPROV, P2: ALG_ID, P3: DWORD, P4: ptr HCRYPTKEY): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptDeriveKey*(P1: HCRYPTPROV, P2: ALG_ID, P3: HCRYPTHASH, P4: DWORD, P5: ptr HCRYPTKEY): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptDestroyKey*(P1: HCRYPTKEY): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptDuplicateHash*(P1: HCRYPTHASH, P2: ptr DWORD, P3: DWORD, P4: ptr HCRYPTHASH): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptDuplicateKey*(P1: HCRYPTKEY, P2: ptr DWORD, P3: DWORD, P4: ptr HCRYPTKEY): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptSetKeyParam*(P1: HCRYPTKEY, P2: DWORD, P3: PBYTE, P4: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptGetKeyParam*(P1: HCRYPTKEY, P2: DWORD, P3: PBYTE, P4: PDWORD, P5: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptSetHashParam*(P1: HCRYPTHASH, P2: DWORD, P3: PBYTE, P4: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptGetHashParam*(P1: HCRYPTHASH, P2: DWORD, P3: PBYTE, P4: PDWORD, P5: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptSetProvParam*(P1: HCRYPTPROV, P2: DWORD, P3: PBYTE, P4: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptGetProvParam*(P1: HCRYPTPROV, P2: DWORD, P3: PBYTE, P4: PDWORD, P5: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptGenRandom*(P1: HCRYPTPROV, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptGetUserKey*(P1: HCRYPTPROV, P2: DWORD, P3: ptr HCRYPTKEY): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptExportKey*(P1: HCRYPTKEY, P2: HCRYPTKEY, P3: DWORD, P4: DWORD, P5: PBYTE, P6: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptImportKey*(P1: HCRYPTPROV, P2: PBYTE, P3: DWORD, P4: HCRYPTKEY, P5: DWORD, P6: ptr HCRYPTKEY): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptEncrypt*(P1: HCRYPTKEY, P2: HCRYPTHASH, P3: BOOL, P4: DWORD, P5: PBYTE, P6: PDWORD, P7: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptDecrypt*(P1: HCRYPTKEY, P2: HCRYPTHASH, P3: BOOL, P4: DWORD, P5: PBYTE, P6: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptCreateHash*(P1: HCRYPTPROV, P2: ALG_ID, P3: HCRYPTKEY, P4: DWORD, P5: ptr HCRYPTHASH): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptHashData*(P1: HCRYPTHASH, P2: PBYTE, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptHashSessionKey*(P1: HCRYPTHASH, P2: HCRYPTKEY, P3: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptGetHashValue*(P1: HCRYPTHASH, P2: DWORD, P3: PBYTE, P4: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptDestroyHash*(P1: HCRYPTHASH): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptSignHashA*(P1: HCRYPTHASH, P2: DWORD, P3: LPCSTR, P4: DWORD, P5: PBYTE, P6: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptSignHashW*(P1: HCRYPTHASH, P2: DWORD, P3: LPCWSTR, P4: DWORD, P5: PBYTE, P6: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptVerifySignatureA*(P1: HCRYPTHASH, P2: PBYTE, P3: DWORD, P4: HCRYPTKEY, P5: LPCSTR, P6: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptVerifySignatureW*(P1: HCRYPTHASH, P2: PBYTE, P3: DWORD, P4: HCRYPTKEY, P5: LPCWSTR, P6: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptSetProviderA*(P1: LPCSTR, P2: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}
proc CryptSetProviderW*(P1: LPCWSTR, P2: DWORD): BOOL {.winapi, dynlib: "advapi32", importc.}

when not defined(winansi):
  proc CertNameToStr*(P1: DWORD, P2: PCERT_NAME_BLOB, P3: DWORD, P4: LPWSTR, P5: DWORD): DWORD {.winapi, dynlib: "crypt32", importc: "CertNameToStrW".}
  proc CryptAcquireContext*(P1: ptr HCRYPTPROV, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "advapi32", importc: "CryptAcquireContextW".}
  proc CryptSignHash*(P1: HCRYPTHASH, P2: DWORD, P3: LPCWSTR, P4: DWORD, P5: PBYTE, P6: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "CryptSignHashW".}
  proc CryptVerifySignature*(P1: HCRYPTHASH, P2: PBYTE, P3: DWORD, P4: HCRYPTKEY, P5: LPCWSTR, P6: DWORD): BOOL {.winapi, dynlib: "advapi32", importc: "CryptVerifySignatureW".}
  proc CryptSetProvider*(P1: LPCWSTR, P2: DWORD): BOOL {.winapi, dynlib: "advapi32", importc: "CryptSetProviderW".}
  proc CertOpenSystemStore*(P1: HCRYPTPROV, P2: LPCWSTR): HCERTSTORE {.winapi, dynlib: "crypt32", importc: "CertOpenSystemStoreW".}

else:
  proc CertNameToStr*(P1: DWORD, P2: PCERT_NAME_BLOB, P3: DWORD, P4: LPSTR, P5: DWORD): DWORD {.winapi, dynlib: "crypt32", importc: "CertNameToStrA".}
  proc CryptAcquireContext*(P1: ptr HCRYPTPROV, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "advapi32", importc: "CryptAcquireContextA".}
  proc CryptSignHash*(P1: HCRYPTHASH, P2: DWORD, P3: LPCSTR, P4: DWORD, P5: PBYTE, P6: PDWORD): BOOL {.winapi, dynlib: "advapi32", importc: "CryptSignHashA".}
  proc CryptVerifySignature*(P1: HCRYPTHASH, P2: PBYTE, P3: DWORD, P4: HCRYPTKEY, P5: LPCSTR, P6: DWORD): BOOL {.winapi, dynlib: "advapi32", importc: "CryptVerifySignatureA".}
  proc CryptSetProvider*(P1: LPCSTR, P2: DWORD): BOOL {.winapi, dynlib: "advapi32", importc: "CryptSetProviderA".}
  proc CertOpenSystemStore*(P1: HCRYPTPROV, P2: LPCSTR): HCERTSTORE {.winapi, dynlib: "crypt32", importc: "CertOpenSystemStoreA".}

# ext/schannel.nim

const
  SCHANNEL_CRED_VERSION* = 4
  SCHANNEL_SHUTDOWN* = 1
  AUTHTYPE_CLIENT* = 1
  AUTHTYPE_SERVER* = 2
  SP_PROT_PCT1_SERVER* = 0x01
  SP_PROT_PCT1_CLIENT* = 0x02
  SP_PROT_SSL2_SERVER* = 0x04
  SP_PROT_SSL2_CLIENT* = 0x08
  SP_PROT_SSL3_SERVER* = 0x10
  SP_PROT_SSL3_CLIENT* = 0x20
  SP_PROT_TLS1_SERVER* = 0x40
  SP_PROT_TLS1_CLIENT* = 0x80
  SP_PROT_PCT1* = (SP_PROT_PCT1_CLIENT or SP_PROT_PCT1_SERVER)
  SP_PROT_TLS1* = (SP_PROT_TLS1_CLIENT or SP_PROT_TLS1_SERVER)
  SP_PROT_SSL2* = (SP_PROT_SSL2_CLIENT or SP_PROT_SSL2_SERVER)
  SP_PROT_SSL3* = (SP_PROT_SSL3_CLIENT or SP_PROT_SSL3_SERVER)
  SCH_CRED_NO_SYSTEM_MAPPER* = 0x0002
  SCH_CRED_NO_SERVERNAME_CHECK* = 0x0004
  SCH_CRED_MANUAL_CRED_VALIDATION* = 0x0008
  SCH_CRED_NO_DEFAULT_CREDS* = 0x0010
  SCH_CRED_AUTO_CRED_VALIDATION* = 0x0020
  SCH_CRED_USE_DEFAULT_CREDS* = 0x0040
  SCH_CRED_REVOCATION_CHECK_END_CERT* = 0x0100
  SCH_CRED_REVOCATION_CHECK_CHAIN* = 0x0200
  SCH_CRED_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT* = 0x0400
  SCH_CRED_IGNORE_NO_REVOCATION_CHECK* = 0x0800
  SCH_CRED_IGNORE_REVOCATION_OFFLINE* = 0x1000

type
  HMAPPER* {.final, pure.} = object
  SCHANNEL_CRED* {.final, pure.} = object
    dwVersion*: DWORD
    cCreds*: DWORD
    paCred*: ptr PCCERT_CONTEXT
    hRootStore*: HCERTSTORE
    cMappers*: DWORD
    aphMappers*: ptr ptr HMAPPER
    cSupportedAlgs*: DWORD
    palgSupportedAlgs*: ptr ALG_ID
    grbitEnabledProtocols*: DWORD
    dwMinimumCypherStrength*: DWORD
    dwMaximumCypherStrength*: DWORD
    dwSessionLifespan*: DWORD
    dwFlags*: DWORD
    reserved*: DWORD
  PSCHANNEL_CRED* = ptr SCHANNEL_CRED
  SecPkgCred_SupportedAlgs* {.final, pure.} = object
    cSupportedAlgs*: DWORD
    palgSupportedAlgs*: ptr ALG_ID
  PSecPkgCred_SupportedAlgs* = ptr SecPkgCred_SupportedAlgs
  SecPkgCred_CypherStrengths* {.final, pure.} = object
    dwMinimumCypherStrength*: DWORD
    dwMaximumCypherStrength*: DWORD
  PSecPkgCred_CypherStrengths* = ptr SecPkgCred_CypherStrengths
  SecPkgCred_SupportedProtocols* {.final, pure.} = object
    grbitProtocol*: DWORD
  PSecPkgCred_SupportedProtocols* = ptr SecPkgCred_SupportedProtocols
  SecPkgContext_IssuerListInfoEx* {.final, pure.} = object
    aIssuers*: PCERT_NAME_BLOB
    cIssuers*: DWORD
  PSecPkgContext_IssuerListInfoEx* = ptr SecPkgContext_IssuerListInfoEx
  SecPkgContext_ConnectionInfo* {.final, pure.} = object
    dwProtocol*: DWORD
    aiCipher*: ALG_ID
    dwCipherStrength*: DWORD
    aiHash*: ALG_ID
    dwHashStrength*: DWORD
    aiExch*: ALG_ID
    dwExchStrength*: DWORD
  PSecPkgContext_ConnectionInfo* = ptr SecPkgContext_ConnectionInfo

# ext/tlhelp32.nim

const
  HF32_DEFAULT* = 1
  HF32_SHARED* = 2
  LF32_FIXED* = 0x1
  LF32_FREE* = 0x2
  LF32_MOVEABLE* = 0x4
  MAX_MODULE_NAME32* = 255
  TH32CS_SNAPHEAPLIST* = 0x1
  TH32CS_SNAPPROCESS* = 0x2
  TH32CS_SNAPTHREAD* = 0x4
  TH32CS_SNAPMODULE* = 0x8
  TH32CS_SNAPALL* = (( TH32CS_SNAPHEAPLIST or TH32CS_SNAPPROCESS or TH32CS_SNAPTHREAD or TH32CS_SNAPMODULE ))
  TH32CS_INHERIT* = 0x80000000'u32

type
  HEAPLIST32* {.final, pure.} = object
    dwSize*: DWORD
    th32ProcessID*: DWORD
    th32HeapID*: DWORD
    dwFlags*: DWORD
  PHEAPLIST32* = ptr HEAPLIST32
  LPHEAPLIST32* = ptr HEAPLIST32
  HEAPENTRY32* {.final, pure.} = object
    dwSize*: DWORD
    hHandle*: HANDLE
    dwAddress*: DWORD
    dwBlockSize*: DWORD
    dwFlags*: DWORD
    dwLockCount*: DWORD
    dwResvd*: DWORD
    th32ProcessID*: DWORD
    th32HeapID*: DWORD
  PHEAPENTRY32* = ptr HEAPENTRY32
  LPHEAPENTRY32* = ptr HEAPENTRY32
  PROCESSENTRY32W* {.final, pure.} = object
    dwSize*: DWORD
    cntUsage*: DWORD
    th32ProcessID*: DWORD
    th32DefaultHeapID*: DWORD
    th32ModuleID*: DWORD
    cntThreads*: DWORD
    th32ParentProcessID*: DWORD
    pcPriClassBase*: LONG
    dwFlags*: DWORD
    szExeFile*: array[MAX_PATH, WCHAR]
  PPROCESSENTRY32W* = ptr PROCESSENTRY32W
  LPPROCESSENTRY32W* = ptr PROCESSENTRY32W
  THREADENTRY32* {.final, pure.} = object
    dwSize*: DWORD
    cntUsage*: DWORD
    th32ThreadID*: DWORD
    th32OwnerProcessID*: DWORD
    tpBasePri*: LONG
    tpDeltaPri*: LONG
    dwFlags*: DWORD
  PTHREADENTRY32* = ptr THREADENTRY32
  LPTHREADENTRY32* = ptr THREADENTRY32
  MODULEENTRY32W* {.final, pure.} = object
    dwSize*: DWORD
    th32ModuleID*: DWORD
    th32ProcessID*: DWORD
    GlblcntUsage*: DWORD
    ProccntUsage*: DWORD
    modBaseAddr*: ptr BYTE
    modBaseSize*: DWORD
    hModule*: HMODULE
    szModule*: array[MAX_MODULE_NAME32 + 1, WCHAR]
    szExePath*: array[MAX_PATH, WCHAR]
  PMODULEENTRY32W* = ptr MODULEENTRY32W
  LPMODULEENTRY32W* = ptr MODULEENTRY32W

when not defined(winansi):
  type
    PROCESSENTRY32* = PROCESSENTRY32W
    PPROCESSENTRY32* = PPROCESSENTRY32W
    LPPROCESSENTRY32* = LPPROCESSENTRY32W
    MODULEENTRY32* = MODULEENTRY32W
    PMODULEENTRY32* = PMODULEENTRY32W
    LPMODULEENTRY32* = LPMODULEENTRY32W

else:
  type
    PROCESSENTRY32* {.final, pure.} = object
      dwSize*: DWORD
      cntUsage*: DWORD
      th32ProcessID*: DWORD
      th32DefaultHeapID*: DWORD
      th32ModuleID*: DWORD
      cntThreads*: DWORD
      th32ParentProcessID*: DWORD
      pcPriClassBase*: LONG
      dwFlags*: DWORD
      szExeFile*: array[MAX_PATH, CHAR]
    PPROCESSENTRY32* = ptr PROCESSENTRY32
    LPPROCESSENTRY32* = ptr PROCESSENTRY32
    MODULEENTRY32* {.final, pure.} = object
      dwSize*: DWORD
      th32ModuleID*: DWORD
      th32ProcessID*: DWORD
      GlblcntUsage*: DWORD
      ProccntUsage*: DWORD
      modBaseAddr*: ptr BYTE
      modBaseSize*: DWORD
      hModule*: HMODULE
      szModule*: array[MAX_MODULE_NAME32 + 1, char]
      szExePath*: array[MAX_PATH, char]
    PMODULEENTRY32* = ptr MODULEENTRY32
    LPMODULEENTRY32* = ptr MODULEENTRY32

proc Heap32First*(P1: LPHEAPENTRY32, P2: DWORD, P3: DWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc Heap32ListFirst*(P1: HANDLE, P2: LPHEAPLIST32): BOOL {.winapi, dynlib: "kernel32", importc.}
proc Heap32ListNext*(P1: HANDLE, P2: LPHEAPLIST32): BOOL {.winapi, dynlib: "kernel32", importc.}
proc Heap32Next*(P1: LPHEAPENTRY32): BOOL {.winapi, dynlib: "kernel32", importc.}
proc Thread32First*(P1: HANDLE, P2: LPTHREADENTRY32): BOOL {.winapi, dynlib: "kernel32", importc.}
proc Thread32Next*(P1: HANDLE, P2: LPTHREADENTRY32): BOOL {.winapi, dynlib: "kernel32", importc.}
proc Toolhelp32ReadProcessMemory*(P1: DWORD, P2: LPCVOID, P3: LPVOID, P4: DWORD, P5: LPDWORD): BOOL {.winapi, dynlib: "kernel32", importc.}
proc CreateToolhelp32Snapshot*(P1: DWORD, P2: DWORD): HANDLE {.winapi, dynlib: "kernel32", importc.}

proc Module32FirstW*(P1: HANDLE, P2: LPMODULEENTRY32W): BOOL {.winapi, dynlib: "kernel32", importc.}
proc Module32NextW*(P1: HANDLE, P2: LPMODULEENTRY32W): BOOL {.winapi, dynlib: "kernel32", importc.}
proc Process32FirstW*(P1: HANDLE, P2: LPPROCESSENTRY32W): BOOL {.winapi, dynlib: "kernel32", importc.}
proc Process32NextW*(P1: HANDLE, P2: LPPROCESSENTRY32W): BOOL {.winapi, dynlib: "kernel32", importc.}

when not defined(winansi):
  proc Module32First*(P1: HANDLE, P2: LPMODULEENTRY32W): BOOL {.winapi, dynlib: "kernel32", importc: "Module32FirstW".}
  proc Module32Next*(P1: HANDLE, P2: LPMODULEENTRY32W): BOOL {.winapi, dynlib: "kernel32", importc: "Module32NextW".}
  proc Process32First*(P1: HANDLE, P2: LPPROCESSENTRY32W): BOOL {.winapi, dynlib: "kernel32", importc: "Process32FirstW".}
  proc Process32Next*(P1: HANDLE, P2: LPPROCESSENTRY32W): BOOL {.winapi, dynlib: "kernel32", importc: "Process32NextW".}

else:
  proc Module32First*(P1: HANDLE, P2: LPMODULEENTRY32): BOOL {.winapi, dynlib: "kernel32", importc.}
  proc Module32Next*(P1: HANDLE, P2: LPMODULEENTRY32): BOOL {.winapi, dynlib: "kernel32", importc.}
  proc Process32First*(P1: HANDLE, P2: LPPROCESSENTRY32): BOOL {.winapi, dynlib: "kernel32", importc.}
  proc Process32Next*(P1: HANDLE, P2: LPPROCESSENTRY32): BOOL {.winapi, dynlib: "kernel32", importc.}

# ext/tmschema.nim

const
  BP_PUSHBUTTON* = 1
  BP_RADIOBUTTON* = 2
  BP_CHECKBOX* = 3
  BP_GROUPBOX* = 4
  BP_USERBUTTON* = 5
  CBS_UNCHECKEDNORMAL* = 1
  CBS_UNCHECKEDHOT* = 2
  CBS_UNCHECKEDPRESSED* = 3
  CBS_UNCHECKEDDISABLED* = 4
  CBS_CHECKEDNORMAL* = 5
  CBS_CHECKEDHOT* = 6
  CBS_CHECKEDPRESSED* = 7
  CBS_CHECKEDDISABLED* = 8
  CBS_MIXEDNORMAL* = 9
  CBS_MIXEDHOT* = 10
  CBS_MIXEDPRESSED* = 11
  CBS_MIXEDDISABLED* = 12
  GBS_NORMAL* = 1
  GBS_DISABLED* = 2
  PBS_NORMAL* = 1
  PBS_HOT* = 2
  PBS_PRESSED* = 3
  PBS_DISABLED* = 4
  PBS_DEFAULTED* = 5
  RBS_UNCHECKEDNORMAL* = 1
  RBS_UNCHECKEDHOT* = 2
  RBS_UNCHECKEDPRESSED* = 3
  RBS_UNCHECKEDDISABLED* = 4
  RBS_CHECKEDNORMAL* = 5
  RBS_CHECKEDHOT* = 6
  RBS_CHECKEDPRESSED* = 7
  RBS_CHECKEDDISABLED* = 8
  CLP_TIME* = 1
  CLS_NORMAL* = 1
  CP_DROPDOWNBUTTON* = 1
  CBXS_NORMAL* = 1
  CBXS_HOT* = 2
  CBXS_PRESSED* = 3
  CBXS_DISABLED* = 4
  EP_EDITTEXT* = 1
  EP_CARET* = 2
  ETS_NORMAL* = 1
  ETS_HOT* = 2
  ETS_SELECTED* = 3
  ETS_DISABLED* = 4
  ETS_FOCUSED* = 5
  ETS_READONLY* = 6
  ETS_ASSIST* = 7
  EBP_HEADERBACKGROUND* = 1
  EBP_HEADERCLOSE* = 2
  EBP_HEADERPIN* = 3
  EBP_IEBARMENU* = 4
  EBP_NORMALGROUPBACKGROUND* = 5
  EBP_NORMALGROUPCOLLAPSE* = 6
  EBP_NORMALGROUPEXPAND* = 7
  EBP_NORMALGROUPHEAD* = 8
  EBP_SPECIALGROUPBACKGROUND* = 9
  EBP_SPECIALGROUPCOLLAPSE* = 10
  EBP_SPECIALGROUPEXPAND* = 11
  EBP_SPECIALGROUPHEAD* = 12
  EBHC_NORMAL* = 1
  EBHC_HOT* = 2
  EBHC_PRESSED* = 3
  EBHP_NORMAL* = 1
  EBHP_HOT* = 2
  EBHP_PRESSED* = 3
  EBHP_SELECTEDNORMAL* = 4
  EBHP_SELECTEDHOT* = 5
  EBHP_SELECTEDPRESSED* = 6
  EBM_NORMAL* = 1
  EBM_HOT* = 2
  EBM_PRESSED* = 3
  EBNGC_NORMAL* = 1
  EBNGC_HOT* = 2
  EBNGC_PRESSED* = 3
  EBNGE_NORMAL* = 1
  EBNGE_HOT* = 2
  EBNGE_PRESSED* = 3
  EBSGC_NORMAL* = 1
  EBSGC_HOT* = 2
  EBSGC_PRESSED* = 3
  EBSGE_NORMAL* = 1
  EBSGE_HOT* = 2
  EBSGE_PRESSED* = 3
  HP_HEADERITEM* = 1
  HP_HEADERITEMLEFT* = 2
  HP_HEADERITEMRIGHT* = 3
  HP_HEADERSORTARROW* = 4
  HIS_NORMAL* = 1
  HIS_HOT* = 2
  HIS_PRESSED* = 3
  HILS_NORMAL* = 1
  HILS_HOT* = 2
  HILS_PRESSED* = 3
  HIRS_NORMAL* = 1
  HIRS_HOT* = 2
  HIRS_PRESSED* = 3
  HSAS_SORTEDUP* = 1
  HSAS_SORTEDDOWN* = 2
  LVP_LISTITEM* = 1
  LVP_LISTGROUP* = 2
  LVP_LISTDETAIL* = 3
  LVP_LISTSORTEDDETAIL* = 4
  LVP_EMPTYTEXT* = 5
  LIS_NORMAL* = 1
  LIS_HOT* = 2
  LIS_SELECTED* = 3
  LIS_DISABLED* = 4
  LIS_SELECTEDNOTFOCUS* = 5
  MP_MENUITEM* = 1
  MP_MENUDROPDOWN* = 2
  MP_MENUBARITEM* = 3
  MP_MENUBARDROPDOWN* = 4
  MP_CHEVRON* = 5
  MP_SEPARATOR* = 6
  MS_NORMAL* = 1
  MS_SELECTED* = 2
  MS_DEMOTED* = 3
  MDP_NEWAPPBUTTON* = 1
  MDP_SEPERATOR* = 2
  MDS_NORMAL* = 1
  MDS_HOT* = 2
  MDS_PRESSED* = 3
  MDS_DISABLED* = 4
  MDS_CHECKED* = 5
  MDS_HOTCHECKED* = 6
  PGRP_UP* = 1
  PGRP_DOWN* = 2
  PGRP_UPHORZ* = 3
  PGRP_DOWNHORZ* = 4
  DNS_NORMAL* = 1
  DNS_HOT* = 2
  DNS_PRESSED* = 3
  DNS_DISABLED* = 4
  DNHZS_NORMAL* = 1
  DNHZS_HOT* = 2
  DNHZS_PRESSED* = 3
  DNHZS_DISABLED* = 4
  UPS_NORMAL* = 1
  UPS_HOT* = 2
  UPS_PRESSED* = 3
  UPS_DISABLED* = 4
  UPHZS_NORMAL* = 1
  UPHZS_HOT* = 2
  UPHZS_PRESSED* = 3
  UPHZS_DISABLED* = 4
  PP_BAR* = 1
  PP_BARVERT* = 2
  PP_CHUNK* = 3
  PP_CHUNKVERT* = 4
  RP_GRIPPER* = 1
  RP_GRIPPERVERT* = 2
  RP_BAND* = 3
  RP_CHEVRON* = 4
  RP_CHEVRONVERT* = 5
  CHEVS_NORMAL* = 1
  CHEVS_HOT* = 2
  CHEVS_PRESSED* = 3
  SBP_ARROWBTN* = 1
  SBP_THUMBBTNHORZ* = 2
  SBP_THUMBBTNVERT* = 3
  SBP_LOWERTRACKHORZ* = 4
  SBP_UPPERTRACKHORZ* = 5
  SBP_LOWERTRACKVERT* = 6
  SBP_UPPERTRACKVERT* = 7
  SBP_GRIPPERHORZ* = 8
  SBP_GRIPPERVERT* = 9
  SBP_SIZEBOX* = 10
  ABS_UPNORMAL* = 1
  ABS_UPHOT* = 2
  ABS_UPPRESSED* = 3
  ABS_UPDISABLED* = 4
  ABS_DOWNNORMAL* = 5
  ABS_DOWNHOT* = 6
  ABS_DOWNPRESSED* = 7
  ABS_DOWNDISABLED* = 8
  ABS_LEFTNORMAL* = 9
  ABS_LEFTHOT* = 10
  ABS_LEFTPRESSED* = 11
  ABS_LEFTDISABLED* = 12
  ABS_RIGHTNORMAL* = 13
  ABS_RIGHTHOT* = 14
  ABS_RIGHTPRESSED* = 15
  ABS_RIGHTDISABLED* = 16

  SCRBS_NORMAL* = 1
  SCRBS_HOT* = 2
  SCRBS_PRESSED* = 3
  SCRBS_DISABLED* = 4
  SZB_RIGHTALIGN* = 1
  SZB_LEFTALIGN* = 2
  SPNP_UP* = 1
  SPNP_DOWN* = 2
  SPNP_UPHORZ* = 3
  SPNP_DOWNHORZ* = 4
  SPP_USERPANE* = 1
  SPP_MOREPROGRAMS* = 2
  SPP_MOREPROGRAMSARROW* = 3
  SPP_PROGLIST* = 4
  SPP_PROGLISTSEPARATOR* = 5
  SPP_PLACESLIST* = 6
  SPP_PLACESLISTSEPARATOR* = 7
  SPP_LOGOFF* = 8
  SPP_LOGOFFBUTTONS* = 9
  SPP_USERPICTURE* = 10
  SPP_PREVIEW* = 11
  SPLS_NORMAL* = 1
  SPLS_HOT* = 2
  SPLS_PRESSED* = 3
  SPS_NORMAL* = 1
  SPS_HOT* = 2
  SPS_PRESSED* = 3
  SP_PANE* = 1
  SP_GRIPPERPANE* = 2
  SP_GRIPPER* = 3
  TABP_TABITEM* = 1
  TABP_TABITEMLEFTEDGE* = 2
  TABP_TABITEMRIGHTEDGE* = 3
  TABP_TABITEMBOTHEDGE* = 4
  TABP_TOPTABITEM* = 5
  TABP_TOPTABITEMLEFTEDGE* = 6
  TABP_TOPTABITEMRIGHTEDGE* = 7
  TABP_TOPTABITEMBOTHEDGE* = 8
  TABP_PANE* = 9
  TABP_BODY* = 10
  TIS_NORMAL* = 1
  TIS_HOT* = 2
  TIS_SELECTED* = 3
  TIS_DISABLED* = 4
  TIS_FOCUSED* = 5
  TIBES_NORMAL* = 1
  TIBES_HOT* = 2
  TIBES_SELECTED* = 3
  TIBES_DISABLED* = 4
  TIBES_FOCUSED* = 5
  TILES_NORMAL* = 1
  TILES_HOT* = 2
  TILES_SELECTED* = 3
  TILES_DISABLED* = 4
  TILES_FOCUSED* = 5
  TIRES_NORMAL* = 1
  TIRES_HOT* = 2
  TIRES_SELECTED* = 3
  TIRES_DISABLED* = 4
  TIRES_FOCUSED* = 5
  TTIS_NORMAL* = 1
  TTIS_HOT* = 2
  TTIS_SELECTED* = 3
  TTIS_DISABLED* = 4
  TTIS_FOCUSED* = 5
  TTIBES_NORMAL* = 1
  TTIBES_HOT* = 2
  TTIBES_SELECTED* = 3
  TTIBES_DISABLED* = 4
  TTIBES_FOCUSED* = 5
  TTILES_NORMAL* = 1
  TTILES_HOT* = 2
  TTILES_SELECTED* = 3
  TTILES_DISABLED* = 4
  TTILES_FOCUSED* = 5
  TTIRES_NORMAL* = 1
  TTIRES_HOT* = 2
  TTIRES_SELECTED* = 3
  TTIRES_DISABLED* = 4
  TTIRES_FOCUSED* = 5
  TDP_GROUPCOUNT* = 1
  TDP_FLASHBUTTON* = 2
  TDP_FLASHBUTTONGROUPMENU* = 3
  TBP_BACKGROUNDBOTTOM* = 1
  TBP_BACKGROUNDRIGHT* = 2
  TBP_BACKGROUNDTOP* = 3
  TBP_BACKGROUNDLEFT* = 4
  TBP_SIZINGBARBOTTOM* = 5
  TBP_SIZINGBARRIGHT* = 6
  TBP_SIZINGBARTOP* = 7
  TBP_SIZINGBARLEFT* = 8
  TP_BUTTON* = 1
  TP_DROPDOWNBUTTON* = 2
  TP_SPLITBUTTON* = 3
  TP_SPLITBUTTONDROPDOWN* = 4
  TP_SEPARATOR* = 5
  TP_SEPARATORVERT* = 6
  TS_NORMAL* = 1
  TS_HOT* = 2
  TS_PRESSED* = 3
  TS_DISABLED* = 4
  TS_CHECKED* = 5
  TS_HOTCHECKED* = 6
  TTP_STANDARD* = 1
  TTP_STANDARDTITLE* = 2
  TTP_BALLOON* = 3
  TTP_BALLOONTITLE* = 4
  TTP_CLOSE* = 5
  TTBS_NORMAL* = 1
  TTBS_LINK* = 2
  TTCS_NORMAL* = 1
  TTCS_HOT* = 2
  TTCS_PRESSED* = 3
  TTSS_NORMAL* = 1
  TTSS_LINK* = 2
  TKP_TRACK* = 1
  TKP_TRACKVERT* = 2
  TKP_THUMB* = 3
  TKP_THUMBBOTTOM* = 4
  TKP_THUMBTOP* = 5
  TKP_THUMBVERT* = 6
  TKP_THUMBLEFT* = 7
  TKP_THUMBRIGHT* = 8
  TKP_TICS* = 9
  TKP_TICSVERT* = 10
  TUS_NORMAL* = 1
  TUS_HOT* = 2
  TUS_PRESSED* = 3
  TUS_FOCUSED* = 4
  TUS_DISABLED* = 5
  TUBS_NORMAL* = 1
  TUBS_HOT* = 2
  TUBS_PRESSED* = 3
  TUBS_FOCUSED* = 4
  TUBS_DISABLED* = 5
  TUVLS_NORMAL* = 1
  TUVLS_HOT* = 2
  TUVLS_PRESSED* = 3
  TUVLS_FOCUSED* = 4
  TUVLS_DISABLED* = 5
  TUVRS_NORMAL* = 1
  TUVRS_HOT* = 2
  TUVRS_PRESSED* = 3
  TUVRS_FOCUSED* = 4
  TUVRS_DISABLED* = 5
  TUTS_NORMAL* = 1
  TUTS_HOT* = 2
  TUTS_PRESSED* = 3
  TUTS_FOCUSED* = 4
  TUTS_DISABLED* = 5
  TUVS_NORMAL* = 1
  TUVS_HOT* = 2
  TUVS_PRESSED* = 3
  TUVS_FOCUSED* = 4
  TUVS_DISABLED* = 5
  TSS_NORMAL* = 1
  TSVS_NORMAL* = 1
  TRS_NORMAL* = 1
  TRVS_NORMAL* = 1
  TNP_BACKGROUND* = 1
  TNP_ANIMBACKGROUND* = 2
  TVP_TREEITEM* = 1
  TVP_GLYPH* = 2
  TVP_BRANCH* = 3
  GLPS_CLOSED* = 1
  GLPS_OPENED* = 2
  TREIS_NORMAL* = 1
  TREIS_HOT* = 2
  TREIS_SELECTED* = 3
  TREIS_DISABLED* = 4
  TREIS_SELECTEDNOTFOCUS* = 5
  WP_CAPTION* = 1
  WP_SMALLCAPTION* = 2
  WP_MINCAPTION* = 3
  WP_SMALLMINCAPTION* = 4
  WP_MAXCAPTION* = 5
  WP_SMALLMAXCAPTION* = 6
  WP_FRAMELEFT* = 7
  WP_FRAMERIGHT* = 8
  WP_FRAMEBOTTOM* = 9
  WP_SMALLFRAMELEFT* = 10
  WP_SMALLFRAMERIGHT* = 11
  WP_SMALLFRAMEBOTTOM* = 12
  WP_SYSBUTTON* = 13
  WP_MDISYSBUTTON* = 14
  WP_MINBUTTON* = 15
  WP_MDIMINBUTTON* = 16
  WP_MAXBUTTON* = 17
  WP_CLOSEBUTTON* = 18
  WP_SMALLCLOSEBUTTON* = 19
  WP_MDICLOSEBUTTON* = 20
  WP_RESTOREBUTTON* = 21
  WP_MDIRESTOREBUTTON* = 22
  WP_HELPBUTTON* = 23
  WP_MDIHELPBUTTON* = 24
  WP_HORZSCROLL* = 25
  WP_HORZTHUMB* = 26
  WP_VERTSCROLL* = 27
  WP_VERTTHUMB* = 28
  WP_DIALOG* = 29
  WP_CAPTIONSIZINGTEMPLATE* = 30
  WP_SMALLCAPTIONSIZINGTEMPLATE* = 31
  WP_FRAMELEFTSIZINGTEMPLATE* = 32
  WP_SMALLFRAMELEFTSIZINGTEMPLATE* = 33
  WP_FRAMERIGHTSIZINGTEMPLATE* = 34
  WP_SMALLFRAMERIGHTSIZINGTEMPLATE* = 35
  WP_FRAMEBOTTOMSIZINGTEMPLATE* = 36
  WP_SMALLFRAMEBOTTOMSIZINGTEMPLATE* = 37
  CS_ACTIVE* = 1
  CS_INACTIVE* = 2
  CS_DISABLED* = 3
  CBS_NORMAL* = 1
  CBS_HOT* = 2
  CBS_PUSHED* = 3
  CBS_DISABLED* = 4
  FS_ACTIVE* = 1
  FS_INACTIVE* = 2
  HBS_NORMAL* = 1
  HBS_HOT* = 2
  HBS_PUSHED* = 3
  HBS_DISABLED* = 4
  HSS_NORMAL* = 1
  HSS_HOT* = 2
  HSS_PUSHED* = 3
  HSS_DISABLED* = 4
  HTS_NORMAL* = 1
  HTS_HOT* = 2
  HTS_PUSHED* = 3
  HTS_DISABLED* = 4
  MAXBS_NORMAL* = 1
  MAXBS_HOT* = 2
  MAXBS_PUSHED* = 3
  MAXBS_DISABLED* = 4
  MXCS_ACTIVE* = 1
  MXCS_INACTIVE* = 2
  MXCS_DISABLED* = 3
  MINBS_NORMAL* = 1
  MINBS_HOT* = 2
  MINBS_PUSHED* = 3
  MINBS_DISABLED* = 4
  RBS_NORMAL* = 1
  RBS_HOT* = 2
  RBS_PUSHED* = 3
  RBS_DISABLED* = 4
  SBS_NORMAL* = 1
  SBS_HOT* = 2
  SBS_PUSHED* = 3
  SBS_DISABLED* = 4
  MNCS_ACTIVE* = 1
  MNCS_INACTIVE* = 2
  MNCS_DISABLED* = 3
  VSS_NORMAL* = 1
  VSS_HOT* = 2
  VSS_PUSHED* = 3
  VSS_DISABLED* = 4
  VTS_NORMAL* = 1
  VTS_HOT* = 2
  VTS_PUSHED* = 3
  VTS_DISABLED* = 4

# ext/mmsystem.nim

template MAKEFOURCC*(c0, c1, c2, c3: char): DWORD = c0.DWORD or (c1.DWORD shl 8) or (c2.DWORD shl 16) or (c3.DWORD shl 24)
template mmioFOURCC*(c0, c1, c2, c3: char): DWORD = c0.DWORD or (c1.DWORD shl 8) or (c2.DWORD shl 16) or (c3.DWORD shl 24)
template sndAlias(c0, c1: char): DWORD = (SND_ALIAS_START.DWORD + c0.DWORD or (c1.DWORD shl 8))

const
  MAXPNAMELEN* = 32
  MAXERRORLENGTH* = 256
  MAX_JOYSTICKOEMVXDNAME* = 260
  TIME_MS* = 1
  TIME_SAMPLES* = 2
  TIME_BYTES* = 4
  TIME_SMPTE* = 8
  TIME_MIDI* = 16
  TIME_TICKS* = 32
  MM_JOY1MOVE* = 0x3A0
  MM_JOY2MOVE* = 0x3A1
  MM_JOY1ZMOVE* = 0x3A2
  MM_JOY2ZMOVE* = 0x3A3
  MM_JOY1BUTTONDOWN* = 0x3B5
  MM_JOY2BUTTONDOWN* = 0x3B6
  MM_JOY1BUTTONUP* = 0x3B7
  MM_JOY2BUTTONUP* = 0x3B8
  MM_MCINOTIFY* = 0x3B9
  MM_WOM_OPEN* = 0x3BB
  MM_WOM_CLOSE* = 0x3BC
  MM_WOM_DONE* = 0x3BD
  MM_WIM_OPEN* = 0x3BE
  MM_WIM_CLOSE* = 0x3BF
  MM_WIM_DATA* = 0x3C0
  MM_MIM_OPEN* = 0x3C1
  MM_MIM_CLOSE* = 0x3C2
  MM_MIM_DATA* = 0x3C3
  MM_MIM_LONGDATA* = 0x3C4
  MM_MIM_ERROR* = 0x3C5
  MM_MIM_LONGERROR* = 0x3C6
  MM_MOM_OPEN* = 0x3C7
  MM_MOM_CLOSE* = 0x3C8
  MM_MOM_DONE* = 0x3C9
  MM_DRVM_OPEN* = 0x3D0
  MM_DRVM_CLOSE* = 0x3D1
  MM_DRVM_DATA* = 0x3D2
  MM_DRVM_ERROR* = 0x3D3
  MM_STREAM_OPEN* = 0x3D4
  MM_STREAM_CLOSE* = 0x3D5
  MM_STREAM_DONE* = 0x3D6
  MM_STREAM_ERROR* = 0x3D7
  MM_MOM_POSITIONCB* = 0x3CA
  MM_MCISIGNAL* = 0x3CB
  MM_MIM_MOREDATA* = 0x3CC
  MM_MIXM_LINE_CHANGE* = 0x3D0
  MM_MIXM_CONTROL_CHANGE* = 0x3D1
  MMSYSERR_BASE* = 0
  WAVERR_BASE* = 32
  MIDIERR_BASE* = 64
  TIMERR_BASE* = 96
  JOYERR_BASE* = 160
  MCIERR_BASE* = 256
  MIXERR_BASE* = 1024
  MCI_STRING_OFFSET* = 512
  MCI_VD_OFFSET* = 1024
  MCI_CD_OFFSET* = 1088
  MCI_WAVE_OFFSET* = 1152
  MCI_SEQ_OFFSET* = 1216
  MMSYSERR_NOERROR* = 0
  MMSYSERR_ERROR* = MMSYSERR_BASE+1
  MMSYSERR_BADDEVICEID* = MMSYSERR_BASE+1 + 1
  MMSYSERR_NOTENABLED* = MMSYSERR_BASE+1 + 2
  MMSYSERR_ALLOCATED* = MMSYSERR_BASE+1 + 3
  MMSYSERR_INVALHANDLE* = MMSYSERR_BASE+1 + 4
  MMSYSERR_NODRIVER* = MMSYSERR_BASE+1 + 5
  MMSYSERR_NOMEM* = MMSYSERR_BASE+1 + 6
  MMSYSERR_NOTSUPPORTED* = MMSYSERR_BASE+1 + 7
  MMSYSERR_BADERRNUM* = MMSYSERR_BASE+1 + 8
  MMSYSERR_INVALFLAG* = MMSYSERR_BASE+1 + 9
  MMSYSERR_INVALPARAM* = MMSYSERR_BASE+1 + 10
  MMSYSERR_HANDLEBUSY* = MMSYSERR_BASE+1 + 11
  MMSYSERR_INVALIDALIAS* = MMSYSERR_BASE+1 + 12
  MMSYSERR_BADDB* = MMSYSERR_BASE+1 + 13
  MMSYSERR_KEYNOTFOUND* = MMSYSERR_BASE+1 + 14
  MMSYSERR_READERROR* = MMSYSERR_BASE+1 + 15
  MMSYSERR_WRITEERROR* = MMSYSERR_BASE+1 + 16
  MMSYSERR_DELETEERROR* = MMSYSERR_BASE+1 + 17
  MMSYSERR_VALNOTFOUND* = MMSYSERR_BASE+1 + 18
  MMSYSERR_NODRIVERCB* = MMSYSERR_BASE+1 + 19
  MMSYSERR_LASTERROR* = MMSYSERR_NODRIVERCB
  DRV_LOAD* = 1
  DRV_ENABLE* = 2
  DRV_OPEN* = 3
  DRV_CLOSE* = 4
  DRV_DISABLE* = 5
  DRV_FREE* = 6
  DRV_CONFIGURE* = 7
  DRV_QUERYCONFIGURE* = 8
  DRV_INSTALL* = 9
  DRV_REMOVE* = 10
  DRV_EXITSESSION* = 11
  DRV_POWER* = 12
  DRV_RESERVED* = 0x800
  DRV_USER* = 0x4000
  DRVCNF_CANCEL* = 0
  DRVCNF_OK* = 1
  DRVCNF_RESTART* = 2
  DRV_CANCEL* = DRVCNF_CANCEL
  DRV_OK* = DRVCNF_OK
  DRV_RESTART* = DRVCNF_RESTART
  DRV_MCI_FIRST* = DRV_RESERVED
  DRV_MCI_LAST* = DRV_RESERVED + 0xFFF
  CALLBACK_TYPEMASK* = 0x70000
  CALLBACK_NULL* = 0
  CALLBACK_WINDOW* = 0x10000
  CALLBACK_TASK* = 0x20000
  CALLBACK_FUNCTION* = 0x30000
  CALLBACK_THREAD* = CALLBACK_TASK
  CALLBACK_EVENT* = 0x50000
  SND_SYNC* = 0
  SND_ASYNC* = 1
  SND_NODEFAULT* = 2
  SND_MEMORY* = 4
  SND_LOOP* = 8
  SND_NOSTOP* = 16
  SND_NOWAIT* = 0x2000
  SND_ALIAS* = 0x10000
  SND_ALIAS_ID* = 0x110000
  SND_FILENAME* = 0x20000
  SND_RESOURCE* = 0x40004
  SND_PURGE* = 0x40
  SND_APPLICATION* = 0x80
  SND_ALIAS_START* = 0
  SND_ALIAS_SYSTEMASTERISK* = sndAlias('S','*')
  SND_ALIAS_SYSTEMQUESTION* = sndAlias('S','?')
  SND_ALIAS_SYSTEMHAND* = sndAlias('S','H')
  SND_ALIAS_SYSTEMEXIT* = sndAlias('S','E')
  SND_ALIAS_SYSTEMSTART* = sndAlias('S','S')
  SND_ALIAS_SYSTEMWELCOME* = sndAlias('S','W')
  SND_ALIAS_SYSTEMEXCLAMATION* = sndAlias('S','!')
  SND_ALIAS_SYSTEMDEFAULT* = sndAlias('S','D')
  WAVERR_BADFORMAT* = ( WAVERR_BASE + 0 )
  WAVERR_STILLPLAYING* = (( WAVERR_BASE + 0 )) + 1
  WAVERR_UNPREPARED* = (( WAVERR_BASE + 0 )) + 2
  WAVERR_SYNC* = (( WAVERR_BASE + 0 )) + 3
  WAVERR_LASTERROR* = WAVERR_SYNC
  WOM_OPEN* = MM_WOM_OPEN
  WOM_CLOSE* = MM_WOM_CLOSE
  WOM_DONE* = MM_WOM_DONE
  WIM_OPEN* = MM_WIM_OPEN
  WIM_CLOSE* = MM_WIM_CLOSE
  WIM_DATA* = MM_WIM_DATA
  WAVE_MAPPER* = 0xFFFFFFFF'u32
  WAVE_FORMAT_QUERY* = 1
  WAVE_ALLOWSYNC* = 2
  WAVE_MAPPED* = 4
  WAVE_FORMAT_DIRECT* = 8
  WAVE_FORMAT_DIRECT_QUERY* = ( WAVE_FORMAT_QUERY or WAVE_FORMAT_DIRECT )
  WHDR_DONE* = 1
  WHDR_PREPARED* = 2
  WHDR_BEGINLOOP* = 4
  WHDR_ENDLOOP* = 8
  WHDR_INQUEUE* = 16
  WAVECAPS_PITCH* = 1
  WAVECAPS_PLAYBACKRATE* = 2
  WAVECAPS_VOLUME* = 4
  WAVECAPS_LRVOLUME* = 8
  WAVECAPS_SYNC* = 16
  WAVECAPS_SAMPLEACCURATE* = 32
  WAVECAPS_DIRECTSOUND* = 64
  WAVE_INVALIDFORMAT* = 0
  WAVE_FORMAT_1M08* = 1
  WAVE_FORMAT_1S08* = 2
  WAVE_FORMAT_1M16* = 4
  WAVE_FORMAT_1S16* = 8
  WAVE_FORMAT_2M08* = 16
  WAVE_FORMAT_2S08* = 32
  WAVE_FORMAT_2M16* = 64
  WAVE_FORMAT_2S16* = 128
  WAVE_FORMAT_4M08* = 256
  WAVE_FORMAT_4S08* = 512
  WAVE_FORMAT_4M16* = 1024
  WAVE_FORMAT_4S16* = 2048
  WAVE_FORMAT_PCM* = 1
  MIDIERR_UNPREPARED* = MIDIERR_BASE
  MIDIERR_STILLPLAYING* = MIDIERR_BASE + 1
  MIDIERR_NOMAP* = MIDIERR_BASE + 2
  MIDIERR_NOTREADY* = MIDIERR_BASE + 3
  MIDIERR_NODEVICE* = MIDIERR_BASE + 4
  MIDIERR_INVALIDSETUP* = MIDIERR_BASE + 5
  MIDIERR_BADOPENMODE* = MIDIERR_BASE + 6
  MIDIERR_DONT_CONTINUE* = MIDIERR_BASE + 7
  MIDIERR_LASTERROR* = MIDIERR_DONT_CONTINUE
  MIDIPATCHSIZE* = 128
  MIM_OPEN* = MM_MIM_OPEN
  MIM_CLOSE* = MM_MIM_CLOSE
  MIM_DATA* = MM_MIM_DATA
  MIM_LONGDATA* = MM_MIM_LONGDATA
  MIM_ERROR* = MM_MIM_ERROR
  MIM_LONGERROR* = MM_MIM_LONGERROR
  MOM_OPEN* = MM_MOM_OPEN
  MOM_CLOSE* = MM_MOM_CLOSE
  MOM_DONE* = MM_MOM_DONE
  MIM_MOREDATA* = MM_MIM_MOREDATA
  MOM_POSITIONCB* = MM_MOM_POSITIONCB
  MIDI_MAPPER* = 0xFFFFFFFF'u32
  MIDI_IO_STATUS* = 32
  MIDI_CACHE_ALL* = 1
  MIDI_CACHE_BESTFIT* = 2
  MIDI_CACHE_QUERY* = 3
  MIDI_UNCACHE* = 4
  MOD_MIDIPORT* = 1
  MOD_SYNTH* = 2
  MOD_SQSYNTH* = 3
  MOD_FMSYNTH* = 4
  MOD_MAPPER* = 5
  MIDICAPS_VOLUME* = 1
  MIDICAPS_LRVOLUME* = 2
  MIDICAPS_CACHE* = 4
  MIDICAPS_STREAM* = 8
  MHDR_DONE* = 1
  MHDR_PREPARED* = 2
  MHDR_INQUEUE* = 4
  MHDR_ISSTRM* = 8
  MEVT_F_SHORT* = 0
  MEVT_F_LONG* = 0x80000000'i32
  MEVT_F_CALLBACK* = 0x40000000

proc MEVT_EVENTTYPE*(x: DWORD): BYTE = ((x shr 24) and 0xFF).BYTE
proc MEVT_EVENTPARM*(x: DWORD): DWORD = x and 0xFFFFFF

const
  MEVT_SHORTMSG* = 0
  MEVT_TEMPO* = 1
  MEVT_NOP* = 2
  MEVT_LONGMSG* = 0x80
  MEVT_COMMENT* = 0x82
  MEVT_VERSION* = 0x84
  MIDISTRM_ERROR* = -2
  MIDIPROP_SET* = 0x80000000'i32
  MIDIPROP_GET* = 0x40000000
  MIDIPROP_TIMEDIV* = 1
  MIDIPROP_TEMPO* = 2
  AUX_MAPPER* = 0xFFFFFFFF'u32
  AUXCAPS_CDAUDIO* = 1
  AUXCAPS_AUXIN* = 2
  AUXCAPS_VOLUME* = 1
  AUXCAPS_LRVOLUME* = 2
  MIXER_SHORT_NAME_CHARS* = 16
  MIXER_LONG_NAME_CHARS* = 64
  MIXERR_INVALLINE* = MIXERR_BASE
  MIXERR_INVALCONTROL* = ( MIXERR_BASE+1 )
  MIXERR_INVALVALUE* = ( MIXERR_BASE+2 )
  MIXERR_LASTERROR* = ( MIXERR_BASE+2 )
  MIXER_OBJECTF_HANDLE* = 0x80000000'i32
  MIXER_OBJECTF_MIXER* = 0
  MIXER_OBJECTF_HMIXER* = ( MIXER_OBJECTF_HANDLE or MIXER_OBJECTF_MIXER )
  MIXER_OBJECTF_WAVEOUT* = 0x10000000
  MIXER_OBJECTF_HWAVEOUT* = ( MIXER_OBJECTF_HANDLE or MIXER_OBJECTF_WAVEOUT )
  MIXER_OBJECTF_WAVEIN* = 0x20000000
  MIXER_OBJECTF_HWAVEIN* = ( MIXER_OBJECTF_HANDLE or MIXER_OBJECTF_WAVEIN )
  MIXER_OBJECTF_MIDIOUT* = 0x30000000
  MIXER_OBJECTF_HMIDIOUT* = ( MIXER_OBJECTF_HANDLE or MIXER_OBJECTF_MIDIOUT )
  MIXER_OBJECTF_MIDIIN* = 0x40000000
  MIXER_OBJECTF_HMIDIIN* = ( MIXER_OBJECTF_HANDLE or MIXER_OBJECTF_MIDIIN )
  MIXER_OBJECTF_AUX* = 0x50000000
  MIXERLINE_LINEF_ACTIVE* = 1
  MIXERLINE_LINEF_DISCONNECTED* = 0x8000
  MIXERLINE_LINEF_SOURCE* = 0x80000000'i32
  MIXERLINE_COMPONENTTYPE_DST_FIRST* = 0
  MIXERLINE_COMPONENTTYPE_DST_UNDEFINED* = MIXERLINE_COMPONENTTYPE_DST_FIRST
  MIXERLINE_COMPONENTTYPE_DST_DIGITAL* = ( MIXERLINE_COMPONENTTYPE_DST_FIRST+1 )
  MIXERLINE_COMPONENTTYPE_DST_LINE* = ( MIXERLINE_COMPONENTTYPE_DST_FIRST+2 )
  MIXERLINE_COMPONENTTYPE_DST_MONITOR* = ( MIXERLINE_COMPONENTTYPE_DST_FIRST+3 )
  MIXERLINE_COMPONENTTYPE_DST_SPEAKERS* = ( MIXERLINE_COMPONENTTYPE_DST_FIRST+4 )
  MIXERLINE_COMPONENTTYPE_DST_HEADPHONES* = ( MIXERLINE_COMPONENTTYPE_DST_FIRST+5 )
  MIXERLINE_COMPONENTTYPE_DST_TELEPHONE* = ( MIXERLINE_COMPONENTTYPE_DST_FIRST+6 )
  MIXERLINE_COMPONENTTYPE_DST_WAVEIN* = ( MIXERLINE_COMPONENTTYPE_DST_FIRST+7 )
  MIXERLINE_COMPONENTTYPE_DST_VOICEIN* = ( MIXERLINE_COMPONENTTYPE_DST_FIRST+8 )
  MIXERLINE_COMPONENTTYPE_DST_LAST* = ( MIXERLINE_COMPONENTTYPE_DST_FIRST+8 )
  MIXERLINE_COMPONENTTYPE_SRC_FIRST* = 0x1000
  MIXERLINE_COMPONENTTYPE_SRC_UNDEFINED* = MIXERLINE_COMPONENTTYPE_SRC_FIRST
  MIXERLINE_COMPONENTTYPE_SRC_DIGITAL* = ( MIXERLINE_COMPONENTTYPE_SRC_FIRST+1 )
  MIXERLINE_COMPONENTTYPE_SRC_LINE* = ( MIXERLINE_COMPONENTTYPE_SRC_FIRST+2 )
  MIXERLINE_COMPONENTTYPE_SRC_MICROPHONE* = ( MIXERLINE_COMPONENTTYPE_SRC_FIRST+3 )
  MIXERLINE_COMPONENTTYPE_SRC_SYNTHESIZER* = ( MIXERLINE_COMPONENTTYPE_SRC_FIRST+4 )
  MIXERLINE_COMPONENTTYPE_SRC_COMPACTDISC* = ( MIXERLINE_COMPONENTTYPE_SRC_FIRST+5 )
  MIXERLINE_COMPONENTTYPE_SRC_TELEPHONE* = ( MIXERLINE_COMPONENTTYPE_SRC_FIRST+6 )
  MIXERLINE_COMPONENTTYPE_SRC_PCSPEAKER* = ( MIXERLINE_COMPONENTTYPE_SRC_FIRST+7 )
  MIXERLINE_COMPONENTTYPE_SRC_WAVEOUT* = ( MIXERLINE_COMPONENTTYPE_SRC_FIRST+8 )
  MIXERLINE_COMPONENTTYPE_SRC_AUXILIARY* = ( MIXERLINE_COMPONENTTYPE_SRC_FIRST+9 )
  MIXERLINE_COMPONENTTYPE_SRC_ANALOG* = ( MIXERLINE_COMPONENTTYPE_SRC_FIRST+10 )
  MIXERLINE_COMPONENTTYPE_SRC_LAST* = ( MIXERLINE_COMPONENTTYPE_SRC_FIRST+10 )
  MIXERLINE_TARGETTYPE_UNDEFINED* = 0
  MIXERLINE_TARGETTYPE_WAVEOUT* = 1
  MIXERLINE_TARGETTYPE_WAVEIN* = 2
  MIXERLINE_TARGETTYPE_MIDIOUT* = 3
  MIXERLINE_TARGETTYPE_MIDIIN* = 4
  MIXERLINE_TARGETTYPE_AUX* = 5
  MIXER_GETLINEINFOF_DESTINATION* = 0
  MIXER_GETLINEINFOF_SOURCE* = 1
  MIXER_GETLINEINFOF_LINEID* = 2
  MIXER_GETLINEINFOF_COMPONENTTYPE* = 3
  MIXER_GETLINEINFOF_TARGETTYPE* = 4
  MIXER_GETLINEINFOF_QUERYMASK* = 15
  MIXERCONTROL_CONTROLF_UNIFORM* = 1
  MIXERCONTROL_CONTROLF_MULTIPLE* = 2
  MIXERCONTROL_CONTROLF_DISABLED* = 0x80000000'i32
  MIXERCONTROL_CT_CLASS_MASK* = -268435456
  MIXERCONTROL_CT_CLASS_CUSTOM* = 0
  MIXERCONTROL_CT_CLASS_METER* = 0x10000000
  MIXERCONTROL_CT_CLASS_SWITCH* = 0x20000000
  MIXERCONTROL_CT_CLASS_NUMBER* = 0x30000000
  MIXERCONTROL_CT_CLASS_SLIDER* = 0x40000000
  MIXERCONTROL_CT_CLASS_FADER* = 0x50000000
  MIXERCONTROL_CT_CLASS_TIME* = 0x60000000
  MIXERCONTROL_CT_CLASS_LIST* = 0x70000000
  MIXERCONTROL_CT_SUBCLASS_MASK* = 0xF000000
  MIXERCONTROL_CT_SC_SWITCH_BOOLEAN* = 0
  MIXERCONTROL_CT_SC_SWITCH_BUTTON* = 0x1000000
  MIXERCONTROL_CT_SC_METER_POLLED* = 0
  MIXERCONTROL_CT_SC_TIME_MICROSECS* = 0
  MIXERCONTROL_CT_SC_TIME_MILLISECS* = 0x1000000
  MIXERCONTROL_CT_SC_LIST_SINGLE* = 0
  MIXERCONTROL_CT_SC_LIST_MULTIPLE* = 0x1000000
  MIXERCONTROL_CT_UNITS_MASK* = 0xFF0000
  MIXERCONTROL_CT_UNITS_CUSTOM* = 0
  MIXERCONTROL_CT_UNITS_BOOLEAN* = 0x10000
  MIXERCONTROL_CT_UNITS_SIGNED* = 0x20000
  MIXERCONTROL_CT_UNITS_UNSIGNED* = 0x30000
  MIXERCONTROL_CT_UNITS_DECIBELS* = 0x40000
  MIXERCONTROL_CT_UNITS_PERCENT* = 0x50000
  MIXERCONTROL_CONTROLTYPE_CUSTOM* = ( MIXERCONTROL_CT_CLASS_CUSTOM or MIXERCONTROL_CT_UNITS_CUSTOM )
  MIXERCONTROL_CONTROLTYPE_BOOLEANMETER* = ( MIXERCONTROL_CT_CLASS_METER or MIXERCONTROL_CT_SC_METER_POLLED or MIXERCONTROL_CT_UNITS_BOOLEAN )
  MIXERCONTROL_CONTROLTYPE_SIGNEDMETER* = ( MIXERCONTROL_CT_CLASS_METER or MIXERCONTROL_CT_SC_METER_POLLED or MIXERCONTROL_CT_UNITS_SIGNED )
  MIXERCONTROL_CONTROLTYPE_PEAKMETER* = ( MIXERCONTROL_CONTROLTYPE_SIGNEDMETER+1 )
  MIXERCONTROL_CONTROLTYPE_UNSIGNEDMETER* = ( MIXERCONTROL_CT_CLASS_METER or MIXERCONTROL_CT_SC_METER_POLLED or MIXERCONTROL_CT_UNITS_UNSIGNED )
  MIXERCONTROL_CONTROLTYPE_BOOLEAN* = ( MIXERCONTROL_CT_CLASS_SWITCH or MIXERCONTROL_CT_SC_SWITCH_BOOLEAN or MIXERCONTROL_CT_UNITS_BOOLEAN )
  MIXERCONTROL_CONTROLTYPE_ONOFF* = ( MIXERCONTROL_CONTROLTYPE_BOOLEAN+1 )
  MIXERCONTROL_CONTROLTYPE_MUTE* = ( MIXERCONTROL_CONTROLTYPE_BOOLEAN+2 )
  MIXERCONTROL_CONTROLTYPE_MONO* = ( MIXERCONTROL_CONTROLTYPE_BOOLEAN+3 )
  MIXERCONTROL_CONTROLTYPE_LOUDNESS* = ( MIXERCONTROL_CONTROLTYPE_BOOLEAN+4 )
  MIXERCONTROL_CONTROLTYPE_STEREOENH* = ( MIXERCONTROL_CONTROLTYPE_BOOLEAN+5 )
  MIXERCONTROL_CONTROLTYPE_BUTTON* = ( MIXERCONTROL_CT_CLASS_SWITCH or MIXERCONTROL_CT_SC_SWITCH_BUTTON or MIXERCONTROL_CT_UNITS_BOOLEAN )
  MIXERCONTROL_CONTROLTYPE_DECIBELS* = ( MIXERCONTROL_CT_CLASS_NUMBER or MIXERCONTROL_CT_UNITS_DECIBELS )
  MIXERCONTROL_CONTROLTYPE_SIGNED* = ( MIXERCONTROL_CT_CLASS_NUMBER or MIXERCONTROL_CT_UNITS_SIGNED )
  MIXERCONTROL_CONTROLTYPE_UNSIGNED* = ( MIXERCONTROL_CT_CLASS_NUMBER or MIXERCONTROL_CT_UNITS_UNSIGNED )
  MIXERCONTROL_CONTROLTYPE_PERCENT* = ( MIXERCONTROL_CT_CLASS_NUMBER or MIXERCONTROL_CT_UNITS_PERCENT )
  MIXERCONTROL_CONTROLTYPE_SLIDER* = ( MIXERCONTROL_CT_CLASS_SLIDER or MIXERCONTROL_CT_UNITS_SIGNED )
  MIXERCONTROL_CONTROLTYPE_PAN* = ( MIXERCONTROL_CONTROLTYPE_SLIDER+1 )
  MIXERCONTROL_CONTROLTYPE_QSOUNDPAN* = ( MIXERCONTROL_CONTROLTYPE_SLIDER+2 )
  MIXERCONTROL_CONTROLTYPE_FADER* = ( MIXERCONTROL_CT_CLASS_FADER or MIXERCONTROL_CT_UNITS_UNSIGNED )
  MIXERCONTROL_CONTROLTYPE_VOLUME* = ( MIXERCONTROL_CONTROLTYPE_FADER+1 )
  MIXERCONTROL_CONTROLTYPE_BASS* = ( MIXERCONTROL_CONTROLTYPE_FADER+2 )
  MIXERCONTROL_CONTROLTYPE_TREBLE* = ( MIXERCONTROL_CONTROLTYPE_FADER+3 )
  MIXERCONTROL_CONTROLTYPE_EQUALIZER* = ( MIXERCONTROL_CONTROLTYPE_FADER+4 )
  MIXERCONTROL_CONTROLTYPE_SINGLESELECT* = ( MIXERCONTROL_CT_CLASS_LIST or MIXERCONTROL_CT_SC_LIST_SINGLE or MIXERCONTROL_CT_UNITS_BOOLEAN )
  MIXERCONTROL_CONTROLTYPE_MUX* = ( MIXERCONTROL_CONTROLTYPE_SINGLESELECT+1 )
  MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT* = ( MIXERCONTROL_CT_CLASS_LIST or MIXERCONTROL_CT_SC_LIST_MULTIPLE or MIXERCONTROL_CT_UNITS_BOOLEAN )
  MIXERCONTROL_CONTROLTYPE_MIXER* = ( MIXERCONTROL_CONTROLTYPE_MULTIPLESELECT+1 )
  MIXERCONTROL_CONTROLTYPE_MICROTIME* = ( MIXERCONTROL_CT_CLASS_TIME or MIXERCONTROL_CT_SC_TIME_MICROSECS or MIXERCONTROL_CT_UNITS_UNSIGNED )
  MIXERCONTROL_CONTROLTYPE_MILLITIME* = ( MIXERCONTROL_CT_CLASS_TIME or MIXERCONTROL_CT_SC_TIME_MILLISECS or MIXERCONTROL_CT_UNITS_UNSIGNED )
  MIXER_GETLINECONTROLSF_ALL* = 0
  MIXER_GETLINECONTROLSF_ONEBYID* = 1
  MIXER_GETLINECONTROLSF_ONEBYTYPE* = 2
  MIXER_GETLINECONTROLSF_QUERYMASK* = 15
  MIXER_GETCONTROLDETAILSF_VALUE* = 0
  MIXER_GETCONTROLDETAILSF_LISTTEXT* = 1
  MIXER_GETCONTROLDETAILSF_QUERYMASK* = 15
  MIXER_SETCONTROLDETAILSF_VALUE* = 0
  MIXER_SETCONTROLDETAILSF_CUSTOM* = 1
  MIXER_SETCONTROLDETAILSF_QUERYMASK* = 15
  TIMERR_NOERROR* = 0
  TIMERR_NOCANDO* = ( TIMERR_BASE+1 )
  TIMERR_STRUCT* = ( TIMERR_BASE+33 )
  TIME_ONESHOT* = 0
  TIME_PERIODIC* = 1
  TIME_CALLBACK_FUNCTION* = 0
  TIME_CALLBACK_EVENT_SET* = 16
  TIME_CALLBACK_EVENT_PULSE* = 32
  TIME_KILL_SYNCHRONOUS* = 0x0100
  JOYERR_NOERROR* = 0
  JOYERR_PARMS* = ( JOYERR_BASE+5 )
  JOYERR_NOCANDO* = ( JOYERR_BASE+6 )
  JOYERR_UNPLUGGED* = ( JOYERR_BASE+7 )
  JOY_BUTTON1* = 1
  JOY_BUTTON2* = 2
  JOY_BUTTON3* = 4
  JOY_BUTTON4* = 8
  JOY_BUTTON1CHG* = 256
  JOY_BUTTON2CHG* = 512
  JOY_BUTTON3CHG* = 1024
  JOY_BUTTON4CHG* = 2048
  JOY_BUTTON5* = 257
  JOY_BUTTON6* = 513
  JOY_BUTTON7* = 1025
  JOY_BUTTON8* = 2049
  JOY_BUTTON9* = 256
  JOY_BUTTON10* = 512
  JOY_BUTTON11* = 1024
  JOY_BUTTON12* = 2048
  JOY_BUTTON13* = 4096
  JOY_BUTTON14* = 8192
  JOY_BUTTON15* = 16384
  JOY_BUTTON16* = 32768
  JOY_BUTTON17* = 65536
  JOY_BUTTON18* = 0x20000
  JOY_BUTTON19* = 0x40000
  JOY_BUTTON20* = 0x80000
  JOY_BUTTON21* = 0x100000
  JOY_BUTTON22* = 0x200000
  JOY_BUTTON23* = 0x400000
  JOY_BUTTON24* = 0x800000
  JOY_BUTTON25* = 0x1000000
  JOY_BUTTON26* = 0x2000000
  JOY_BUTTON27* = 0x4000000
  JOY_BUTTON28* = 0x8000000
  JOY_BUTTON29* = 0x10000000
  JOY_BUTTON30* = 0x20000000
  JOY_BUTTON31* = 0x40000000
  JOY_BUTTON32* = 0x80000000'i32
  JOY_POVCENTERED* = 0xFFFFFFFF'u32
  JOY_POVFORWARD* = 0
  JOY_POVBACKWARD* = 18000
  JOY_POVLEFT* = 27000
  JOY_POVRIGHT* = 9000
  JOY_RETURNX* = 0x00000001
  JOY_RETURNY* = 0x00000002
  JOY_RETURNZ* = 0x00000004
  JOY_RETURNR* = 0x00000008
  JOY_RETURNU* = 0x00000010
  JOY_RETURNV* = 0x00000020
  JOY_RETURNPOV* = 0x00000040
  JOY_RETURNBUTTONS* = 0x00000080
  JOY_RETURNRAWDATA* = 0x00000100
  JOY_RETURNPOVCTS* = 0x00000200
  JOY_RETURNCENTERED* = 0x00000400
  JOY_USEDEADZONE* = 0x00000800
  JOY_RETURNALL* = (JOY_RETURNX or JOY_RETURNY or JOY_RETURNZ or JOY_RETURNR or JOY_RETURNU or JOY_RETURNV or JOY_RETURNPOV or JOY_RETURNBUTTONS).DWORD
  JOY_CAL_READALWAYS* = 0x00010000
  JOY_CAL_READXYONLY* = 0x00020000
  JOY_CAL_READ3* = 0x00040000
  JOY_CAL_READ4* = 0x00080000
  JOY_CAL_READXONLY* = 0x00100000
  JOY_CAL_READYONLY* = 0x00200000
  JOY_CAL_READ5* = 0x00400000
  JOY_CAL_READ6* = 0x00800000
  JOY_CAL_READZONLY* = 0x01000000
  JOY_CAL_READRONLY* = 0x02000000
  JOY_CAL_READUONLY* = 0x04000000
  JOY_CAL_READVONLY* = 0x08000000
  JOYSTICKID1* = 0
  JOYSTICKID2* = 1
  JOYCAPS_HASZ* = 1
  JOYCAPS_HASR* = 2
  JOYCAPS_HASU* = 4
  JOYCAPS_HASV* = 8
  JOYCAPS_HASPOV* = 16
  JOYCAPS_POV4DIR* = 32
  JOYCAPS_POVCTS* = 64
  MMIOERR_BASE* = 256
  MMIOERR_FILENOTFOUND* = ( MMIOERR_BASE+1 )
  MMIOERR_OUTOFMEMORY* = ( MMIOERR_BASE+2 )
  MMIOERR_CANNOTOPEN* = ( MMIOERR_BASE+3 )
  MMIOERR_CANNOTCLOSE* = ( MMIOERR_BASE+4 )
  MMIOERR_CANNOTREAD* = ( MMIOERR_BASE+5 )
  MMIOERR_CANNOTWRITE* = ( MMIOERR_BASE+6 )
  MMIOERR_CANNOTSEEK* = ( MMIOERR_BASE+7 )
  MMIOERR_CANNOTEXPAND* = ( MMIOERR_BASE+8 )
  MMIOERR_CHUNKNOTFOUND* = ( MMIOERR_BASE+9 )
  MMIOERR_UNBUFFERED* = ( MMIOERR_BASE+10 )
  MMIOERR_PATHNOTFOUND* = ( MMIOERR_BASE+11 )
  MMIOERR_ACCESSDENIED* = ( MMIOERR_BASE+12 )
  MMIOERR_SHARINGVIOLATION* = ( MMIOERR_BASE+13 )
  MMIOERR_NETWORKERROR* = ( MMIOERR_BASE+14 )
  MMIOERR_TOOMANYOPENFILES* = ( MMIOERR_BASE+15 )
  MMIOERR_INVALIDFILE* = ( MMIOERR_BASE+16 )
  CFSEPCHAR* = '+'
  MMIO_RWMODE* = 3
  MMIO_SHAREMODE* = 0x70
  MMIO_CREATE* = 0x1000
  MMIO_PARSE* = 256
  MMIO_DELETE* = 512
  MMIO_EXIST* = 0x4000
  MMIO_ALLOCBUF* = 0x10000
  MMIO_GETTEMP* = 0x20000
  MMIO_DIRTY* = 0x10000000
  MMIO_READ* = 0
  MMIO_WRITE* = 1
  MMIO_READWRITE* = 2
  MMIO_COMPAT* = 0
  MMIO_EXCLUSIVE* = 16
  MMIO_DENYWRITE* = 32
  MMIO_DENYREAD* = 0x30
  MMIO_DENYNONE* = 64
  MMIO_FHOPEN* = 16
  MMIO_EMPTYBUF* = 16
  MMIO_TOUPPER* = 16
  MMIO_INSTALLPROC* = 0x10000
  MMIO_GLOBALPROC* = 0x10000000
  MMIO_REMOVEPROC* = 0x20000
  MMIO_UNICODEPROC* = 0x1000000
  MMIO_FINDPROC* = 0x40000
  MMIO_FINDCHUNK* = 16
  MMIO_FINDRIFF* = 32
  MMIO_FINDLIST* = 64
  MMIO_CREATERIFF* = 32
  MMIO_CREATELIST* = 64
  MMIOM_READ* = MMIO_READ
  MMIOM_WRITE* = MMIO_WRITE
  MMIOM_SEEK* = 2
  MMIOM_OPEN* = 3
  MMIOM_CLOSE* = 4
  MMIOM_WRITEFLUSH* = 5
  MMIOM_RENAME* = 6
  MMIOM_USER* = 0x8000
  FOURCC_RIFF* = mmioFOURCC('R', 'I', 'F', 'F')
  FOURCC_LIST* = mmioFOURCC('L', 'I', 'S', 'T')
  FOURCC_DOS* = mmioFOURCC('D', 'O', 'S', ' ')
  FOURCC_MEM* = mmioFOURCC('M', 'E', 'M', ' ')
  MMIO_DEFAULTBUFFER* = 8192
  MCIERR_INVALID_DEVICE_ID* = MCIERR_BASE + 1
  MCIERR_UNRECOGNIZED_KEYWORD* = MCIERR_BASE + 3
  MCIERR_UNRECOGNIZED_COMMAND* = MCIERR_BASE + 5
  MCIERR_HARDWARE* = (MCIERR_BASE + 5) + 1
  MCIERR_INVALID_DEVICE_NAME* = (MCIERR_BASE + 5) + 2
  MCIERR_OUT_OF_MEMORY* = (MCIERR_BASE + 5) + 3
  MCIERR_DEVICE_OPEN* = (MCIERR_BASE + 5) + 4
  MCIERR_CANNOT_LOAD_DRIVER* = (MCIERR_BASE + 5) + 5
  MCIERR_MISSING_COMMAND_STRING* = (MCIERR_BASE + 5) + 6
  MCIERR_PARAM_OVERFLOW* = (MCIERR_BASE + 5) + 7
  MCIERR_MISSING_STRING_ARGUMENT* = (MCIERR_BASE + 5) + 8
  MCIERR_BAD_INTEGER* = (MCIERR_BASE + 5) + 9
  MCIERR_PARSER_INTERNAL* = (MCIERR_BASE + 5) + 10
  MCIERR_DRIVER_INTERNAL* = (MCIERR_BASE + 5) + 11
  MCIERR_MISSING_PARAMETER* = (MCIERR_BASE + 5) + 12
  MCIERR_UNSUPPORTED_FUNCTION* = (MCIERR_BASE + 5) + 13
  MCIERR_FILE_NOT_FOUND* = (MCIERR_BASE + 5) + 14
  MCIERR_DEVICE_NOT_READY* = (MCIERR_BASE + 5) + 15
  MCIERR_INTERNAL* = (MCIERR_BASE + 5) + 16
  MCIERR_DRIVER* = (MCIERR_BASE + 5) + 17
  MCIERR_CANNOT_USE_ALL* = (MCIERR_BASE + 5) + 18
  MCIERR_MULTIPLE* = (MCIERR_BASE + 5) + 19
  MCIERR_EXTENSION_NOT_FOUND* = (MCIERR_BASE + 5) + 20
  MCIERR_OUTOFRANGE* = (MCIERR_BASE + 5) + 21
  MCIERR_FLAGS_NOT_COMPATIBLE* = MCIERR_BASE + 28
  MCIERR_FILE_NOT_SAVED* = MCIERR_BASE + 30
  MCIERR_DEVICE_TYPE_REQUIRED* = (MCIERR_BASE + 30) + 1
  MCIERR_DEVICE_LOCKED* = (MCIERR_BASE + 30) + 2
  MCIERR_DUPLICATE_ALIAS* = (MCIERR_BASE + 30) + 3
  MCIERR_BAD_CONSTANT* = (MCIERR_BASE + 30) + 4
  MCIERR_MUST_USE_SHAREABLE* = (MCIERR_BASE + 30) + 5
  MCIERR_MISSING_DEVICE_NAME* = (MCIERR_BASE + 30) + 6
  MCIERR_BAD_TIME_FORMAT* = (MCIERR_BASE + 30) + 7
  MCIERR_NO_CLOSING_QUOTE* = (MCIERR_BASE + 30) + 8
  MCIERR_DUPLICATE_FLAGS* = (MCIERR_BASE + 30) + 9
  MCIERR_INVALID_FILE* = (MCIERR_BASE + 30) + 10
  MCIERR_NULL_PARAMETER_BLOCK* = (MCIERR_BASE + 30) + 11
  MCIERR_UNNAMED_RESOURCE* = (MCIERR_BASE + 30) + 12
  MCIERR_NEW_REQUIRES_ALIAS* = (MCIERR_BASE + 30) + 13
  MCIERR_NOTIFY_ON_AUTO_OPEN* = (MCIERR_BASE + 30) + 14
  MCIERR_NO_ELEMENT_ALLOWED* = (MCIERR_BASE + 30) + 15
  MCIERR_NONAPPLICABLE_FUNCTION* = (MCIERR_BASE + 30) + 16
  MCIERR_ILLEGAL_FOR_AUTO_OPEN* = (MCIERR_BASE + 30) + 17
  MCIERR_FILENAME_REQUIRED* = (MCIERR_BASE + 30) + 18
  MCIERR_EXTRA_CHARACTERS* = (MCIERR_BASE + 30) + 19
  MCIERR_DEVICE_NOT_INSTALLED* = (MCIERR_BASE + 30) + 20
  MCIERR_GET_CD* = (MCIERR_BASE + 30) + 21
  MCIERR_SET_CD* = (MCIERR_BASE + 30) + 22
  MCIERR_SET_DRIVE* = (MCIERR_BASE + 30) + 23
  MCIERR_DEVICE_LENGTH* = (MCIERR_BASE + 30) + 24
  MCIERR_DEVICE_ORD_LENGTH* = (MCIERR_BASE + 30) + 25
  MCIERR_NO_INTEGER* = (MCIERR_BASE + 30) + 26
  MCIERR_WAVE_OUTPUTSINUSE* = MCIERR_BASE + 64
  MCIERR_WAVE_SETOUTPUTINUSE* = (MCIERR_BASE + 64) + 1
  MCIERR_WAVE_INPUTSINUSE* = (MCIERR_BASE + 64) + 2
  MCIERR_WAVE_SETINPUTINUSE* = (MCIERR_BASE + 64) + 3
  MCIERR_WAVE_OUTPUTUNSPECIFIED* = (MCIERR_BASE + 64) + 4
  MCIERR_WAVE_INPUTUNSPECIFIED* = (MCIERR_BASE + 64) + 5
  MCIERR_WAVE_OUTPUTSUNSUITABLE* = (MCIERR_BASE + 64) + 6
  MCIERR_WAVE_SETOUTPUTUNSUITABLE* = (MCIERR_BASE + 64) + 7
  MCIERR_WAVE_INPUTSUNSUITABLE* = (MCIERR_BASE + 64) + 8
  MCIERR_WAVE_SETINPUTUNSUITABLE* = (MCIERR_BASE + 64) + 9
  MCIERR_SEQ_DIV_INCOMPATIBLE* = MCIERR_BASE + 80
  MCIERR_SEQ_PORT_INUSE* = (MCIERR_BASE + 80) + 1
  MCIERR_SEQ_PORT_NONEXISTENT* = (MCIERR_BASE + 80) + 2
  MCIERR_SEQ_PORT_MAPNODEVICE* = (MCIERR_BASE + 80) + 3
  MCIERR_SEQ_PORT_MISCERROR* = (MCIERR_BASE + 80) + 4
  MCIERR_SEQ_TIMER* = (MCIERR_BASE + 80) + 5
  MCIERR_SEQ_PORTUNSPECIFIED* = (MCIERR_BASE + 80) + 6
  MCIERR_SEQ_NOMIDIPRESENT* = (MCIERR_BASE + 80) + 7
  MCIERR_NO_WINDOW* = MCIERR_BASE + 90
  MCIERR_CREATEWINDOW* = (MCIERR_BASE + 90) + 1
  MCIERR_FILE_READ* = (MCIERR_BASE + 90) + 2
  MCIERR_FILE_WRITE* = (MCIERR_BASE + 90) + 3
  MCIERR_NO_IDENTITY* = (MCIERR_BASE + 90) + 4
  MCIERR_CUSTOM_DRIVER_BASE* = MCIERR_BASE + 256
  MCI_FIRST* = DRV_MCI_FIRST
  MCI_OPEN* = 0x803
  MCI_CLOSE* = 0x804
  MCI_ESCAPE* = 0x805
  MCI_PLAY* = 0x806
  MCI_SEEK* = 0x807
  MCI_STOP* = 0x808
  MCI_PAUSE* = 0x809
  MCI_INFO* = 0x80A
  MCI_GETDEVCAPS* = 0x80B
  MCI_SPIN* = 0x80C
  MCI_SET* = 0x80D
  MCI_STEP* = 0x80E
  MCI_RECORD* = 0x80F
  MCI_SYSINFO* = 0x810
  MCI_BREAK* = 0x811
  MCI_SAVE* = 0x813
  MCI_STATUS* = 0x814
  MCI_CUE* = 0x830
  MCI_REALIZE* = 0x840
  MCI_WINDOW* = 0x841
  MCI_PUT* = 0x842
  MCI_WHERE* = 0x843
  MCI_FREEZE* = 0x844
  MCI_UNFREEZE* = 0x845
  MCI_LOAD* = 0x850
  MCI_CUT* = 0x851
  MCI_COPY* = 0x852
  MCI_PASTE* = 0x853
  MCI_UPDATE* = 0x854
  MCI_RESUME* = 0x855
  MCI_DELETE* = 0x856
  MCI_USER_MESSAGES* = ( DRV_MCI_FIRST+0x400 )
  MCI_LAST* = 0xFFF
  MCI_ALL_DEVICE_ID* = 0xFFFFFFFF'u32
  MCI_DEVTYPE_VCR* = 513
  MCI_DEVTYPE_VIDEODISC* = 514
  MCI_DEVTYPE_OVERLAY* = 515
  MCI_DEVTYPE_CD_AUDIO* = 516
  MCI_DEVTYPE_DAT* = 517
  MCI_DEVTYPE_SCANNER* = 518
  MCI_DEVTYPE_ANIMATION* = 519
  MCI_DEVTYPE_DIGITAL_VIDEO* = 520
  MCI_DEVTYPE_OTHER* = 521
  MCI_DEVTYPE_WAVEFORM_AUDIO* = 522
  MCI_DEVTYPE_SEQUENCER* = 523
  MCI_DEVTYPE_FIRST* = MCI_DEVTYPE_VCR
  MCI_DEVTYPE_LAST* = MCI_DEVTYPE_SEQUENCER
  MCI_DEVTYPE_FIRST_USER* = 0x1000
  MCI_MODE_NOT_READY* = ( MCI_STRING_OFFSET+12 )
  MCI_MODE_STOP* = ( MCI_STRING_OFFSET+13 )
  MCI_MODE_PLAY* = ( MCI_STRING_OFFSET+14 )
  MCI_MODE_RECORD* = ( MCI_STRING_OFFSET+15 )
  MCI_MODE_SEEK* = ( MCI_STRING_OFFSET+16 )
  MCI_MODE_PAUSE* = ( MCI_STRING_OFFSET+17 )
  MCI_MODE_OPEN* = ( MCI_STRING_OFFSET+18 )
  MCI_FORMAT_MILLISECONDS* = 0
  MCI_FORMAT_HMS* = 1
  MCI_FORMAT_MSF* = 2
  MCI_FORMAT_FRAMES* = 3
  MCI_FORMAT_SMPTE_24* = 4
  MCI_FORMAT_SMPTE_25* = 5
  MCI_FORMAT_SMPTE_30* = 6
  MCI_FORMAT_SMPTE_30DROP* = 7
  MCI_FORMAT_BYTES* = 8
  MCI_FORMAT_SAMPLES* = 9
  MCI_FORMAT_TMSF* = 10

proc MCI_HMS_HOUR*(t: DWORD): BYTE = t.BYTE
proc MCI_HMS_MINUTE*(t: DWORD): BYTE = (t shr 8).BYTE
proc MCI_HMS_SECOND*(t: DWORD): BYTE = (t shr 16).BYTE
proc MCI_MAKE_HMS*(h: BYTE, m: BYTE, s: BYTE): DWORD = h.DWORD or (m.DWORD shl 8) or (s.DWORD shl 16)
proc MCI_MAKE_MSF*(m: BYTE, s: BYTE, f: BYTE): DWORD = m.DWORD or (s.DWORD shl 8) or (f.DWORD shl 16)
proc MCI_MAKE_TMSF*(t: BYTE, m: BYTE, s: BYTE, f: BYTE): DWORD = t.DWORD or (m.DWORD shl 8) or (s.DWORD shl 16) or (f.DWORD shl 24)
proc MCI_MSF_MINUTE*(t: DWORD): BYTE = t.BYTE
proc MCI_MSF_SECOND*(t: DWORD): BYTE = (t shr 8).BYTE
proc MCI_MSF_FRAME*(t: DWORD): BYTE = (t shr 16).BYTE
proc MCI_TMSF_TRACK*(t: DWORD): BYTE = t.BYTE
proc MCI_TMSF_MINUTE*(t: DWORD): BYTE = (t shr 8).BYTE
proc MCI_TMSF_SECOND*(t: DWORD): BYTE = (t shr 16).BYTE
proc MCI_TMSF_FRAME*(t: DWORD): BYTE = (t shr 24).BYTE

const
  MCI_NOTIFY_SUCCESSFUL* = 1
  MCI_NOTIFY_SUPERSEDED* = 2
  MCI_NOTIFY_ABORTED* = 4
  MCI_NOTIFY_FAILURE* = 8
  MCI_NOTIFY* = 1
  MCI_WAIT* = 2
  MCI_FROM* = 4
  MCI_TO* = 8
  MCI_TRACK* = 16
  MCI_OPEN_SHAREABLE* = 256
  MCI_OPEN_ELEMENT* = 512
  MCI_OPEN_ALIAS* = 1024
  MCI_OPEN_ELEMENT_ID* = 2048
  MCI_OPEN_TYPE_ID* = 0x1000
  MCI_OPEN_TYPE* = 0x2000
  MCI_SEEK_TO_START* = 256
  MCI_SEEK_TO_END* = 512
  MCI_STATUS_ITEM* = 256
  MCI_STATUS_START* = 512
  MCI_STATUS_LENGTH* = 1
  MCI_STATUS_POSITION* = 2
  MCI_STATUS_NUMBER_OF_TRACKS* = 3
  MCI_STATUS_MODE* = 4
  MCI_STATUS_MEDIA_PRESENT* = 5
  MCI_STATUS_TIME_FORMAT* = 6
  MCI_STATUS_READY* = 7
  MCI_STATUS_CURRENT_TRACK* = 8
  MCI_INFO_PRODUCT* = 256
  MCI_INFO_FILE* = 512
  MCI_INFO_MEDIA_UPC* = 1024
  MCI_INFO_MEDIA_IDENTITY* = 2048
  MCI_INFO_NAME* = 0x1000
  MCI_INFO_COPYRIGHT* = 0x2000
  MCI_GETDEVCAPS_ITEM* = 256
  MCI_GETDEVCAPS_CAN_RECORD* = 1
  MCI_GETDEVCAPS_HAS_AUDIO* = 2
  MCI_GETDEVCAPS_HAS_VIDEO* = 3
  MCI_GETDEVCAPS_DEVICE_TYPE* = 4
  MCI_GETDEVCAPS_USES_FILES* = 5
  MCI_GETDEVCAPS_COMPOUND_DEVICE* = 6
  MCI_GETDEVCAPS_CAN_EJECT* = 7
  MCI_GETDEVCAPS_CAN_PLAY* = 8
  MCI_GETDEVCAPS_CAN_SAVE* = 9
  MCI_SYSINFO_QUANTITY* = 256
  MCI_SYSINFO_OPEN* = 512
  MCI_SYSINFO_NAME* = 1024
  MCI_SYSINFO_INSTALLNAME* = 2048
  MCI_SET_DOOR_OPEN* = 256
  MCI_SET_DOOR_CLOSED* = 512
  MCI_SET_TIME_FORMAT* = 1024
  MCI_SET_AUDIO* = 2048
  MCI_SET_VIDEO* = 0x1000
  MCI_SET_ON* = 0x2000
  MCI_SET_OFF* = 0x4000
  MCI_SET_AUDIO_ALL* = 0
  MCI_SET_AUDIO_LEFT* = 1
  MCI_SET_AUDIO_RIGHT* = 2
  MCI_BREAK_KEY* = 256
  MCI_BREAK_HWND* = 512
  MCI_BREAK_OFF* = 1024
  MCI_RECORD_INSERT* = 256
  MCI_RECORD_OVERWRITE* = 512
  MCI_SAVE_FILE* = 256
  MCI_LOAD_FILE* = 256
  MCI_VD_MODE_PARK* = ( MCI_VD_OFFSET+1 )
  MCI_VD_MEDIA_CLV* = ( MCI_VD_OFFSET+2 )
  MCI_VD_MEDIA_CAV* = ( MCI_VD_OFFSET+3 )
  MCI_VD_MEDIA_OTHER* = ( MCI_VD_OFFSET+4 )
  MCI_VD_FORMAT_TRACK* = 0x4001
  MCI_VD_PLAY_REVERSE* = 0x10000
  MCI_VD_PLAY_FAST* = 0x20000
  MCI_VD_PLAY_SPEED* = 0x40000
  MCI_VD_PLAY_SCAN* = 0x80000
  MCI_VD_PLAY_SLOW* = 0x100000
  MCI_VD_SEEK_REVERSE* = 0x10000
  MCI_VD_STATUS_SPEED* = 0x4002
  MCI_VD_STATUS_FORWARD* = 0x4003
  MCI_VD_STATUS_MEDIA_TYPE* = 0x4004
  MCI_VD_STATUS_SIDE* = 0x4005
  MCI_VD_STATUS_DISC_SIZE* = 0x4006
  MCI_VD_GETDEVCAPS_CLV* = 0x10000
  MCI_VD_GETDEVCAPS_CAV* = 0x20000
  MCI_VD_SPIN_UP* = 0x10000
  MCI_VD_SPIN_DOWN* = 0x20000
  MCI_VD_GETDEVCAPS_CAN_REVERSE* = 0x4002
  MCI_VD_GETDEVCAPS_FAST_RATE* = 0x4003
  MCI_VD_GETDEVCAPS_SLOW_RATE* = 0x4004
  MCI_VD_GETDEVCAPS_NORMAL_RATE* = 0x4005
  MCI_VD_STEP_FRAMES* = 0x10000
  MCI_VD_STEP_REVERSE* = 0x20000
  MCI_VD_ESCAPE_STRING* = 256
  MCI_CDA_STATUS_TYPE_TRACK* = 0x4001
  MCI_CDA_TRACK_AUDIO* = MCI_CD_OFFSET
  MCI_CDA_TRACK_OTHER* = ( MCI_CD_OFFSET+1 )
  MCI_WAVE_PCM* = MCI_WAVE_OFFSET
  MCI_WAVE_MAPPER* = ( MCI_WAVE_OFFSET+1 )
  MCI_WAVE_OPEN_BUFFER* = 0x10000
  MCI_WAVE_SET_FORMATTAG* = 0x10000
  MCI_WAVE_SET_CHANNELS* = 0x20000
  MCI_WAVE_SET_SAMPLESPERSEC* = 0x40000
  MCI_WAVE_SET_AVGBYTESPERSEC* = 0x80000
  MCI_WAVE_SET_BLOCKALIGN* = 0x100000
  MCI_WAVE_SET_BITSPERSAMPLE* = 0x200000
  MCI_WAVE_INPUT* = 0x400000
  MCI_WAVE_OUTPUT* = 0x800000
  MCI_WAVE_STATUS_FORMATTAG* = 0x4001
  MCI_WAVE_STATUS_CHANNELS* = 0x4002
  MCI_WAVE_STATUS_SAMPLESPERSEC* = 0x4003
  MCI_WAVE_STATUS_AVGBYTESPERSEC* = 0x4004
  MCI_WAVE_STATUS_BLOCKALIGN* = 0x4005
  MCI_WAVE_STATUS_BITSPERSAMPLE* = 0x4006
  MCI_WAVE_STATUS_LEVEL* = 0x4007
  MCI_WAVE_SET_ANYINPUT* = 0x4000000
  MCI_WAVE_SET_ANYOUTPUT* = 0x8000000
  MCI_WAVE_GETDEVCAPS_INPUTS* = 0x4001
  MCI_WAVE_GETDEVCAPS_OUTPUTS* = 0x4002
  MCI_SEQ_DIV_PPQN* = MCI_SEQ_OFFSET
  MCI_SEQ_DIV_SMPTE_24* = ( MCI_SEQ_OFFSET+1 )
  MCI_SEQ_DIV_SMPTE_25* = ( MCI_SEQ_OFFSET+2 )
  MCI_SEQ_DIV_SMPTE_30DROP* = ( MCI_SEQ_OFFSET+3 )
  MCI_SEQ_DIV_SMPTE_30* = ( MCI_SEQ_OFFSET+4 )
  MCI_SEQ_FORMAT_SONGPTR* = 0x4001
  MCI_SEQ_FILE* = 0x4002
  MCI_SEQ_MIDI* = 0x4003
  MCI_SEQ_SMPTE* = 0x4004
  MCI_SEQ_NONE* = 65533
  MCI_SEQ_MAPPER* = 65535
  MCI_SEQ_STATUS_TEMPO* = 0x4002
  MCI_SEQ_STATUS_PORT* = 0x4003
  MCI_SEQ_STATUS_SLAVE* = 0x4007
  MCI_SEQ_STATUS_MASTER* = 0x4008
  MCI_SEQ_STATUS_OFFSET* = 0x4009
  MCI_SEQ_STATUS_DIVTYPE* = 0x400A
  MCI_SEQ_STATUS_NAME* = 0x400B
  MCI_SEQ_STATUS_COPYRIGHT* = 0x400C
  MCI_SEQ_SET_TEMPO* = 0x10000
  MCI_SEQ_SET_PORT* = 0x20000
  MCI_SEQ_SET_SLAVE* = 0x40000
  MCI_SEQ_SET_MASTER* = 0x80000
  MCI_SEQ_SET_OFFSET* = 0x1000000
  MCI_ANIM_OPEN_WS* = 0x10000
  MCI_ANIM_OPEN_PARENT* = 0x20000
  MCI_ANIM_OPEN_NOSTATIC* = 0x40000
  MCI_ANIM_PLAY_SPEED* = 0x10000
  MCI_ANIM_PLAY_REVERSE* = 0x20000
  MCI_ANIM_PLAY_FAST* = 0x40000
  MCI_ANIM_PLAY_SLOW* = 0x80000
  MCI_ANIM_PLAY_SCAN* = 0x100000
  MCI_ANIM_STEP_REVERSE* = 0x10000
  MCI_ANIM_STEP_FRAMES* = 0x20000
  MCI_ANIM_STATUS_SPEED* = 0x4001
  MCI_ANIM_STATUS_FORWARD* = 0x4002
  MCI_ANIM_STATUS_HWND* = 0x4003
  MCI_ANIM_STATUS_HPAL* = 0x4004
  MCI_ANIM_STATUS_STRETCH* = 0x4005
  MCI_ANIM_INFO_TEXT* = 0x10000
  MCI_ANIM_GETDEVCAPS_CAN_REVERSE* = 0x4001
  MCI_ANIM_GETDEVCAPS_FAST_RATE* = 0x4002
  MCI_ANIM_GETDEVCAPS_SLOW_RATE* = 0x4003
  MCI_ANIM_GETDEVCAPS_NORMAL_RATE* = 0x4004
  MCI_ANIM_GETDEVCAPS_PALETTES* = 0x4006
  MCI_ANIM_GETDEVCAPS_CAN_STRETCH* = 0x4007
  MCI_ANIM_GETDEVCAPS_MAX_WINDOWS* = 0x4008
  MCI_ANIM_REALIZE_NORM* = 0x10000
  MCI_ANIM_REALIZE_BKGD* = 0x20000
  MCI_ANIM_WINDOW_HWND* = 0x10000
  MCI_ANIM_WINDOW_STATE* = 0x40000
  MCI_ANIM_WINDOW_TEXT* = 0x80000
  MCI_ANIM_WINDOW_ENABLE_STRETCH* = 0x100000
  MCI_ANIM_WINDOW_DISABLE_STRETCH* = 0x200000
  MCI_ANIM_WINDOW_DEFAULT* = 0x0
  MCI_ANIM_RECT* = 0x10000
  MCI_ANIM_PUT_SOURCE* = 0x20000
  MCI_ANIM_PUT_DESTINATION* = 0x40000
  MCI_ANIM_WHERE_SOURCE* = 0x20000
  MCI_ANIM_WHERE_DESTINATION* = 0x40000
  MCI_ANIM_UPDATE_HDC* = 0x20000
  MCI_OVLY_OPEN_WS* = 0x10000
  MCI_OVLY_OPEN_PARENT* = 0x20000
  MCI_OVLY_STATUS_HWND* = 0x4001
  MCI_OVLY_STATUS_STRETCH* = 0x4002
  MCI_OVLY_INFO_TEXT* = 0x10000
  MCI_OVLY_GETDEVCAPS_CAN_STRETCH* = 0x4001
  MCI_OVLY_GETDEVCAPS_CAN_FREEZE* = 0x4002
  MCI_OVLY_GETDEVCAPS_MAX_WINDOWS* = 0x4003
  MCI_OVLY_WINDOW_HWND* = 0x10000
  MCI_OVLY_WINDOW_STATE* = 0x40000
  MCI_OVLY_WINDOW_TEXT* = 0x80000
  MCI_OVLY_WINDOW_ENABLE_STRETCH* = 0x100000
  MCI_OVLY_WINDOW_DISABLE_STRETCH* = 0x200000
  MCI_OVLY_WINDOW_DEFAULT* = 0x0
  MCI_OVLY_RECT* = 0x10000
  MCI_OVLY_PUT_SOURCE* = 0x20000
  MCI_OVLY_PUT_DESTINATION* = 0x40000
  MCI_OVLY_PUT_FRAME* = 0x80000
  MCI_OVLY_PUT_VIDEO* = 0x100000
  MCI_OVLY_WHERE_SOURCE* = 0x20000
  MCI_OVLY_WHERE_DESTINATION* = 0x40000
  MCI_OVLY_WHERE_FRAME* = 0x80000
  MCI_OVLY_WHERE_VIDEO* = 0x100000
  NEWTRANSPARENT* = 3
  QUERYROPSUPPORT* = 40
  SELECTDIB* = 41

proc DIBINDEX*(n: WORD): LONG = MAKELONG(n, 0x10FF).LONG

const
  CAPS1* = 94
  C1_TRANSPARENT* = 1
  SEEK_SET* = 0
  SEEK_CUR* = 1
  SEEK_END* = 2

type
  MCIERROR* = DWORD
  MCIDEVICEID* = UINT
  YIELDPROC* = proc (P1: MCIDEVICEID, P2: DWORD): UINT {.stdcall.}
  MMVERSION* = UINT
  MMRESULT* = UINT
  MMTIME_UNION1_midi* {.final, pure.} = object
    songptrpos*: DWORD
  MMTIME_UNION1_smpte* {.final, pure.} = object
    hour*: BYTE
    min*: BYTE
    sec*: BYTE
    frame*: BYTE
    fps*: BYTE
    dummy*: BYTE
    pad*: array[2, BYTE]
  MMTIME_UNION1* {.final, union, pure.} = object
    ms*: DWORD
    sample*: DWORD
    cb*: DWORD
    ticks*: DWORD
    smpte*: MMTIME_UNION1_smpte
    midi*: MMTIME_UNION1_midi
  MMTIME* {.final, pure.} = object
    wType*: UINT
    u1*: MMTIME_UNION1
  PMMTIME* = ptr MMTIME
  LPMMTIME* = ptr MMTIME
  HDRVR* = HANDLE
  DRVCONFIGINFO* {.final, pure.} = object
    dwDCISize*: DWORD
    lpszDCISectionName*: LPCWSTR
    lpszDCIAliasName*: LPCWSTR
  PDRVCONFIGINFO* = ptr DRVCONFIGINFO
  LPDRVCONFIGINFO* = ptr DRVCONFIGINFO
  DRVCONFIGINFOEX* {.final, pure.} = object
    dwDCISize*: DWORD
    lpszDCISectionName*: LPCWSTR
    lpszDCIAliasName*: LPCWSTR
    dnDevNode*: DWORD
  PDRVCONFIGINFOEX* = ptr DRVCONFIGINFOEX
  LPDRVCONFIGINFOEX* = ptr DRVCONFIGINFOEX
  HWAVE* = HANDLE
  HWAVEIN* = HANDLE
  HWAVEOUT* = HANDLE
  LPHWAVEIN* = ptr HWAVEIN
  LPHWAVEOUT* = ptr HWAVEOUT
  WAVEHDR* {.final, pure.} = object
    lpData*: LPSTR
    dwBufferLength*: DWORD
    dwBytesRecorded*: DWORD
    dwUser*: DWORD
    dwFlags*: DWORD
    dwLoops*: DWORD
    lpNext*: ptr WAVEHDR
    reserved*: DWORD
  PWAVEHDR* = ptr WAVEHDR
  LPWAVEHDR* = ptr WAVEHDR
  WAVEOUTCAPSA* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, CHAR]
    dwFormats*: DWORD
    wChannels*: WORD
    wReserved1*: WORD
    dwSupport*: DWORD
  PWAVEOUTCAPSA* = ptr WAVEOUTCAPSA
  LPWAVEOUTCAPSA* = ptr WAVEOUTCAPSA
  WAVEOUTCAPSW* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, WCHAR]
    dwFormats*: DWORD
    wChannels*: WORD
    wReserved1*: WORD
    dwSupport*: DWORD
  PWAVEOUTCAPSW* = ptr WAVEOUTCAPSW
  LPWAVEOUTCAPSW* = ptr WAVEOUTCAPSW
  WAVEINCAPSA* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, CHAR]
    dwFormats*: DWORD
    wChannels*: WORD
    wReserved1*: WORD
  PWAVEINCAPSA* = ptr WAVEINCAPSA
  LPWAVEINCAPSA* = ptr WAVEINCAPSA
  WAVEINCAPSW* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, WCHAR]
    dwFormats*: DWORD
    wChannels*: WORD
    wReserved1*: WORD
  PWAVEINCAPSW* = ptr WAVEINCAPSW
  LPWAVEINCAPSW* = ptr WAVEINCAPSW
  WAVEFORMAT* {.final, pure.} = object
    wFormatTag*: WORD
    nChannels*: WORD
    nSamplesPerSec*: DWORD
    nAvgBytesPerSec*: DWORD
    nBlockAlign*: WORD
  PWAVEFORMAT* = ptr WAVEFORMAT
  LPWAVEFORMAT* = ptr WAVEFORMAT
  PCMWAVEFORMAT* {.final, pure.} = object
    wf*: WAVEFORMAT
    wBitsPerSample*: WORD
  PPCMWAVEFORMAT* = ptr PCMWAVEFORMAT
  LPPCMWAVEFORMAT* = ptr PCMWAVEFORMAT
  WAVEFORMATEX* {.final, pure.} = object
    wFormatTag*: WORD
    nChannels*: WORD
    nSamplesPerSec*: DWORD
    nAvgBytesPerSec*: DWORD
    nBlockAlign*: WORD
    wBitsPerSample*: WORD
    cbSize*: WORD
  PWAVEFORMATEX* = ptr WAVEFORMATEX
  LPWAVEFORMATEX* = ptr WAVEFORMATEX
  LPCWAVEFORMATEX* = ptr WAVEFORMATEX
  HMIDI* = HANDLE
  HMIDIIN* = HANDLE
  HMIDIOUT* = HANDLE
  HMIDISTRM* = HANDLE
  LPHMIDI* = ptr HMIDI
  LPHMIDIIN* = ptr HMIDIIN
  LPHMIDIOUT* = ptr HMIDIOUT
  LPHMIDISTRM* = ptr HMIDISTRM
  PATCHARRAY* = array[MIDIPATCHSIZE, WORD]
  LPPATCHARRAY* = ptr PATCHARRAY
  KEYARRAY* = array[MIDIPATCHSIZE, WORD]
  LPKEYARRAY* = ptr KEYARRAY
  MIDIOUTCAPSA* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, CHAR]
    wTechnology*: WORD
    wVoices*: WORD
    wNotes*: WORD
    wChannelMask*: WORD
    dwSupport*: DWORD
  PMIDIOUTCAPSA* = ptr MIDIOUTCAPSA
  LPMIDIOUTCAPSA* = ptr MIDIOUTCAPSA
  MIDIOUTCAPSW* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, WCHAR]
    wTechnology*: WORD
    wVoices*: WORD
    wNotes*: WORD
    wChannelMask*: WORD
    dwSupport*: DWORD
  PMIDIOUTCAPSW* = ptr MIDIOUTCAPSW
  LPMIDIOUTCAPSW* = ptr MIDIOUTCAPSW
  MIDIINCAPSA* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, CHAR]
    dwSupport*: DWORD
  PMIDIINCAPSA* = ptr MIDIINCAPSA
  LPMIDIINCAPSA* = ptr MIDIINCAPSA
  MIDIINCAPSW* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, WCHAR]
    dwSupport*: DWORD
  PMIDIINCAPSW* = ptr MIDIINCAPSW
  LPMIDIINCAPSW* = ptr MIDIINCAPSW
  MIDIHDR* {.final, pure.} = object
    lpData*: LPSTR
    dwBufferLength*: DWORD
    dwBytesRecorded*: DWORD
    dwUser*: DWORD
    dwFlags*: DWORD
    lpNext*: ptr MIDIHDR
    reserved*: DWORD
    dwOffset*: DWORD
    dwReserved*: array[8, DWORD]
  PMIDIHDR* = ptr MIDIHDR
  LPMIDIHDR* = ptr MIDIHDR
  MIDIEVENT* {.final, pure.} = object
    dwDeltaTime*: DWORD
    dwStreamID*: DWORD
    dwEvent*: DWORD
    dwParms*: array[1, DWORD]
  MIDISTRMBUFFVER* {.final, pure.} = object
    dwVersion*: DWORD
    dwMid*: DWORD
    dwOEMVersion*: DWORD
  TMIDIPROPTIMEDIV* {.final, pure.} = object # renamed from MIDIPROPTIMEDIV
    cbStruct*: DWORD
    dwTimeDiv*: DWORD
  LPMIDIPROPTIMEDIV* = ptr TMIDIPROPTIMEDIV
  TMIDIPROPTEMPO* {.final, pure.} = object # renamed from MIDIPROPTEMPO
    cbStruct*: DWORD
    dwTempo*: DWORD
  LPMIDIPROPTEMPO* = ptr TMIDIPROPTEMPO
  AUXCAPSA* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, CHAR]
    wTechnology*: WORD
    wReserved1*: WORD
    dwSupport*: DWORD
  PAUXCAPSA* = ptr AUXCAPSA
  LPAUXCAPSA* = ptr AUXCAPSA
  AUXCAPSW* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, WCHAR]
    wTechnology*: WORD
    wReserved1*: WORD
    dwSupport*: DWORD
  PAUXCAPSW* = ptr AUXCAPSW
  LPAUXCAPSW* = ptr AUXCAPSW
  HMIXEROBJ* = HANDLE
  LPHMIXEROBJ* = ptr HMIXEROBJ
  HMIXER* = HANDLE
  LPHMIXER* = ptr HMIXER
  MIXERCAPSA* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, CHAR]
    fdwSupport*: DWORD
    cDestinations*: DWORD
  PMIXERCAPSA* = ptr MIXERCAPSA
  LPMIXERCAPSA* = ptr MIXERCAPSA
  MIXERCAPSW* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, WCHAR]
    fdwSupport*: DWORD
    cDestinations*: DWORD
  PMIXERCAPSW* = ptr MIXERCAPSW
  LPMIXERCAPSW* = ptr MIXERCAPSW
  MIXERLINEA_Target* {.final, pure.} = object
    dwType*: DWORD
    dwDeviceID*: DWORD
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, CHAR]
  MIXERLINEA* {.final, pure.} = object
    cbStruct*: DWORD
    dwDestination*: DWORD
    dwSource*: DWORD
    dwLineID*: DWORD
    fdwLine*: DWORD
    dwUser*: DWORD
    dwComponentType*: DWORD
    cChannels*: DWORD
    cConnections*: DWORD
    cControls*: DWORD
    szShortName*: array[MIXER_SHORT_NAME_CHARS, CHAR]
    szName*: array[MIXER_LONG_NAME_CHARS, CHAR]
    _*: MIXERLINEA_Target
  PMIXERLINEA* = ptr MIXERLINEA
  LPMIXERLINEA* = ptr MIXERLINEA
  MIXERLINEW_Target* {.final, pure.} = object
    dwType*: DWORD
    dwDeviceID*: DWORD
    wMid*: WORD
    wPid*: WORD
    vDriverVersion*: MMVERSION
    szPname*: array[MAXPNAMELEN, WCHAR]
  MIXERLINEW* {.final, pure.} = object
    cbStruct*: DWORD
    dwDestination*: DWORD
    dwSource*: DWORD
    dwLineID*: DWORD
    fdwLine*: DWORD
    dwUser*: DWORD
    dwComponentType*: DWORD
    cChannels*: DWORD
    cConnections*: DWORD
    cControls*: DWORD
    szShortName*: array[MIXER_SHORT_NAME_CHARS, WCHAR]
    szName*: array[MIXER_LONG_NAME_CHARS, WCHAR]
    _*: MIXERLINEW_Target
  PMIXERLINEW* = ptr MIXERLINEW
  LPMIXERLINEW* = ptr MIXERLINEW
  MIXERCONTROLA_Metrics* {.final, union, pure.} = object
    cSteps*: DWORD
    cbCustomData*: DWORD
    dwReserved*: array[6, DWORD]
  MIXERCONTROLA_Bounds_STRUCT2* {.final, pure.} = object
    dwMinimum*: DWORD
    dwMaximum*: DWORD
  MIXERCONTROLA_Bounds_STRUCT1* {.final, pure.} = object
    lMinimum*: LONG
    lMaximum*: LONG
  MIXERCONTROLA_Bounds* {.final, union, pure.} = object
    s1*: MIXERCONTROLA_Bounds_STRUCT1
    s2*: MIXERCONTROLA_Bounds_STRUCT2
    dwReserved*: array[6, DWORD]
  MIXERCONTROLA* {.final, pure.} = object
    cbStruct*: DWORD
    dwControlID*: DWORD
    dwControlType*: DWORD
    fdwControl*: DWORD
    cMultipleItems*: DWORD
    szShortName*: array[MIXER_SHORT_NAME_CHARS, CHAR]
    szName*: array[MIXER_LONG_NAME_CHARS, CHAR]
    Bounds*: MIXERCONTROLA_Bounds
    Metrics*: MIXERCONTROLA_Metrics
  PMIXERCONTROLA* = ptr MIXERCONTROLA
  LPMIXERCONTROLA* = ptr MIXERCONTROLA
  MIXERCONTROLW_Metrics* {.final, union, pure.} = object
    cSteps*: DWORD
    cbCustomData*: DWORD
    dwReserved*: array[6, DWORD]
  MIXERCONTROLW_Bounds_STRUCT2* {.final, pure.} = object
    dwMinimum*: DWORD
    dwMaximum*: DWORD
  MIXERCONTROLW_Bounds_STRUCT1* {.final, pure.} = object
    lMinimum*: LONG
    lMaximum*: LONG
  MIXERCONTROLW_Bounds* {.final, union, pure.} = object
    s1*: MIXERCONTROLW_Bounds_STRUCT1
    s2*: MIXERCONTROLW_Bounds_STRUCT2
    dwReserved*: array[6, DWORD]
  MIXERCONTROLW* {.final, pure.} = object
    cbStruct*: DWORD
    dwControlID*: DWORD
    dwControlType*: DWORD
    fdwControl*: DWORD
    cMultipleItems*: DWORD
    szShortName*: array[MIXER_SHORT_NAME_CHARS, WCHAR]
    szName*: array[MIXER_LONG_NAME_CHARS, WCHAR]
    Bounds*: MIXERCONTROLW_Bounds
    Metrics*: MIXERCONTROLW_Metrics
  PMIXERCONTROLW* = ptr MIXERCONTROLW
  LPMIXERCONTROLW* = ptr MIXERCONTROLW
  MIXERLINECONTROLSA_UNION1* {.final, union, pure.} = object
    dwControlID*: DWORD
    dwControlType*: DWORD
  MIXERLINECONTROLSA* {.final, pure.} = object
    cbStruct*: DWORD
    dwLineID*: DWORD
    u1*: MIXERLINECONTROLSA_UNION1
    cControls*: DWORD
    cbmxctrl*: DWORD
    pamxctrl*: LPMIXERCONTROLA
  PMIXERLINECONTROLSA* = ptr MIXERLINECONTROLSA
  LPMIXERLINECONTROLSA* = ptr MIXERLINECONTROLSA
  MIXERLINECONTROLSW_UNION1* {.final, union, pure.} = object
    dwControlID*: DWORD
    dwControlType*: DWORD
  MIXERLINECONTROLSW* {.final, pure.} = object
    cbStruct*: DWORD
    dwLineID*: DWORD
    u1*: MIXERLINECONTROLSW_UNION1
    cControls*: DWORD
    cbmxctrl*: DWORD
    pamxctrl*: LPMIXERCONTROLW
  PMIXERLINECONTROLSW* = ptr MIXERLINECONTROLSW
  LPMIXERLINECONTROLSW* = ptr MIXERLINECONTROLSW
  MIXERCONTROLDETAILS_UNION1* {.final, union, pure.} = object
    hwndOwner*: HWND
    cMultipleItems*: DWORD
  MIXERCONTROLDETAILS* {.final, pure.} = object
    cbStruct*: DWORD
    dwControlID*: DWORD
    cChannels*: DWORD
    u1*: MIXERCONTROLDETAILS_UNION1
    cbDetails*: DWORD
    paDetails*: PVOID
  PMIXERCONTROLDETAILS* = ptr MIXERCONTROLDETAILS
  LPMIXERCONTROLDETAILS* = ptr MIXERCONTROLDETAILS
  MIXERCONTROLDETAILS_LISTTEXTA* {.final, pure.} = object
    dwParam1*: DWORD
    dwParam2*: DWORD
    szName*: array[MIXER_LONG_NAME_CHARS, CHAR]
  PMIXERCONTROLDETAILS_LISTTEXTA* = ptr MIXERCONTROLDETAILS_LISTTEXTA
  LPMIXERCONTROLDETAILS_LISTTEXTA* = ptr MIXERCONTROLDETAILS_LISTTEXTA
  MIXERCONTROLDETAILS_LISTTEXTW* {.final, pure.} = object
    dwParam1*: DWORD
    dwParam2*: DWORD
    szName*: array[MIXER_LONG_NAME_CHARS, WCHAR]
  PMIXERCONTROLDETAILS_LISTTEXTW* = ptr MIXERCONTROLDETAILS_LISTTEXTW
  LPMIXERCONTROLDETAILS_LISTTEXTW* = ptr MIXERCONTROLDETAILS_LISTTEXTW
  MIXERCONTROLDETAILS_BOOLEAN* {.final, pure.} = object
    fValue*: LONG
  PMIXERCONTROLDETAILS_BOOLEAN* = ptr MIXERCONTROLDETAILS_BOOLEAN
  LPMIXERCONTROLDETAILS_BOOLEAN* = ptr MIXERCONTROLDETAILS_BOOLEAN
  MIXERCONTROLDETAILS_SIGNED* {.final, pure.} = object
    lValue*: LONG
  PMIXERCONTROLDETAILS_SIGNED* = ptr MIXERCONTROLDETAILS_SIGNED
  LPMIXERCONTROLDETAILS_SIGNED* = ptr MIXERCONTROLDETAILS_SIGNED
  MIXERCONTROLDETAILS_UNSIGNED* {.final, pure.} = object
    dwValue*: DWORD
  PMIXERCONTROLDETAILS_UNSIGNED* = ptr MIXERCONTROLDETAILS_UNSIGNED
  LPMIXERCONTROLDETAILS_UNSIGNED* = ptr MIXERCONTROLDETAILS_UNSIGNED
  LPTIMECALLBACK* = proc (P1: UINT, P2: UINT, P3: DWORD, P4: DWORD, P5: DWORD): void {.stdcall.}
  TIMECAPS* {.final, pure.} = object
    wPeriodMin*: UINT
    wPeriodMax*: UINT
  PTIMECAPS* = ptr TIMECAPS
  LPTIMECAPS* = ptr TIMECAPS
  JOYCAPSA* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    szPname*: array[MAXPNAMELEN, CHAR]
    wXmin*: UINT
    wXmax*: UINT
    wYmin*: UINT
    wYmax*: UINT
    wZmin*: UINT
    wZmax*: UINT
    wNumButtons*: UINT
    wPeriodMin*: UINT
    wPeriodMax*: UINT
    wRmin*: UINT
    wRmax*: UINT
    wUmin*: UINT
    wUmax*: UINT
    wVmin*: UINT
    wVmax*: UINT
    wCaps*: UINT
    wMaxAxes*: UINT
    wNumAxes*: UINT
    wMaxButtons*: UINT
    szRegKey*: array[MAXPNAMELEN, CHAR]
    szOEMVxD*: array[MAX_JOYSTICKOEMVXDNAME, CHAR]
  PJOYCAPSA* = ptr JOYCAPSA
  LPJOYCAPSA* = ptr JOYCAPSA
  JOYCAPSW* {.final, pure.} = object
    wMid*: WORD
    wPid*: WORD
    szPname*: array[MAXPNAMELEN, WCHAR]
    wXmin*: UINT
    wXmax*: UINT
    wYmin*: UINT
    wYmax*: UINT
    wZmin*: UINT
    wZmax*: UINT
    wNumButtons*: UINT
    wPeriodMin*: UINT
    wPeriodMax*: UINT
    wRmin*: UINT
    wRmax*: UINT
    wUmin*: UINT
    wUmax*: UINT
    wVmin*: UINT
    wVmax*: UINT
    wCaps*: UINT
    wMaxAxes*: UINT
    wNumAxes*: UINT
    wMaxButtons*: UINT
    szRegKey*: array[MAXPNAMELEN, WCHAR]
    szOEMVxD*: array[MAX_JOYSTICKOEMVXDNAME, WCHAR]
  PJOYCAPSW* = ptr JOYCAPSW
  LPJOYCAPSW* = ptr JOYCAPSW
  JOYINFO* {.final, pure.} = object
    wXpos*: UINT
    wYpos*: UINT
    wZpos*: UINT
    wButtons*: UINT
  PJOYINFO* = ptr JOYINFO
  LPJOYINFO* = ptr JOYINFO
  JOYINFOEX* {.final, pure.} = object
    dwSize*: DWORD
    dwFlags*: DWORD
    dwXpos*: DWORD
    dwYpos*: DWORD
    dwZpos*: DWORD
    dwRpos*: DWORD
    dwUpos*: DWORD
    dwVpos*: DWORD
    dwButtons*: DWORD
    dwButtonNumber*: DWORD
    dwPOV*: DWORD
    dwReserved1*: DWORD
    dwReserved2*: DWORD
  PJOYINFOEX* = ptr JOYINFOEX
  LPJOYINFOEX* = ptr JOYINFOEX
  FOURCC* = DWORD
  HPSTR* = cstring
  HMMIO* = HANDLE
  LPMMIOPROC* = proc (P1: LPSTR, P2: UINT, P3: LPARAM, P4: LPARAM): LRESULT {.stdcall.}
  MMIOINFO* {.final, pure.} = object
    dwFlags*: DWORD
    fccIOProc*: FOURCC
    pIOProc*: LPMMIOPROC
    wErrorRet*: UINT
    htask*: HTASK
    cchBuffer*: LONG
    pchBuffer*: HPSTR
    pchNext*: HPSTR
    pchEndRead*: HPSTR
    pchEndWrite*: HPSTR
    lBufOffset*: LONG
    lDiskOffset*: LONG
    adwInfo*: array[3, DWORD]
    dwReserved1*: DWORD
    dwReserved2*: DWORD
    hmmio*: HMMIO
  PMMIOINFO* = ptr MMIOINFO
  LPMMIOINFO* = ptr MMIOINFO
  LPCMMIOINFO* = ptr MMIOINFO
  MMCKINFO* {.final, pure.} = object
    ckid*: FOURCC
    cksize*: DWORD
    fccType*: FOURCC
    dwDataOffset*: DWORD
    dwFlags*: DWORD
  PMMCKINFO* = ptr MMCKINFO
  LPMMCKINFO* = ptr MMCKINFO
  LPCMMCKINFO* = ptr MMCKINFO
  MCI_GENERIC_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
  PMCI_GENERIC_PARMS* = ptr MCI_GENERIC_PARMS
  LPMCI_GENERIC_PARMS* = ptr MCI_GENERIC_PARMS
  MCI_OPEN_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    wDeviceID*: MCIDEVICEID
    lpstrDeviceType*: LPCSTR
    lpstrElementName*: LPCSTR
    lpstrAlias*: LPCSTR
  PMCI_OPEN_PARMSA* = ptr MCI_OPEN_PARMSA
  LPMCI_OPEN_PARMSA* = ptr MCI_OPEN_PARMSA
  MCI_OPEN_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    wDeviceID*: MCIDEVICEID
    lpstrDeviceType*: LPCWSTR
    lpstrElementName*: LPCWSTR
    lpstrAlias*: LPCWSTR
  PMCI_OPEN_PARMSW* = ptr MCI_OPEN_PARMSW
  LPMCI_OPEN_PARMSW* = ptr MCI_OPEN_PARMSW
  MCI_PLAY_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwFrom*: DWORD
    dwTo*: DWORD
  PMCI_PLAY_PARMS* = ptr MCI_PLAY_PARMS
  LPMCI_PLAY_PARMS* = ptr MCI_PLAY_PARMS
  MCI_SEEK_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwTo*: DWORD
  PMCI_SEEK_PARMS* = ptr MCI_SEEK_PARMS
  LPMCI_SEEK_PARMS* = ptr MCI_SEEK_PARMS
  MCI_STATUS_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwReturn*: DWORD
    dwItem*: DWORD
    dwTrack*: DWORD
  PMCI_STATUS_PARMS* = ptr MCI_STATUS_PARMS
  LPMCI_STATUS_PARMS* = ptr MCI_STATUS_PARMS
  MCI_INFO_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    lpstrReturn*: LPSTR
    dwRetSize*: DWORD
  LPMCI_INFO_PARMSA* = ptr MCI_INFO_PARMSA
  MCI_INFO_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    lpstrReturn*: LPWSTR
    dwRetSize*: DWORD
  LPMCI_INFO_PARMSW* = ptr MCI_INFO_PARMSW
  MCI_GETDEVCAPS_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwReturn*: DWORD
    dwItem*: DWORD
  PMCI_GETDEVCAPS_PARMS* = ptr MCI_GETDEVCAPS_PARMS
  LPMCI_GETDEVCAPS_PARMS* = ptr MCI_GETDEVCAPS_PARMS
  MCI_SYSINFO_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    lpstrReturn*: LPSTR
    dwRetSize*: DWORD
    dwNumber*: DWORD
    wDeviceType*: UINT
  PMCI_SYSINFO_PARMSA* = ptr MCI_SYSINFO_PARMSA
  LPMCI_SYSINFO_PARMSA* = ptr MCI_SYSINFO_PARMSA
  MCI_SYSINFO_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    lpstrReturn*: LPWSTR
    dwRetSize*: DWORD
    dwNumber*: DWORD
    wDeviceType*: UINT
  PMCI_SYSINFO_PARMSW* = ptr MCI_SYSINFO_PARMSW
  LPMCI_SYSINFO_PARMSW* = ptr MCI_SYSINFO_PARMSW
  MCI_SET_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwTimeFormat*: DWORD
    dwAudio*: DWORD
  PMCI_SET_PARMS* = ptr MCI_SET_PARMS
  LPMCI_SET_PARMS* = ptr MCI_SET_PARMS
  MCI_BREAK_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    nVirtKey*: int32
    hwndBreak*: HWND
  PMCI_BREAK_PARMS* = ptr MCI_BREAK_PARMS
  LPMCI_BREAK_PARMS* = ptr MCI_BREAK_PARMS
  MCI_SAVE_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    lpfilename*: LPCSTR
  PMCI_SAVE_PARMSA* = ptr MCI_SAVE_PARMSA
  LPMCI_SAVE_PARMSA* = ptr MCI_SAVE_PARMSA
  MCI_SAVE_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    lpfilename*: LPCWSTR
  PMCI_SAVE_PARMSW* = ptr MCI_SAVE_PARMSW
  LPMCI_SAVE_PARMSW* = ptr MCI_SAVE_PARMSW
  MCI_LOAD_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    lpfilename*: LPCSTR
  PMCI_LOAD_PARMSA* = ptr MCI_LOAD_PARMSA
  LPMCI_LOAD_PARMSA* = ptr MCI_LOAD_PARMSA
  MCI_LOAD_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    lpfilename*: LPCWSTR
  PMCI_LOAD_PARMSW* = ptr MCI_LOAD_PARMSW
  LPMCI_LOAD_PARMSW* = ptr MCI_LOAD_PARMSW
  MCI_RECORD_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwFrom*: DWORD
    dwTo*: DWORD
  LPMCI_RECORD_PARMS* = ptr MCI_RECORD_PARMS
  MCI_VD_PLAY_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwFrom*: DWORD
    dwTo*: DWORD
    dwSpeed*: DWORD
  PMCI_VD_PLAY_PARMS* = ptr MCI_VD_PLAY_PARMS
  LPMCI_VD_PLAY_PARMS* = ptr MCI_VD_PLAY_PARMS
  MCI_VD_STEP_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwFrames*: DWORD
  PMCI_VD_STEP_PARMS* = ptr MCI_VD_STEP_PARMS
  LPMCI_VD_STEP_PARMS* = ptr MCI_VD_STEP_PARMS
  MCI_VD_ESCAPE_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    lpstrCommand*: LPCSTR
  PMCI_VD_ESCAPE_PARMSA* = ptr MCI_VD_ESCAPE_PARMSA
  LPMCI_VD_ESCAPE_PARMSA* = ptr MCI_VD_ESCAPE_PARMSA
  MCI_VD_ESCAPE_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    lpstrCommand*: LPCWSTR
  PMCI_VD_ESCAPE_PARMSW* = ptr MCI_VD_ESCAPE_PARMSW
  LPMCI_VD_ESCAPE_PARMSW* = ptr MCI_VD_ESCAPE_PARMSW
  MCI_WAVE_OPEN_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    wDeviceID*: MCIDEVICEID
    lpstrDeviceType*: LPCSTR
    lpstrElementName*: LPCSTR
    lpstrAlias*: LPCSTR
    dwBufferSeconds*: DWORD
  PMCI_WAVE_OPEN_PARMSA* = ptr MCI_WAVE_OPEN_PARMSA
  LPMCI_WAVE_OPEN_PARMSA* = ptr MCI_WAVE_OPEN_PARMSA
  MCI_WAVE_OPEN_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    wDeviceID*: MCIDEVICEID
    lpstrDeviceType*: LPCWSTR
    lpstrElementName*: LPCWSTR
    lpstrAlias*: LPCWSTR
    dwBufferSeconds*: DWORD
  PMCI_WAVE_OPEN_PARMSW* = ptr MCI_WAVE_OPEN_PARMSW
  LPMCI_WAVE_OPEN_PARMSW* = ptr MCI_WAVE_OPEN_PARMSW
  MCI_WAVE_DELETE_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwFrom*: DWORD
    dwTo*: DWORD
  PMCI_WAVE_DELETE_PARMS* = ptr MCI_WAVE_DELETE_PARMS
  LPMCI_WAVE_DELETE_PARMS* = ptr MCI_WAVE_DELETE_PARMS
  MCI_WAVE_SET_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwTimeFormat*: DWORD
    dwAudio*: DWORD
    wInput*: UINT
    wOutput*: UINT
    wFormatTag*: WORD
    wReserved2*: WORD
    nChannels*: WORD
    wReserved3*: WORD
    nSamplesPerSec*: DWORD
    nAvgBytesPerSec*: DWORD
    nBlockAlign*: WORD
    wReserved4*: WORD
    wBitsPerSample*: WORD
    wReserved5*: WORD
  PMCI_WAVE_SET_PARMS* = ptr MCI_WAVE_SET_PARMS
  LPMCI_WAVE_SET_PARMS* = ptr MCI_WAVE_SET_PARMS

proc CloseDriver*(P1: HDRVR, P2: LONG, P3: LONG): LRESULT {.winapi, dynlib: "winmm", importc.}
proc OpenDriver*(P1: LPCWSTR, P2: LPCWSTR, P3: LONG): HDRVR {.winapi, dynlib: "winmm", importc.}
proc SendDriverMessage*(P1: HDRVR, P2: UINT, P3: LONG, P4: LONG): LRESULT {.winapi, dynlib: "winmm", importc.}
proc DrvGetModuleHandle*(P1: HDRVR): HMODULE {.winapi, dynlib: "winmm", importc.}
proc GetDriverModuleHandle*(P1: HDRVR): HMODULE {.winapi, dynlib: "winmm", importc.}
proc DefDriverProc*(P1: DWORD, P2: HDRVR, P3: UINT, P4: LPARAM, P5: LPARAM): LRESULT {.winapi, dynlib: "winmm", importc.}
proc mmsystemGetVersion*(): UINT {.winapi, dynlib: "winmm", importc.}
proc sndPlaySoundA*(P1: LPCSTR, P2: UINT): BOOL {.winapi, dynlib: "winmm", importc.}
proc sndPlaySoundW*(P1: LPCWSTR, P2: UINT): BOOL {.winapi, dynlib: "winmm", importc.}
proc PlaySoundA*(P1: LPCSTR, P2: HMODULE, P3: DWORD): BOOL {.winapi, dynlib: "winmm", importc.}
proc PlaySoundW*(P1: LPCWSTR, P2: HMODULE, P3: DWORD): BOOL {.winapi, dynlib: "winmm", importc.}
proc waveOutGetNumDevs*(): UINT {.winapi, dynlib: "winmm", importc.}
proc waveOutGetDevCapsA*(P1: UINT, P2: LPWAVEOUTCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutGetDevCapsW*(P1: UINT, P2: LPWAVEOUTCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutGetVolume*(P1: HWAVEOUT, P2: PDWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutSetVolume*(P1: HWAVEOUT, P2: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutGetErrorTextA*(P1: MMRESULT, P2: LPSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutGetErrorTextW*(P1: MMRESULT, P2: LPWSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutOpen*(P1: LPHWAVEOUT, P2: UINT, P3: LPCWAVEFORMATEX, P4: DWORD, P5: DWORD, P6: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutClose*(P1: HWAVEOUT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutPrepareHeader*(P1: HWAVEOUT, P2: LPWAVEHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutUnprepareHeader*(P1: HWAVEOUT, P2: LPWAVEHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutWrite*(P1: HWAVEOUT, P2: LPWAVEHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutPause*(P1: HWAVEOUT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutRestart*(P1: HWAVEOUT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutReset*(P1: HWAVEOUT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutBreakLoop*(P1: HWAVEOUT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutGetPosition*(P1: HWAVEOUT, P2: LPMMTIME, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutGetPitch*(P1: HWAVEOUT, P2: PDWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutSetPitch*(P1: HWAVEOUT, P2: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutGetPlaybackRate*(P1: HWAVEOUT, P2: PDWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutSetPlaybackRate*(P1: HWAVEOUT, P2: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutGetID*(P1: HWAVEOUT, P2: LPUINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveOutMessage*(P1: HWAVEOUT, P2: UINT, P3: DWORD, P4: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInGetNumDevs*(): UINT {.winapi, dynlib: "winmm", importc.}
proc waveInGetDevCapsA*(P1: UINT, P2: LPWAVEINCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInGetDevCapsW*(P1: UINT, P2: LPWAVEINCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInGetErrorTextA*(P1: MMRESULT, P2: LPSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInGetErrorTextW*(P1: MMRESULT, P2: LPWSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInOpen*(P1: LPHWAVEIN, P2: UINT, P3: LPCWAVEFORMATEX, P4: DWORD, P5: DWORD, P6: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInClose*(P1: HWAVEIN): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInPrepareHeader*(P1: HWAVEIN, P2: LPWAVEHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInUnprepareHeader*(P1: HWAVEIN, P2: LPWAVEHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInAddBuffer*(P1: HWAVEIN, P2: LPWAVEHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInStart*(P1: HWAVEIN): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInStop*(P1: HWAVEIN): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInReset*(P1: HWAVEIN): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInGetPosition*(P1: HWAVEIN, P2: LPMMTIME, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInGetID*(P1: HWAVEIN, P2: LPUINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc waveInMessage*(P1: HWAVEIN, P2: UINT, P3: DWORD, P4: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutGetNumDevs*(): UINT {.winapi, dynlib: "winmm", importc.}
proc midiStreamOpen*(P1: LPHMIDISTRM, P2: LPUINT, P3: DWORD, P4: DWORD, P5: DWORD, P6: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiStreamClose*(P1: HMIDISTRM): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiStreamProperty*(P1: HMIDISTRM, P2: LPBYTE, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiStreamPosition*(P1: HMIDISTRM, P2: LPMMTIME, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiStreamOut*(P1: HMIDISTRM, P2: LPMIDIHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiStreamPause*(P1: HMIDISTRM): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiStreamRestart*(P1: HMIDISTRM): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiStreamStop*(P1: HMIDISTRM): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiConnect*(P1: HMIDI, P2: HMIDIOUT, P3: PVOID): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiDisconnect*(P1: HMIDI, P2: HMIDIOUT, P3: PVOID): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutGetDevCapsA*(P1: UINT, P2: LPMIDIOUTCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutGetDevCapsW*(P1: UINT, P2: LPMIDIOUTCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutGetVolume*(P1: HMIDIOUT, P2: PDWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutSetVolume*(P1: HMIDIOUT, P2: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutGetErrorTextA*(P1: MMRESULT, P2: LPSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutGetErrorTextW*(P1: MMRESULT, P2: LPWSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutOpen*(P1: LPHMIDIOUT, P2: UINT, P3: DWORD, P4: DWORD, P5: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutClose*(P1: HMIDIOUT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutPrepareHeader*(P1: HMIDIOUT, P2: LPMIDIHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutUnprepareHeader*(P1: HMIDIOUT, P2: LPMIDIHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutShortMsg*(P1: HMIDIOUT, P2: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutLongMsg*(P1: HMIDIOUT, P2: LPMIDIHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutReset*(P1: HMIDIOUT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutCachePatches*(P1: HMIDIOUT, P2: UINT, P3: LPWORD, P4: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutCacheDrumPatches*(P1: HMIDIOUT, P2: UINT, P3: LPWORD, P4: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutGetID*(P1: HMIDIOUT, P2: LPUINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiOutMessage*(P1: HMIDIOUT, P2: UINT, P3: DWORD, P4: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInGetNumDevs*(): UINT {.winapi, dynlib: "winmm", importc.}
proc midiInGetDevCapsA*(P1: UINT, P2: LPMIDIINCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInGetDevCapsW*(P1: UINT, P2: LPMIDIINCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInGetErrorTextA*(P1: MMRESULT, P2: LPSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInGetErrorTextW*(P1: MMRESULT, P2: LPWSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInOpen*(P1: LPHMIDIIN, P2: UINT, P3: DWORD, P4: DWORD, P5: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInClose*(P1: HMIDIIN): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInPrepareHeader*(P1: HMIDIIN, P2: LPMIDIHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInUnprepareHeader*(P1: HMIDIIN, P2: LPMIDIHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInAddBuffer*(P1: HMIDIIN, P2: LPMIDIHDR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInStart*(P1: HMIDIIN): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInStop*(P1: HMIDIIN): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInReset*(P1: HMIDIIN): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInGetID*(P1: HMIDIIN, P2: LPUINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc midiInMessage*(P1: HMIDIIN, P2: UINT, P3: DWORD, P4: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc auxGetNumDevs*(): UINT {.winapi, dynlib: "winmm", importc.}
proc auxGetDevCapsA*(P1: UINT, P2: LPAUXCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc auxGetDevCapsW*(P1: UINT, P2: LPAUXCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc auxSetVolume*(P1: UINT, P2: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc auxGetVolume*(P1: UINT, P2: PDWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc auxOutMessage*(P1: UINT, P2: UINT, P3: DWORD, P4: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerGetNumDevs*(): UINT {.winapi, dynlib: "winmm", importc.}
proc mixerGetDevCapsA*(P1: UINT, P2: LPMIXERCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerGetDevCapsW*(P1: UINT, P2: LPMIXERCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerOpen*(P1: LPHMIXER, P2: UINT, P3: DWORD, P4: DWORD, P5: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerClose*(P1: HMIXER): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerMessage*(P1: HMIXER, P2: UINT, P3: DWORD, P4: DWORD): DWORD {.winapi, dynlib: "winmm", importc.}
proc mixerGetLineInfoA*(P1: HMIXEROBJ, P2: LPMIXERLINEA, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerGetLineInfoW*(P1: HMIXEROBJ, P2: LPMIXERLINEW, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerGetID*(P1: HMIXEROBJ, P2: PUINT, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerGetLineControlsA*(P1: HMIXEROBJ, P2: LPMIXERLINECONTROLSA, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerGetLineControlsW*(P1: HMIXEROBJ, P2: LPMIXERLINECONTROLSW, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerGetControlDetailsA*(P1: HMIXEROBJ, P2: LPMIXERCONTROLDETAILS, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerGetControlDetailsW*(P1: HMIXEROBJ, P2: LPMIXERCONTROLDETAILS, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mixerSetControlDetails*(P1: HMIXEROBJ, P2: LPMIXERCONTROLDETAILS, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc timeGetSystemTime*(P1: LPMMTIME, P2: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc timeGetTime*(): DWORD {.winapi, dynlib: "winmm", importc.}
proc timeSetEvent*(P1: UINT, P2: UINT, P3: LPTIMECALLBACK, P4: DWORD, P5: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc timeKillEvent*(P1: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc timeGetDevCaps*(P1: LPTIMECAPS, P2: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc timeBeginPeriod*(P1: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc timeEndPeriod*(P1: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc joyGetNumDevs*(): UINT {.winapi, dynlib: "winmm", importc.}
proc joyGetDevCapsA*(P1: UINT, P2: LPJOYCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc joyGetDevCapsW*(P1: UINT, P2: LPJOYCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc joyGetPos*(P1: UINT, P2: LPJOYINFO): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc joyGetPosEx*(P1: UINT, P2: LPJOYINFOEX): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc joyGetThreshold*(P1: UINT, P2: LPUINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc joyReleaseCapture*(P1: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc joySetCapture*(P1: HWND, P2: UINT, P3: UINT, P4: BOOL): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc joySetThreshold*(P1: UINT, P2: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioStringToFOURCCA*(P1: LPCSTR, P2: UINT): FOURCC {.winapi, dynlib: "winmm", importc.}
proc mmioStringToFOURCCW*(P1: LPCWSTR, P2: UINT): FOURCC {.winapi, dynlib: "winmm", importc.}
proc mmioInstallIOProcA*(P1: FOURCC, P2: LPMMIOPROC, P3: DWORD): LPMMIOPROC {.winapi, dynlib: "winmm", importc.}
proc mmioInstallIOProcW*(P1: FOURCC, P2: LPMMIOPROC, P3: DWORD): LPMMIOPROC {.winapi, dynlib: "winmm", importc.}
proc mmioOpenA*(P1: LPSTR, P2: LPMMIOINFO, P3: DWORD): HMMIO {.winapi, dynlib: "winmm", importc.}
proc mmioOpenW*(P1: LPWSTR, P2: LPMMIOINFO, P3: DWORD): HMMIO {.winapi, dynlib: "winmm", importc.}
proc mmioRenameA*(P1: LPCSTR, P2: LPCSTR, P3: LPCMMIOINFO, P4: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioRenameW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCMMIOINFO, P4: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioClose*(P1: HMMIO, P2: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioRead*(P1: HMMIO, P2: HPSTR, P3: LONG): LONG {.winapi, dynlib: "winmm", importc.}
proc mmioWrite*(P1: HMMIO, P2: LPCSTR, P3: LONG): LONG {.winapi, dynlib: "winmm", importc.}
proc mmioSeek*(P1: HMMIO, P2: LONG, P3: int32): LONG {.winapi, dynlib: "winmm", importc.}
proc mmioGetInfo*(P1: HMMIO, P2: LPMMIOINFO, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioSetInfo*(P1: HMMIO, P2: LPCMMIOINFO, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioSetBuffer*(P1: HMMIO, P2: LPSTR, P3: LONG, P4: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioFlush*(P1: HMMIO, P2: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioAdvance*(P1: HMMIO, P2: LPMMIOINFO, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioSendMessage*(P1: HMMIO, P2: UINT, P3: LPARAM, P4: LPARAM): LRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioDescend*(P1: HMMIO, P2: LPMMCKINFO, P3: ptr MMCKINFO, P4: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioAscend*(P1: HMMIO, P2: LPMMCKINFO, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mmioCreateChunk*(P1: HMMIO, P2: LPMMCKINFO, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc.}
proc mciSendCommandA*(P1: MCIDEVICEID, P2: UINT, P3: DWORD, P4: DWORD): MCIERROR {.winapi, dynlib: "winmm", importc.}
proc mciSendCommandW*(P1: MCIDEVICEID, P2: UINT, P3: DWORD, P4: DWORD): MCIERROR {.winapi, dynlib: "winmm", importc.}
proc mciSendStringA*(P1: LPCSTR, P2: LPSTR, P3: UINT, P4: HWND): MCIERROR {.winapi, dynlib: "winmm", importc.}
proc mciSendStringW*(P1: LPCWSTR, P2: LPWSTR, P3: UINT, P4: HWND): MCIERROR {.winapi, dynlib: "winmm", importc.}
proc mciGetDeviceIDA*(P1: LPCSTR): MCIDEVICEID {.winapi, dynlib: "winmm", importc.}
proc mciGetDeviceIDW*(P1: LPCWSTR): MCIDEVICEID {.winapi, dynlib: "winmm", importc.}
proc mciGetDeviceIDFromElementIDA*(P1: DWORD, P2: LPCSTR): MCIDEVICEID {.winapi, dynlib: "winmm", importc.}
proc mciGetDeviceIDFromElementIDW*(P1: DWORD, P2: LPCWSTR): MCIDEVICEID {.winapi, dynlib: "winmm", importc.}
proc mciGetErrorStringA*(P1: MCIERROR, P2: LPSTR, P3: UINT): BOOL {.winapi, dynlib: "winmm", importc.}
proc mciGetErrorStringW*(P1: MCIERROR, P2: LPWSTR, P3: UINT): BOOL {.winapi, dynlib: "winmm", importc.}
proc mciSetYieldProc*(P1: MCIDEVICEID, P2: YIELDPROC, P3: DWORD): BOOL {.winapi, dynlib: "winmm", importc.}
proc mciGetCreatorTask*(P1: MCIDEVICEID): HTASK {.winapi, dynlib: "winmm", importc.}
proc mciGetYieldProc*(P1: MCIDEVICEID, P2: PDWORD): YIELDPROC {.winapi, dynlib: "winmm", importc.}

type
  MCI_SEQ_SET_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwTimeFormat*: DWORD
    dwAudio*: DWORD
    dwTempo*: DWORD
    dwPort*: DWORD
    dwSlave*: DWORD
    dwMaster*: DWORD
    dwOffset*: DWORD
  PMCI_SEQ_SET_PARMS* = ptr MCI_SEQ_SET_PARMS
  LPMCI_SEQ_SET_PARMS* = ptr MCI_SEQ_SET_PARMS
  MCI_ANIM_OPEN_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    wDeviceID*: MCIDEVICEID
    lpstrDeviceType*: LPCSTR
    lpstrElementName*: LPCSTR
    lpstrAlias*: LPCSTR
    dwStyle*: DWORD
    hWndParent*: HWND
  PMCI_ANIM_OPEN_PARMSA* = ptr MCI_ANIM_OPEN_PARMSA
  LPMCI_ANIM_OPEN_PARMSA* = ptr MCI_ANIM_OPEN_PARMSA
  MCI_ANIM_OPEN_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    wDeviceID*: MCIDEVICEID
    lpstrDeviceType*: LPCWSTR
    lpstrElementName*: LPCWSTR
    lpstrAlias*: LPCWSTR
    dwStyle*: DWORD
    hWndParent*: HWND
  PMCI_ANIM_OPEN_PARMSW* = ptr MCI_ANIM_OPEN_PARMSW
  LPMCI_ANIM_OPEN_PARMSW* = ptr MCI_ANIM_OPEN_PARMSW
  MCI_ANIM_PLAY_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwFrom*: DWORD
    dwTo*: DWORD
    dwSpeed*: DWORD
  PMCI_ANIM_PLAY_PARMS* = ptr MCI_ANIM_PLAY_PARMS
  LPMCI_ANIM_PLAY_PARMS* = ptr MCI_ANIM_PLAY_PARMS
  MCI_ANIM_STEP_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    dwFrames*: DWORD
  PMCI_ANIM_STEP_PARMS* = ptr MCI_ANIM_STEP_PARMS
  LPMCI_ANIM_STEP_PARMS* = ptr MCI_ANIM_STEP_PARMS
  MCI_ANIM_WINDOW_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    hWnd*: HWND
    nCmdShow*: UINT
    lpstrText*: LPCSTR
  PMCI_ANIM_WINDOW_PARMSA* = ptr MCI_ANIM_WINDOW_PARMSA
  LPMCI_ANIM_WINDOW_PARMSA* = ptr MCI_ANIM_WINDOW_PARMSA
  MCI_ANIM_WINDOW_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    hWnd*: HWND
    nCmdShow*: UINT
    lpstrText*: LPCWSTR
  PMCI_ANIM_WINDOW_PARMSW* = ptr MCI_ANIM_WINDOW_PARMSW
  LPMCI_ANIM_WINDOW_PARMSW* = ptr MCI_ANIM_WINDOW_PARMSW
  MCI_ANIM_RECT_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    rc*: RECT
  PMCI_ANIM_RECT_PARMS* = ptr MCI_ANIM_RECT_PARMS
  LPMCI_ANIM_RECT_PARMS* = ptr MCI_ANIM_RECT_PARMS
  MCI_ANIM_UPDATE_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    rc*: RECT
    hDC*: HDC
  PMCI_ANIM_UPDATE_PARMS* = ptr MCI_ANIM_UPDATE_PARMS
  LPMCI_ANIM_UPDATE_PARMS* = ptr MCI_ANIM_UPDATE_PARMS
  MCI_OVLY_OPEN_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    wDeviceID*: MCIDEVICEID
    lpstrDeviceType*: LPCSTR
    lpstrElementName*: LPCSTR
    lpstrAlias*: LPCSTR
    dwStyle*: DWORD
    hWndParent*: HWND
  PMCI_OVLY_OPEN_PARMSA* = ptr MCI_OVLY_OPEN_PARMSA
  LPMCI_OVLY_OPEN_PARMSA* = ptr MCI_OVLY_OPEN_PARMSA
  MCI_OVLY_OPEN_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    wDeviceID*: MCIDEVICEID
    lpstrDeviceType*: LPCWSTR
    lpstrElementName*: LPCWSTR
    lpstrAlias*: LPCWSTR
    dwStyle*: DWORD
    hWndParent*: HWND
  PMCI_OVLY_OPEN_PARMSW* = ptr MCI_OVLY_OPEN_PARMSW
  LPMCI_OVLY_OPEN_PARMSW* = ptr MCI_OVLY_OPEN_PARMSW
  MCI_OVLY_WINDOW_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    hWnd*: HWND
    nCmdShow*: UINT
    lpstrText*: LPCSTR
  PMCI_OVLY_WINDOW_PARMSA* = ptr MCI_OVLY_WINDOW_PARMSA
  LPMCI_OVLY_WINDOW_PARMSA* = ptr MCI_OVLY_WINDOW_PARMSA
  MCI_OVLY_WINDOW_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    hWnd*: HWND
    nCmdShow*: UINT
    lpstrText*: LPCWSTR
  PMCI_OVLY_WINDOW_PARMSW* = ptr MCI_OVLY_WINDOW_PARMSW
  LPMCI_OVLY_WINDOW_PARMSW* = ptr MCI_OVLY_WINDOW_PARMSW
  MCI_OVLY_RECT_PARMS* {.final, pure.} = object
    dwCallback*: DWORD
    rc*: RECT
  PMCI_OVLY_RECT_PARMS* = ptr MCI_OVLY_RECT_PARMS
  LPMCI_OVLY_RECT_PARMS* = ptr MCI_OVLY_RECT_PARMS
  MCI_OVLY_SAVE_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    lpfilename*: LPCSTR
    rc*: RECT
  PMCI_OVLY_SAVE_PARMSA* = ptr MCI_OVLY_SAVE_PARMSA
  LPMCI_OVLY_SAVE_PARMSA* = ptr MCI_OVLY_SAVE_PARMSA
  MCI_OVLY_SAVE_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    lpfilename*: LPCWSTR
    rc*: RECT
  PMCI_OVLY_SAVE_PARMSW* = ptr MCI_OVLY_SAVE_PARMSW
  LPMCI_OVLY_SAVE_PARMSW* = ptr MCI_OVLY_SAVE_PARMSW
  MCI_OVLY_LOAD_PARMSA* {.final, pure.} = object
    dwCallback*: DWORD
    lpfilename*: LPCSTR
    rc*: RECT
  PMCI_OVLY_LOAD_PARMSA* = ptr MCI_OVLY_LOAD_PARMSA
  LPMCI_OVLY_LOAD_PARMSA* = ptr MCI_OVLY_LOAD_PARMSA
  MCI_OVLY_LOAD_PARMSW* {.final, pure.} = object
    dwCallback*: DWORD
    lpfilename*: LPCWSTR
    rc*: RECT
  PMCI_OVLY_LOAD_PARMSW* = ptr MCI_OVLY_LOAD_PARMSW
  LPMCI_OVLY_LOAD_PARMSW* = ptr MCI_OVLY_LOAD_PARMSW

when not defined(winansi):
  type
    WAVEOUTCAPS* = WAVEOUTCAPSW
    WAVEINCAPS* = WAVEINCAPSW
    MIDIOUTCAPS* = MIDIOUTCAPSW
    MIDIINCAPS* = MIDIINCAPSW
    AUXCAPS* = AUXCAPSW
    MIXERCAPS* = MIXERCAPSW
    MIXERLINE* = MIXERLINEW
    MIXERCONTROL* = MIXERCONTROLA
    MIXERLINECONTROLS* = MIXERLINECONTROLSW
    MIXERCONTROLDETAILS_LISTTEXT* = MIXERCONTROLDETAILS_LISTTEXTW
    JOYCAPS* = JOYCAPSW
    MCI_OPEN_PARMS* = MCI_OPEN_PARMSW
    MCI_INFO_PARMS* = MCI_INFO_PARMSW
    MCI_SYSINFO_PARMS* = MCI_SYSINFO_PARMSW
    MCI_SAVE_PARMS* = MCI_SAVE_PARMSW
    MCI_LOAD_PARMS* = MCI_LOAD_PARMSW
    MCI_VD_ESCAPE_PARMS* = MCI_VD_ESCAPE_PARMSW
    MCI_WAVE_OPEN_PARMS* = MCI_WAVE_OPEN_PARMSW
    MCI_ANIM_OPEN_PARMS* = MCI_ANIM_OPEN_PARMSW
    MCI_ANIM_WINDOW_PARMS* = MCI_ANIM_WINDOW_PARMSW
    MCI_OVLY_OPEN_PARMS* = MCI_OVLY_OPEN_PARMSW
    MCI_OVLY_WINDOW_PARMS* = MCI_OVLY_WINDOW_PARMSW
    MCI_OVLY_SAVE_PARMS* = MCI_OVLY_SAVE_PARMSW

  proc sndPlaySound*(P1: LPCWSTR, P2: UINT): BOOL {.winapi, dynlib: "winmm", importc: "sndPlaySoundW".}
  proc PlaySound*(P1: LPCWSTR, P2: HMODULE, P3: DWORD): BOOL {.winapi, dynlib: "winmm", importc: "PlaySoundW".}
  proc waveOutGetDevCaps*(P1: UINT, P2: LPWAVEOUTCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "waveOutGetDevCapsW".}
  proc waveOutGetErrorText*(P1: MMRESULT, P2: LPWSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "waveOutGetErrorTextW".}
  proc waveInGetDevCaps*(P1: UINT, P2: LPWAVEINCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "waveInGetDevCapsW".}
  proc waveInGetErrorText*(P1: MMRESULT, P2: LPWSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "waveInGetErrorTextW".}
  proc midiOutGetDevCaps*(P1: UINT, P2: LPMIDIOUTCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "midiOutGetDevCapsW".}
  proc midiOutGetErrorText*(P1: MMRESULT, P2: LPWSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "midiOutGetErrorTextW".}
  proc midiInGetDevCaps*(P1: UINT, P2: LPMIDIINCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "midiInGetDevCapsW".}
  proc midiInGetErrorText*(P1: MMRESULT, P2: LPWSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "midiInGetErrorTextW".}
  proc auxGetDevCaps*(P1: UINT, P2: LPAUXCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "auxGetDevCapsW".}
  proc mixerGetDevCaps*(P1: UINT, P2: LPMIXERCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "mixerGetDevCapsW".}
  proc mixerGetLineInfo*(P1: HMIXEROBJ, P2: LPMIXERLINEW, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc: "mixerGetLineInfoW".}
  proc mixerGetLineControls*(P1: HMIXEROBJ, P2: LPMIXERLINECONTROLSW, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc: "mixerGetLineControlsW".}
  proc mixerGetControlDetails*(P1: HMIXEROBJ, P2: LPMIXERCONTROLDETAILS, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc: "mixerGetControlDetailsW".}
  proc joyGetDevCaps*(P1: UINT, P2: LPJOYCAPSW, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "joyGetDevCapsW".}
  proc mmioInstallIOProc*(P1: FOURCC, P2: LPMMIOPROC, P3: DWORD): LPMMIOPROC {.winapi, dynlib: "winmm", importc: "mmioInstallIOProcW".}
  proc mmioStringToFOURCC*(P1: LPCWSTR, P2: UINT): FOURCC {.winapi, dynlib: "winmm", importc: "mmioStringToFOURCCW".}
  proc mmioOpen*(P1: LPWSTR, P2: LPMMIOINFO, P3: DWORD): HMMIO {.winapi, dynlib: "winmm", importc: "mmioOpenW".}
  proc mmioRename*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCMMIOINFO, P4: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc: "mmioRenameW".}
  proc mciSendCommand*(P1: MCIDEVICEID, P2: UINT, P3: DWORD, P4: DWORD): MCIERROR {.winapi, dynlib: "winmm", importc: "mciSendCommandW".}
  proc mciSendString*(P1: LPCWSTR, P2: LPWSTR, P3: UINT, P4: HWND): MCIERROR {.winapi, dynlib: "winmm", importc: "mciSendStringW".}
  proc mciGetDeviceID*(P1: LPCWSTR): MCIDEVICEID {.winapi, dynlib: "winmm", importc: "mciGetDeviceIDW".}
  proc mciGetDeviceIDFromElementID*(P1: DWORD, P2: LPCWSTR): MCIDEVICEID {.winapi, dynlib: "winmm", importc: "mciGetDeviceIDFromElementIDW".}
  proc mciGetErrorString*(P1: MCIERROR, P2: LPWSTR, P3: UINT): BOOL {.winapi, dynlib: "winmm", importc: "mciGetErrorStringW".}

else:
  type
    WAVEOUTCAPS* = WAVEOUTCAPSA
    WAVEINCAPS* = WAVEINCAPSA
    MIDIOUTCAPS* = MIDIOUTCAPSA
    MIDIINCAPS* = MIDIINCAPSA
    AUXCAPS* = AUXCAPSA
    MIXERCAPS* = MIXERCAPSA
    MIXERLINE* = MIXERLINEA
    MIXERCONTROL* = MIXERCONTROLA
    MIXERLINECONTROLS* = MIXERLINECONTROLSA
    MIXERCONTROLDETAILS_LISTTEXT* = MIXERCONTROLDETAILS_LISTTEXTA
    JOYCAPS* = JOYCAPSA
    MCI_OPEN_PARMS* = MCI_OPEN_PARMSA
    MCI_INFO_PARMS* = MCI_INFO_PARMSA
    MCI_SYSINFO_PARMS* = MCI_SYSINFO_PARMSA
    MCI_SAVE_PARMS* = MCI_SAVE_PARMSA
    MCI_LOAD_PARMS* = MCI_LOAD_PARMSA
    MCI_VD_ESCAPE_PARMS* = MCI_VD_ESCAPE_PARMSA
    MCI_WAVE_OPEN_PARMS* = MCI_WAVE_OPEN_PARMSA
    MCI_ANIM_OPEN_PARMS* = MCI_ANIM_OPEN_PARMSA
    MCI_ANIM_WINDOW_PARMS* = MCI_ANIM_WINDOW_PARMSA
    MCI_OVLY_OPEN_PARMS* = MCI_OVLY_OPEN_PARMSA
    MCI_OVLY_WINDOW_PARMS* = MCI_OVLY_WINDOW_PARMSA
    MCI_OVLY_SAVE_PARMS* = MCI_OVLY_SAVE_PARMSA

  proc sndPlaySound*(P1: LPCSTR, P2: UINT): BOOL {.winapi, dynlib: "winmm", importc: "sndPlaySoundA".}
  proc PlaySound*(P1: LPCSTR, P2: HMODULE, P3: DWORD): BOOL {.winapi, dynlib: "winmm", importc: "PlaySoundA".}
  proc waveOutGetDevCaps*(P1: UINT, P2: LPWAVEOUTCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "waveOutGetDevCapsA".}
  proc waveOutGetErrorText*(P1: MMRESULT, P2: LPSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "waveOutGetErrorTextA".}
  proc waveInGetDevCaps*(P1: UINT, P2: LPWAVEINCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "waveInGetDevCapsA".}
  proc waveInGetErrorText*(P1: MMRESULT, P2: LPSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "waveInGetErrorTextA".}
  proc midiOutGetDevCaps*(P1: UINT, P2: LPMIDIOUTCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "midiOutGetDevCapsA".}
  proc midiOutGetErrorText*(P1: MMRESULT, P2: LPSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "midiOutGetErrorTextA".}
  proc midiInGetDevCaps*(P1: UINT, P2: LPMIDIINCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "midiInGetDevCapsA".}
  proc midiInGetErrorText*(P1: MMRESULT, P2: LPSTR, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "midiInGetErrorTextA".}
  proc auxGetDevCaps*(P1: UINT, P2: LPAUXCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "auxGetDevCapsA".}
  proc mixerGetDevCaps*(P1: UINT, P2: LPMIXERCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "mixerGetDevCapsA".}
  proc mixerGetLineInfo*(P1: HMIXEROBJ, P2: LPMIXERLINEA, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc: "mixerGetLineInfoA".}
  proc mixerGetLineControls*(P1: HMIXEROBJ, P2: LPMIXERLINECONTROLSA, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc: "mixerGetLineControlsA".}
  proc mixerGetControlDetails*(P1: HMIXEROBJ, P2: LPMIXERCONTROLDETAILS, P3: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc: "mixerGetControlDetailsA".}
  proc joyGetDevCaps*(P1: UINT, P2: LPJOYCAPSA, P3: UINT): MMRESULT {.winapi, dynlib: "winmm", importc: "joyGetDevCapsA".}
  proc mmioInstallIOProc*(P1: FOURCC, P2: LPMMIOPROC, P3: DWORD): LPMMIOPROC {.winapi, dynlib: "winmm", importc: "mmioInstallIOProcA".}
  proc mmioStringToFOURCC*(P1: LPCSTR, P2: UINT): FOURCC {.winapi, dynlib: "winmm", importc: "mmioStringToFOURCCA".}
  proc mmioOpen*(P1: LPSTR, P2: LPMMIOINFO, P3: DWORD): HMMIO {.winapi, dynlib: "winmm", importc: "mmioOpenA".}
  proc mmioRename*(P1: LPCSTR, P2: LPCSTR, P3: LPCMMIOINFO, P4: DWORD): MMRESULT {.winapi, dynlib: "winmm", importc: "mmioRenameA".}
  proc mciSendCommand*(P1: MCIDEVICEID, P2: UINT, P3: DWORD, P4: DWORD): MCIERROR {.winapi, dynlib: "winmm", importc: "mciSendCommandA".}
  proc mciSendString*(P1: LPCSTR, P2: LPSTR, P3: UINT, P4: HWND): MCIERROR {.winapi, dynlib: "winmm", importc: "mciSendStringA".}
  proc mciGetDeviceID*(P1: LPCSTR): MCIDEVICEID {.winapi, dynlib: "winmm", importc: "mciGetDeviceIDA".}
  proc mciGetDeviceIDFromElementID*(P1: DWORD, P2: LPCSTR): MCIDEVICEID {.winapi, dynlib: "winmm", importc: "mciGetDeviceIDFromElementIDA".}
  proc mciGetErrorString*(P1: MCIERROR, P2: LPSTR, P3: UINT): BOOL {.winapi, dynlib: "winmm", importc: "mciGetErrorStringA".}

type
  PWAVEOUTCAPS* = ptr WAVEOUTCAPS
  LPWAVEOUTCAPS* = ptr WAVEOUTCAPS
  PWAVEINCAPS* = ptr WAVEINCAPS
  LPWAVEINCAPS* = ptr WAVEINCAPS
  PMIDIOUTCAPS* = ptr MIDIOUTCAPS
  LPMIDIOUTCAPS* = ptr MIDIOUTCAPS
  PMIDIINCAPS* = ptr MIDIINCAPS
  LPMIDIINCAPS* = ptr MIDIINCAPS
  PAUXCAPS* = ptr AUXCAPS
  LPAUXCAPS* = ptr AUXCAPS
  PMIXERCAPS* = ptr MIXERCAPS
  LPMIXERCAPS* = ptr MIXERCAPS
  PMIXERLINE* = ptr MIXERLINE
  LPMIXERLINE* = ptr MIXERLINE
  PMIXERCONTROL* = ptr MIXERCONTROL
  LPMIXERCONTROL* = ptr MIXERCONTROL
  PMIXERLINECONTROLS* = ptr MIXERLINECONTROLS
  LPMIXERLINECONTROLS* = ptr MIXERLINECONTROLS
  PMIXERCONTROLDETAILS_LISTTEXT* = ptr MIXERCONTROLDETAILS_LISTTEXT
  LPMIXERCONTROLDETAILS_LISTTEXT* = ptr MIXERCONTROLDETAILS_LISTTEXT
  PJOYCAPS* = ptr JOYCAPS
  LPJOYCAPS* = ptr JOYCAPS
  PMCI_OPEN_PARMS* = ptr MCI_OPEN_PARMS
  LPMCI_OPEN_PARMS* = ptr MCI_OPEN_PARMS
  LPMCI_INFO_PARMS* = ptr MCI_INFO_PARMS
  PMCI_SYSINFO_PARMS* = ptr MCI_SYSINFO_PARMS
  LPMCI_SYSINFO_PARMS* = ptr MCI_SYSINFO_PARMS
  PMCI_SAVE_PARMS* = ptr MCI_SAVE_PARMS
  LPMCI_SAVE_PARMS* = ptr MCI_SAVE_PARMS
  PMCI_LOAD_PARMS* = ptr MCI_LOAD_PARMS
  LPMCI_LOAD_PARMS* = ptr MCI_LOAD_PARMS
  PMCI_VD_ESCAPE_PARMS* = ptr MCI_VD_ESCAPE_PARMS
  LPMCI_VD_ESCAPE_PARMS* = ptr MCI_VD_ESCAPE_PARMS
  PMCI_WAVE_OPEN_PARMS* = ptr MCI_WAVE_OPEN_PARMS
  LPMCI_WAVE_OPEN_PARMS* = ptr MCI_WAVE_OPEN_PARMS
  PMCI_ANIM_OPEN_PARMS* = ptr MCI_ANIM_OPEN_PARMS
  LPMCI_ANIM_OPEN_PARMS* = ptr MCI_ANIM_OPEN_PARMS
  PMCI_ANIM_WINDOW_PARMS* = ptr MCI_ANIM_WINDOW_PARMS
  LPMCI_ANIM_WINDOW_PARMS* = ptr MCI_ANIM_WINDOW_PARMS
  PMCI_OVLY_OPEN_PARMS* = ptr MCI_OVLY_OPEN_PARMS
  LPMCI_OVLY_OPEN_PARMS* = ptr MCI_OVLY_OPEN_PARMS
  PMCI_OVLY_WINDOW_PARMS* = ptr MCI_OVLY_WINDOW_PARMS
  LPMCI_OVLY_WINDOW_PARMS* = ptr MCI_OVLY_WINDOW_PARMS
  PMCI_OVLY_SAVE_PARMS* = ptr MCI_OVLY_SAVE_PARMS
  LPMCI_OVLY_SAVE_PARMS* = ptr MCI_OVLY_SAVE_PARMS

proc `ms=`*(self: var MMTIME, x: DWORD) = self.u1.ms = x
proc ms*(self: MMTIME): DWORD = self.u1.ms
proc `sample=`*(self: var MMTIME, x: DWORD) = self.u1.sample = x
proc sample*(self: MMTIME): DWORD = self.u1.sample
proc `cb=`*(self: var MMTIME, x: DWORD) = self.u1.cb = x
proc cb*(self: MMTIME): DWORD = self.u1.cb
proc `ticks=`*(self: var MMTIME, x: DWORD) = self.u1.ticks = x
proc ticks*(self: MMTIME): DWORD = self.u1.ticks
proc `lMinimum=`*(self: var MIXERCONTROLA, x: LONG) = self.Bounds.s1.lMinimum = x
proc lMinimum*(self: MIXERCONTROLA): LONG = self.Bounds.s1.lMinimum
proc `lMaximum=`*(self: var MIXERCONTROLA, x: LONG) = self.Bounds.s1.lMaximum = x
proc lMaximum*(self: MIXERCONTROLA): LONG = self.Bounds.s1.lMaximum
proc `dwMinimum=`*(self: var MIXERCONTROLA, x: DWORD) = self.Bounds.s2.dwMinimum = x
proc dwMinimum*(self: MIXERCONTROLA): DWORD = self.Bounds.s2.dwMinimum
proc `dwMaximum=`*(self: var MIXERCONTROLA, x: DWORD) = self.Bounds.s2.dwMaximum = x
proc dwMaximum*(self: MIXERCONTROLA): DWORD = self.Bounds.s2.dwMaximum
proc `lMinimum=`*(self: var MIXERCONTROLW, x: LONG) = self.Bounds.s1.lMinimum = x
proc lMinimum*(self: MIXERCONTROLW): LONG = self.Bounds.s1.lMinimum
proc `lMaximum=`*(self: var MIXERCONTROLW, x: LONG) = self.Bounds.s1.lMaximum = x
proc lMaximum*(self: MIXERCONTROLW): LONG = self.Bounds.s1.lMaximum
proc `dwMinimum=`*(self: var MIXERCONTROLW, x: DWORD) = self.Bounds.s2.dwMinimum = x
proc dwMinimum*(self: MIXERCONTROLW): DWORD = self.Bounds.s2.dwMinimum
proc `dwMaximum=`*(self: var MIXERCONTROLW, x: DWORD) = self.Bounds.s2.dwMaximum = x
proc dwMaximum*(self: MIXERCONTROLW): DWORD = self.Bounds.s2.dwMaximum
proc `dwControlID=`*(self: var MIXERLINECONTROLSA, x: DWORD) = self.u1.dwControlID = x
proc dwControlID*(self: MIXERLINECONTROLSA): DWORD = self.u1.dwControlID
proc `dwControlType=`*(self: var MIXERLINECONTROLSA, x: DWORD) = self.u1.dwControlType = x
proc dwControlType*(self: MIXERLINECONTROLSA): DWORD = self.u1.dwControlType
proc `dwControlID=`*(self: var MIXERLINECONTROLSW, x: DWORD) = self.u1.dwControlID = x
proc dwControlID*(self: MIXERLINECONTROLSW): DWORD = self.u1.dwControlID
proc `dwControlType=`*(self: var MIXERLINECONTROLSW, x: DWORD) = self.u1.dwControlType = x
proc dwControlType*(self: MIXERLINECONTROLSW): DWORD = self.u1.dwControlType
proc `hwndOwner=`*(self: var MIXERCONTROLDETAILS, x: HWND) = self.u1.hwndOwner = x
proc hwndOwner*(self: MIXERCONTROLDETAILS): HWND = self.u1.hwndOwner
proc `cMultipleItems=`*(self: var MIXERCONTROLDETAILS, x: DWORD) = self.u1.cMultipleItems = x
proc cMultipleItems*(self: MIXERCONTROLDETAILS): DWORD = self.u1.cMultipleItems

# ext/vfw.nim

proc VideoForWindowsVersion*(): DWORD {.winapi, dynlib: "msvfw32", importc.}

proc InitVFW*(): LONG {.winapi, dynlib: "msvfw32", importc.}
proc TermVFW*(): LONG {.winapi, dynlib: "msvfw32", importc.}

template MKFOURCC*(ch0: char, ch1: char, ch2: char, ch3: char): DWORD =
  ch0.DWORD or (ch1.DWORD shl 8) or (ch2.DWORD shl 16) or (ch3.DWORD shl 24)

template aviTWOCC(c0: char, c1: char): WORD =
  c0.WORD or (c1.WORD shl 8)

const
  ICVERSION* = 0x0104
  BI_1632* = 0x32333631
  ICTYPE_VIDEO* = mmioFOURCC('v', 'i', 'd', 'c')
  ICTYPE_AUDIO* = mmioFOURCC('a', 'u', 'd', 'c')
  ICERR_OK* = 0
  ICERR_DONTDRAW* = 1
  ICERR_NEWPALETTE* = 2
  ICERR_GOTOKEYFRAME* = 3
  ICERR_STOPDRAWING* = 4
  ICERR_UNSUPPORTED* = -1
  ICERR_BADFORMAT* = -2
  ICERR_MEMORY* = -3
  ICERR_INTERNAL* = -4
  ICERR_BADFLAGS* = -5
  ICERR_BADPARAM* = -6
  ICERR_BADSIZE* = -7
  ICERR_BADHANDLE* = -8
  ICERR_CANTUPDATE* = -9
  ICERR_ABORT* = -10
  ICERR_ERROR* = -100
  ICERR_BADBITDEPTH* = -200
  ICERR_BADIMAGESIZE* = -201
  ICERR_CUSTOM* = -400
  ICMODE_COMPRESS* = 1
  ICMODE_DECOMPRESS* = 2
  ICMODE_FASTDECOMPRESS* = 3
  ICMODE_QUERY* = 4
  ICMODE_FASTCOMPRESS* = 5
  ICMODE_DRAW* = 8
  ICMODE_INTERNALF_FUNCTION32* = 0x8000
  ICMODE_INTERNALF_MASK* = 0x8000
  AVIIF_LIST* = 0x00000001
  AVIIF_TWOCC* = 0x00000002
  AVIIF_KEYFRAME* = 0x00000010
  ICQUALITY_LOW* = 0
  ICQUALITY_HIGH* = 10000
  ICQUALITY_DEFAULT* = -1
  ICM_USER* = DRV_USER + 0x0000
  ICM_RESERVED_LOW* = DRV_USER + 0x1000
  ICM_RESERVED_HIGH* = DRV_USER + 0x2000
  ICM_RESERVED* = ICM_RESERVED_LOW
  ICM_GETSTATE* = ICM_RESERVED + 0
  ICM_SETSTATE* = ICM_RESERVED + 1
  ICM_GETINFO* = ICM_RESERVED + 2
  ICM_CONFIGURE* = ICM_RESERVED + 10
  ICM_ABOUT* = ICM_RESERVED + 11
  ICM_GETERRORTEXT* = ICM_RESERVED + 12
  ICM_GETFORMATNAME* = ICM_RESERVED + 20
  ICM_ENUMFORMATS* = ICM_RESERVED + 21
  ICM_GETDEFAULTQUALITY* = ICM_RESERVED + 30
  ICM_GETQUALITY* = ICM_RESERVED + 31
  ICM_SETQUALITY* = ICM_RESERVED + 32
  ICM_SET* = ICM_RESERVED + 40
  ICM_GET* = ICM_RESERVED + 41
  ICM_FRAMERATE* = mmioFOURCC('F','r','m','R')
  ICM_KEYFRAMERATE* = mmioFOURCC('K','e','y','R')
  ICM_COMPRESS_GET_FORMAT* = ICM_USER + 4
  ICM_COMPRESS_GET_SIZE* = ICM_USER + 5
  ICM_COMPRESS_QUERY* = ICM_USER + 6
  ICM_COMPRESS_BEGIN* = ICM_USER + 7
  ICM_COMPRESS* = ICM_USER + 8
  ICM_COMPRESS_END* = ICM_USER + 9
  ICM_DECOMPRESS_GET_FORMAT* = ICM_USER + 10
  ICM_DECOMPRESS_QUERY* = ICM_USER + 11
  ICM_DECOMPRESS_BEGIN* = ICM_USER + 12
  ICM_DECOMPRESS* = ICM_USER + 13
  ICM_DECOMPRESS_END* = ICM_USER + 14
  ICM_DECOMPRESS_SET_PALETTE* = ICM_USER + 29
  ICM_DECOMPRESS_GET_PALETTE* = ICM_USER + 30
  ICM_DRAW_QUERY* = ICM_USER + 31
  ICM_DRAW_BEGIN* = ICM_USER + 15
  ICM_DRAW_GET_PALETTE* = ICM_USER + 16
  ICM_DRAW_UPDATE* = ICM_USER + 17
  ICM_DRAW_START* = ICM_USER + 18
  ICM_DRAW_STOP* = ICM_USER + 19
  ICM_DRAW_BITS* = ICM_USER + 20
  ICM_DRAW_END* = ICM_USER + 21
  ICM_DRAW_GETTIME* = ICM_USER + 32
  ICM_DRAW* = ICM_USER + 33
  ICM_DRAW_WINDOW* = ICM_USER + 34
  ICM_DRAW_SETTIME* = ICM_USER + 35
  ICM_DRAW_REALIZE* = ICM_USER + 36
  ICM_DRAW_FLUSH* = ICM_USER + 37
  ICM_DRAW_RENDERBUFFER* = ICM_USER + 38
  ICM_DRAW_START_PLAY* = ICM_USER + 39
  ICM_DRAW_STOP_PLAY* = ICM_USER + 40
  ICM_DRAW_SUGGESTFORMAT* = ICM_USER + 50
  ICM_DRAW_CHANGEPALETTE* = ICM_USER + 51
  ICM_DRAW_IDLE* = ICM_USER + 52
  ICM_GETBUFFERSWANTED* = ICM_USER + 41
  ICM_GETDEFAULTKEYFRAMERATE* = ICM_USER + 42
  ICM_DECOMPRESSEX_BEGIN* = ICM_USER + 60
  ICM_DECOMPRESSEX_QUERY* = ICM_USER + 61
  ICM_DECOMPRESSEX* = ICM_USER + 62
  ICM_DECOMPRESSEX_END* = ICM_USER + 63
  ICM_COMPRESS_FRAMES_INFO* = ICM_USER + 70
  ICM_COMPRESS_FRAMES* = ICM_USER + 71
  ICM_SET_STATUS_PROC* = ICM_USER + 72

type
  HIC* = HANDLE
  TICOPEN* {.final, pure.} = object # renamed from ICOPEN
    dwSize*: DWORD
    fccType*: DWORD
    fccHandler*: DWORD
    dwVersion*: DWORD
    dwFlags*: DWORD
    dwError*: LRESULT
    pV1Reserved*: LPVOID
    pV2Reserved*: LPVOID
    dnDevNode*: DWORD
  TICINFO* {.final, pure.} = object # renamed from ICINFO
    dwSize*: DWORD
    fccType*: DWORD
    fccHandler*: DWORD
    dwFlags*: DWORD
    dwVersion*: DWORD
    dwVersionICM*: DWORD
    szName*: array[16, WCHAR]
    szDescription*: array[128, WCHAR]
    szDriver*: array[128, WCHAR]

const
  VIDCF_QUALITY* = 0x0001
  VIDCF_CRUNCH* = 0x0002
  VIDCF_TEMPORAL* = 0x0004
  VIDCF_COMPRESSFRAMES* = 0x0008
  VIDCF_DRAW* = 0x0010
  VIDCF_FASTTEMPORALC* = 0x0020
  VIDCF_FASTTEMPORALD* = 0x0080
  ICCOMPRESS_KEYFRAME* = 0x00000001

type
  TICCOMPRESS* {.final, pure.} = object # renamed from ICCompress
    dwFlags*: DWORD
    lpbiOutput*: LPBITMAPINFOHEADER
    lpOutput*: LPVOID
    lpbiInput*: LPBITMAPINFOHEADER
    lpInput*: LPVOID
    lpckid*: LPDWORD
    lpdwFlags*: LPDWORD
    lFrameNum*: LONG
    dwFrameSize*: DWORD
    dwQuality*: DWORD
    lpbiPrev*: LPBITMAPINFOHEADER
    lpPrev*: LPVOID

const
  ICCOMPRESSFRAMES_PADDING* = 0x00000001

type
  ICCOMPRESSFRAMES* {.final, pure.} = object
    dwFlags*: DWORD
    lpbiOutput*: LPBITMAPINFOHEADER
    lOutput*: LPARAM
    lpbiInput*: LPBITMAPINFOHEADER
    lInput*: LPARAM
    lStartFrame*: LONG
    lFrameCount*: LONG
    lQuality*: LONG
    lDataRate*: LONG
    lKeyRate*: LONG
    dwRate*: DWORD
    dwScale*: DWORD
    dwOverheadPerFrame*: DWORD
    dwReserved2*: DWORD
    GetData*: proc (lInput: LPARAM, lFrame: LONG, lpBits: LPVOID, L: LONG): LONG
    PutData*: proc (lOutput: LPARAM, lFrame: LONG, lpBits: LPVOID, L: LONG): LONG

const
  ICSTATUS_START* = 0
  ICSTATUS_STATUS* = 1
  ICSTATUS_END* = 2
  ICSTATUS_ERROR* = 3
  ICSTATUS_YIELD* = 4

type
  TICSETSTATUSPROC* {.final, pure.} = object # renamed from ICSETSTATUSPROC
    dwFlags*: DWORD
    lParam*: LPARAM
    Status*: proc (lParam: LPARAM, message: UINT, L: LONG): LONG

const
  ICDECOMPRESS_NOTKEYFRAME* = 0x08000000
  ICDECOMPRESS_NULLFRAME* = 0x10000000
  ICDECOMPRESS_PREROLL* = 0x20000000
  ICDECOMPRESS_UPDATE* = 0x40000000
  ICDECOMPRESS_HURRYUP* = 0x80000000'i32

type
  TICDECOMPRESS* {.final, pure.} = object # renamed from ICDECOMPRESS
    dwFlags*: DWORD
    lpbiInput*: LPBITMAPINFOHEADER
    lpInput*: LPVOID
    lpbiOutput*: LPBITMAPINFOHEADER
    lpOutput*: LPVOID
    ckid*: DWORD
  TICDECOMPRESSEX* {.final, pure.} = object # renamed from ICDECOMPRESSEX
    dwFlags*: DWORD
    lpbiSrc*: LPBITMAPINFOHEADER
    lpSrc*: LPVOID
    lpbiDst*: LPBITMAPINFOHEADER
    lpDst*: LPVOID
    xDst*: int32
    yDst*: int32
    dxDst*: int32
    dyDst*: int32
    xSrc*: int32
    ySrc*: int32
    dxSrc*: int32
    dySrc*: int32

const
  # ICDRAW_QUERY* = 0x00000001
  ICDRAW_FULLSCREEN* = 0x00000002
  ICDRAW_HDC* = 0x00000004
  ICDRAW_ANIMATE* = 0x00000008
  ICDRAW_CONTINUE* = 0x00000010
  ICDRAW_MEMORYDC* = 0x00000020
  ICDRAW_UPDATING* = 0x00000040
  ICDRAW_RENDER* = 0x00000080
  ICDRAW_BUFFER* = 0x00000100

type
  TICDRAWBEGIN* {.final, pure.} = object # renamed from ICDRAWBEGIN
    dwFlags*: DWORD
    hpal*: HPALETTE
    hwnd*: HWND
    hdc*: HDC
    xDst*: int32
    yDst*: int32
    dxDst*: int32
    dyDst*: int32
    lpbi*: LPBITMAPINFOHEADER
    xSrc*: int32
    ySrc*: int32
    dxSrc*: int32
    dySrc*: int32
    dwRate*: DWORD
    dwScale*: DWORD

const
  ICDRAW_NOTKEYFRAME* = 0x08000000
  ICDRAW_NULLFRAME* = 0x10000000
  ICDRAW_PREROLL* = 0x20000000
  ICDRAW_UPDATE* = 0x40000000
  ICDRAW_HURRYUP* = 0x80000000'i32

type
  TICDRAW* {.final, pure.} = object # renamed from ICDRAW
    dwFlags*: DWORD
    lpFormat*: LPVOID
    lpData*: LPVOID
    cbData*: DWORD
    lTime*: LONG
  ICDRAWSUGGEST* {.final, pure.} = object
    lpbiIn*: LPBITMAPINFOHEADER
    lpbiSuggest*: LPBITMAPINFOHEADER
    dxSrc*: int32
    dySrc*: int32
    dxDst*: int32
    dyDst*: int32
    hicDecompressor*: HIC
  ICPALETTE* {.final, pure.} = object
    dwFlags*: DWORD
    iStart*: int32
    iLen*: int32
    lppe*: LPPALETTEENTRY

proc ICInfo*(fccType: DWORD, fccHandler: DWORD, lpicinfo: ptr TICINFO): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc ICInstall*(fccType: DWORD, fccHandler: DWORD, lParam: LPARAM, szDesc: LPSTR, wFlags: UINT): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc ICRemove*(fccType: DWORD, fccHandler: DWORD, wFlags: UINT): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc ICGetInfo*(hic: HIC, picinfo: ptr TICINFO, cb: DWORD): LRESULT {.winapi, dynlib: "msvfw32", importc.}
proc ICOpen*(fccType: DWORD, fccHandler: DWORD, wMode: UINT): HIC {.winapi, dynlib: "msvfw32", importc.}
proc ICOpenFunction*(fccType: DWORD, fccHandler: DWORD, wMode: UINT, lpfnHandler: FARPROC): HIC {.winapi, dynlib: "msvfw32", importc.}
proc ICClose*(hic: HIC): LRESULT {.winapi, dynlib: "msvfw32", importc.}
proc ICSendMessage*(hic: HIC, msg: UINT, dw1: DWORD_PTR, dw2: DWORD_PTR): LRESULT {.winapi, dynlib: "msvfw32", importc.}

const
  ICINSTALL_FUNCTION* = 0x0001
  ICINSTALL_DRIVER* = 0x0002
  ICINSTALL_HDRV* = 0x0004
  ICINSTALL_UNICODE* = 0x8000
  ICINSTALL_DRIVERW* = 0x8002
  ICMF_CONFIGURE_QUERY* = 0x00000001
  ICMF_ABOUT_QUERY* = 0x00000001

proc ICQueryAbout*(hic: HIC): bool =
  return ICSendMessage(hic, ICM_ABOUT, cast[DWORD_PTR](-1), ICMF_ABOUT_QUERY) == ICERR_OK

proc ICAbout*(hic: HIC, hwnd: HWND): LRESULT =
  return ICSendMessage(hic, ICM_ABOUT, cast[DWORD_PTR](hwnd), 0)

proc ICQueryConfigure*(hic: HIC): bool =
  return ICSendMessage(hic, ICM_CONFIGURE, cast[DWORD_PTR](-1), ICMF_CONFIGURE_QUERY) == ICERR_OK

proc ICConfigure*(hic: HIC, hwnd: HWND): LRESULT =
  return ICSendMessage(hic, ICM_CONFIGURE, cast[DWORD_PTR](hwnd), 0)

proc ICGetState*(hic: HIC, pv: LPVOID, cb: DWORD_PTR): LRESULT =
  return ICSendMessage(hic, ICM_GETSTATE, cast[DWORD_PTR](pv), cast[DWORD_PTR](cb))

proc ICSetState*(hic: HIC, pv: LPVOID, cb: DWORD_PTR): LRESULT =
  return ICSendMessage(hic, ICM_SETSTATE, cast[DWORD_PTR](pv), cast[DWORD_PTR](cb))

proc ICGetStateSize*(hic: HIC): LRESULT =
  return ICGetState(hic, nil, 0)

proc ICGetDefaultQuality*(hic: HIC): DWORD =
  var dwICValue: DWORD
  discard ICSendMessage(hic, ICM_GETDEFAULTQUALITY, cast[DWORD_PTR](dwICValue.addr), DWORD.sizeof.DWORD_PTR)
  return dwICValue

proc ICGetDefaultKeyFrameRate*(hic: HIC): DWORD =
  var dwICValue: DWORD
  discard ICSendMessage(hic, ICM_GETDEFAULTKEYFRAMERATE, cast[DWORD_PTR](dwICValue.addr), DWORD.sizeof.DWORD_PTR)
  return dwICValue

proc ICDrawWindow*(hic: HIC, prc: LPVOID): DWORD =
  return ICSendMessage(hic, ICM_DRAW_WINDOW, cast[DWORD_PTR](prc), RECT.sizeof.DWORD_PTR).DWORD

proc ICCompress*(hic: HIC, dwFlags: DWORD, lpbiOutput: LPBITMAPINFOHEADER, lpData: LPVOID, lpbiInput: LPBITMAPINFOHEADER, lpBits: LPVOID, lpckid: LPDWORD, lpdwFlags: LPDWORD, lFrameNum: LONG, dwFrameSize: DWORD, dwQuality: DWORD, lpbiPrev: LPBITMAPINFOHEADER, lpPrev: LPVOID): DWORD {.winapi, dynlib: "msvfw32", importc.}

proc ICCompressBegin*(hic: HIC, lpbiInput: LPVOID, lpbiOutput: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_COMPRESS_BEGIN, cast[DWORD_PTR](lpbiInput), cast[DWORD_PTR](lpbiOutput))

proc ICCompressQuery*(hic: HIC, lpbiInput: LPVOID, lpbiOutput: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_COMPRESS_QUERY, cast[DWORD_PTR](lpbiInput), cast[DWORD_PTR](lpbiOutput))

proc ICCompressGetFormat*(hic: HIC, lpbiInput: LPVOID, lpbiOutput: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_COMPRESS_GET_FORMAT, cast[DWORD_PTR](lpbiInput), cast[DWORD_PTR](lpbiOutput))

proc ICCompressGetFormatSize*(hic: HIC, lpbi: LPVOID): LRESULT =
  return ICCompressGetFormat(hic, lpbi, nil)

proc ICCompressGetSize*(hic: HIC, lpbiInput: LPVOID, lpbiOutput: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_COMPRESS_GET_SIZE, cast[DWORD_PTR](lpbiInput), cast[DWORD_PTR](lpbiOutput))

proc ICCompressEnd*(hic: HIC): LRESULT =
  return ICSendMessage(hic, ICM_COMPRESS_END, 0, 0)

proc ICDecompress*(hic: HIC, dwFlags: DWORD, lpbiFormat: LPBITMAPINFOHEADER, lpData: LPVOID, lpbi: LPBITMAPINFOHEADER, lpBits: LPVOID): DWORD {.winapi, dynlib: "msvfw32", importc.}

proc ICDecompressBegin*(hic: HIC, lpbiInput: LPVOID, lpbiOutput: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_DECOMPRESS_BEGIN, cast[DWORD_PTR](lpbiInput), cast[DWORD_PTR](lpbiOutput))

proc ICDecompressQuery*(hic: HIC, lpbiInput: LPVOID, lpbiOutput: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_DECOMPRESS_QUERY, cast[DWORD_PTR](lpbiInput), cast[DWORD_PTR](lpbiOutput))

proc ICDecompressGetFormat*(hic: HIC, lpbiInput: LPVOID, lpbiOutput: LPVOID): LONG =
  return cast[LONG](ICSendMessage(hic, ICM_DECOMPRESS_GET_FORMAT, cast[DWORD_PTR](lpbiInput), cast[DWORD_PTR](lpbiOutput)))

proc ICDecompressGetFormatSize*(hic: HIC, lpbi: LPVOID): LONG =
  return ICDecompressGetFormat(hic, lpbi, nil)

proc ICDecompressGetPalette*(hic: HIC, lpbiInput: LPVOID, lpbiOutput: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_DECOMPRESS_GET_PALETTE, cast[DWORD_PTR](lpbiInput), cast[DWORD_PTR](lpbiOutput))

proc ICDecompressSetPalette*(hic: HIC, lpbiPalette: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_DECOMPRESS_SET_PALETTE, cast[DWORD_PTR](lpbiPalette), 0)

proc ICDecompressEnd*(hic: HIC): LRESULT =
  return ICSendMessage(hic, ICM_DECOMPRESS_END, 0, 0)

proc ICDecompressEx*(hic: HIC, dwFlags: DWORD, lpbiSrc: LPBITMAPINFOHEADER, lpSrc: LPVOID, xSrc: int32, ySrc: int32, dxSrc: int32, dySrc: int32, lpbiDst: LPBITMAPINFOHEADER, lpDst: LPVOID, xDst: int32, yDst: int32, dxDst: int32, dyDst: int32): LRESULT =
  var ic = TICDECOMPRESSEX(dwFlags: dwFlags, lpbiSrc: lpbiSrc, lpSrc: lpSrc, xSrc: xSrc, ySrc: ySrc, dxSrc: dxSrc, dySrc: dySrc, lpbiDst: lpbiDst, lpDst: lpDst, xDst: xDst, yDst: yDst, dxDst: dxDst, dyDst: dyDst)
  return ICSendMessage(hic, ICM_DECOMPRESSEX, cast[DWORD_PTR](ic.addr), ic.sizeof.DWORD_PTR)

proc ICDecompressExBegin*(hic: HIC, dwFlags: DWORD, lpbiSrc: LPBITMAPINFOHEADER, lpSrc: LPVOID, xSrc: int32, ySrc: int32, dxSrc: int32, dySrc: int32, lpbiDst: LPBITMAPINFOHEADER, lpDst: LPVOID, xDst: int32, yDst: int32, dxDst: int32, dyDst: int32): LRESULT =
  var ic = TICDECOMPRESSEX(dwFlags: dwFlags, lpbiSrc: lpbiSrc, lpSrc: lpSrc, xSrc: xSrc, ySrc: ySrc, dxSrc: dxSrc, dySrc: dySrc, lpbiDst: lpbiDst, lpDst: lpDst, xDst: xDst, yDst: yDst, dxDst: dxDst, dyDst: dyDst)
  return ICSendMessage(hic, ICM_DECOMPRESSEX_BEGIN, cast[DWORD_PTR](ic.addr), ic.sizeof.DWORD_PTR)

proc ICDecompressExQuery*(hic: HIC, dwFlags: DWORD, lpbiSrc: LPBITMAPINFOHEADER, lpSrc: LPVOID, xSrc: int32, ySrc: int32, dxSrc: int32, dySrc: int32, lpbiDst: LPBITMAPINFOHEADER, lpDst: LPVOID, xDst: int32, yDst: int32, dxDst: int32, dyDst: int32): LRESULT =
  var ic = TICDECOMPRESSEX(dwFlags: dwFlags, lpbiSrc: lpbiSrc, lpSrc: lpSrc, xSrc: xSrc, ySrc: ySrc, dxSrc: dxSrc, dySrc: dySrc, lpbiDst: lpbiDst, lpDst: lpDst, xDst: xDst, yDst: yDst, dxDst: dxDst, dyDst: dyDst)
  return ICSendMessage(hic, ICM_DECOMPRESSEX_QUERY, cast[DWORD_PTR](ic.addr), ic.sizeof.DWORD_PTR)

proc ICDecompressExEnd*(hic: HIC): LRESULT =
  return ICSendMessage(hic, ICM_DECOMPRESSEX_END, 0, 0)

proc ICDrawBegin*(hic: HIC, dwFlags: DWORD, hpal: HPALETTE, hwnd: HWND, hdc: HDC, xDst: int32, yDst: int32, dxDst: int32, dyDst: int32, lpbi: LPBITMAPINFOHEADER, xSrc: int32, ySrc: int32, dxSrc: int32, dySrc: int32, dwRate: DWORD, dwScale: DWORD): DWORD {.winapi, dynlib: "msvfw32", importc.}
proc ICDraw*(hic: HIC, dwFlags: DWORD, lpFormat: LPVOID, lpData: LPVOID, cbData: DWORD, lTime: LONG): DWORD {.winapi, dynlib: "msvfw32", importc.}

proc ICDrawSuggestFormat*(hic: HIC, lpbiIn: LPBITMAPINFOHEADER, lpbiOut: LPBITMAPINFOHEADER, dxSrc: int32, dySrc: int32, dxDst: int32, dyDst: int32, hicDecomp: HIC): LRESULT =
  var ic = ICDRAWSUGGEST(lpbiIn: lpbiIn, lpbiSuggest: lpbiOut, dxSrc: dxSrc, dySrc: dySrc, dxDst: dxDst, dyDst: dyDst, hicDecompressor: hicDecomp)
  return ICSendMessage(hic, ICM_DRAW_SUGGESTFORMAT, cast[DWORD_PTR](ic.addr), ic.sizeof.DWORD_PTR)

proc ICDrawQuery*(hic: HIC, lpbiInput: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_QUERY, cast[DWORD_PTR](lpbiInput), 0)

proc ICDrawChangePalette*(hic: HIC, lpbiInput: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_CHANGEPALETTE, cast[DWORD_PTR](lpbiInput), 0)

proc ICGetBuffersWanted*(hic: HIC, lpdwBuffers: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_GETBUFFERSWANTED, cast[DWORD_PTR](lpdwBuffers), 0)

proc ICDrawEnd*(hic: HIC): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_END, 0, 0)

proc ICDrawStart*(hic: HIC): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_START, 0, 0)

proc ICDrawStartPlay*(hic: HIC, lFrom: DWORD, lTo: DWORD): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_START_PLAY, cast[DWORD_PTR](lFrom), cast[DWORD_PTR](lTo))

proc ICDrawStop*(hic: HIC): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_STOP, 0, 0)

proc ICDrawStopPlay*(hic: HIC): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_STOP_PLAY, 0, 0)

proc ICDrawGetTime*(hic: HIC, lplTime: LPVOID): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_GETTIME, cast[DWORD_PTR](lplTime), 0)

proc ICDrawSetTime*(hic: HIC, lTime: DWORD): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_SETTIME, cast[DWORD_PTR](lTime), 0)

proc ICDrawRealize*(hic: HIC, hdc: HDC, fBackground: BOOL): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_REALIZE, cast[DWORD_PTR](hdc), cast[DWORD_PTR](fBackground))

proc ICDrawFlush*(hic: HIC): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_FLUSH, 0, 0)

proc ICDrawRenderBuffer*(hic: HIC): LRESULT =
  return ICSendMessage(hic, ICM_DRAW_RENDERBUFFER, 0, 0)

proc ICSetStatusProc*(hic: HIC, dwFlags: DWORD, lParam: LRESULT, fpfnStatus: proc(P1: LPARAM, P2: UINT, P3: LONG): LONG): LRESULT =
  var ic = TICSETSTATUSPROC(dwFlags: dwFlags, lParam: lParam, Status: fpfnStatus)
  return ICSendMessage(hic, ICM_SET_STATUS_PROC, cast[DWORD_PTR](ic.addr), ic.sizeof.DWORD_PTR)

proc ICLocate*(fccType: DWORD, fccHandler: DWORD, lpbiIn: LPBITMAPINFOHEADER, lpbiOut: LPBITMAPINFOHEADER, wFlags: WORD): HIC {.winapi, dynlib: "msvfw32", importc.}
proc ICGetDisplayFormat*(hic: HIC, lpbiIn: LPBITMAPINFOHEADER, lpbiOut: LPBITMAPINFOHEADER, BitDepth: int32, dx: int32, dy: int32): HIC {.winapi, dynlib: "msvfw32", importc.}
proc ICImageCompress*(hic: HIC, uiFlags: UINT, lpbiIn: LPBITMAPINFO, lpBits: LPVOID, lpbiOut: LPBITMAPINFO, lQuality: LONG, plSize: ptr LONG): HANDLE {.winapi, dynlib: "msvfw32", importc.}
proc ICImageDecompress*(hic: HIC, uiFlags: UINT, lpbiIn: LPBITMAPINFO, lpBits: LPVOID, lpbiOut: LPBITMAPINFO): HANDLE {.winapi, dynlib: "msvfw32", importc.}

proc ICDecompressOpen*(fccType: DWORD, fccHandler: DWORD, lpbiIn: LPBITMAPINFOHEADER, lpbiOut: LPBITMAPINFOHEADER): HIC =
  return ICLocate(fccType, fccHandler, lpbiIn, lpbiOut, ICMODE_DECOMPRESS)

proc ICDrawOpen*(fccType: DWORD, fccHandler: DWORD, lpbiIn: LPBITMAPINFOHEADER): HIC =
  return ICLocate(fccType, fccHandler, lpbiIn, nil, ICMODE_DRAW)

type
  COMPVARS* {.final, pure.} = object
    cbSize*: LONG
    dwFlags*: DWORD
    hic*: HIC
    fccType*: DWORD
    fccHandler*: DWORD
    lpbiIn*: LPBITMAPINFO
    lpbiOut*: LPBITMAPINFO
    lpBitsOut*: LPVOID
    lpBitsPrev*: LPVOID
    lFrame*: LONG
    lKey*: LONG
    lDataRate*: LONG
    lQ*: LONG
    lKeyCount*: LONG
    lpState*: LPVOID
    cbState*: LONG
  PCOMPVARS* = ptr COMPVARS

const
  ICMF_COMPVARS_VALID* = 0x00000001

proc ICCompressorChoose*(hwnd: HWND, uiFlags: UINT, pvIn: LPVOID, lpData: LPVOID, pc: PCOMPVARS, lpszTitle: LPSTR): BOOL {.winapi, dynlib: "msvfw32", importc.}

const
  ICMF_CHOOSE_KEYFRAME* = 0x0001
  ICMF_CHOOSE_DATARATE* = 0x0002
  ICMF_CHOOSE_PREVIEW* = 0x0004
  ICMF_CHOOSE_ALLCOMPRESSORS* = 0x0008

proc ICSeqCompressFrameStart*(pc: PCOMPVARS, lpbiIn: LPBITMAPINFO): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc ICSeqCompressFrameEnd*(pc: PCOMPVARS): void {.winapi, dynlib: "msvfw32", importc.}
proc ICSeqCompressFrame*(pc: PCOMPVARS, uiFlags: UINT, lpBits: LPVOID, pfKey: ptr BOOL, plSize: ptr LONG): LPVOID {.winapi, dynlib: "msvfw32", importc.}
proc ICCompressorFree*(pc: PCOMPVARS): void {.winapi, dynlib: "msvfw32", importc.}

type
  HDRAWDIB* = HANDLE

const
  DDF_0001* = 0x0001
  DDF_UPDATE* = 0x0002
  DDF_SAME_HDC* = 0x0004
  DDF_SAME_DRAW* = 0x0008
  DDF_DONTDRAW* = 0x0010
  DDF_ANIMATE* = 0x0020
  DDF_BUFFER* = 0x0040
  DDF_JUSTDRAWIT* = 0x0080
  DDF_FULLSCREEN* = 0x0100
  DDF_BACKGROUNDPAL* = 0x0200
  DDF_NOTKEYFRAME* = 0x0400
  DDF_HURRYUP* = 0x0800
  DDF_HALFTONE* = 0x1000
  DDF_2000* = 0x2000
  DDF_PREROLL* = DDF_DONTDRAW
  DDF_SAME_DIB* = DDF_SAME_DRAW
  DDF_SAME_SIZE* = DDF_SAME_DRAW

proc DrawDibInit*(): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibOpen*(): HDRAWDIB {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibClose*(hdd: HDRAWDIB): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibGetBuffer*(hdd: HDRAWDIB, lpbi: LPBITMAPINFOHEADER, dwSize: DWORD, dwFlags: DWORD): LPVOID {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibError*(hdd: HDRAWDIB): UINT {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibGetPalette*(hdd: HDRAWDIB): HPALETTE {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibSetPalette*(hdd: HDRAWDIB, hpal: HPALETTE): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibChangePalette*(hdd: HDRAWDIB, iStart: int32, iLen: int32, lppe: LPPALETTEENTRY): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibRealize*(hdd: HDRAWDIB, hdc: HDC, fBackground: BOOL): UINT {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibStart*(hdd: HDRAWDIB, rate: DWORD): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibStop*(hdd: HDRAWDIB): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibBegin*(hdd: HDRAWDIB, hdc: HDC, dxDst: int32, dyDst: int32, lpbi: LPBITMAPINFOHEADER, dxSrc: int32, dySrc: int32, wFlags: UINT): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc DrawDibDraw*(hdd: HDRAWDIB, hdc: HDC, xDst: int32, yDst: int32, dxDst: int32, dyDst: int32, lpbi: LPBITMAPINFOHEADER, lpBits: LPVOID, xSrc: int32, ySrc: int32, dxSrc: int32, dySrc: int32, wFlags: UINT): BOOL {.winapi, dynlib: "msvfw32", importc.}

proc DrawDibUpdate*(hdd: HDRAWDIB, hdc: HDC, x: int32, y: int32): BOOL =
  return DrawDibDraw(hdd, hdc, x, y, 0, 0, nil, nil, 0, 0, 0, 0, DDF_UPDATE)

proc DrawDibEnd*(hdd: HDRAWDIB): BOOL {.winapi, dynlib: "msvfw32", importc.}

type
  TDRAWDIBTIME* {.final, pure.} = object # renamed from DRAWDIBTIME
    timeCount*: LONG
    timeDraw*: LONG
    timeDecompress*: LONG
    timeDither*: LONG
    timeStretch*: LONG
    timeBlt*: LONG
    timeSetDIBits*: LONG
  LPDRAWDIBTIME* = ptr TDRAWDIBTIME

proc DrawDibTime*(hdd: HDRAWDIB, lpddtime: LPDRAWDIBTIME): BOOL {.winapi, dynlib: "msvfw32", importc.}

const
  PD_CAN_DRAW_DIB* = 0x0001
  PD_CAN_STRETCHDIB* = 0x0002
  PD_STRETCHDIB_1_1_OK* = 0x0004
  PD_STRETCHDIB_1_2_OK* = 0x0008
  PD_STRETCHDIB_1_N_OK* = 0x0010

proc DrawDibProfileDisplay*(lpbi: LPBITMAPINFOHEADER): LRESULT {.winapi, dynlib: "msvfw32", importc.}
proc StretchDIB*(biDst: LPBITMAPINFOHEADER, lpDst: LPVOID, DstX: int32, DstY: int32, DstXE: int32, DstYE: int32, biSrc: LPBITMAPINFOHEADER, lpSrc: LPVOID, SrcX: int32, SrcY: int32, SrcXE: int32, SrcYE: int32): void {.winapi, dynlib: "msvfw32", importc.}

type
  # FOURCC* = DWORD
  TWOCC* = WORD

const
  formtypeAVI* = mmioFOURCC('A', 'V', 'I', ' ')
  listtypeAVIHEADER* = mmioFOURCC('h', 'd', 'r', 'l')
  ckidAVIMAINHDR* = mmioFOURCC('a', 'v', 'i', 'h')
  listtypeSTREAMHEADER* = mmioFOURCC('s', 't', 'r', 'l')
  ckidSTREAMHEADER* = mmioFOURCC('s', 't', 'r', 'h')
  ckidSTREAMFORMAT* = mmioFOURCC('s', 't', 'r', 'f')
  ckidSTREAMHANDLERDATA* = mmioFOURCC('s', 't', 'r', 'd')
  ckidSTREAMNAME* = mmioFOURCC('s', 't', 'r', 'n')
  listtypeAVIMOVIE* = mmioFOURCC('m', 'o', 'v', 'i')
  listtypeAVIRECORD* = mmioFOURCC('r', 'e', 'c', ' ')
  ckidAVINEWINDEX* = mmioFOURCC('i', 'd', 'x', '1')
  streamtypeVIDEO* = mmioFOURCC('v', 'i', 'd', 's')
  streamtypeAUDIO* = mmioFOURCC('a', 'u', 'd', 's')
  streamtypeMIDI* = mmioFOURCC('m', 'i', 'd', 's')
  streamtypeTEXT* = mmioFOURCC('t', 'x', 't', 's')
  cktypeDIBbits* = aviTWOCC('d', 'b')
  cktypeDIBcompressed* = aviTWOCC('d', 'c')
  cktypePALchange* = aviTWOCC('p', 'c')
  cktypeWAVEbytes* = aviTWOCC('w', 'b')
  ckidAVIPADDING* = mmioFOURCC('J', 'U', 'N', 'K')

proc FromHex*(n: uint8): DWORD =
  let N = n.DWORD
  return if N >= 'A'.DWORD: N + 10.DWORD - 'A'.DWORD else: N - '0'.DWORD

proc StreamFromFOURCC*(fcc: DWORD): WORD =
  return cast[WORD]((FromHex(LOBYTE(LOWORD(fcc))) shl 4) + (FromHex(HIBYTE(LOWORD(fcc)))))

proc TWOCCFromFOURCC*(fcc: DWORD): WORD =
  return HIWORD(fcc)

proc ToHex*(n: DWORD): BYTE =
  return cast[BYTE](if n > 9.DWORD: n - 10.DWORD + 'A'.DWORD else: n + '0'.DWORD)

proc MAKEAVICKID*(tcc: WORD, stream: WORD): DWORD =
  return MAKELONG(cast[WORD]((ToHex(stream and 0x0f) shl 8) or (ToHex((stream and 0xf0) shr 4))), tcc)

const
  AVIF_HASINDEX* = 0x00000010
  AVIF_MUSTUSEINDEX* = 0x00000020
  AVIF_ISINTERLEAVED* = 0x00000100
  AVIF_WASCAPTUREFILE* = 0x00010000
  AVIF_COPYRIGHTED* = 0x00020000
  AVI_HEADERSIZE* = 2048

type
  MainAVIHeader* {.final, pure.} = object
    dwMicroSecPerFrame*: DWORD
    dwMaxBytesPerSec*: DWORD
    dwPaddingGranularity*: DWORD
    dwFlags*: DWORD
    dwTotalFrames*: DWORD
    dwInitialFrames*: DWORD
    dwStreams*: DWORD
    dwSuggestedBufferSize*: DWORD
    dwWidth*: DWORD
    dwHeight*: DWORD
    dwReserved*: array[4, DWORD]

const
  AVISF_DISABLED* = 0x00000001
  AVISF_VIDEO_PALCHANGES* = 0x00010000

type
  AVIStreamHeader* {.final, pure.} = object
    fccType*: FOURCC
    fccHandler*: FOURCC
    dwFlags*: DWORD
    wPriority*: WORD
    wLanguage*: WORD
    dwInitialFrames*: DWORD
    dwScale*: DWORD
    dwRate*: DWORD
    dwStart*: DWORD
    dwLength*: DWORD
    dwSuggestedBufferSize*: DWORD
    dwQuality*: DWORD
    dwSampleSize*: DWORD
    rcFrame*: RECT

const
  AVIIF_FIRSTPART* = 0x00000020
  AVIIF_LASTPART* = 0x00000040
  AVIIF_MIDPART* = ( AVIIF_LASTPART or AVIIF_FIRSTPART)
  AVIIF_NOTIME* = 0x00000100
  AVIIF_COMPUSE* = 0x0FFF0000

type
  AVIINDEXENTRY* {.final, pure.} = object
    ckid*: DWORD
    dwFlags*: DWORD
    dwChunkOffset*: DWORD
    dwChunkLength*: DWORD
  AVIPALCHANGE* {.final, pure.} = object
    bFirstEntry*: BYTE
    bNumEntries*: BYTE
    wFlags*: WORD
    peNew*: ptr PALETTEENTRY

const
  AVIGETFRAMEF_BESTDISPLAYFMT* = 1

type
  AVISTREAMINFOW* {.final, pure.} = object
    fccType*: DWORD
    fccHandler*: DWORD
    dwFlags*: DWORD
    dwCaps*: DWORD
    wPriority*: WORD
    wLanguage*: WORD
    dwScale*: DWORD
    dwRate*: DWORD
    dwStart*: DWORD
    dwLength*: DWORD
    dwInitialFrames*: DWORD
    dwSuggestedBufferSize*: DWORD
    dwQuality*: DWORD
    dwSampleSize*: DWORD
    rcFrame*: RECT
    dwEditCount*: DWORD
    dwFormatChangeCount*: DWORD
    szName*: array[64, WCHAR]
  LPAVISTREAMINFOW* = ptr AVISTREAMINFOW
  AVISTREAMINFOA* {.final, pure.} = object
    fccType*: DWORD
    fccHandler*: DWORD
    dwFlags*: DWORD
    dwCaps*: DWORD
    wPriority*: WORD
    wLanguage*: WORD
    dwScale*: DWORD
    dwRate*: DWORD
    dwStart*: DWORD
    dwLength*: DWORD
    dwInitialFrames*: DWORD
    dwSuggestedBufferSize*: DWORD
    dwQuality*: DWORD
    dwSampleSize*: DWORD
    rcFrame*: RECT
    dwEditCount*: DWORD
    dwFormatChangeCount*: DWORD
    szName*: array[64, char]
  LPAVISTREAMINFOA* = ptr AVISTREAMINFOA

when not defined(winansi):
  type
    AVISTREAMINFO* = AVISTREAMINFOW
    LPAVISTREAMINFO* = LPAVISTREAMINFOW

else:
  type
    AVISTREAMINFO* = AVISTREAMINFOA
    LPAVISTREAMINFO* = LPAVISTREAMINFOA

const
  AVISTREAMINFO_DISABLED* = 0x00000001
  AVISTREAMINFO_FORMATCHANGES* = 0x00010000

type
  AVIFILEINFOW* {.final, pure.} = object
    dwMaxBytesPerSec*: DWORD
    dwFlags*: DWORD
    dwCaps*: DWORD
    dwStreams*: DWORD
    dwSuggestedBufferSize*: DWORD
    dwWidth*: DWORD
    dwHeight*: DWORD
    dwScale*: DWORD
    dwRate*: DWORD
    dwLength*: DWORD
    dwEditCount*: DWORD
    szFileType*: array[64, WCHAR]
  LPAVIFILEINFOW* = ptr AVIFILEINFOW
  AVIFILEINFOA* {.final, pure.} = object
    dwMaxBytesPerSec*: DWORD
    dwFlags*: DWORD
    dwCaps*: DWORD
    dwStreams*: DWORD
    dwSuggestedBufferSize*: DWORD
    dwWidth*: DWORD
    dwHeight*: DWORD
    dwScale*: DWORD
    dwRate*: DWORD
    dwLength*: DWORD
    dwEditCount*: DWORD
    szFileType*: array[64, char]
  LPAVIFILEINFOA* = ptr AVIFILEINFOA

when not defined(winansi):
  type
    AVIFILEINFO* = AVIFILEINFOW
    LPAVIFILEINFO* = LPAVIFILEINFOW

else:
  type
    AVIFILEINFO* = AVIFILEINFOA
    LPAVIFILEINFO* = LPAVIFILEINFOA

const
  AVIFILEINFO_HASINDEX* = 0x00000010
  AVIFILEINFO_MUSTUSEINDEX* = 0x00000020
  AVIFILEINFO_ISINTERLEAVED* = 0x00000100
  AVIFILEINFO_WASCAPTUREFILE* = 0x00010000
  AVIFILEINFO_COPYRIGHTED* = 0x00020000
  AVIFILECAPS_CANREAD* = 0x00000001
  AVIFILECAPS_CANWRITE* = 0x00000002
  AVIFILECAPS_ALLKEYFRAMES* = 0x00000010
  AVIFILECAPS_NOCOMPRESSION* = 0x00000020

type
  AVISAVECALLBACK* = proc (P1: int32): BOOL {.stdcall.}
  AVICOMPRESSOPTIONS* {.final, pure.} = object
    fccType*: DWORD
    fccHandler*: DWORD
    dwKeyFrameEvery*: DWORD
    dwQuality*: DWORD
    dwBytesPerSecond*: DWORD
    dwFlags*: DWORD
    lpFormat*: LPVOID
    cbFormat*: DWORD
    lpParms*: LPVOID
    cbParms*: DWORD
    dwInterleaveEvery*: DWORD
  LPAVICOMPRESSOPTIONS* = ptr AVICOMPRESSOPTIONS

const
  AVICOMPRESSF_INTERLEAVE* = 0x00000001
  AVICOMPRESSF_DATARATE* = 0x00000002
  AVICOMPRESSF_KEYFRAMES* = 0x00000004
  AVICOMPRESSF_VALID* = 0x00000008
  AVIERR_OK* = 0

proc MAKE_AVIERR*(error: DWORD): SCODE =
  MAKE_SCODE(SEVERITY_ERROR, FACILITY_ITF, 0x4000.DWORD + error)

const
  AVIERR_UNSUPPORTED* = MAKE_AVIERR( 101)
  AVIERR_BADFORMAT* = MAKE_AVIERR( 102)
  AVIERR_MEMORY* = MAKE_AVIERR( 103)
  AVIERR_INTERNAL* = MAKE_AVIERR( 104)
  AVIERR_BADFLAGS* = MAKE_AVIERR( 105)
  AVIERR_BADPARAM* = MAKE_AVIERR( 106)
  AVIERR_BADSIZE* = MAKE_AVIERR( 107)
  AVIERR_BADHANDLE* = MAKE_AVIERR( 108)
  AVIERR_FILEREAD* = MAKE_AVIERR( 109)
  AVIERR_FILEWRITE* = MAKE_AVIERR( 110)
  AVIERR_FILEOPEN* = MAKE_AVIERR( 111)
  AVIERR_COMPRESSOR* = MAKE_AVIERR( 112)
  AVIERR_NOCOMPRESSOR* = MAKE_AVIERR( 113)
  AVIERR_READONLY* = MAKE_AVIERR( 114)
  AVIERR_NODATA* = MAKE_AVIERR( 115)
  AVIERR_BUFFERTOOSMALL* = MAKE_AVIERR( 116)
  AVIERR_CANTCOMPRESS* = MAKE_AVIERR( 117)
  AVIERR_USERABORT* = MAKE_AVIERR( 198)
  AVIERR_ERROR* = MAKE_AVIERR( 199)
  MCIWND_WINDOW_CLASS* = "MCIWndClass"

proc MCIWndCreateA*(hwndParent: HWND, hInstance: HINSTANCE, dwStyle: DWORD, szFile: LPCSTR): HWND {.winapi, dynlib: "msvfw32", importc.}
proc MCIWndCreateW*(hwndParent: HWND, hInstance: HINSTANCE, dwStyle: DWORD, szFile: LPCWSTR): HWND {.winapi, dynlib: "msvfw32", importc.}

when not defined(winansi):
  proc MCIWndCreate*(hwndParent: HWND, hInstance: HINSTANCE, dwStyle: DWORD, szFile: LPCWSTR): HWND {.winapi, dynlib: "msvfw32", importc: "MCIWndCreateW".}

else:
  proc MCIWndCreate*(hwndParent: HWND, hInstance: HINSTANCE, dwStyle: DWORD, szFile: LPCSTR): HWND {.winapi, dynlib: "msvfw32", importc: "MCIWndCreateA".}
proc MCIWndRegisterClass*(): BOOL {.winapi, dynlib: "msvfw32", importc.}

const
  MCIWNDOPENF_NEW* = 0x0001
  MCIWNDF_NOAUTOSIZEWINDOW* = 0x0001
  MCIWNDF_NOPLAYBAR* = 0x0002
  MCIWNDF_NOAUTOSIZEMOVIE* = 0x0004
  MCIWNDF_NOMENU* = 0x0008
  MCIWNDF_SHOWNAME* = 0x0010
  MCIWNDF_SHOWPOS* = 0x0020
  MCIWNDF_SHOWMODE* = 0x0040
  MCIWNDF_SHOWALL* = 0x0070
  MCIWNDF_NOTIFYMODE* = 0x0100
  MCIWNDF_NOTIFYPOS* = 0x0200
  MCIWNDF_NOTIFYSIZE* = 0x0400
  MCIWNDF_NOTIFYERROR* = 0x1000
  MCIWNDF_NOTIFYALL* = 0x1F00
  MCIWNDF_NOTIFYANSI* = 0x0080
  MCIWNDF_NOTIFYMEDIAA* = 0x0880
  MCIWNDF_NOTIFYMEDIAW* = 0x0800

when not defined(winansi):
  const
    MCIWNDF_NOTIFYMEDIA* = MCIWNDF_NOTIFYMEDIAW

else:
  const
    MCIWNDF_NOTIFYMEDIA* = MCIWNDF_NOTIFYMEDIAA

const
  MCIWNDF_RECORD* = 0x2000
  MCIWNDF_NOERRORDLG* = 0x4000
  MCIWNDF_NOOPEN* = 0x8000

const
  MCIWNDM_GETDEVICEID* = WM_USER + 100
  MCIWNDM_SENDSTRINGA* = WM_USER + 101
  MCIWNDM_GETPOSITIONA* = WM_USER + 102
  MCIWNDM_GETSTART* = WM_USER + 103
  MCIWNDM_GETLENGTH* = WM_USER + 104
  MCIWNDM_GETEND* = WM_USER + 105
  MCIWNDM_GETMODEA* = WM_USER + 106
  MCIWNDM_EJECT* = WM_USER + 107
  MCIWNDM_SETZOOM* = WM_USER + 108
  MCIWNDM_GETZOOM* = WM_USER + 109
  MCIWNDM_SETVOLUME* = WM_USER + 110
  MCIWNDM_GETVOLUME* = WM_USER + 111
  MCIWNDM_SETSPEED* = WM_USER + 112
  MCIWNDM_GETSPEED* = WM_USER + 113
  MCIWNDM_SETREPEAT* = WM_USER + 114
  MCIWNDM_GETREPEAT* = WM_USER + 115
  MCIWNDM_REALIZE* = WM_USER + 118
  MCIWNDM_SETTIMEFORMATA* = WM_USER + 119
  MCIWNDM_GETTIMEFORMATA* = WM_USER + 120
  MCIWNDM_VALIDATEMEDIA* = WM_USER + 121
  MCIWNDM_PLAYFROM* = WM_USER + 122
  MCIWNDM_PLAYTO* = WM_USER + 123
  MCIWNDM_GETFILENAMEA* = WM_USER + 124
  MCIWNDM_GETDEVICEA* = WM_USER + 125
  MCIWNDM_GETPALETTE* = WM_USER + 126
  MCIWNDM_SETPALETTE* = WM_USER + 127
  MCIWNDM_GETERRORA* = WM_USER + 128
  MCIWNDM_SETTIMERS* = WM_USER + 129
  MCIWNDM_SETACTIVETIMER* = WM_USER + 130
  MCIWNDM_SETINACTIVETIMER* = WM_USER + 131
  MCIWNDM_GETACTIVETIMER* = WM_USER + 132
  MCIWNDM_GETINACTIVETIMER* = WM_USER + 133
  MCIWNDM_NEWA* = WM_USER + 134
  MCIWNDM_CHANGESTYLES* = WM_USER + 135
  MCIWNDM_GETSTYLES* = WM_USER + 136
  MCIWNDM_GETALIAS* = WM_USER + 137
  MCIWNDM_RETURNSTRINGA* = WM_USER + 138
  MCIWNDM_PLAYREVERSE* = WM_USER + 139
  MCIWNDM_GET_SOURCE* = WM_USER + 140
  MCIWNDM_PUT_SOURCE* = WM_USER + 141
  MCIWNDM_GET_DEST* = WM_USER + 142
  MCIWNDM_PUT_DEST* = WM_USER + 143
  MCIWNDM_CAN_PLAY* = WM_USER + 144
  MCIWNDM_CAN_WINDOW* = WM_USER + 145
  MCIWNDM_CAN_RECORD* = WM_USER + 146
  MCIWNDM_CAN_SAVE* = WM_USER + 147
  MCIWNDM_CAN_EJECT* = WM_USER + 148
  MCIWNDM_CAN_CONFIG* = WM_USER + 149
  MCIWNDM_PALETTEKICK* = WM_USER + 150
  MCIWNDM_OPENINTERFACE* = WM_USER + 151
  MCIWNDM_SETOWNER* = WM_USER + 152
  MCIWNDM_OPENA* = WM_USER + 153
  MCIWNDM_SENDSTRINGW* = WM_USER + 201
  MCIWNDM_GETPOSITIONW* = WM_USER + 202
  MCIWNDM_GETMODEW* = WM_USER + 206
  MCIWNDM_SETTIMEFORMATW* = WM_USER + 219
  MCIWNDM_GETTIMEFORMATW* = WM_USER + 220
  MCIWNDM_GETFILENAMEW* = WM_USER + 224
  MCIWNDM_GETDEVICEW* = WM_USER + 225
  MCIWNDM_GETERRORW* = WM_USER + 228
  MCIWNDM_NEWW* = WM_USER + 234
  MCIWNDM_RETURNSTRINGW* = WM_USER + 238
  MCIWNDM_OPENW* = WM_USER + 252

when not defined(winansi):
  const
    MCIWNDM_SENDSTRING* = MCIWNDM_SENDSTRINGW
    MCIWNDM_GETPOSITION* = MCIWNDM_GETPOSITIONW
    MCIWNDM_GETMODE* = MCIWNDM_GETMODEW
    MCIWNDM_SETTIMEFORMAT* = MCIWNDM_SETTIMEFORMATW
    MCIWNDM_GETTIMEFORMAT* = MCIWNDM_GETTIMEFORMATW
    MCIWNDM_GETFILENAME* = MCIWNDM_GETFILENAMEW
    MCIWNDM_GETDEVICE* = MCIWNDM_GETDEVICEW
    MCIWNDM_GETERROR* = MCIWNDM_GETERRORW
    MCIWNDM_NEW* = MCIWNDM_NEWW
    MCIWNDM_RETURNSTRING* = MCIWNDM_RETURNSTRINGW
    MCIWNDM_OPEN* = MCIWNDM_OPENW

else:
  const
    MCIWNDM_SENDSTRING* = MCIWNDM_SENDSTRINGA
    MCIWNDM_GETPOSITION* = MCIWNDM_GETPOSITIONA
    MCIWNDM_GETMODE* = MCIWNDM_GETMODEA
    MCIWNDM_SETTIMEFORMAT* = MCIWNDM_SETTIMEFORMATA
    MCIWNDM_GETTIMEFORMAT* = MCIWNDM_GETTIMEFORMATA
    MCIWNDM_GETFILENAME* = MCIWNDM_GETFILENAMEA
    MCIWNDM_GETDEVICE* = MCIWNDM_GETDEVICEA
    MCIWNDM_GETERROR* = MCIWNDM_GETERRORA
    MCIWNDM_NEW* = MCIWNDM_NEWA
    MCIWNDM_RETURNSTRING* = MCIWNDM_RETURNSTRINGA
    MCIWNDM_OPEN* = MCIWNDM_OPENA

const
  MCIWNDM_NOTIFYMODE* = WM_USER + 200
  MCIWNDM_NOTIFYPOS* = WM_USER + 201
  MCIWNDM_NOTIFYSIZE* = WM_USER + 202
  MCIWNDM_NOTIFYMEDIA* = WM_USER + 203
  MCIWNDM_NOTIFYERROR* = WM_USER + 205
  MCIWND_START* = -1
  mCIWND_END* = -2
  # MCI_CLOSE* = 0x0804
  # MCI_PLAY* = 0x0806
  # MCI_SEEK* = 0x0807
  # MCI_STOP* = 0x0808
  # MCI_PAUSE* = 0x0809
  # MCI_STEP* = 0x080E
  # MCI_RECORD* = 0x080F
  # MCI_SAVE* = 0x0813
  # MCI_CUT* = 0x0851
  # MCI_COPY* = 0x0852
  # MCI_PASTE* = 0x0853
  # MCI_RESUME* = 0x0855
  # MCI_DELETE* = 0x0856
  # MCI_MODE_NOT_READY* = 524
  # MCI_MODE_STOP* = 525
  # MCI_MODE_PLAY* = 526
  # MCI_MODE_RECORD* = 527
  # MCI_MODE_SEEK* = 528
  # MCI_MODE_PAUSE* = 529
  # MCI_MODE_OPEN* = 530

proc MCIWndCanPlay*(hwnd: HWND): BOOL =
  return cast[BOOL](SendMessage(hwnd, MCIWNDM_CAN_PLAY, 0, 0))

proc MCIWndCanRecord*(hwnd: HWND): BOOL =
  return cast[BOOL](SendMessage(hwnd, MCIWNDM_CAN_RECORD, 0, 0))

proc MCIWndCanSave*(hwnd: HWND): BOOL =
  return cast[BOOL](SendMessage(hwnd, MCIWNDM_CAN_SAVE, 0, 0))

proc MCIWndCanWindow*(hwnd: HWND): BOOL =
  return cast[BOOL](SendMessage(hwnd, MCIWNDM_CAN_WINDOW, 0, 0))

proc MCIWndCanEject*(hwnd: HWND): BOOL =
  return cast[BOOL](SendMessage(hwnd, MCIWNDM_CAN_EJECT, 0, 0))

proc MCIWndCanConfig*(hwnd: HWND): BOOL =
  return cast[BOOL](SendMessage(hwnd, MCIWNDM_CAN_CONFIG, 0, 0))

proc MCIWndPaletteKick*(hwnd: HWND): BOOL =
  return cast[BOOL](SendMessage(hwnd, MCIWNDM_PALETTEKICK, 0, 0))

proc MCIWndSave*(hwnd: HWND, szFile: LPVOID): LONG =
  return cast[LONG](SendMessage(hwnd, MCI_SAVE, 0, cast[LPARAM](szFile)))

proc MCIWndSaveDialog*(hwnd: HWND): LONG =
  return MCIWndSave(hwnd, cast[LPVOID](-1))

proc MCIWndNew*(hwnd: HWND, lp: LPVOID): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_NEW, 0, cast[LPARAM](lp)))

proc MCIWndRecord*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCI_RECORD, 0, 0))

proc MCIWndOpen*(hwnd: HWND, sz: LPVOID, f: UINT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_OPEN, cast[WPARAM](f), cast[LPARAM](sz)))

proc MCIWndOpenDialog*(hwnd: HWND): LONG =
  return MCIWndOpen(hwnd, cast[LPVOID](-1), 0)

proc MCIWndClose*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCI_CLOSE, 0, 0))

proc MCIWndPlay*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCI_PLAY, 0, 0))

proc MCIWndStop*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCI_STOP, 0, 0))

proc MCIWndPause*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCI_PAUSE, 0, 0))

proc MCIWndResume*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCI_RESUME, 0, 0))

proc MCIWndSeek*(hwnd: HWND, lPos: LONG): LONG =
  return cast[LONG](SendMessage(hwnd, MCI_SEEK, 0, cast[LPARAM](lPos)))

proc MCIWndHome*(hwnd: HWND): LONG =
  return MCIWndSeek(hwnd, MCIWND_START)

proc MCIWndEnd*(hwnd: HWND): LONG =
  return MCIWndSeek(hwnd, mCIWND_END)

proc MCIWndEject*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_EJECT, 0, 0))

proc MCIWndGetSource*(hwnd: HWND, prc: LPRECT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GET_SOURCE, 0, cast[LPARAM](prc)))

proc MCIWndPutSource*(hwnd: HWND, prc: LPRECT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_PUT_SOURCE, 0, cast[LPARAM](prc)))

proc MCIWndGetDest*(hwnd: HWND, prc: LPRECT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GET_DEST, 0, cast[LPARAM](prc)))

proc MCIWndPutDest*(hwnd: HWND, prc: LPRECT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_PUT_DEST, 0, cast[LPARAM](prc)))

proc MCIWndPlayReverse*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_PLAYREVERSE, 0, 0))

proc MCIWndPlayFrom*(hwnd: HWND, lPos: LONG): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_PLAYFROM, 0, cast[LPARAM](lPos)))

proc MCIWndPlayTo*(hwnd: HWND, lPos: LONG): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_PLAYTO, 0, cast[LPARAM](lPos)))

proc MCIWndPlayFromTo*(hwnd: HWND, lStart: LONG, lEnd: LONG): LONG =
  discard MCIWndSeek(hwnd, lStart)
  return MCIWndPlayTo(hwnd, lEnd)

proc MCIWndGetDeviceID*(hwnd: HWND): UINT =
  return cast[UINT](SendMessage(hwnd, MCIWNDM_GETDEVICEID, 0, 0))

proc MCIWndGetAlias*(hwnd: HWND): UINT =
  return cast[UINT](SendMessage(hwnd, MCIWNDM_GETALIAS, 0, 0))

proc MCIWndGetMode*(hwnd: HWND, lp: LPTSTR, L: UINT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETMODE, cast[WPARAM](L), cast[LPARAM](lp)))

proc MCIWndGetPosition*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETPOSITION, 0, 0))

proc MCIWndGetPositionString*(hwnd: HWND, lp: LPTSTR, L: UINT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETPOSITION, cast[WPARAM](L), cast[LPARAM](lp)))

proc MCIWndGetStart*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETSTART, 0, 0))

proc MCIWndGetLength*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETLENGTH, 0, 0))

proc MCIWndGetEnd*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETEND, 0, 0))

proc MCIWndStep*(hwnd: HWND, n: LONG): LONG =
  return cast[LONG](SendMessage(hwnd, MCI_STEP, 0, cast[LPARAM](n)))

proc MCIWndDestroy*(hwnd: HWND): void =
  discard SendMessage(hwnd, WM_CLOSE, 0, 0)

proc MCIWndSetZoom*(hwnd: HWND, iZoom: UINT): void =
  discard SendMessage(hwnd, MCIWNDM_SETZOOM, 0, cast[LPARAM](iZoom))

proc MCIWndGetZoom*(hwnd: HWND): UINT =
  return cast[UINT](SendMessage(hwnd, MCIWNDM_GETZOOM, 0, 0))

proc MCIWndSetVolume*(hwnd: HWND, iVol: UINT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_SETVOLUME, 0, cast[LPARAM](iVol)))

proc MCIWndGetVolume*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETVOLUME, 0, 0))

proc MCIWndSetSpeed*(hwnd: HWND, iSpeed: UINT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_SETSPEED, 0, cast[LPARAM](iSpeed)))

proc MCIWndGetSpeed*(hwnd: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETSPEED, 0, 0))

proc MCIWndSetTimeFormat*(hwnd: HWND, lp: LPTSTR): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_SETTIMEFORMAT, 0, cast[LPARAM](lp)))

template MCIWndUseFrames*(hwnd: HWND): LONG =
  MCIWndSetTimeFormat(hwnd, T"frames")

template MCIWndUseTime*(hwnd: HWND): LONG =
  MCIWndSetTimeFormat(hwnd, T"ms")

proc MCIWndGetTimeFormat*(hwnd: HWND, lp: LPTSTR, L: UINT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETTIMEFORMAT, cast[WPARAM](L), cast[LPARAM](lp)))

proc MCIWndValidateMedia*(hwnd: HWND): void =
  discard SendMessage(hwnd, MCIWNDM_VALIDATEMEDIA, 0, 0)

proc MCIWndSetRepeat*(hwnd: HWND, f: BOOL): void =
  discard SendMessage(hwnd, MCIWNDM_SETREPEAT, 0, cast[LPARAM](f))

proc MCIWndGetRepeat*(hwnd: HWND): BOOL =
  return cast[BOOL](SendMessage(hwnd, MCIWNDM_GETREPEAT, 0, 0))

proc MCIWndSetActiveTimer*(hwnd: HWND, active: UINT): void =
  discard SendMessage(hwnd, MCIWNDM_SETACTIVETIMER, cast[WPARAM](active), 0)

proc MCIWndSetInactiveTimer*(hwnd: HWND, inactive: UINT): void =
  discard SendMessage(hwnd, MCIWNDM_SETINACTIVETIMER, cast[WPARAM](inactive), 0)

proc MCIWndSetTimers*(hwnd: HWND, active: UINT, inactive: UINT): void =
  discard SendMessage(hwnd, MCIWNDM_SETTIMERS, cast[WPARAM](active), cast[LPARAM](inactive))

proc MCIWndGetActiveTimer*(hwnd: HWND): UINT =
  return cast[UINT](SendMessage(hwnd, MCIWNDM_GETACTIVETIMER, 0, 0))

proc MCIWndGetInactiveTimer*(hwnd: HWND): UINT =
  return cast[UINT](SendMessage(hwnd, MCIWNDM_GETINACTIVETIMER, 0, 0))

proc MCIWndRealize*(hwnd: HWND, fBkgnd: BOOL): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_REALIZE, cast[WPARAM](fBkgnd), 0))

proc MCIWndSendString*(hwnd: HWND, sz: LPTSTR): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_SENDSTRING, 0, cast[LPARAM](sz)))

proc MCIWndReturnString*(hwnd: HWND, lp: LPVOID, L: UINT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_RETURNSTRING, cast[WPARAM](L), cast[LPARAM](lp)))

proc MCIWndGetError*(hwnd: HWND, lp: LPVOID, L: UINT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETERROR, cast[WPARAM](L), cast[LPARAM](lp)))

proc MCIWndGetPalette*(hwnd: HWND): HPALETTE =
  return cast[HPALETTE](SendMessage(hwnd, MCIWNDM_GETPALETTE, 0, 0))

proc MCIWndSetPalette*(hwnd: HWND, hpal: HPALETTE): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_SETPALETTE, cast[WPARAM](hpal), 0))

proc MCIWndGetFileName*(hwnd: HWND, lp: LPVOID, L: UINT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETFILENAME, cast[WPARAM](L), cast[LPARAM](lp)))

proc MCIWndGetDevice*(hwnd: HWND, lp: LPVOID, L: UINT): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_GETDEVICE, cast[WPARAM](L), cast[LPARAM](lp)))

proc MCIWndGetStyles*(hwnd: HWND): UINT =
  return cast[UINT](SendMessage(hwnd, MCIWNDM_GETSTYLES, 0, 0).UINT)

proc MCIWndChangeStyles*(hwnd: HWND, mask: UINT, value: LONG): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_CHANGESTYLES, cast[WPARAM](mask), cast[LPARAM](value)))

proc MCIWndOpenInterface*(hwnd: HWND, pUnk: LPUNKNOWN): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_OPENINTERFACE, 0, cast[LPARAM](pUnk)))

proc MCIWndSetOwner*(hwnd: HWND, hwndP: HWND): LONG =
  return cast[LONG](SendMessage(hwnd, MCIWNDM_SETOWNER, cast[WPARAM](hwndP), 0))

type
  HVIDEO* = HANDLE
  LPHVIDEO* = ptr HVIDEO

const
  DV_ERR_OK* = 0
  DV_ERR_BASE* = 1
  DV_ERR_NONSPECIFIC* = DV_ERR_BASE
  DV_ERR_BADFORMAT* = DV_ERR_BASE + 1
  DV_ERR_STILLPLAYING* = DV_ERR_BASE + 2
  DV_ERR_UNPREPARED* = DV_ERR_BASE + 3
  DV_ERR_SYNC* = DV_ERR_BASE + 4
  DV_ERR_TOOMANYCHANNELS* = DV_ERR_BASE + 5
  DV_ERR_NOTDETECTED* = DV_ERR_BASE + 6
  DV_ERR_BADINSTALL* = DV_ERR_BASE + 7
  DV_ERR_CREATEPALETTE* = DV_ERR_BASE + 8
  DV_ERR_SIZEFIELD* = DV_ERR_BASE + 9
  DV_ERR_PARAM1* = DV_ERR_BASE + 10
  DV_ERR_PARAM2* = DV_ERR_BASE + 11
  DV_ERR_CONFIG1* = DV_ERR_BASE + 12
  DV_ERR_CONFIG2* = DV_ERR_BASE + 13
  DV_ERR_FLAGS* = DV_ERR_BASE + 14
  DV_ERR_13* = DV_ERR_BASE + 15
  DV_ERR_NOTSUPPORTED* = DV_ERR_BASE + 16
  DV_ERR_NOMEM* = DV_ERR_BASE + 17
  DV_ERR_ALLOCATED* = DV_ERR_BASE + 18
  DV_ERR_BADDEVICEID* = DV_ERR_BASE + 19
  DV_ERR_INVALHANDLE* = DV_ERR_BASE + 20
  DV_ERR_BADERRNUM* = DV_ERR_BASE + 21
  DV_ERR_NO_BUFFERS* = DV_ERR_BASE + 22
  DV_ERR_MEM_CONFLICT* = DV_ERR_BASE + 23
  DV_ERR_IO_CONFLICT* = DV_ERR_BASE + 24
  DV_ERR_DMA_CONFLICT* = DV_ERR_BASE + 25
  DV_ERR_INT_CONFLICT* = DV_ERR_BASE + 26
  DV_ERR_PROTECT_ONLY* = DV_ERR_BASE + 27
  DV_ERR_LASTERROR* = DV_ERR_BASE + 27
  DV_ERR_USER_MSG* = DV_ERR_BASE + 1000
  # MM_DRVM_OPEN* = 0x3D0
  # MM_DRVM_CLOSE* = 0x3D1
  # MM_DRVM_DATA* = 0x3D2
  # MM_DRVM_ERROR* = 0x3D3
  DV_VM_OPEN* = MM_DRVM_OPEN
  DV_VM_CLOSE* = MM_DRVM_CLOSE
  DV_VM_DATA* = MM_DRVM_DATA
  DV_VM_ERROR* = MM_DRVM_ERROR

type
  VIDEOHDR* {.final, pure.} = object
    lpData*: LPBYTE
    dwBufferLength*: DWORD
    dwBytesUsed*: DWORD
    dwTimeCaptured*: DWORD
    dwUser*: DWORD_PTR
    dwFlags*: DWORD
    dwReserved*: array[4, DWORD_PTR]
  PVIDEOHDR* = ptr VIDEOHDR
  LPVIDEOHDR* = ptr VIDEOHDR

const
  VHDR_DONE* = 0x00000001
  VHDR_PREPARED* = 0x00000002
  VHDR_INQUEUE* = 0x00000004
  VHDR_KEYFRAME* = 0x00000008
  VHDR_VALID* = 0x0000000F

type
  CHANNEL_CAPS* {.final, pure.} = object
    dwFlags*: DWORD
    dwSrcRectXMod*: DWORD
    dwSrcRectYMod*: DWORD
    dwSrcRectWidthMod*: DWORD
    dwSrcRectHeightMod*: DWORD
    dwDstRectXMod*: DWORD
    dwDstRectYMod*: DWORD
    dwDstRectWidthMod*: DWORD
    dwDstRectHeightMod*: DWORD
  PCHANNEL_CAPS* = ptr CHANNEL_CAPS
  LPCHANNEL_CAPS* = ptr CHANNEL_CAPS

const
  VCAPS_OVERLAY* = 0x00000001
  VCAPS_SRC_CAN_CLIP* = 0x00000002
  VCAPS_DST_CAN_CLIP* = 0x00000004
  VCAPS_CAN_SCALE* = 0x00000008
  VIDEO_EXTERNALIN* = 0x0001
  VIDEO_EXTERNALOUT* = 0x0002
  VIDEO_IN* = 0x0004
  VIDEO_OUT* = 0x0008
  VIDEO_DLG_QUERY* = 0x0010
  VIDEO_CONFIGURE_QUERYSIZE* = 0x0001
  VIDEO_CONFIGURE_CURRENT* = 0x0010
  VIDEO_CONFIGURE_NOMINAL* = 0x0020
  VIDEO_CONFIGURE_MIN* = 0x0040
  VIDEO_CONFIGURE_MAX* = 0x0080
  VIDEO_CONFIGURE_SET* = 0x1000
  VIDEO_CONFIGURE_GET* = 0x2000
  VIDEO_CONFIGURE_QUERY* = 0x8000
  DVM_USER* = 0x4000
  DVM_CONFIGURE_START* = 0x1000
  DVM_CONFIGURE_END* = 0x1FFF
  DVM_PALETTE* = DVM_CONFIGURE_START + 1
  DVM_FORMAT* = DVM_CONFIGURE_START + 2
  DVM_PALETTERGB555* = DVM_CONFIGURE_START + 3
  DVM_SRC_RECT* = DVM_CONFIGURE_START + 4
  DVM_DST_RECT* = DVM_CONFIGURE_START + 5

proc AVICapSM*(hWnd: HWND, msg: UINT, wParam: WPARAM, lParam: LPARAM): LRESULT =
  if IsWindow(hWnd) != FALSE:
    return SendMessage(hWnd, msg, wParam, lParam)

const
  WM_CAP_START* = WM_USER
  WM_CAP_UNICODE_START* = WM_USER + 100
  WM_CAP_GET_CAPSTREAMPTR* = WM_CAP_START + 1
  WM_CAP_SET_CALLBACK_ERRORA* = WM_CAP_START + 2
  WM_CAP_SET_CALLBACK_STATUSA* = WM_CAP_START + 3
  WM_CAP_SET_CALLBACK_ERRORW* = WM_CAP_UNICODE_START + 2
  WM_CAP_SET_CALLBACK_STATUSW* = WM_CAP_UNICODE_START + 3

when not defined(winansi):
  const
    WM_CAP_SET_CALLBACK_ERROR* = WM_CAP_SET_CALLBACK_ERRORW
    WM_CAP_SET_CALLBACK_STATUS* = WM_CAP_SET_CALLBACK_STATUSW

else:
  const
    WM_CAP_SET_CALLBACK_ERROR* = WM_CAP_SET_CALLBACK_ERRORA
    WM_CAP_SET_CALLBACK_STATUS* = WM_CAP_SET_CALLBACK_STATUSA

const
  WM_CAP_SET_CALLBACK_YIELD* = WM_CAP_START + 4
  WM_CAP_SET_CALLBACK_FRAME* = WM_CAP_START + 5
  WM_CAP_SET_CALLBACK_VIDEOSTREAM* = WM_CAP_START + 6
  WM_CAP_SET_CALLBACK_WAVESTREAM* = WM_CAP_START + 7
  WM_CAP_GET_USER_DATA* = WM_CAP_START + 8
  WM_CAP_SET_USER_DATA* = WM_CAP_START + 9
  WM_CAP_DRIVER_CONNECT* = WM_CAP_START + 10
  WM_CAP_DRIVER_DISCONNECT* = WM_CAP_START + 11
  WM_CAP_DRIVER_GET_NAMEA* = WM_CAP_START + 12
  WM_CAP_DRIVER_GET_VERSIONA* = WM_CAP_START + 13
  WM_CAP_DRIVER_GET_NAMEW* = WM_CAP_UNICODE_START + 12
  WM_CAP_DRIVER_GET_VERSIONW* = WM_CAP_UNICODE_START + 13

when not defined(winansi):
  const
    WM_CAP_DRIVER_GET_NAME* = WM_CAP_DRIVER_GET_NAMEW
    WM_CAP_DRIVER_GET_VERSION* = WM_CAP_DRIVER_GET_VERSIONW

else:
  const
    WM_CAP_DRIVER_GET_NAME* = WM_CAP_DRIVER_GET_NAMEA
    WM_CAP_DRIVER_GET_VERSION* = WM_CAP_DRIVER_GET_VERSIONA

const
  WM_CAP_DRIVER_GET_CAPS* = WM_CAP_START + 14
  WM_CAP_FILE_SET_CAPTURE_FILEA* = WM_CAP_START + 20
  WM_CAP_FILE_GET_CAPTURE_FILEA* = WM_CAP_START + 21
  WM_CAP_FILE_SAVEASA* = WM_CAP_START + 23
  WM_CAP_FILE_SAVEDIBA* = WM_CAP_START + 25
  WM_CAP_FILE_SET_CAPTURE_FILEW* = WM_CAP_UNICODE_START + 20
  WM_CAP_FILE_GET_CAPTURE_FILEW* = WM_CAP_UNICODE_START + 21
  WM_CAP_FILE_SAVEASW* = WM_CAP_UNICODE_START + 23
  WM_CAP_FILE_SAVEDIBW* = WM_CAP_UNICODE_START + 25

when not defined(winansi):
  const
    WM_CAP_FILE_SET_CAPTURE_FILE* = WM_CAP_FILE_SET_CAPTURE_FILEW
    WM_CAP_FILE_GET_CAPTURE_FILE* = WM_CAP_FILE_GET_CAPTURE_FILEW
    WM_CAP_FILE_SAVEAS* = WM_CAP_FILE_SAVEASW
    WM_CAP_FILE_SAVEDIB* = WM_CAP_FILE_SAVEDIBW

else:
  const
    WM_CAP_FILE_SET_CAPTURE_FILE* = WM_CAP_FILE_SET_CAPTURE_FILEA
    WM_CAP_FILE_GET_CAPTURE_FILE* = WM_CAP_FILE_GET_CAPTURE_FILEA
    WM_CAP_FILE_SAVEAS* = WM_CAP_FILE_SAVEASA
    WM_CAP_FILE_SAVEDIB* = WM_CAP_FILE_SAVEDIBA

const
  WM_CAP_FILE_ALLOCATE* = WM_CAP_START + 22
  WM_CAP_FILE_SET_INFOCHUNK* = WM_CAP_START + 24
  WM_CAP_EDIT_COPY* = WM_CAP_START + 30
  WM_CAP_SET_AUDIOFORMAT* = WM_CAP_START + 35
  WM_CAP_GET_AUDIOFORMAT* = WM_CAP_START + 36
  WM_CAP_DLG_VIDEOFORMAT* = WM_CAP_START + 41
  WM_CAP_DLG_VIDEOSOURCE* = WM_CAP_START + 42
  WM_CAP_DLG_VIDEODISPLAY* = WM_CAP_START + 43
  WM_CAP_GET_VIDEOFORMAT* = WM_CAP_START + 44
  WM_CAP_SET_VIDEOFORMAT* = WM_CAP_START + 45
  WM_CAP_DLG_VIDEOCOMPRESSION* = WM_CAP_START + 46
  WM_CAP_SET_PREVIEW* = WM_CAP_START + 50
  WM_CAP_SET_OVERLAY* = WM_CAP_START + 51
  WM_CAP_SET_PREVIEWRATE* = WM_CAP_START + 52
  WM_CAP_SET_SCALE* = WM_CAP_START + 53
  WM_CAP_GET_STATUS* = WM_CAP_START + 54
  WM_CAP_SET_SCROLL* = WM_CAP_START + 55
  WM_CAP_GRAB_FRAME* = WM_CAP_START + 60
  WM_CAP_GRAB_FRAME_NOSTOP* = WM_CAP_START + 61
  WM_CAP_SEQUENCE* = WM_CAP_START + 62
  WM_CAP_SEQUENCE_NOFILE* = WM_CAP_START + 63
  WM_CAP_SET_SEQUENCE_SETUP* = WM_CAP_START + 64
  WM_CAP_GET_SEQUENCE_SETUP* = WM_CAP_START + 65
  WM_CAP_SET_MCI_DEVICEA* = WM_CAP_START + 66
  WM_CAP_GET_MCI_DEVICEA* = WM_CAP_START + 67
  WM_CAP_SET_MCI_DEVICEW* = WM_CAP_UNICODE_START + 66
  WM_CAP_GET_MCI_DEVICEW* = WM_CAP_UNICODE_START + 67

when not defined(winansi):
  const
    WM_CAP_SET_MCI_DEVICE* = WM_CAP_SET_MCI_DEVICEW
    WM_CAP_GET_MCI_DEVICE* = WM_CAP_GET_MCI_DEVICEW

else:
  const
    WM_CAP_SET_MCI_DEVICE* = WM_CAP_SET_MCI_DEVICEA
    WM_CAP_GET_MCI_DEVICE* = WM_CAP_GET_MCI_DEVICEA

const
  WM_CAP_STOP* = WM_CAP_START + 68
  WM_CAP_ABORT* = WM_CAP_START + 69
  WM_CAP_SINGLE_FRAME_OPEN* = WM_CAP_START + 70
  WM_CAP_SINGLE_FRAME_CLOSE* = WM_CAP_START + 71
  WM_CAP_SINGLE_FRAME* = WM_CAP_START + 72
  WM_CAP_PAL_OPENA* = WM_CAP_START + 80
  WM_CAP_PAL_SAVEA* = WM_CAP_START + 81
  WM_CAP_PAL_OPENW* = WM_CAP_UNICODE_START + 80
  WM_CAP_PAL_SAVEW* = WM_CAP_UNICODE_START + 81

when not defined(winansi):
  const
    WM_CAP_PAL_OPEN* = WM_CAP_PAL_OPENW
    WM_CAP_PAL_SAVE* = WM_CAP_PAL_SAVEW

else:
  const
    WM_CAP_PAL_OPEN* = WM_CAP_PAL_OPENA
    WM_CAP_PAL_SAVE* = WM_CAP_PAL_SAVEA

const
  WM_CAP_PAL_PASTE* = WM_CAP_START + 82
  WM_CAP_PAL_AUTOCREATE* = WM_CAP_START + 83
  WM_CAP_PAL_MANUALCREATE* = WM_CAP_START + 84
  WM_CAP_SET_CALLBACK_CAPCONTROL* = WM_CAP_START + 85
  WM_CAP_UNICODE_END* = WM_CAP_PAL_SAVEW
  WM_CAP_END* = WM_CAP_UNICODE_END


type
  CAPDRIVERCAPS* {.final, pure.} = object
    wDeviceIndex*: UINT
    fHasOverlay*: BOOL
    fHasDlgVideoSource*: BOOL
    fHasDlgVideoFormat*: BOOL
    fHasDlgVideoDisplay*: BOOL
    fCaptureInitialized*: BOOL
    fDriverSuppliesPalettes*: BOOL
    hVideoIn*: HANDLE
    hVideoOut*: HANDLE
    hVideoExtIn*: HANDLE
    hVideoExtOut*: HANDLE
  PCAPDRIVERCAPS* = ptr CAPDRIVERCAPS
  LPCAPDRIVERCAPS* = ptr CAPDRIVERCAPS
  CAPSTATUS* {.final, pure.} = object
    uiImageWidth*: UINT
    uiImageHeight*: UINT
    fLiveWindow*: BOOL
    fOverlayWindow*: BOOL
    fScale*: BOOL
    ptScroll*: POINT
    fUsingDefaultPalette*: BOOL
    fAudioHardware*: BOOL
    fCapFileExists*: BOOL
    dwCurrentVideoFrame*: DWORD
    dwCurrentVideoFramesDropped*: DWORD
    dwCurrentWaveSamples*: DWORD
    dwCurrentTimeElapsedMS*: DWORD
    hPalCurrent*: HPALETTE
    fCapturingNow*: BOOL
    dwReturn*: DWORD
    wNumVideoAllocated*: UINT
    wNumAudioAllocated*: UINT
  PCAPSTATUS* = ptr CAPSTATUS
  LPCAPSTATUS* = ptr CAPSTATUS
  CAPTUREPARMS* {.final, pure.} = object
    dwRequestMicroSecPerFrame*: DWORD
    fMakeUserHitOKToCapture*: BOOL
    wPercentDropForError*: UINT
    fYield*: BOOL
    dwIndexSize*: DWORD
    wChunkGranularity*: UINT
    fUsingDOSMemory*: BOOL
    wNumVideoRequested*: UINT
    fCaptureAudio*: BOOL
    wNumAudioRequested*: UINT
    vKeyAbort*: UINT
    fAbortLeftMouse*: BOOL
    fAbortRightMouse*: BOOL
    fLimitEnabled*: BOOL
    wTimeLimit*: UINT
    fMCIControl*: BOOL
    fStepMCIDevice*: BOOL
    dwMCIStartTime*: DWORD
    dwMCIStopTime*: DWORD
    fStepCaptureAt2x*: BOOL
    wStepCaptureAverageFrames*: UINT
    dwAudioBufferSize*: DWORD
    fDisableWriteCache*: BOOL
    AVStreamMaster*: UINT
  PCAPTUREPARMS* = ptr CAPTUREPARMS
  LPCAPTUREPARMS* = ptr CAPTUREPARMS

const
  AVSTREAMMASTER_AUDIO* = 0
  AVSTREAMMASTER_NONE* = 1

type
  CAPINFOCHUNK* {.final, pure.} = object
    fccInfoID*: FOURCC
    lpData*: LPVOID
    cbData*: LONG
  PCAPINFOCHUNK* = ptr CAPINFOCHUNK
  LPCAPINFOCHUNK* = ptr CAPINFOCHUNK

proc capSetCallbackOnError*(hWnd: HWND, fpProc: LPVOID): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_CALLBACK_ERROR, 0, cast[LPARAM](fpProc)))

proc capSetCallbackOnStatus*(hWnd: HWND, fpProc: LPVOID): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_CALLBACK_STATUS, 0, cast[LPARAM](fpProc)))

proc capSetCallbackOnYield*(hWnd: HWND, fpProc: LPVOID): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_CALLBACK_YIELD, 0, cast[LPARAM](fpProc)))

proc capSetCallbackOnFrame*(hWnd: HWND, fpProc: LPVOID): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_CALLBACK_FRAME, 0, cast[LPARAM](fpProc)))

proc capSetCallbackOnVideoStream*(hWnd: HWND, fpProc: LPVOID): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_CALLBACK_VIDEOSTREAM, 0, cast[LPARAM](fpProc)))

proc capSetCallbackOnWaveStream*(hWnd: HWND, fpProc: LPVOID): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_CALLBACK_WAVESTREAM, 0, cast[LPARAM](fpProc)))

proc capSetCallbackOnCapControl*(hWnd: HWND, fpProc: LPVOID): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_CALLBACK_CAPCONTROL, 0, cast[LPARAM](fpProc)))

proc capSetUserData*(hWnd: HWND, lUser: LPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_USER_DATA, 0, lUser))

proc capGetUserData*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_GET_USER_DATA, 0, 0))

proc capDriverConnect*(hWnd: HWND, i: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_DRIVER_CONNECT, i, 0))

proc capDriverDisconnect*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_DRIVER_DISCONNECT, 0, 0))

proc capDriverGetName*(hWnd: HWND, szName: LPTSTR, wSize: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_DRIVER_GET_NAME, wSize, cast[LPARAM](szName)))

proc capDriverGetVersion*(hWnd: HWND, szVer: LPTSTR, wSize: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_DRIVER_GET_VERSION, wSize, cast[LPARAM](szVer)))

proc capDriverGetCaps*(hWnd: HWND, s: LPCAPDRIVERCAPS, wSize: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_DRIVER_GET_CAPS, wSize, cast[LPARAM](s)))

proc capFileSetCaptureFile*(hWnd: HWND, szName: LPTSTR): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_FILE_SET_CAPTURE_FILE, 0, cast[LPARAM](szName)))

proc capFileGetCaptureFile*(hWnd: HWND, szName: LPTSTR, wSize: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_FILE_GET_CAPTURE_FILE, wSize, cast[LPARAM](szName)))

proc capFileAlloc*(hWnd: HWND, wSize: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_FILE_ALLOCATE, wSize, 0))

proc capFileSaveAs*(hWnd: HWND, szName: LPTSTR): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_FILE_SAVEAS, 0, cast[LPARAM](szName)))

proc capFileSetInfoChunk*(hWnd: HWND, lpInfoChunk: LPCAPINFOCHUNK): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_FILE_SET_INFOCHUNK, 0, cast[LPARAM](lpInfoChunk)))

proc capFileSaveDIB*(hWnd: HWND, szName: LPTSTR): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_FILE_SAVEDIB, 0, cast[LPARAM](szName)))

proc capEditCopy*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_EDIT_COPY, 0, 0))

proc capSetAudioFormat*(hWnd: HWND, s: LPWAVEFORMATEX, wSize: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_AUDIOFORMAT, wSize, cast[LPARAM](s)))

proc capGetAudioFormat*(hWnd: HWND, s: LPWAVEFORMATEX, wSize: WPARAM): DWORD =
  return cast[DWORD](AVICapSM(hWnd, WM_CAP_GET_AUDIOFORMAT, wSize, cast[LPARAM](s)))

proc capGetAudioFormatSize*(hWnd: HWND): DWORD =
  return cast[DWORD](AVICapSM(hWnd, WM_CAP_GET_AUDIOFORMAT, 0, 0))

proc capDlgVideoFormat*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_DLG_VIDEOFORMAT, 0, 0))

proc capDlgVideoSource*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_DLG_VIDEOSOURCE, 0, 0))

proc capDlgVideoDisplay*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_DLG_VIDEODISPLAY, 0, 0))

proc capDlgVideoCompression*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_DLG_VIDEOCOMPRESSION, 0, 0))

proc capGetVideoFormat*(hWnd: HWND, s: pointer, wSize: WPARAM): DWORD =
  return cast[DWORD](AVICapSM(hWnd, WM_CAP_GET_VIDEOFORMAT, wSize, cast[LPARAM](s)))

proc capGetVideoFormatSize*(hWnd: HWND): DWORD =
  return cast[DWORD](AVICapSM(hWnd, WM_CAP_GET_VIDEOFORMAT, 0, 0))

proc capSetVideoFormat*(hWnd: HWND, s: pointer, wSize: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_VIDEOFORMAT, wSize, cast[LPARAM](s)))

proc capPreview*(hWnd: HWND, f: BOOL): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_PREVIEW, cast[WPARAM](f), 0))

proc capPreviewRate*(hWnd: HWND, wMS: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_PREVIEWRATE, wMS, 0))

proc capOverlay*(hWnd: HWND, f: BOOL): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_OVERLAY, cast[WPARAM](f), 0))

proc capPreviewScale*(hWnd: HWND, f: BOOL): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_SCALE, cast[WPARAM](f), 0))

proc capGetStatus*(hWnd: HWND, s: LPCAPSTATUS, wSize: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_GET_STATUS, wSize, cast[LPARAM](s)))

proc capSetScrollPos*(hWnd: HWND, lpP: LPPOINT): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_SCROLL, 0, cast[LPARAM](lpP)))

proc capGrabFrame*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_GRAB_FRAME, 0, 0))

proc capGrabFrameNoStop*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_GRAB_FRAME_NOSTOP, 0, 0))

proc capCaptureSequence*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SEQUENCE, 0, 0))

proc capCaptureSequenceNoFile*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SEQUENCE_NOFILE, 0, 0))

proc capCaptureStop*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_STOP, 0, 0))

proc capCaptureAbort*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_ABORT, 0, 0))

proc capCaptureSingleFrameOpen*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SINGLE_FRAME_OPEN, 0, 0))

proc capCaptureSingleFrameClose*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SINGLE_FRAME_CLOSE, 0, 0))

proc capCaptureSingleFrame*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SINGLE_FRAME, 0, 0))

proc capCaptureGetSetup*(hWnd: HWND, s: LPCAPTUREPARMS, wSize: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_GET_SEQUENCE_SETUP, wSize, cast[LPARAM](s)))

proc capCaptureSetSetup*(hWnd: HWND, s: LPCAPTUREPARMS, wSize: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_SEQUENCE_SETUP, wSize, cast[LPARAM](s)))

proc capSetMCIDeviceName*(hWnd: HWND, szName: LPTSTR): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_SET_MCI_DEVICE, 0, cast[LPARAM](szName)))

proc capGetMCIDeviceName*(hWnd: HWND, szName: LPTSTR, wSize: WPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_GET_MCI_DEVICE, wSize, cast[LPARAM](szName)))

proc capPaletteOpen*(hWnd: HWND, szName: LPTSTR): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_PAL_OPEN, 0, cast[LPARAM](szName)))

proc capPaletteSave*(hWnd: HWND, szName: LPTSTR): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_PAL_SAVE, 0, cast[LPARAM](szName)))

proc capPalettePaste*(hWnd: HWND): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_PAL_PASTE, 0, 0))

proc capPaletteAuto*(hWnd: HWND, iFrames: WPARAM, iColors: LPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_PAL_AUTOCREATE, iFrames, iColors))

proc capPaletteManual*(hWnd: HWND, fGrab: WPARAM, iColors: LPARAM): BOOL =
  return cast[BOOL](AVICapSM(hWnd, WM_CAP_PAL_MANUALCREATE, fGrab, iColors))

type
  CAPYIELDCALLBACK* = proc (hWnd: HWND): LRESULT {.stdcall.}
  CAPSTATUSCALLBACKW* = proc (hWnd: HWND, nID: int32, lpsz: LPCWSTR): LRESULT {.stdcall.}
  CAPERRORCALLBACKW* = proc (hWnd: HWND, nID: int32, lpsz: LPCWSTR): LRESULT {.stdcall.}
  CAPSTATUSCALLBACKA* = proc (hWnd: HWND, nID: int32, lpsz: LPCSTR): LRESULT {.stdcall.}
  CAPERRORCALLBACKA* = proc (hWnd: HWND, nID: int32, lpsz: LPCSTR): LRESULT {.stdcall.}

when not defined(winansi):
  type
    CAPSTATUSCALLBACK* = CAPSTATUSCALLBACKW
    CAPERRORCALLBACK* = CAPERRORCALLBACKW

else:
  type
    CAPSTATUSCALLBACK* = CAPSTATUSCALLBACKA
    CAPERRORCALLBACK* = CAPERRORCALLBACKA

type
  CAPVIDEOCALLBACK* = proc (hWnd: HWND, lpVHdr: LPVIDEOHDR): LRESULT {.stdcall.}
  CAPWAVECALLBACK* = proc (hWnd: HWND, lpWHdr: LPWAVEHDR): LRESULT {.stdcall.}
  CAPCONTROLCALLBACK* = proc (hWnd: HWND, nState: int32): LRESULT {.stdcall.}

const
  CONTROLCALLBACK_PREROLL* = 1
  CONTROLCALLBACK_CAPTURING* = 2

proc capCreateCaptureWindowA*(lpszWindowName: LPCSTR, dwStyle: DWORD, x: int32, y: int32, nWidth: int32, nHeight: int32, hwndParent: HWND, nID: int32): HWND {.winapi, dynlib: "avicap32", importc.}
proc capGetDriverDescriptionA*(wDriverIndex: UINT, lpszName: LPSTR, cbName: int32, lpszVer: LPSTR, cbVer: int32): BOOL {.winapi, dynlib: "avicap32", importc.}
proc capCreateCaptureWindowW*(lpszWindowName: LPCWSTR, dwStyle: DWORD, x: int32, y: int32, nWidth: int32, nHeight: int32, hwndParent: HWND, nID: int32): HWND {.winapi, dynlib: "avicap32", importc.}
proc capGetDriverDescriptionW*(wDriverIndex: UINT, lpszName: LPWSTR, cbName: int32, lpszVer: LPWSTR, cbVer: int32): BOOL {.winapi, dynlib: "avicap32", importc.}

when not defined(winansi):
  proc capCreateCaptureWindow*(lpszWindowName: LPCWSTR, dwStyle: DWORD, x: int32, y: int32, nWidth: int32, nHeight: int32, hwndParent: HWND, nID: int32): HWND {.winapi, dynlib: "avicap32", importc: "capCreateCaptureWindowW".}
  proc capGetDriverDescription*(wDriverIndex: UINT, lpszName: LPWSTR, cbName: int32, lpszVer: LPWSTR, cbVer: int32): BOOL {.winapi, dynlib: "avicap32", importc: "capGetDriverDescriptionW".}

else:
  proc capCreateCaptureWindow*(lpszWindowName: LPCSTR, dwStyle: DWORD, x: int32, y: int32, nWidth: int32, nHeight: int32, hwndParent: HWND, nID: int32): HWND {.winapi, dynlib: "avicap32", importc: "capCreateCaptureWindowA".}
  proc capGetDriverDescription*(wDriverIndex: UINT, lpszName: LPSTR, cbName: int32, lpszVer: LPSTR, cbVer: int32): BOOL {.winapi, dynlib: "avicap32", importc: "capGetDriverDescriptionA".}

const
  infotypeDIGITIZATION_TIME* = mmioFOURCC('I', 'D', 'I', 'T')
  infotypeSMPTE_TIME* = mmioFOURCC('I', 'S', 'M', 'P')
  IDS_CAP_BEGIN* = 300
  IDS_CAP_END* = 301
  IDS_CAP_INFO* = 401
  IDS_CAP_OUTOFMEM* = 402
  IDS_CAP_FILEEXISTS* = 403
  IDS_CAP_ERRORPALOPEN* = 404
  IDS_CAP_ERRORPALSAVE* = 405
  IDS_CAP_ERRORDIBSAVE* = 406
  IDS_CAP_DEFAVIEXT* = 407
  IDS_CAP_DEFPALEXT* = 408
  IDS_CAP_CANTOPEN* = 409
  IDS_CAP_SEQ_MSGSTART* = 410
  IDS_CAP_SEQ_MSGSTOP* = 411
  IDS_CAP_VIDEDITERR* = 412
  IDS_CAP_READONLYFILE* = 413
  IDS_CAP_WRITEERROR* = 414
  IDS_CAP_NODISKSPACE* = 415
  IDS_CAP_SETFILESIZE* = 416
  IDS_CAP_SAVEASPERCENT* = 417
  IDS_CAP_DRIVER_ERROR* = 418
  IDS_CAP_WAVE_OPEN_ERROR* = 419
  IDS_CAP_WAVE_ALLOC_ERROR* = 420
  IDS_CAP_WAVE_PREPARE_ERROR* = 421
  IDS_CAP_WAVE_ADD_ERROR* = 422
  IDS_CAP_WAVE_SIZE_ERROR* = 423
  IDS_CAP_VIDEO_OPEN_ERROR* = 424
  IDS_CAP_VIDEO_ALLOC_ERROR* = 425
  IDS_CAP_VIDEO_PREPARE_ERROR* = 426
  IDS_CAP_VIDEO_ADD_ERROR* = 427
  IDS_CAP_VIDEO_SIZE_ERROR* = 428
  IDS_CAP_FILE_OPEN_ERROR* = 429
  IDS_CAP_FILE_WRITE_ERROR* = 430
  IDS_CAP_RECORDING_ERROR* = 431
  IDS_CAP_RECORDING_ERROR2* = 432
  IDS_CAP_AVI_INIT_ERROR* = 433
  IDS_CAP_NO_FRAME_CAP_ERROR* = 434
  IDS_CAP_NO_PALETTE_WARN* = 435
  IDS_CAP_MCI_CONTROL_ERROR* = 436
  IDS_CAP_MCI_CANT_STEP_ERROR* = 437
  IDS_CAP_NO_AUDIO_CAP_ERROR* = 438
  IDS_CAP_AVI_DRAWDIB_ERROR* = 439
  IDS_CAP_COMPRESSOR_ERROR* = 440
  IDS_CAP_AUDIO_DROP_ERROR* = 441
  IDS_CAP_AUDIO_DROP_COMPERROR* = 442
  IDS_CAP_STAT_LIVE_MODE* = 500
  IDS_CAP_STAT_OVERLAY_MODE* = 501
  IDS_CAP_STAT_CAP_INIT* = 502
  IDS_CAP_STAT_CAP_FINI* = 503
  IDS_CAP_STAT_PALETTE_BUILD* = 504
  IDS_CAP_STAT_OPTPAL_BUILD* = 505
  IDS_CAP_STAT_I_FRAMES* = 506
  IDS_CAP_STAT_L_FRAMES* = 507
  IDS_CAP_STAT_CAP_L_FRAMES* = 508
  IDS_CAP_STAT_CAP_AUDIO* = 509
  IDS_CAP_STAT_VIDEOCURRENT* = 510
  IDS_CAP_STAT_VIDEOAUDIO* = 511
  IDS_CAP_STAT_VIDEOONLY* = 512
  IDS_CAP_STAT_FRAMESDROPPED* = 513

proc GetOpenFileNamePreviewA*(lpofn: LPOPENFILENAMEA): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc GetSaveFileNamePreviewA*(lpofn: LPOPENFILENAMEA): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc GetOpenFileNamePreviewW*(lpofn: LPOPENFILENAMEW): BOOL {.winapi, dynlib: "msvfw32", importc.}
proc GetSaveFileNamePreviewW*(lpofn: LPOPENFILENAMEW): BOOL {.winapi, dynlib: "msvfw32", importc.}

when not defined(winansi):
  proc GetOpenFileNamePreview*(lpofn: LPOPENFILENAMEW): BOOL {.winapi, dynlib: "msvfw32", importc: "GetOpenFileNamePreviewW".}
  proc GetSaveFileNamePreview*(lpofn: LPOPENFILENAMEW): BOOL {.winapi, dynlib: "msvfw32", importc: "GetSaveFileNamePreviewW".}

else:
  proc GetOpenFileNamePreview*(lpofn: LPOPENFILENAMEA): BOOL {.winapi, dynlib: "msvfw32", importc: "GetOpenFileNamePreviewA".}
  proc GetSaveFileNamePreview*(lpofn: LPOPENFILENAMEA): BOOL {.winapi, dynlib: "msvfw32", importc: "GetSaveFileNamePreviewA".}

# ext/winioctl.nim
const
#* =  BIN_TYPES* = enum
  RequestSize* = 0
  RequestLocation* = 1
#* =  PARTITION_STYLE* = enum
  PARTITION_STYLE_MBR* = 0
  PARTITION_STYLE_GPT* = 1
  PARTITION_STYLE_RAW* = 2
#* =  DISK_CACHE_RETENTION_PRIORITY* = enum
  EqualPriority* = 0
  KeepPrefetchedData* = 1
  KeepReadData* = 2
#* =  DETECTION_TYPE* = enum
  DetectNone* = 0
  DetectInt13* = 1
  DetectExInt13* = 2
  #* =  MEDIA_TYPE* = enum
  unknown* = 0 # renamed from Unknown
  F5_1Pt2_512* = 1
  F3_1Pt44_512* = 2
  F3_2Pt88_512* = 3
  F3_20Pt8_512* = 4
  F3_720_512* = 5
  F5_360_512* = 6
  F5_320_512* = 7
  F5_320_1024* = 8
  F5_180_512* = 9
  F5_160_512* = 10
  RemovableMedia* = 11
  FixedMedia* = 12
  F3_120M_512* = 13
  F3_640_512* = 14
  F5_640_512* = 15
  F5_720_512* = 16
  F3_1Pt2_512* = 17
  F3_1Pt23_1024* = 18
  F5_1Pt23_1024* = 19
  F3_128Mb_512* = 20
  F3_230Mb_512* = 21
  F8_256_128* = 22
  F3_200Mb_512* = 23
  F3_240M_512* = 24
  F3_32M_512* = 25

const
  HIST_NO_OF_BUCKETS* = 24
  # HISTOGRAM_BUCKET_SIZE* = HISTOGRAM_BUCKET.sizeof.SIZE_T
  # DISK_HISTOGRAM_SIZE* = DISK_HISTOGRAM.sizeof.SIZE_T

type
  DEVICE_TYPE* = DWORD

const
  FILE_DEVICE_BEEP* = 1
  FILE_DEVICE_CD_ROM* = 2
  FILE_DEVICE_CD_ROM_FILE_SYSTEM* = 3
  FILE_DEVICE_CONTROLLER* = 4
  FILE_DEVICE_DATALINK* = 5
  FILE_DEVICE_DFS* = 6
  FILE_DEVICE_DISK* = 7
  FILE_DEVICE_DISK_FILE_SYSTEM* = 8
  FILE_DEVICE_FILE_SYSTEM* = 9
  FILE_DEVICE_INPORT_PORT* = 10
  FILE_DEVICE_KEYBOARD* = 11
  FILE_DEVICE_MAILSLOT* = 12
  FILE_DEVICE_MIDI_IN* = 13
  FILE_DEVICE_MIDI_OUT* = 14
  FILE_DEVICE_MOUSE* = 15
  FILE_DEVICE_MULTI_UNC_PROVIDER* = 16
  FILE_DEVICE_NAMED_PIPE* = 17
  FILE_DEVICE_NETWORK* = 18
  FILE_DEVICE_NETWORK_BROWSER* = 19
  FILE_DEVICE_NETWORK_FILE_SYSTEM* = 20
  FILE_DEVICE_NULL* = 21
  FILE_DEVICE_PARALLEL_PORT* = 22
  FILE_DEVICE_PHYSICAL_NETCARD* = 23
  FILE_DEVICE_PRINTER* = 24
  FILE_DEVICE_SCANNER* = 25
  FILE_DEVICE_SERIAL_MOUSE_PORT* = 26
  FILE_DEVICE_SERIAL_PORT* = 27
  FILE_DEVICE_SCREEN* = 28
  FILE_DEVICE_SOUND* = 29
  FILE_DEVICE_STREAMS* = 30
  FILE_DEVICE_TAPE* = 31
  FILE_DEVICE_TAPE_FILE_SYSTEM* = 32
  FILE_DEVICE_TRANSPORT* = 33
  FILE_DEVICE_UNKNOWN* = 34
  FILE_DEVICE_VIDEO* = 35
  FILE_DEVICE_VIRTUAL_DISK* = 36
  FILE_DEVICE_WAVE_IN* = 37
  FILE_DEVICE_WAVE_OUT* = 38
  FILE_DEVICE_8042_PORT* = 39
  FILE_DEVICE_NETWORK_REDIRECTOR* = 40
  FILE_DEVICE_BATTERY* = 41
  FILE_DEVICE_BUS_EXTENDER* = 42
  FILE_DEVICE_MODEM* = 43
  FILE_DEVICE_VDM* = 44
  FILE_DEVICE_MASS_STORAGE* = 45
  FILE_DEVICE_SMB* = 46
  FILE_DEVICE_KS* = 47
  FILE_DEVICE_CHANGER* = 48
  FILE_DEVICE_SMARTCARD* = 49
  FILE_DEVICE_ACPI* = 50
  FILE_DEVICE_DVD* = 51
  FILE_DEVICE_FULLSCREEN_VIDEO* = 52
  FILE_DEVICE_DFS_FILE_SYSTEM* = 53
  FILE_DEVICE_DFS_VOLUME* = 54
  FILE_DEVICE_SERENUM* = 55
  FILE_DEVICE_TERMSRV* = 56
  FILE_DEVICE_KSEC* = 57
  METHOD_BUFFERED* = 0
  METHOD_IN_DIRECT* = 1
  METHOD_OUT_DIRECT* = 2
  METHOD_NEITHER* = 3
  FILE_ANY_ACCESS* = 0
  FILE_SPECIAL_ACCESS* = 0
  FILE_READ_ACCESS* = 1
  FILE_WRITE_ACCESS* = 2

template CTL_CODE_T(t: DEVICE_TYPE, f: uint, m: uint, a: uint): DWORD =
  (t shl 16) or (a shl 14) or (f shl 2) or m

proc DEVICE_TYPE_FROM_CTL_CODE*(c: DWORD): DEVICE_TYPE =
  return (c and 0xFFFF0000.DWORD) shr 16

const
  IOCTL_STORAGE_BASE* = FILE_DEVICE_MASS_STORAGE.DEVICE_TYPE
  IOCTL_DISK_BASE* = FILE_DEVICE_DISK.DEVICE_TYPE
  IOCTL_VOLUME_BASE* = 'V'.DEVICE_TYPE
  IOCTL_STORAGE_CHECK_VERIFY*           = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0200, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_STORAGE_CHECK_VERIFY2*          = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0200, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_STORAGE_MEDIA_REMOVAL*          = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0201, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_STORAGE_EJECT_MEDIA*            = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0202, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_STORAGE_LOAD_MEDIA*             = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0203, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_STORAGE_LOAD_MEDIA2*            = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0203, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_STORAGE_RESERVE*                = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0204, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_STORAGE_RELEASE*                = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0205, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_STORAGE_FIND_NEW_DEVICES*       = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0206, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_STORAGE_EJECTION_CONTROL*       = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0250, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_STORAGE_MCN_CONTROL*            = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0251, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_STORAGE_GET_MEDIA_TYPES*        = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0300, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_STORAGE_GET_MEDIA_TYPES_EX*     = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0301, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_STORAGE_RESET_BUS*              = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0400, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_STORAGE_RESET_DEVICE*           = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0401, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_STORAGE_GET_DEVICE_NUMBER*      = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0420, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_STORAGE_PREDICT_FAILURE*        = CTL_CODE_T(IOCTL_STORAGE_BASE, 0x0440, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_GET_DRIVE_GEOMETRY*        = CTL_CODE_T(IOCTL_DISK_BASE, 0, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_GET_PARTITION_INFO*        = CTL_CODE_T(IOCTL_DISK_BASE, 1, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_SET_PARTITION_INFO*        = CTL_CODE_T(IOCTL_DISK_BASE, 2, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_DISK_GET_DRIVE_LAYOUT*          = CTL_CODE_T(IOCTL_DISK_BASE, 3, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_SET_DRIVE_LAYOUT*          = CTL_CODE_T(IOCTL_DISK_BASE, 4, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_DISK_VERIFY*                    = CTL_CODE_T(IOCTL_DISK_BASE, 5, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_FORMAT_TRACKS*             = CTL_CODE_T(IOCTL_DISK_BASE, 6, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_DISK_REASSIGN_BLOCKS*           = CTL_CODE_T(IOCTL_DISK_BASE, 7, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_DISK_PERFORMANCE*               = CTL_CODE_T(IOCTL_DISK_BASE, 8, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_IS_WRITABLE*               = CTL_CODE_T(IOCTL_DISK_BASE, 9, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_LOGGING*                   = CTL_CODE_T(IOCTL_DISK_BASE, 10, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_FORMAT_TRACKS_EX*          = CTL_CODE_T(IOCTL_DISK_BASE, 11, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_DISK_HISTOGRAM_STRUCTURE*       = CTL_CODE_T(IOCTL_DISK_BASE, 12, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_HISTOGRAM_DATA*            = CTL_CODE_T(IOCTL_DISK_BASE, 13, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_HISTOGRAM_RESET*           = CTL_CODE_T(IOCTL_DISK_BASE, 14, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_REQUEST_STRUCTURE*         = CTL_CODE_T(IOCTL_DISK_BASE, 15, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_REQUEST_DATA*              = CTL_CODE_T(IOCTL_DISK_BASE, 16, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_GET_PARTITION_INFO_EX*     = CTL_CODE_T(IOCTL_DISK_BASE, 0x12, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_SET_PARTITION_INFO_EX*     = CTL_CODE_T(IOCTL_DISK_BASE, 0x13, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_DISK_GET_DRIVE_LAYOUT_EX*       = CTL_CODE_T(IOCTL_DISK_BASE, 0x14, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_SET_DRIVE_LAYOUT_EX*       = CTL_CODE_T(IOCTL_DISK_BASE, 0x15, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_DISK_CREATE_DISK*               = CTL_CODE_T(IOCTL_DISK_BASE, 0x16, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_DISK_GET_LENGTH_INFO*           = CTL_CODE_T(IOCTL_DISK_BASE, 0x17, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_PERFORMANCE_OFF*           = CTL_CODE_T(IOCTL_DISK_BASE, 0x18, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_GET_DRIVE_GEOMETRY_EX*     = CTL_CODE_T(IOCTL_DISK_BASE, 0x28, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_GROW_PARTITION*            = CTL_CODE_T(IOCTL_DISK_BASE, 0x34, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_DISK_GET_CACHE_INFORMATION*     = CTL_CODE_T(IOCTL_DISK_BASE, 0x35, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_SET_CACHE_INFORMATION*     = CTL_CODE_T(IOCTL_DISK_BASE, 0x36, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_DISK_DELETE_DRIVE_LAYOUT*       = CTL_CODE_T(IOCTL_DISK_BASE, 0x40, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_DISK_UPDATE_PROPERTIES*         = CTL_CODE_T(IOCTL_DISK_BASE, 0x50, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_CHECK_VERIFY*              = CTL_CODE_T(IOCTL_DISK_BASE, 0x200, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_MEDIA_REMOVAL*             = CTL_CODE_T(IOCTL_DISK_BASE, 0x201, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_EJECT_MEDIA*               = CTL_CODE_T(IOCTL_DISK_BASE, 0x202, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_LOAD_MEDIA*                = CTL_CODE_T(IOCTL_DISK_BASE, 0x203, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_RESERVE*                   = CTL_CODE_T(IOCTL_DISK_BASE, 0x204, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_RELEASE*                   = CTL_CODE_T(IOCTL_DISK_BASE, 0x205, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_FIND_NEW_DEVICES*          = CTL_CODE_T(IOCTL_DISK_BASE, 0x206, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_REMOVE_DEVICE*             = CTL_CODE_T(IOCTL_DISK_BASE, 0x207, METHOD_BUFFERED, FILE_READ_ACCESS)
  IOCTL_DISK_GET_MEDIA_TYPES*           = CTL_CODE_T(IOCTL_DISK_BASE, 0x300, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_DISK_UPDATE_DRIVE_SIZE*         = CTL_CODE_T(IOCTL_DISK_BASE, 0x0032, METHOD_BUFFERED, FILE_READ_ACCESS or FILE_WRITE_ACCESS)
  IOCTL_SERIAL_LSRMST_INSERT*           = CTL_CODE_T(FILE_DEVICE_SERIAL_PORT, 31, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_VOLUME_GET_VOLUME_DISK_EXTENTS* = CTL_CODE_T(IOCTL_VOLUME_BASE, 0, METHOD_BUFFERED, FILE_ANY_ACCESS)
  IOCTL_VOLUME_IS_CLUSTERED*            = CTL_CODE_T(IOCTL_VOLUME_BASE, 12, METHOD_BUFFERED, FILE_ANY_ACCESS)
  FSCTL_LOCK_VOLUME*                    = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 6, METHOD_BUFFERED, FILE_ANY_ACCESS)
  FSCTL_UNLOCK_VOLUME*                  = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 7, METHOD_BUFFERED, FILE_ANY_ACCESS)
  FSCTL_DISMOUNT_VOLUME*                = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 8, METHOD_BUFFERED, FILE_ANY_ACCESS)
  FSCTL_MOUNT_DBLS_VOLUME*              = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 13, METHOD_BUFFERED, FILE_ANY_ACCESS)
  FSCTL_GET_COMPRESSION*                = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 15, METHOD_BUFFERED, FILE_ANY_ACCESS)
  FSCTL_SET_COMPRESSION*                = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 16, METHOD_BUFFERED, FILE_READ_DATA or FILE_WRITE_DATA)
  FSCTL_READ_COMPRESSION*               = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 17, METHOD_NEITHER, FILE_READ_DATA)
  FSCTL_WRITE_COMPRESSION*              = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 18, METHOD_NEITHER, FILE_WRITE_DATA)
  FSCTL_GET_NTFS_VOLUME_DATA*           = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 25, METHOD_BUFFERED, FILE_ANY_ACCESS)
  FSCTL_GET_VOLUME_BITMAP*              = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 27, METHOD_NEITHER, FILE_ANY_ACCESS)
  FSCTL_GET_RETRIEVAL_POINTERS*         = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 28, METHOD_NEITHER, FILE_ANY_ACCESS)
  FSCTL_MOVE_FILE*                      = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 29, METHOD_BUFFERED, FILE_ANY_ACCESS)
  FSCTL_GET_REPARSE_POINT*              = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 42, METHOD_BUFFERED, FILE_ANY_ACCESS)
  FSCTL_SET_REPARSE_POINT*              = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 41, METHOD_BUFFERED, FILE_ANY_ACCESS)
  FSCTL_DELETE_REPARSE_POINT*           = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 43, METHOD_BUFFERED, FILE_ANY_ACCESS)
  FSCTL_SET_SPARSE*                     = CTL_CODE_T(FILE_DEVICE_FILE_SYSTEM, 49, METHOD_BUFFERED, FILE_SPECIAL_ACCESS)

  PARTITION_ENTRY_UNUSED* = 0.BYTE
  PARTITION_FAT_12* = 1.BYTE
  PARTITION_XENIX_1* = 2.BYTE
  PARTITION_XENIX_2* = 3.BYTE
  PARTITION_FAT_16* = 4.BYTE
  PARTITION_EXTENDED* = 5.BYTE
  PARTITION_HUGE* = 6.BYTE
  PARTITION_IFS* = 7.BYTE
  PARTITION_FAT32* = 0x0B.BYTE
  PARTITION_FAT32_XINT13* = 0x0C.BYTE
  PARTITION_XINT13* = 0x0E.BYTE
  PARTITION_XINT13_EXTENDED* = 0x0F.BYTE
  PARTITION_PREP* = 0x41.BYTE
  PARTITION_LDM* = 0x42.BYTE
  PARTITION_UNIX* = 0x63.BYTE
  PARTITION_NTFT* = 0x80.BYTE
  VALID_NTFT* = 0xC0.BYTE
  SERIAL_LSRMST_ESCAPE* = 0
  SERIAL_LSRMST_LSR_DATA* = 1
  SERIAL_LSRMST_LSR_NODATA* = 2
  SERIAL_LSRMST_MST* = 3
  DISK_LOGGING_START* = 0
  DISK_LOGGING_STOP* = 1
  DISK_LOGGING_DUMP* = 2
  DISK_BINNING* = 3

type
  BAD_TRACK_NUMBER* = WORD
  PBAD_TRACK_NUMBER* = ptr WORD
  BIN_TYPES* = int32
  BIN_RANGE* {.final, pure.} = object
    StartValue*: LARGE_INTEGER
    Length*: LARGE_INTEGER
  PBIN_RANGE* = ptr BIN_RANGE
  BIN_COUNT* {.final, pure.} = object
    BinRange*: BIN_RANGE
    BinCount*: DWORD
  PBIN_COUNT* = ptr BIN_COUNT
  BIN_RESULTS* {.final, pure.} = object
    NumberOfBins*: DWORD
    BinCounts*: array[1, BIN_COUNT]
  PBIN_RESULTS* = ptr BIN_RESULTS
  PARTITION_STYLE* = int32
  CREATE_DISK_GPT* {.final, pure.} = object
    DiskId*: GUID
    MaxPartitionCount*: DWORD
  PCREATE_DISK_GPT* = ptr CREATE_DISK_GPT
  CREATE_DISK_MBR* {.final, pure.} = object
    Signature*: DWORD
  PCREATE_DISK_MBR* = ptr CREATE_DISK_MBR
  CREATE_DISK_UNION1* {.final, union, pure.} = object
    Mbr*: CREATE_DISK_MBR
    Gpt*: CREATE_DISK_GPT
  CREATE_DISK* {.final, pure.} = object
    PartitionStyle*: PARTITION_STYLE
    u1*: CREATE_DISK_UNION1
  PCREATE_DISK* = ptr CREATE_DISK
  DISK_CACHE_RETENTION_PRIORITY* = int32
  DISK_CACHE_INFORMATION_UNION1_BlockPrefetch* {.final, pure.} = object
    Minimum*: WORD
    Maximum*: WORD
  DISK_CACHE_INFORMATION_UNION1_ScalarPrefetch* {.final, pure.} = object
    Minimum*: WORD
    Maximum*: WORD
    MaximumBlocks*: WORD
  DISK_CACHE_INFORMATION_UNION1* {.final, union, pure.} = object
    ScalarPrefetch*: DISK_CACHE_INFORMATION_UNION1_ScalarPrefetch
    BlockPrefetch*: DISK_CACHE_INFORMATION_UNION1_BlockPrefetch
  DISK_CACHE_INFORMATION* {.final, pure.} = object
    ParametersSavable*: BOOLEAN
    ReadCacheEnabled*: BOOLEAN
    WriteCacheEnabled*: BOOLEAN
    ReadRetentionPriority*: DISK_CACHE_RETENTION_PRIORITY
    WriteRetentionPriority*: DISK_CACHE_RETENTION_PRIORITY
    DisablePrefetchTransferLength*: WORD
    PrefetchScalar*: BOOLEAN
    u1*: DISK_CACHE_INFORMATION_UNION1
  PDISK_CACHE_INFORMATION* = ptr DISK_CACHE_INFORMATION
  DETECTION_TYPE* = int32
  DISK_INT13_INFO* {.final, pure.} = object
    DriveSelect*: WORD
    MaxCylinders*: DWORD
    SectorsPerTrack*: WORD
    MaxHeads*: WORD
    NumberDrives*: WORD
  PDISK_INT13_INFO* = ptr DISK_INT13_INFO
  DISK_EX_INT13_INFO* {.final, pure.} = object
    ExBufferSize*: WORD
    ExFlags*: WORD
    ExCylinders*: DWORD
    ExHeads*: DWORD
    ExSectorsPerTrack*: DWORD
    ExSectorsPerDrive*: DWORD64
    ExSectorSize*: WORD
    ExReserved*: WORD
  PDISK_EX_INT13_INFO* = ptr DISK_EX_INT13_INFO
  DISK_DETECTION_INFO* {.final, pure.} = object
    SizeOfDetectInfo*: DWORD
    DetectionType*: DETECTION_TYPE
    Int13*: DISK_INT13_INFO
    ExInt13*: DISK_EX_INT13_INFO
  PDISK_DETECTION_INFO* = ptr DISK_DETECTION_INFO
  MEDIA_TYPE* = int32
  PMEDIA_TYPE* = ptr MEDIA_TYPE
  DISK_GEOMETRY* {.final, pure.} = object
    Cylinders*: LARGE_INTEGER
    MediaType*: MEDIA_TYPE
    TracksPerCylinder*: DWORD
    SectorsPerTrack*: DWORD
    BytesPerSector*: DWORD
  PDISK_GEOMETRY* = ptr DISK_GEOMETRY
  DISK_GEOMETRY_EX* {.final, pure.} = object
    Geometry*: DISK_GEOMETRY
    DiskSize*: LARGE_INTEGER
    Data*: array[1, BYTE]
  PDISK_GEOMETRY_EX* = ptr DISK_GEOMETRY_EX
  DISK_GROW_PARTITION* {.final, pure.} = object
    PartitionNumber*: DWORD
    BytesToGrow*: LARGE_INTEGER
  PDISK_GROW_PARTITION* = ptr DISK_GROW_PARTITION
  DISK_PARTITION_INFO_UNION1* {.final, union, pure.} = object
    Signature*: DWORD
    DiskId*: GUID
  DISK_PARTITION_INFO* {.final, pure.} = object
    SizeOfPartitionInfo*: DWORD
    PartitionStyle*: PARTITION_STYLE
    u1*: DISK_PARTITION_INFO_UNION1
  PDISK_PARTITION_INFO* = ptr DISK_PARTITION_INFO
  DISK_PERFORMANCE* {.final, pure.} = object
    BytesRead*: LARGE_INTEGER
    BytesWritten*: LARGE_INTEGER
    ReadTime*: LARGE_INTEGER
    WriteTime*: LARGE_INTEGER
    ReadCount*: DWORD
    WriteCount*: DWORD
    QueueDepth*: DWORD
  PDISK_PERFORMANCE* = ptr DISK_PERFORMANCE
  DISK_RECORD* {.final, pure.} = object
    ByteOffset*: LARGE_INTEGER
    StartTime*: LARGE_INTEGER
    EndTime*: LARGE_INTEGER
    VirtualAddress*: PVOID
    NumberOfBytes*: DWORD
    DeviceNumber*: BYTE
    ReadRequest*: BOOLEAN
  PDISK_RECORD* = ptr DISK_RECORD
  DISK_LOGGING* {.final, pure.} = object
    Function*: BYTE
    BufferAddress*: PVOID
    BufferSize*: DWORD
  PDISK_LOGGING* = ptr DISK_LOGGING
  DISKQUOTA_USER_INFORMATION* {.final, pure.} = object
    QuotaUsed*: LONGLONG
    QuotaThreshold*: LONGLONG
    QuotaLimit*: LONGLONG
  PDISKQUOTA_USER_INFORMATION* = ptr DISKQUOTA_USER_INFORMATION
  FORMAT_PARAMETERS* {.final, pure.} = object
    MediaType*: MEDIA_TYPE
    StartCylinderNumber*: DWORD
    EndCylinderNumber*: DWORD
    StartHeadNumber*: DWORD
    EndHeadNumber*: DWORD
  PFORMAT_PARAMETERS* = ptr FORMAT_PARAMETERS
  FORMAT_EX_PARAMETERS* {.final, pure.} = object
    MediaType*: MEDIA_TYPE
    StartCylinderNumber*: DWORD
    EndCylinderNumber*: DWORD
    StartHeadNumber*: DWORD
    EndHeadNumber*: DWORD
    FormatGapLength*: WORD
    SectorsPerTrack*: WORD
    SectorNumber*: array[1, WORD]
  PFORMAT_EX_PARAMETERS* = ptr FORMAT_EX_PARAMETERS
  GET_LENGTH_INFORMATION* {.final, pure.} = object
    Length*: LARGE_INTEGER
  HISTOGRAM_BUCKET* {.final, pure.} = object
    Reads*: DWORD
    Writes*: DWORD
  PHISTOGRAM_BUCKET* = ptr HISTOGRAM_BUCKET
  DISK_HISTOGRAM* {.final, pure.} = object
    DiskSize*: LARGE_INTEGER
    Start*: LARGE_INTEGER
    End*: LARGE_INTEGER
    Average*: LARGE_INTEGER
    AverageRead*: LARGE_INTEGER
    AverageWrite*: LARGE_INTEGER
    Granularity*: DWORD
    Size*: DWORD
    ReadCount*: DWORD
    WriteCount*: DWORD
    Histogram*: PHISTOGRAM_BUCKET
  PDISK_HISTOGRAM* = ptr DISK_HISTOGRAM
  DISK_EXTENT* {.final, pure.} = object
    DiskNumber*: DWORD
    StartingOffset*: LARGE_INTEGER
    ExtentLength*: LARGE_INTEGER
  PDISK_EXTENT* = ptr DISK_EXTENT
  VOLUME_DISK_EXTENTS* {.final, pure.} = object
    NumberOfDiskExtents*: DWORD
    Extents*: array[1, DISK_EXTENT]
  PVOLUME_DISK_EXTENTS* = ptr VOLUME_DISK_EXTENTS
  PARTITION_INFORMATION* {.final, pure.} = object
    StartingOffset*: LARGE_INTEGER
    PartitionLength*: LARGE_INTEGER
    HiddenSectors*: DWORD
    PartitionNumber*: DWORD
    PartitionType*: BYTE
    BootIndicator*: BOOLEAN
    RecognizedPartition*: BOOLEAN
    RewritePartition*: BOOLEAN
  PPARTITION_INFORMATION* = ptr PARTITION_INFORMATION
  DRIVE_LAYOUT_INFORMATION* {.final, pure.} = object
    PartitionCount*: DWORD
    Signature*: DWORD
    PartitionEntry*: array[1, PARTITION_INFORMATION]
  PDRIVE_LAYOUT_INFORMATION* = ptr DRIVE_LAYOUT_INFORMATION
  DRIVE_LAYOUT_INFORMATION_GPT* {.final, pure.} = object
    DiskId*: GUID
    StartingUsableOffset*: LARGE_INTEGER
    UsableLength*: LARGE_INTEGER
    MaxPartitionCount*: ULONG
  PDRIVE_LAYOUT_INFORMATION_GPT* = ptr DRIVE_LAYOUT_INFORMATION_GPT
  DRIVE_LAYOUT_INFORMATION_MBR* {.final, pure.} = object
    Signature*: ULONG
  PDRIVE_LAYOUT_INFORMATION_MBR* = ptr DRIVE_LAYOUT_INFORMATION_MBR
  PARTITION_INFORMATION_MBR* {.final, pure.} = object
    PartitionType*: BYTE
    BootIndicator*: BOOLEAN
    RecognizedPartition*: BOOLEAN
    HiddenSectors*: DWORD
  PARTITION_INFORMATION_GPT* {.final, pure.} = object
    PartitionType*: GUID
    PartitionId*: GUID
    Attributes*: DWORD64
    Name*: array[36, WCHAR]
  PARTITION_INFORMATION_EX_UNION1* {.final, union, pure.} = object
    Mbr*: PARTITION_INFORMATION_MBR
    Gpt*: PARTITION_INFORMATION_GPT
  PARTITION_INFORMATION_EX* {.final, pure.} = object
    PartitionStyle*: PARTITION_STYLE
    StartingOffset*: LARGE_INTEGER
    PartitionLength*: LARGE_INTEGER
    PartitionNumber*: DWORD
    RewritePartition*: BOOLEAN
    u1*: PARTITION_INFORMATION_EX_UNION1
  DRIVE_LAYOUT_INFORMATION_EX_UNION1* {.final, union, pure.} = object
    Mbr*: DRIVE_LAYOUT_INFORMATION_MBR
    Gpt*: DRIVE_LAYOUT_INFORMATION_GPT
  DRIVE_LAYOUT_INFORMATION_EX* {.final, pure.} = object
    PartitionStyle*: DWORD
    PartitionCount*: DWORD
    u1*: DRIVE_LAYOUT_INFORMATION_EX_UNION1
    PartitionEntry*: array[1, PARTITION_INFORMATION_EX]
  PDRIVE_LAYOUT_INFORMATION_EX* = ptr DRIVE_LAYOUT_INFORMATION_EX
  MOVE_FILE_DATA* {.final, pure.} = object
    FileHandle*: HANDLE
    StartingVcn*: LARGE_INTEGER
    StartingLcn*: LARGE_INTEGER
    ClusterCount*: DWORD
  PMOVE_FILE_DATA* = ptr MOVE_FILE_DATA
  PERF_BIN* {.final, pure.} = object
    NumberOfBins*: DWORD
    TypeOfBin*: DWORD
    BinsRanges*: array[1, BIN_RANGE]
  PPERF_BIN* = ptr PERF_BIN
  PREVENT_MEDIA_REMOVAL* {.final, pure.} = object
    PreventMediaRemoval*: BOOLEAN
  PPREVENT_MEDIA_REMOVAL* = ptr PREVENT_MEDIA_REMOVAL
  RETRIEVAL_POINTERS_BUFFER_Extent* {.final, pure.} = object
    NextVcn*: LARGE_INTEGER
    Lcn*: LARGE_INTEGER
  RETRIEVAL_POINTERS_BUFFER* {.final, pure.} = object
    ExtentCount*: DWORD
    StartingVcn*: LARGE_INTEGER
    Extents*: array[1, RETRIEVAL_POINTERS_BUFFER_Extent]
  PRETRIEVAL_POINTERS_BUFFER* = ptr RETRIEVAL_POINTERS_BUFFER
  REASSIGN_BLOCKS* {.final, pure.} = object
    Reserved*: WORD
    Count*: WORD
    BlockNumber*: array[1, DWORD]
  PREASSIGN_BLOCKS* = ptr REASSIGN_BLOCKS
  SET_PARTITION_INFORMATION* {.final, pure.} = object
    PartitionType*: BYTE
  PSET_PARTITION_INFORMATION* = ptr SET_PARTITION_INFORMATION
  STARTING_LCN_INPUT_BUFFER* {.final, pure.} = object
    StartingLcn*: LARGE_INTEGER
  PSTARTING_LCN_INPUT_BUFFER* = ptr STARTING_LCN_INPUT_BUFFER
  STARTING_VCN_INPUT_BUFFER* {.final, pure.} = object
    StartingVcn*: LARGE_INTEGER
  PSTARTING_VCN_INPUT_BUFFER* = ptr STARTING_VCN_INPUT_BUFFER
  VERIFY_INFORMATION* {.final, pure.} = object
    StartingOffset*: LARGE_INTEGER
    Length*: DWORD
  PVERIFY_INFORMATION* = ptr VERIFY_INFORMATION
  VOLUME_BITMAP_BUFFER* {.final, pure.} = object
    StartingLcn*: LARGE_INTEGER
    BitmapSize*: LARGE_INTEGER
    Buffer*: array[1, BYTE]
  PVOLUME_BITMAP_BUFFER* = ptr VOLUME_BITMAP_BUFFER
  NTFS_VOLUME_DATA_BUFFER* {.final, pure.} = object
    VolumeSerialNumber*: LARGE_INTEGER
    NumberSectors*: LARGE_INTEGER
    TotalClusters*: LARGE_INTEGER
    FreeClusters*: LARGE_INTEGER
    TotalReserved*: LARGE_INTEGER
    BytesPerSector*: DWORD
    BytesPerCluster*: DWORD
    BytesPerFileRecordSegment*: DWORD
    ClustersPerFileRecordSegment*: DWORD
    MftValidDataLength*: LARGE_INTEGER
    MftStartLcn*: LARGE_INTEGER
    Mft2StartLcn*: LARGE_INTEGER
    MftZoneStart*: LARGE_INTEGER
    MftZoneEnd*: LARGE_INTEGER
  PNTFS_VOLUME_DATA_BUFFER* = ptr NTFS_VOLUME_DATA_BUFFER

proc IsRecognizedPartition*(t: BYTE): bool =
  result = ((t and PARTITION_NTFT).bool and
      ((t and (not VALID_NTFT.BYTE)) == PARTITION_FAT_12 or
      (t and (not VALID_NTFT.BYTE)) == PARTITION_FAT_16 or
      (t and (not VALID_NTFT.BYTE)) == PARTITION_IFS or
      (t and (not VALID_NTFT.BYTE)) == PARTITION_HUGE or
      (t and (not VALID_NTFT.BYTE)) == PARTITION_FAT32 or
      (t and (not VALID_NTFT.BYTE)) == PARTITION_FAT32_XINT13 or
      (t and (not VALID_NTFT.BYTE)) == PARTITION_XINT13)) or
    (t and (not PARTITION_NTFT.BYTE)) == PARTITION_FAT_12 or
    (t and (not PARTITION_NTFT.BYTE)) == PARTITION_FAT_16 or
    (t and (not PARTITION_NTFT.BYTE)) == PARTITION_IFS or
    (t and (not PARTITION_NTFT.BYTE)) == PARTITION_HUGE or
    (t and (not PARTITION_NTFT.BYTE)) == PARTITION_FAT32 or
    (t and (not PARTITION_NTFT.BYTE)) == PARTITION_FAT32_XINT13 or
    (t and (not PARTITION_NTFT.BYTE)) == PARTITION_XINT13

proc IsContainerPartition*(t: BYTE): bool =
  result = ((t and PARTITION_NTFT.BYTE).bool and
      ((t and (not VALID_NTFT.BYTE)) == PARTITION_EXTENDED or
      (t and (not VALID_NTFT.BYTE)) == PARTITION_XINT13_EXTENDED)) or
    (t and (not PARTITION_NTFT.BYTE)) == PARTITION_EXTENDED or
    (t and (not PARTITION_NTFT.BYTE)) == PARTITION_XINT13_EXTENDED

proc `Mbr=`*(self: var CREATE_DISK, x: CREATE_DISK_MBR) = self.u1.Mbr = x
proc Mbr*(self: CREATE_DISK): CREATE_DISK_MBR = self.u1.Mbr
proc `Gpt=`*(self: var CREATE_DISK, x: CREATE_DISK_GPT) = self.u1.Gpt = x
proc Gpt*(self: CREATE_DISK): CREATE_DISK_GPT = self.u1.Gpt
proc `Minimum=`*(self: var DISK_CACHE_INFORMATION, x: WORD) = self.u1.ScalarPrefetch.Minimum = x
proc Minimum*(self: DISK_CACHE_INFORMATION): WORD = self.u1.ScalarPrefetch.Minimum
proc `Maximum=`*(self: var DISK_CACHE_INFORMATION, x: WORD) = self.u1.ScalarPrefetch.Maximum = x
proc Maximum*(self: DISK_CACHE_INFORMATION): WORD = self.u1.ScalarPrefetch.Maximum
proc `MaximumBlocks=`*(self: var DISK_CACHE_INFORMATION, x: WORD) = self.u1.ScalarPrefetch.MaximumBlocks = x
proc MaximumBlocks*(self: DISK_CACHE_INFORMATION): WORD = self.u1.ScalarPrefetch.MaximumBlocks
proc `Signature=`*(self: var DISK_PARTITION_INFO, x: DWORD) = self.u1.Signature = x
proc Signature*(self: DISK_PARTITION_INFO): DWORD = self.u1.Signature
proc `DiskId=`*(self: var DISK_PARTITION_INFO, x: GUID) = self.u1.DiskId = x
proc DiskId*(self: DISK_PARTITION_INFO): GUID = self.u1.DiskId
proc `Mbr=`*(self: var PARTITION_INFORMATION_EX, x: PARTITION_INFORMATION_MBR) = self.u1.Mbr = x
proc Mbr*(self: PARTITION_INFORMATION_EX): PARTITION_INFORMATION_MBR = self.u1.Mbr
proc `Gpt=`*(self: var PARTITION_INFORMATION_EX, x: PARTITION_INFORMATION_GPT) = self.u1.Gpt = x
proc Gpt*(self: PARTITION_INFORMATION_EX): PARTITION_INFORMATION_GPT = self.u1.Gpt
proc `Mbr=`*(self: var DRIVE_LAYOUT_INFORMATION_EX, x: DRIVE_LAYOUT_INFORMATION_MBR) = self.u1.Mbr = x
proc Mbr*(self: DRIVE_LAYOUT_INFORMATION_EX): DRIVE_LAYOUT_INFORMATION_MBR = self.u1.Mbr
proc `Gpt=`*(self: var DRIVE_LAYOUT_INFORMATION_EX, x: DRIVE_LAYOUT_INFORMATION_GPT) = self.u1.Gpt = x
proc Gpt*(self: DRIVE_LAYOUT_INFORMATION_EX): DRIVE_LAYOUT_INFORMATION_GPT = self.u1.Gpt

# ext/winspool.nim

const
  DI_CHANNEL* = 1
  DI_CHANNEL_WRITE* = 2
  DI_READ_SPOOL_JOB* = 3
  FORM_BUILTIN* = 1
  JOB_CONTROL_PAUSE* = 1
  JOB_CONTROL_RESUME* = 2
  JOB_CONTROL_CANCEL* = 3
  JOB_CONTROL_RESTART* = 4
  JOB_CONTROL_DELETE* = 5
  JOB_STATUS_PAUSED* = 1
  JOB_STATUS_ERROR* = 2
  JOB_STATUS_DELETING* = 4
  JOB_STATUS_SPOOLING* = 8
  JOB_STATUS_PRINTING* = 16
  JOB_STATUS_OFFLINE* = 32
  JOB_STATUS_PAPEROUT* = 0x40
  JOB_STATUS_PRINTED* = 0x80
  JOB_STATUS_DELETED* = 0x100
  JOB_STATUS_BLOCKED_DEVQ* = 0x200
  JOB_STATUS_USER_INTERVENTION* = 0x400
  JOB_POSITION_UNSPECIFIED* = 0
  JOB_NOTIFY_TYPE* = 1
  JOB_NOTIFY_FIELD_PRINTER_NAME* = 0
  JOB_NOTIFY_FIELD_MACHINE_NAME* = 1
  JOB_NOTIFY_FIELD_PORT_NAME* = 2
  JOB_NOTIFY_FIELD_USER_NAME* = 3
  JOB_NOTIFY_FIELD_NOTIFY_NAME* = 4
  JOB_NOTIFY_FIELD_DATATYPE* = 5
  JOB_NOTIFY_FIELD_PRINT_PROCESSOR* = 6
  JOB_NOTIFY_FIELD_PARAMETERS* = 7
  JOB_NOTIFY_FIELD_DRIVER_NAME* = 8
  JOB_NOTIFY_FIELD_DEVMODE* = 9
  JOB_NOTIFY_FIELD_STATUS* = 10
  JOB_NOTIFY_FIELD_STATUS_STRING* = 11
  JOB_NOTIFY_FIELD_SECURITY_DESCRIPTOR* = 12
  JOB_NOTIFY_FIELD_DOCUMENT* = 13
  JOB_NOTIFY_FIELD_PRIORITY* = 14
  JOB_NOTIFY_FIELD_POSITION* = 15
  JOB_NOTIFY_FIELD_SUBMITTED* = 16
  JOB_NOTIFY_FIELD_START_TIME* = 17
  JOB_NOTIFY_FIELD_UNTIL_TIME* = 18
  JOB_NOTIFY_FIELD_TIME* = 19
  JOB_NOTIFY_FIELD_TOTAL_PAGES* = 20
  JOB_NOTIFY_FIELD_PAGES_PRINTED* = 21
  JOB_NOTIFY_FIELD_TOTAL_BYTES* = 22
  JOB_NOTIFY_FIELD_BYTES_PRINTED* = 23
  JOB_ACCESS_ADMINISTER* = 16
  JOB_ALL_ACCESS* = STANDARD_RIGHTS_REQUIRED or JOB_ACCESS_ADMINISTER
  JOB_READ* = STANDARD_RIGHTS_READ or JOB_ACCESS_ADMINISTER
  JOB_WRITE* = STANDARD_RIGHTS_WRITE or JOB_ACCESS_ADMINISTER
  JOB_EXECUTE* = STANDARD_RIGHTS_EXECUTE or JOB_ACCESS_ADMINISTER
  PRINTER_NOTIFY_OPTIONS_REFRESH* = 1
  PRINTER_ACCESS_ADMINISTER* = 4
  PRINTER_ACCESS_USE* = 8
  PRINTER_ERROR_INFORMATION* = 0x80000000'i32
  PRINTER_ERROR_WARNING* = 0x40000000
  PRINTER_ERROR_SEVERE* = 0x20000000
  PRINTER_ERROR_OUTOFPAPER* = 1
  PRINTER_ERROR_JAM* = 2
  PRINTER_ERROR_OUTOFTONER* = 4
  PRINTER_CONTROL_PAUSE* = 1
  PRINTER_CONTROL_RESUME* = 2
  PRINTER_CONTROL_PURGE* = 3
  PRINTER_CONTROL_SET_STATUS* = 4
  PRINTER_STATUS_PAUSED* = 1
  PRINTER_STATUS_ERROR* = 2
  PRINTER_STATUS_PENDING_DELETION* = 4
  PRINTER_STATUS_PAPER_JAM* = 8
  PRINTER_STATUS_PAPER_OUT* = 0x10
  PRINTER_STATUS_MANUAL_FEED* = 0x20
  PRINTER_STATUS_PAPER_PROBLEM* = 0x40
  PRINTER_STATUS_OFFLINE* = 0x80
  PRINTER_STATUS_IO_ACTIVE* = 0x100
  PRINTER_STATUS_BUSY* = 0x200
  PRINTER_STATUS_PRINTING* = 0x400
  PRINTER_STATUS_OUTPUT_BIN_FULL* = 0x800
  PRINTER_STATUS_NOT_AVAILABLE* = 0x1000
  PRINTER_STATUS_WAITING* = 0x2000
  PRINTER_STATUS_PROCESSING* = 0x4000
  PRINTER_STATUS_INITIALIZING* = 0x8000
  PRINTER_STATUS_WARMING_UP* = 0x10000
  PRINTER_STATUS_TONER_LOW* = 0x20000
  PRINTER_STATUS_NO_TONER* = 0x40000
  PRINTER_STATUS_PAGE_PUNT* = 0x80000
  PRINTER_STATUS_USER_INTERVENTION* = 0x100000
  PRINTER_STATUS_OUT_OF_MEMORY* = 0x200000
  PRINTER_STATUS_DOOR_OPEN* = 0x400000
  PRINTER_STATUS_SERVER_UNKNOWN* = 0x800000
  PRINTER_STATUS_POWER_SAVE* = 0x1000000
  PRINTER_ATTRIBUTE_QUEUED* = 1
  PRINTER_ATTRIBUTE_DIRECT* = 2
  PRINTER_ATTRIBUTE_DEFAULT* = 4
  PRINTER_ATTRIBUTE_SHARED* = 8
  PRINTER_ATTRIBUTE_NETWORK* = 0x10
  PRINTER_ATTRIBUTE_HIDDEN* = 0x20
  PRINTER_ATTRIBUTE_LOCAL* = 0x40
  PRINTER_ATTRIBUTE_ENABLE_DEVQ* = 0x80
  PRINTER_ATTRIBUTE_KEEPPRINTEDJOBS* = 0x100
  PRINTER_ATTRIBUTE_DO_COMPLETE_FIRST* = 0x200
  PRINTER_ATTRIBUTE_WORK_OFFLINE* = 0x400
  PRINTER_ATTRIBUTE_ENABLE_BIDI* = 0x800
  PRINTER_ATTRIBUTE_RAW_ONLY* = 0x1000
  PRINTER_ATTRIBUTE_PUBLISHED* = 0x2000
  PRINTER_ENUM_DEFAULT* = 1
  PRINTER_ENUM_LOCAL* = 2
  PRINTER_ENUM_CONNECTIONS* = 4
  PRINTER_ENUM_FAVORITE* = 4
  PRINTER_ENUM_NAME* = 8
  PRINTER_ENUM_REMOTE* = 16
  PRINTER_ENUM_SHARED* = 32
  PRINTER_ENUM_NETWORK* = 0x40
  PRINTER_ENUM_EXPAND* = 0x4000
  PRINTER_ENUM_CONTAINER* = 0x8000
  PRINTER_ENUM_ICONMASK* = 0xff0000
  PRINTER_ENUM_ICON1* = 0x10000
  PRINTER_ENUM_ICON2* = 0x20000
  PRINTER_ENUM_ICON3* = 0x40000
  PRINTER_ENUM_ICON4* = 0x80000
  PRINTER_ENUM_ICON5* = 0x100000
  PRINTER_ENUM_ICON6* = 0x200000
  PRINTER_ENUM_ICON7* = 0x400000
  PRINTER_ENUM_ICON8* = 0x800000
  PRINTER_NOTIFY_TYPE* = 0
  PRINTER_NOTIFY_FIELD_SERVER_NAME* = 0
  PRINTER_NOTIFY_FIELD_PRINTER_NAME* = 1
  PRINTER_NOTIFY_FIELD_SHARE_NAME* = 2
  PRINTER_NOTIFY_FIELD_PORT_NAME* = 3
  PRINTER_NOTIFY_FIELD_DRIVER_NAME* = 4
  PRINTER_NOTIFY_FIELD_COMMENT* = 5
  PRINTER_NOTIFY_FIELD_LOCATION* = 6
  PRINTER_NOTIFY_FIELD_DEVMODE* = 7
  PRINTER_NOTIFY_FIELD_SEPFILE* = 8
  PRINTER_NOTIFY_FIELD_PRINT_PROCESSOR* = 9
  PRINTER_NOTIFY_FIELD_PARAMETERS* = 10
  PRINTER_NOTIFY_FIELD_DATATYPE* = 11
  PRINTER_NOTIFY_FIELD_SECURITY_DESCRIPTOR* = 12
  PRINTER_NOTIFY_FIELD_ATTRIBUTES* = 13
  PRINTER_NOTIFY_FIELD_PRIORITY* = 14
  PRINTER_NOTIFY_FIELD_DEFAULT_PRIORITY* = 15
  PRINTER_NOTIFY_FIELD_START_TIME* = 16
  PRINTER_NOTIFY_FIELD_UNTIL_TIME* = 17
  PRINTER_NOTIFY_FIELD_STATUS* = 18
  PRINTER_NOTIFY_FIELD_STATUS_STRING* = 19
  PRINTER_NOTIFY_FIELD_CJOBS* = 20
  PRINTER_NOTIFY_FIELD_AVERAGE_PPM* = 21
  PRINTER_NOTIFY_FIELD_TOTAL_PAGES* = 22
  PRINTER_NOTIFY_FIELD_PAGES_PRINTED* = 23
  PRINTER_NOTIFY_FIELD_TOTAL_BYTES* = 24
  PRINTER_NOTIFY_FIELD_BYTES_PRINTED* = 25
  PRINTER_CHANGE_ADD_PRINTER* = 1
  PRINTER_CHANGE_SET_PRINTER* = 2
  PRINTER_CHANGE_DELETE_PRINTER* = 4
  PRINTER_CHANGE_FAILED_CONNECTION_PRINTER* = 8
  PRINTER_CHANGE_PRINTER* = 0xFF
  PRINTER_CHANGE_ADD_JOB* = 0x100
  PRINTER_CHANGE_SET_JOB* = 0x200
  PRINTER_CHANGE_DELETE_JOB* = 0x400
  PRINTER_CHANGE_WRITE_JOB* = 0x800
  PRINTER_CHANGE_JOB* = 0xFF00
  PRINTER_CHANGE_ADD_FORM* = 0x10000
  PRINTER_CHANGE_SET_FORM* = 0x20000
  PRINTER_CHANGE_DELETE_FORM* = 0x40000
  PRINTER_CHANGE_FORM* = 0x70000
  PRINTER_CHANGE_ADD_PORT* = 0x100000
  PRINTER_CHANGE_CONFIGURE_PORT* = 0x200000
  PRINTER_CHANGE_DELETE_PORT* = 0x400000
  PRINTER_CHANGE_PORT* = 0x700000
  PRINTER_CHANGE_ADD_PRINT_PROCESSOR* = 0x1000000
  PRINTER_CHANGE_DELETE_PRINT_PROCESSOR* = 0x4000000
  PRINTER_CHANGE_PRINT_PROCESSOR* = 0x7000000
  PRINTER_CHANGE_ADD_PRINTER_DRIVER* = 0x10000000
  PRINTER_CHANGE_SET_PRINTER_DRIVER* = 0x20000000
  PRINTER_CHANGE_DELETE_PRINTER_DRIVER* = 0x40000000
  PRINTER_CHANGE_PRINTER_DRIVER* = 0x70000000
  PRINTER_CHANGE_TIMEOUT* = 0x80000000'i32
  PRINTER_CHANGE_ALL* = 0x7777FFFF
  PRINTER_NOTIFY_INFO_DISCARDED* = 1
  PRINTER_ALL_ACCESS* = ( STANDARD_RIGHTS_REQUIRED or PRINTER_ACCESS_ADMINISTER or PRINTER_ACCESS_USE )
  PRINTER_READ* = ( STANDARD_RIGHTS_READ or PRINTER_ACCESS_USE )
  PRINTER_WRITE* = ( STANDARD_RIGHTS_WRITE or PRINTER_ACCESS_USE )
  PRINTER_EXECUTE* = ( STANDARD_RIGHTS_EXECUTE or PRINTER_ACCESS_USE )
  NO_PRIORITY* = 0
  MAX_PRIORITY* = 99
  MIN_PRIORITY* = 1
  DEF_PRIORITY* = 1
  PORT_TYPE_WRITE* = 1
  PORT_TYPE_READ* = 2
  PORT_TYPE_REDIRECTED* = 4
  PORT_TYPE_NET_ATTACHED* = 8
  SERVER_ACCESS_ADMINISTER* = 1
  SERVER_ACCESS_ENUMERATE* = 2
  SERVER_ALL_ACCESS* = ( STANDARD_RIGHTS_REQUIRED or SERVER_ACCESS_ADMINISTER or SERVER_ACCESS_ENUMERATE )
  SERVER_READ* = ( STANDARD_RIGHTS_READ or SERVER_ACCESS_ENUMERATE )
  SERVER_WRITE* = ( STANDARD_RIGHTS_WRITE or SERVER_ACCESS_ADMINISTER or SERVER_ACCESS_ENUMERATE )
  SERVER_EXECUTE* = ( STANDARD_RIGHTS_EXECUTE or SERVER_ACCESS_ENUMERATE )
  PORT_STATUS_TYPE_ERROR* = 1
  PORT_STATUS_TYPE_WARNING* = 2
  PORT_STATUS_TYPE_INFO* = 3
  PORT_STATUS_OFFLINE* = 1
  PORT_STATUS_PAPER_JAM* = 2
  PORT_STATUS_PAPER_OUT* = 3
  PORT_STATUS_OUTPUT_BIN_FULL* = 4
  PORT_STATUS_PAPER_PROBLEM* = 5
  PORT_STATUS_NO_TONER* = 6
  PORT_STATUS_DOOR_OPEN* = 7
  PORT_STATUS_USER_INTERVENTION* = 8
  PORT_STATUS_OUT_OF_MEMORY* = 9
  PORT_STATUS_TONER_LOW* = 10
  PORT_STATUS_WARMING_UP* = 11
  PORT_STATUS_POWER_SAVE* = 12

type
  ADDJOB_INFO_1A* {.final, pure.} = object
    Path*: LPSTR
    JobId*: DWORD
  PADDJOB_INFO_1A* = ptr ADDJOB_INFO_1A
  LPADDJOB_INFO_1A* = ptr ADDJOB_INFO_1A
  ADDJOB_INFO_1W* {.final, pure.} = object
    Path*: LPWSTR
    JobId*: DWORD
  PADDJOB_INFO_1W* = ptr ADDJOB_INFO_1W
  LPADDJOB_INFO_1W* = ptr ADDJOB_INFO_1W
  DATATYPES_INFO_1A* {.final, pure.} = object
    pName*: LPSTR
  PDATATYPES_INFO_1A* = ptr DATATYPES_INFO_1A
  LPDATATYPES_INFO_1A* = ptr DATATYPES_INFO_1A
  DATATYPES_INFO_1W* {.final, pure.} = object
    pName*: LPWSTR
  PDATATYPES_INFO_1W* = ptr DATATYPES_INFO_1W
  LPDATATYPES_INFO_1W* = ptr DATATYPES_INFO_1W
  JOB_INFO_1A* {.final, pure.} = object
    JobId*: DWORD
    pPrinterName*: LPSTR
    pMachineName*: LPSTR
    pUserName*: LPSTR
    pDocument*: LPSTR
    pDatatype*: LPSTR
    pStatus*: LPSTR
    Status*: DWORD
    Priority*: DWORD
    Position*: DWORD
    TotalPages*: DWORD
    PagesPrinted*: DWORD
    Submitted*: SYSTEMTIME
  PJOB_INFO_1A* = ptr JOB_INFO_1A
  LPJOB_INFO_1A* = ptr JOB_INFO_1A
  JOB_INFO_1W* {.final, pure.} = object
    JobId*: DWORD
    pPrinterName*: LPWSTR
    pMachineName*: LPWSTR
    pUserName*: LPWSTR
    pDocument*: LPWSTR
    pDatatype*: LPWSTR
    pStatus*: LPWSTR
    Status*: DWORD
    Priority*: DWORD
    Position*: DWORD
    TotalPages*: DWORD
    PagesPrinted*: DWORD
    Submitted*: SYSTEMTIME
  PJOB_INFO_1W* = ptr JOB_INFO_1W
  LPJOB_INFO_1W* = ptr JOB_INFO_1W
  JOB_INFO_2A* {.final, pure.} = object
    JobId*: DWORD
    pPrinterName*: LPSTR
    pMachineName*: LPSTR
    pUserName*: LPSTR
    pDocument*: LPSTR
    pNotifyName*: LPSTR
    pDatatype*: LPSTR
    pPrintProcessor*: LPSTR
    pParameters*: LPSTR
    pDriverName*: LPSTR
    pDevMode*: LPDEVMODEA
    pStatus*: LPSTR
    pSecurityDescriptor*: PSECURITY_DESCRIPTOR
    Status*: DWORD
    Priority*: DWORD
    Position*: DWORD
    StartTime*: DWORD
    UntilTime*: DWORD
    TotalPages*: DWORD
    Size*: DWORD
    Submitted*: SYSTEMTIME
    Time*: DWORD
    PagesPrinted*: DWORD
  PJOB_INFO_2A* = ptr JOB_INFO_2A
  LPJOB_INFO_2A* = ptr JOB_INFO_2A
  JOB_INFO_2W* {.final, pure.} = object
    JobId*: DWORD
    pPrinterName*: LPWSTR
    pMachineName*: LPWSTR
    pUserName*: LPWSTR
    pDocument*: LPWSTR
    pNotifyName*: LPWSTR
    pDatatype*: LPWSTR
    pPrintProcessor*: LPWSTR
    pParameters*: LPWSTR
    pDriverName*: LPWSTR
    pDevMode*: LPDEVMODEW
    pStatus*: LPWSTR
    pSecurityDescriptor*: PSECURITY_DESCRIPTOR
    Status*: DWORD
    Priority*: DWORD
    Position*: DWORD
    StartTime*: DWORD
    UntilTime*: DWORD
    TotalPages*: DWORD
    Size*: DWORD
    Submitted*: SYSTEMTIME
    Time*: DWORD
    PagesPrinted*: DWORD
  PJOB_INFO_2W* = ptr JOB_INFO_2W
  LPJOB_INFO_2W* = ptr JOB_INFO_2W
  DOC_INFO_1A* {.final, pure.} = object
    pDocName*: LPSTR
    pOutputFile*: LPSTR
    pDatatype*: LPSTR
  PDOC_INFO_1A* = ptr DOC_INFO_1A
  LPDOC_INFO_1A* = ptr DOC_INFO_1A
  DOC_INFO_1W* {.final, pure.} = object
    pDocName*: LPWSTR
    pOutputFile*: LPWSTR
    pDatatype*: LPWSTR
  PDOC_INFO_1W* = ptr DOC_INFO_1W
  LPDOC_INFO_1W* = ptr DOC_INFO_1W
  DOC_INFO_2A* {.final, pure.} = object
    pDocName*: LPSTR
    pOutputFile*: LPSTR
    pDatatype*: LPSTR
    dwMode*: DWORD
    JobId*: DWORD
  PDOC_INFO_2A* = ptr DOC_INFO_2A
  LPDOC_INFO_2A* = ptr DOC_INFO_2A
  DOC_INFO_2W* {.final, pure.} = object
    pDocName*: LPWSTR
    pOutputFile*: LPWSTR
    pDatatype*: LPWSTR
    dwMode*: DWORD
    JobId*: DWORD
  PDOC_INFO_2W* = ptr DOC_INFO_2W
  LPDOC_INFO_2W* = ptr DOC_INFO_2W
  DRIVER_INFO_1A* {.final, pure.} = object
    pName*: LPSTR
  PDRIVER_INFO_1A* = ptr DRIVER_INFO_1A
  LPDRIVER_INFO_1A* = ptr DRIVER_INFO_1A
  DRIVER_INFO_1W* {.final, pure.} = object
    pName*: LPWSTR
  PDRIVER_INFO_1W* = ptr DRIVER_INFO_1W
  LPDRIVER_INFO_1W* = ptr DRIVER_INFO_1W
  DRIVER_INFO_2A* {.final, pure.} = object
    cVersion*: DWORD
    pName*: LPSTR
    pEnvironment*: LPSTR
    pDriverPath*: LPSTR
    pDataFile*: LPSTR
    pConfigFile*: LPSTR
  PDRIVER_INFO_2A* = ptr DRIVER_INFO_2A
  LPDRIVER_INFO_2A* = ptr DRIVER_INFO_2A
  DRIVER_INFO_2W* {.final, pure.} = object
    cVersion*: DWORD
    pName*: LPWSTR
    pEnvironment*: LPWSTR
    pDriverPath*: LPWSTR
    pDataFile*: LPWSTR
    pConfigFile*: LPWSTR
  PDRIVER_INFO_2W* = ptr DRIVER_INFO_2W
  LPDRIVER_INFO_2W* = ptr DRIVER_INFO_2W
  DRIVER_INFO_3A* {.final, pure.} = object
    cVersion*: DWORD
    pName*: LPSTR
    pEnvironment*: LPSTR
    pDriverPath*: LPSTR
    pDataFile*: LPSTR
    pConfigFile*: LPSTR
    pHelpFile*: LPSTR
    pDependentFiles*: LPSTR
    pMonitorName*: LPSTR
    pDefaultDataType*: LPSTR
  PDRIVER_INFO_3A* = ptr DRIVER_INFO_3A
  LPDRIVER_INFO_3A* = ptr DRIVER_INFO_3A
  DRIVER_INFO_3W* {.final, pure.} = object
    cVersion*: DWORD
    pName*: LPWSTR
    pEnvironment*: LPWSTR
    pDriverPath*: LPWSTR
    pDataFile*: LPWSTR
    pConfigFile*: LPWSTR
    pHelpFile*: LPWSTR
    pDependentFiles*: LPWSTR
    pMonitorName*: LPWSTR
    pDefaultDataType*: LPWSTR
  PDRIVER_INFO_3W* = ptr DRIVER_INFO_3W
  LPDRIVER_INFO_3W* = ptr DRIVER_INFO_3W
  MONITOR_INFO_1A* {.final, pure.} = object
    pName*: LPSTR
  PMONITOR_INFO_1A* = ptr MONITOR_INFO_1A
  LPMONITOR_INFO_1A* = ptr MONITOR_INFO_1A
  MONITOR_INFO_1W* {.final, pure.} = object
    pName*: LPWSTR
  PMONITOR_INFO_1W* = ptr MONITOR_INFO_1W
  LPMONITOR_INFO_1W* = ptr MONITOR_INFO_1W
  PORT_INFO_1A* {.final, pure.} = object
    pName*: LPSTR
  PPORT_INFO_1A* = ptr PORT_INFO_1A
  LPPORT_INFO_1A* = ptr PORT_INFO_1A
  PORT_INFO_1W* {.final, pure.} = object
    pName*: LPWSTR
  PPORT_INFO_1W* = ptr PORT_INFO_1W
  LPPORT_INFO_1W* = ptr PORT_INFO_1W
  MONITOR_INFO_2A* {.final, pure.} = object
    pName*: LPSTR
    pEnvironment*: LPSTR
    pDLLName*: LPSTR
  PMONITOR_INFO_2A* = ptr MONITOR_INFO_2A
  LPMONITOR_INFO_2A* = ptr MONITOR_INFO_2A
  MONITOR_INFO_2W* {.final, pure.} = object
    pName*: LPWSTR
    pEnvironment*: LPWSTR
    pDLLName*: LPWSTR
  PMONITOR_INFO_2W* = ptr MONITOR_INFO_2W
  LPMONITOR_INFO_2W* = ptr MONITOR_INFO_2W
  PORT_INFO_2A* {.final, pure.} = object
    pPortName*: LPSTR
    pMonitorName*: LPSTR
    pDescription*: LPSTR
    fPortType*: DWORD
    Reserved*: DWORD
  PPORT_INFO_2A* = ptr PORT_INFO_2A
  LPPORT_INFO_2A* = ptr PORT_INFO_2A
  PORT_INFO_2W* {.final, pure.} = object
    pPortName*: LPWSTR
    pMonitorName*: LPWSTR
    pDescription*: LPWSTR
    fPortType*: DWORD
    Reserved*: DWORD
  PPORT_INFO_2W* = ptr PORT_INFO_2W
  LPPORT_INFO_2W* = ptr PORT_INFO_2W
  PORT_INFO_3A* {.final, pure.} = object
    dwStatus*: DWORD
    pszStatus*: LPSTR
    dwSeverity*: DWORD
  PPORT_INFO_3A* = ptr PORT_INFO_3A
  LPPORT_INFO_3A* = ptr PORT_INFO_3A
  PORT_INFO_3W* {.final, pure.} = object
    dwStatus*: DWORD
    pszStatus*: LPWSTR
    dwSeverity*: DWORD
  PPORT_INFO_3W* = ptr PORT_INFO_3W
  LPPORT_INFO_3W* = ptr PORT_INFO_3W
  PRINTER_INFO_1A* {.final, pure.} = object
    Flags*: DWORD
    pDescription*: LPSTR
    pName*: LPSTR
    pComment*: LPSTR
  PPRINTER_INFO_1A* = ptr PRINTER_INFO_1A
  LPPRINTER_INFO_1A* = ptr PRINTER_INFO_1A
  PRINTER_INFO_1W* {.final, pure.} = object
    Flags*: DWORD
    pDescription*: LPWSTR
    pName*: LPWSTR
    pComment*: LPWSTR
  PPRINTER_INFO_1W* = ptr PRINTER_INFO_1W
  LPPRINTER_INFO_1W* = ptr PRINTER_INFO_1W
  PRINTER_INFO_2A* {.final, pure.} = object
    pServerName*: LPSTR
    pPrinterName*: LPSTR
    pShareName*: LPSTR
    pPortName*: LPSTR
    pDriverName*: LPSTR
    pComment*: LPSTR
    pLocation*: LPSTR
    pDevMode*: LPDEVMODEA
    pSepFile*: LPSTR
    pPrintProcessor*: LPSTR
    pDatatype*: LPSTR
    pParameters*: LPSTR
    pSecurityDescriptor*: PSECURITY_DESCRIPTOR
    Attributes*: DWORD
    Priority*: DWORD
    DefaultPriority*: DWORD
    StartTime*: DWORD
    UntilTime*: DWORD
    Status*: DWORD
    cJobs*: DWORD
    AveragePPM*: DWORD
  PPRINTER_INFO_2A* = ptr PRINTER_INFO_2A
  LPPRINTER_INFO_2A* = ptr PRINTER_INFO_2A
  PRINTER_INFO_2W* {.final, pure.} = object
    pServerName*: LPWSTR
    pPrinterName*: LPWSTR
    pShareName*: LPWSTR
    pPortName*: LPWSTR
    pDriverName*: LPWSTR
    pComment*: LPWSTR
    pLocation*: LPWSTR
    pDevMode*: LPDEVMODEW
    pSepFile*: LPWSTR
    pPrintProcessor*: LPWSTR
    pDatatype*: LPWSTR
    pParameters*: LPWSTR
    pSecurityDescriptor*: PSECURITY_DESCRIPTOR
    Attributes*: DWORD
    Priority*: DWORD
    DefaultPriority*: DWORD
    StartTime*: DWORD
    UntilTime*: DWORD
    Status*: DWORD
    cJobs*: DWORD
    AveragePPM*: DWORD
  PPRINTER_INFO_2W* = ptr PRINTER_INFO_2W
  LPPRINTER_INFO_2W* = ptr PRINTER_INFO_2W
  PRINTER_INFO_3* {.final, pure.} = object
    pSecurityDescriptor*: PSECURITY_DESCRIPTOR
  PPRINTER_INFO_3* = ptr PRINTER_INFO_3
  LPPRINTER_INFO_3* = ptr PRINTER_INFO_3
  PRINTER_INFO_4A* {.final, pure.} = object
    pPrinterName*: LPSTR
    pServerName*: LPSTR
    Attributes*: DWORD
  PPRINTER_INFO_4A* = ptr PRINTER_INFO_4A
  LPPRINTER_INFO_4A* = ptr PRINTER_INFO_4A
  PRINTER_INFO_4W* {.final, pure.} = object
    pPrinterName*: LPWSTR
    pServerName*: LPWSTR
    Attributes*: DWORD
  PPRINTER_INFO_4W* = ptr PRINTER_INFO_4W
  LPPRINTER_INFO_4W* = ptr PRINTER_INFO_4W
  PRINTER_INFO_5A* {.final, pure.} = object
    pPrinterName*: LPSTR
    pPortName*: LPSTR
    Attributes*: DWORD
    DeviceNotSelectedTimeout*: DWORD
    TransmissionRetryTimeout*: DWORD
  PPRINTER_INFO_5A* = ptr PRINTER_INFO_5A
  LPPRINTER_INFO_5A* = ptr PRINTER_INFO_5A
  PRINTER_INFO_5W* {.final, pure.} = object
    pPrinterName*: LPWSTR
    pPortName*: LPWSTR
    Attributes*: DWORD
    DeviceNotSelectedTimeout*: DWORD
    TransmissionRetryTimeout*: DWORD
  PPRINTER_INFO_5W* = ptr PRINTER_INFO_5W
  LPPRINTER_INFO_5W* = ptr PRINTER_INFO_5W
  PRINTER_INFO_6* {.final, pure.} = object
    dwStatus*: DWORD
  PPRINTER_INFO_6* = ptr PRINTER_INFO_6
  LPPRINTER_INFO_6* = ptr PRINTER_INFO_6
  PRINTPROCESSOR_INFO_1A* {.final, pure.} = object
    pName*: LPSTR
  PPRINTPROCESSOR_INFO_1A* = ptr PRINTPROCESSOR_INFO_1A
  LPPRINTPROCESSOR_INFO_1A* = ptr PRINTPROCESSOR_INFO_1A
  PRINTPROCESSOR_INFO_1W* {.final, pure.} = object
    pName*: LPWSTR
  PPRINTPROCESSOR_INFO_1W* = ptr PRINTPROCESSOR_INFO_1W
  LPPRINTPROCESSOR_INFO_1W* = ptr PRINTPROCESSOR_INFO_1W
  PRINTER_NOTIFY_INFO_DATA_NotifyData_Data* {.final, pure.} = object
    cbBuf*: DWORD
    pBuf*: PVOID
  PRINTER_NOTIFY_INFO_DATA_NotifyData* {.final, union, pure.} = object
    adwData*: array[2, DWORD]
    Data*: PRINTER_NOTIFY_INFO_DATA_NotifyData_Data
  PRINTER_NOTIFY_INFO_DATA* {.final, pure.} = object
    Type*: WORD
    Field*: WORD
    Reserved*: DWORD
    Id*: DWORD
  PPRINTER_NOTIFY_INFO_DATA* = ptr PRINTER_NOTIFY_INFO_DATA
  LPPRINTER_NOTIFY_INFO_DATA* = ptr PRINTER_NOTIFY_INFO_DATA
  PRINTER_NOTIFY_INFO* {.final, pure.} = object
    Version*: DWORD
    Flags*: DWORD
    Count*: DWORD
    aData*: array[1, PRINTER_NOTIFY_INFO_DATA]
  PPRINTER_NOTIFY_INFO* = ptr PRINTER_NOTIFY_INFO
  LPPRINTER_NOTIFY_INFO* = ptr PRINTER_NOTIFY_INFO
  FORM_INFO_1A* {.final, pure.} = object
    Flags*: DWORD
    pName*: LPSTR
    Size*: SIZEL
    ImageableArea*: RECTL
  PFORM_INFO_1A* = ptr FORM_INFO_1A
  LPFORM_INFO_1A* = ptr FORM_INFO_1A
  FORM_INFO_1W* {.final, pure.} = object
    Flags*: DWORD
    pName*: LPWSTR
    Size*: SIZEL
    ImageableArea*: RECTL
  PFORM_INFO_1W* = ptr FORM_INFO_1W
  LPFORM_INFO_1W* = ptr FORM_INFO_1W
  PRINTER_DEFAULTSA* {.final, pure.} = object
    pDatatype*: LPSTR
    pDevMode*: LPDEVMODE
    DesiredAccess*: ACCESS_MASK
  PPRINTER_DEFAULTSA* = ptr PRINTER_DEFAULTSA
  LPPRINTER_DEFAULTSA* = ptr PRINTER_DEFAULTSA
  PRINTER_DEFAULTSW* {.final, pure.} = object
    pDatatype*: LPWSTR
    pDevMode*: LPDEVMODE
    DesiredAccess*: ACCESS_MASK
  PPRINTER_DEFAULTSW* = ptr PRINTER_DEFAULTSW
  LPPRINTER_DEFAULTSW* = ptr PRINTER_DEFAULTSW

proc AbortPrinter*(P1: HANDLE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddFormA*(P1: HANDLE, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddFormW*(P1: HANDLE, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddJobA*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddJobW*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddMonitorA*(P1: LPSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddMonitorW*(P1: LPWSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddPortA*(P1: LPSTR, P2: HWND, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddPortW*(P1: LPWSTR, P2: HWND, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddPrinterA*(P1: LPSTR, P2: DWORD, P3: PBYTE): HANDLE {.winapi, dynlib: "winspool.drv", importc.}
proc AddPrinterW*(P1: LPWSTR, P2: DWORD, P3: PBYTE): HANDLE {.winapi, dynlib: "winspool.drv", importc.}
proc AddPrinterConnectionA*(P1: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddPrinterConnectionW*(P1: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddPrinterDriverA*(P1: LPSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddPrinterDriverW*(P1: LPWSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddPrintProcessorA*(P1: LPSTR, P2: LPSTR, P3: LPSTR, P4: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddPrintProcessorW*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR, P4: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddPrintProvidorA*(P1: LPSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AddPrintProvidorW*(P1: LPWSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc AdvancedDocumentPropertiesA*(P1: HWND, P2: HANDLE, P3: LPSTR, P4: PDEVMODE, P5: PDEVMODEA): LONG {.winapi, dynlib: "winspool.drv", importc.}
proc AdvancedDocumentPropertiesW*(P1: HWND, P2: HANDLE, P3: LPWSTR, P4: PDEVMODE, P5: PDEVMODEW): LONG {.winapi, dynlib: "winspool.drv", importc.}
proc ClosePrinter*(P1: HANDLE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc ConfigurePortA*(P1: LPSTR, P2: HWND, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc ConfigurePortW*(P1: LPWSTR, P2: HWND, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc ConnectToPrinterDlg*(P1: HWND, P2: DWORD): HANDLE {.winapi, dynlib: "winspool.drv", importc.}
proc DeleteFormA*(P1: HANDLE, P2: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeleteFormW*(P1: HANDLE, P2: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeleteMonitorA*(P1: LPSTR, P2: LPSTR, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeleteMonitorW*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePortA*(P1: LPSTR, P2: HWND, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePortW*(P1: LPWSTR, P2: HWND, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePrinter*(P1: HANDLE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePrinterConnectionA*(P1: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePrinterConnectionW*(P1: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePrinterDataA*(P1: HANDLE, P2: LPSTR): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePrinterDataW*(P1: HANDLE, P2: LPWSTR): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePrinterDriverA*(P1: LPSTR, P2: LPSTR, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePrinterDriverW*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePrintProcessorA*(P1: LPSTR, P2: LPSTR, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePrintProcessorW*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePrintProvidorA*(P1: LPSTR, P2: LPSTR, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DeletePrintProvidorW*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc DocumentPropertiesA*(P1: HWND, P2: HANDLE, P3: LPSTR, P4: PDEVMODEA, P5: PDEVMODEA, P6: DWORD): LONG {.winapi, dynlib: "winspool.drv", importc.}
proc DocumentPropertiesW*(P1: HWND, P2: HANDLE, P3: LPWSTR, P4: PDEVMODEW, P5: PDEVMODEW, P6: DWORD): LONG {.winapi, dynlib: "winspool.drv", importc.}
proc EndDocPrinter*(P1: HANDLE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EndPagePrinter*(P1: HANDLE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumFormsA*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumFormsW*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumJobsA*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: DWORD, P5: PBYTE, P6: DWORD, P7: PDWORD, P8: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumJobsW*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: DWORD, P5: PBYTE, P6: DWORD, P7: PDWORD, P8: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumMonitorsA*(P1: LPSTR, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumMonitorsW*(P1: LPWSTR, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPortsA*(P1: LPSTR, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPortsW*(P1: LPWSTR, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPrinterDataA*(P1: HANDLE, P2: DWORD, P3: LPSTR, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PBYTE, P8: DWORD, P9: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPrinterDataW*(P1: HANDLE, P2: DWORD, P3: LPWSTR, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PBYTE, P8: DWORD, P9: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPrinterDriversA*(P1: LPSTR, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPrinterDriversW*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPrintersA*(P1: DWORD, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPrintersW*(P1: DWORD, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPrintProcessorDatatypesA*(P1: LPSTR, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPrintProcessorDatatypesW*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPrintProcessorsA*(P1: LPSTR, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc EnumPrintProcessorsW*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc FindClosePrinterChangeNotification*(P1: HANDLE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc FindFirstPrinterChangeNotification*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: PVOID): HANDLE {.winapi, dynlib: "winspool.drv", importc.}
proc FindNextPrinterChangeNotification*(P1: HANDLE, P2: PDWORD, P3: PVOID, P4: ptr PVOID): HANDLE {.winapi, dynlib: "winspool.drv", importc.}
proc FreePrinterNotifyInfo*(P1: PPRINTER_NOTIFY_INFO): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc GetDefaultPrinterA*(P1: LPSTR, P2: LPDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc GetDefaultPrinterW*(P1: LPWSTR, P2: LPDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc GetFormA*(P1: HANDLE, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc GetFormW*(P1: HANDLE, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc GetJobA*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc GetJobW*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc GetPrinterA*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc GetPrinterW*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc GetPrinterDataA*(P1: HANDLE, P2: LPSTR, P3: PDWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc GetPrinterDataW*(P1: HANDLE, P2: LPWSTR, P3: PDWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc GetPrinterDriverA*(P1: HANDLE, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc GetPrinterDriverW*(P1: HANDLE, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc GetPrinterDriverDirectoryA*(P1: LPSTR, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc GetPrinterDriverDirectoryW*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc GetPrintProcessorDirectoryA*(P1: LPSTR, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc GetPrintProcessorDirectoryW*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc OpenPrinterA*(P1: LPSTR, P2: PHANDLE, P3: LPPRINTER_DEFAULTSA): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc OpenPrinterW*(P1: LPWSTR, P2: PHANDLE, P3: LPPRINTER_DEFAULTSW): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc PrinterMessageBoxA*(P1: HANDLE, P2: DWORD, P3: HWND, P4: LPSTR, P5: LPSTR, P6: DWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc PrinterMessageBoxW*(P1: HANDLE, P2: DWORD, P3: HWND, P4: LPWSTR, P5: LPWSTR, P6: DWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc PrinterProperties*(P1: HWND, P2: HANDLE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc ReadPrinter*(P1: HANDLE, P2: PVOID, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc ResetPrinterA*(P1: HANDLE, P2: LPPRINTER_DEFAULTSA): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc ResetPrinterW*(P1: HANDLE, P2: LPPRINTER_DEFAULTSW): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc ScheduleJob*(P1: HANDLE, P2: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc SetFormA*(P1: HANDLE, P2: LPSTR, P3: DWORD, P4: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc SetFormW*(P1: HANDLE, P2: LPWSTR, P3: DWORD, P4: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc SetJobA*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: PBYTE, P5: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc SetJobW*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: PBYTE, P5: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc SetPrinterA*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc SetPrinterW*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc SetPrinterDataA*(P1: HANDLE, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc SetPrinterDataW*(P1: HANDLE, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc StartDocPrinterA*(P1: HANDLE, P2: DWORD, P3: PBYTE): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc StartDocPrinterW*(P1: HANDLE, P2: DWORD, P3: PBYTE): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc StartPagePrinter*(P1: HANDLE): BOOL {.winapi, dynlib: "winspool.drv", importc.}
proc WaitForPrinterChange*(P1: HANDLE, P2: DWORD): DWORD {.winapi, dynlib: "winspool.drv", importc.}
proc WritePrinter*(P1: HANDLE, P2: PVOID, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc.}

when not defined(winansi):
  type
    JOB_INFO_1* = JOB_INFO_1W
    JOB_INFO_2* = JOB_INFO_2W
    ADDJOB_INFO_1* = ADDJOB_INFO_1W
    DATATYPES_INFO_1* = DATATYPES_INFO_1W
    MONITOR_INFO_1* = MONITOR_INFO_1W
    MONITOR_INFO_2* = MONITOR_INFO_2W
    DOC_INFO_1* = DOC_INFO_1W
    DOC_INFO_2* = DOC_INFO_2W
    PORT_INFO_1* = PORT_INFO_1W
    PORT_INFO_2* = PORT_INFO_2W
    PORT_INFO_3* = PORT_INFO_3W
    DRIVER_INFO_2* = DRIVER_INFO_2W
    PRINTER_INFO_1* = PRINTER_INFO_1W
    PRINTER_INFO_2* = PRINTER_INFO_2W
    PRINTER_INFO_4* = PRINTER_INFO_4W
    PRINTER_INFO_5* = PRINTER_INFO_5W
    PRINTPROCESSOR_INFO_1* = PRINTPROCESSOR_INFO_1W
    FORM_INFO_1* = FORM_INFO_1W
    PRINTER_DEFAULTS* = PRINTER_DEFAULTSW

  proc AddForm*(P1: HANDLE, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddFormW".}
  proc AddJob*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddJobW".}
  proc AddMonitor*(P1: LPWSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddMonitorW".}
  proc AddPort*(P1: LPWSTR, P2: HWND, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddPortW".}
  proc AddPrinter*(P1: LPWSTR, P2: DWORD, P3: PBYTE): HANDLE {.winapi, dynlib: "winspool.drv", importc: "AddPrinterW".}
  proc AddPrinterConnection*(P1: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddPrinterConnectionW".}
  proc AddPrinterDriver*(P1: LPWSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddPrinterDriverW".}
  proc AddPrintProcessor*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR, P4: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddPrintProcessorW".}
  proc AddPrintProvidor*(P1: LPWSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddPrintProvidorW".}
  proc AdvancedDocumentProperties*(P1: HWND, P2: HANDLE, P3: LPWSTR, P4: PDEVMODE, P5: PDEVMODEW): LONG {.winapi, dynlib: "winspool.drv", importc: "AdvancedDocumentPropertiesW".}
  proc ConfigurePort*(P1: LPWSTR, P2: HWND, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "ConfigurePortW".}
  proc DeleteForm*(P1: HANDLE, P2: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeleteFormW".}
  proc DeleteMonitor*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeleteMonitorW".}
  proc DeletePort*(P1: LPWSTR, P2: HWND, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeletePortW".}
  proc DeletePrinterConnection*(P1: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeletePrinterConnectionW".}
  proc DeletePrinterData*(P1: HANDLE, P2: LPWSTR): DWORD {.winapi, dynlib: "winspool.drv", importc: "DeletePrinterDataW".}
  proc DeletePrinterDriver*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeletePrinterDriverW".}
  proc DeletePrintProcessor*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeletePrintProcessorW".}
  proc DeletePrintProvidor*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeletePrintProvidorW".}
  proc DocumentProperties*(P1: HWND, P2: HANDLE, P3: LPWSTR, P4: PDEVMODEW, P5: PDEVMODEW, P6: DWORD): LONG {.winapi, dynlib: "winspool.drv", importc: "DocumentPropertiesW".}
  proc EnumForms*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumFormsW".}
  proc EnumJobs*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: DWORD, P5: PBYTE, P6: DWORD, P7: PDWORD, P8: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumJobsW".}
  proc EnumMonitors*(P1: LPWSTR, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumMonitorsW".}
  proc EnumPorts*(P1: LPWSTR, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumPortsW".}
  proc EnumPrinterData*(P1: HANDLE, P2: DWORD, P3: LPWSTR, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PBYTE, P8: DWORD, P9: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "EnumPrinterDataW".}
  proc EnumPrinterDrivers*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumPrinterDriversW".}
  proc EnumPrinters*(P1: DWORD, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumPrintersW".}
  proc EnumPrintProcessorDatatypes*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumPrintProcessorDatatypesW".}
  proc EnumPrintProcessors*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumPrintProcessorsW".}
  proc GetDefaultPrinter*(P1: LPWSTR, P2: LPDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "GetDefaultPrinterW".}
  proc GetForm*(P1: HANDLE, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "GetFormW".}
  proc GetJob*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "GetJobW".}
  proc GetPrinter*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "GetPrinterW".}
  proc GetPrinterData*(P1: HANDLE, P2: LPWSTR, P3: PDWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "GetPrinterDataW".}
  proc GetPrinterDriver*(P1: HANDLE, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "GetPrinterDriverW".}
  proc GetPrinterDriverDirectory*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "GetPrinterDriverDirectoryW".}
  proc GetPrintProcessorDirectory*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "GetPrintProcessorDirectoryW".}
  proc OpenPrinter*(P1: LPWSTR, P2: PHANDLE, P3: LPPRINTER_DEFAULTSW): BOOL {.winapi, dynlib: "winspool.drv", importc: "OpenPrinterW".}
  proc PrinterMessageBox*(P1: HANDLE, P2: DWORD, P3: HWND, P4: LPWSTR, P5: LPWSTR, P6: DWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "PrinterMessageBoxW".}
  proc ResetPrinter*(P1: HANDLE, P2: LPPRINTER_DEFAULTSW): BOOL {.winapi, dynlib: "winspool.drv", importc: "ResetPrinterW".}
  proc SetForm*(P1: HANDLE, P2: LPWSTR, P3: DWORD, P4: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc: "SetFormW".}
  proc SetJob*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: PBYTE, P5: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "SetJobW".}
  proc SetPrinter*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "SetPrinterW".}
  proc SetPrinterData*(P1: HANDLE, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "SetPrinterDataW".}
  proc StartDocPrinter*(P1: HANDLE, P2: DWORD, P3: PBYTE): DWORD {.winapi, dynlib: "winspool.drv", importc: "StartDocPrinterW".}

else:
  type
    JOB_INFO_1* = JOB_INFO_1A
    JOB_INFO_2* = JOB_INFO_2A
    ADDJOB_INFO_1* = ADDJOB_INFO_1A
    DATATYPES_INFO_1* = DATATYPES_INFO_1A
    MONITOR_INFO_1* = MONITOR_INFO_1A
    MONITOR_INFO_2* = MONITOR_INFO_2A
    DOC_INFO_1* = DOC_INFO_1A
    DOC_INFO_2* = DOC_INFO_2A
    PORT_INFO_1* = PORT_INFO_1A
    PORT_INFO_2* = PORT_INFO_2A
    PORT_INFO_3* = PORT_INFO_3A
    DRIVER_INFO_2* = DRIVER_INFO_2A
    PRINTER_INFO_1* = PRINTER_INFO_1A
    PRINTER_INFO_2* = PRINTER_INFO_2A
    PRINTER_INFO_4* = PRINTER_INFO_4A
    PRINTER_INFO_5* = PRINTER_INFO_5A
    PRINTPROCESSOR_INFO_1* = PRINTPROCESSOR_INFO_1A
    FORM_INFO_1* = FORM_INFO_1A
    PRINTER_DEFAULTS* = PRINTER_DEFAULTSA

  proc AddForm*(P1: HANDLE, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddFormA".}
  proc AddJob*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddJobA".}
  proc AddMonitor*(P1: LPSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddMonitorA".}
  proc AddPort*(P1: LPSTR, P2: HWND, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddPortA".}
  proc AddPrinter*(P1: LPSTR, P2: DWORD, P3: PBYTE): HANDLE {.winapi, dynlib: "winspool.drv", importc: "AddPrinterA".}
  proc AddPrinterConnection*(P1: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddPrinterConnectionA".}
  proc AddPrinterDriver*(P1: LPSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddPrinterDriverA".}
  proc AddPrintProcessor*(P1: LPSTR, P2: LPSTR, P3: LPSTR, P4: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddPrintProcessorA".}
  proc AddPrintProvidor*(P1: LPSTR, P2: DWORD, P3: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc: "AddPrintProvidorA".}
  proc AdvancedDocumentProperties*(P1: HWND, P2: HANDLE, P3: LPSTR, P4: PDEVMODE, P5: PDEVMODEA): LONG {.winapi, dynlib: "winspool.drv", importc: "AdvancedDocumentPropertiesA".}
  proc ConfigurePort*(P1: LPSTR, P2: HWND, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "ConfigurePortA".}
  proc DeleteForm*(P1: HANDLE, P2: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeleteFormA".}
  proc DeleteMonitor*(P1: LPSTR, P2: LPSTR, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeleteMonitorA".}
  proc DeletePort*(P1: LPSTR, P2: HWND, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeletePortA".}
  proc DeletePrinterConnection*(P1: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeletePrinterConnectionA".}
  proc DeletePrinterData*(P1: HANDLE, P2: LPSTR): DWORD {.winapi, dynlib: "winspool.drv", importc: "DeletePrinterDataA".}
  proc DeletePrinterDriver*(P1: LPSTR, P2: LPSTR, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeletePrinterDriverA".}
  proc DeletePrintProcessor*(P1: LPSTR, P2: LPSTR, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeletePrintProcessorA".}
  proc DeletePrintProvidor*(P1: LPSTR, P2: LPSTR, P3: LPSTR): BOOL {.winapi, dynlib: "winspool.drv", importc: "DeletePrintProvidorA".}
  proc DocumentProperties*(P1: HWND, P2: HANDLE, P3: LPSTR, P4: PDEVMODEA, P5: PDEVMODEA, P6: DWORD): LONG {.winapi, dynlib: "winspool.drv", importc: "DocumentPropertiesA".}
  proc EnumForms*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumFormsA".}
  proc EnumJobs*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: DWORD, P5: PBYTE, P6: DWORD, P7: PDWORD, P8: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumJobsA".}
  proc EnumMonitors*(P1: LPSTR, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumMonitorsA".}
  proc EnumPorts*(P1: LPSTR, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumPortsA".}
  proc EnumPrinterData*(P1: HANDLE, P2: DWORD, P3: LPSTR, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PBYTE, P8: DWORD, P9: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "EnumPrinterDataA".}
  proc EnumPrinterDrivers*(P1: LPSTR, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumPrinterDriversA".}
  proc EnumPrinters*(P1: DWORD, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumPrintersA".}
  proc EnumPrintProcessorDatatypes*(P1: LPSTR, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumPrintProcessorDatatypesA".}
  proc EnumPrintProcessors*(P1: LPSTR, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "EnumPrintProcessorsA".}
  proc GetDefaultPrinter*(P1: LPSTR, P2: LPDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "GetDefaultPrinterA".}
  proc GetForm*(P1: HANDLE, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "GetFormA".}
  proc GetJob*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "GetJobA".}
  proc GetPrinter*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "GetPrinterA".}
  proc GetPrinterData*(P1: HANDLE, P2: LPSTR, P3: PDWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "GetPrinterDataA".}
  proc GetPrinterDriver*(P1: HANDLE, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "GetPrinterDriverA".}
  proc GetPrinterDriverDirectory*(P1: LPSTR, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "GetPrinterDriverDirectoryA".}
  proc GetPrintProcessorDirectory*(P1: LPSTR, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD, P6: PDWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "GetPrintProcessorDirectoryA".}
  proc OpenPrinter*(P1: LPSTR, P2: PHANDLE, P3: LPPRINTER_DEFAULTSA): BOOL {.winapi, dynlib: "winspool.drv", importc: "OpenPrinterA".}
  proc PrinterMessageBox*(P1: HANDLE, P2: DWORD, P3: HWND, P4: LPSTR, P5: LPSTR, P6: DWORD): DWORD {.winapi, dynlib: "winspool.drv", importc: "PrinterMessageBoxA".}
  proc ResetPrinter*(P1: HANDLE, P2: LPPRINTER_DEFAULTSA): BOOL {.winapi, dynlib: "winspool.drv", importc: "ResetPrinterA".}
  proc SetForm*(P1: HANDLE, P2: LPSTR, P3: DWORD, P4: PBYTE): BOOL {.winapi, dynlib: "winspool.drv", importc: "SetFormA".}
  proc SetJob*(P1: HANDLE, P2: DWORD, P3: DWORD, P4: PBYTE, P5: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "SetJobA".}
  proc SetPrinter*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "SetPrinterA".}
  proc SetPrinterData*(P1: HANDLE, P2: LPSTR, P3: DWORD, P4: PBYTE, P5: DWORD): BOOL {.winapi, dynlib: "winspool.drv", importc: "SetPrinterDataA".}
  proc StartDocPrinter*(P1: HANDLE, P2: DWORD, P3: PBYTE): DWORD {.winapi, dynlib: "winspool.drv", importc: "StartDocPrinterA".}

type
  PJOB_INFO_1* = ptr JOB_INFO_1
  LPJOB_INFO_1* = ptr JOB_INFO_1
  PJOB_INFO_2* = ptr JOB_INFO_2
  LPJOB_INFO_2* = ptr JOB_INFO_2
  PADDJOB_INFO_1* = ptr ADDJOB_INFO_1
  LPADDJOB_INFO_1* = ptr ADDJOB_INFO_1
  PDATATYPES_INFO_1* = ptr DATATYPES_INFO_1
  LPDATATYPES_INFO_1* = ptr DATATYPES_INFO_1
  PMONITOR_INFO_1* = ptr MONITOR_INFO_1
  LPMONITOR_INFO_1* = ptr MONITOR_INFO_1
  PMONITOR_INFO_2* = ptr MONITOR_INFO_2
  LPMONITOR_INFO_2* = ptr MONITOR_INFO_2
  PDOC_INFO_1* = ptr DOC_INFO_1
  LPDOC_INFO_1* = ptr DOC_INFO_1
  PDOC_INFO_2* = ptr DOC_INFO_2
  LPDOC_INFO_2* = ptr DOC_INFO_2
  PPORT_INFO_1* = ptr PORT_INFO_1
  LPPORT_INFO_1* = ptr PORT_INFO_1
  PPORT_INFO_2* = ptr PORT_INFO_2
  LPPORT_INFO_2* = ptr PORT_INFO_2
  PPORT_INFO_3* = ptr PORT_INFO_3
  LPPORT_INFO_3* = ptr PORT_INFO_3
  PDRIVER_INFO_2* = ptr DRIVER_INFO_2
  LPDRIVER_INFO_2* = ptr DRIVER_INFO_2
  PPRINTER_INFO_1* = ptr PRINTER_INFO_1
  LPPRINTER_INFO_1* = ptr PRINTER_INFO_1
  PPRINTER_INFO_2* = ptr PRINTER_INFO_2
  LPPRINTER_INFO_2* = ptr PRINTER_INFO_2
  PPRINTER_INFO_4* = ptr PRINTER_INFO_4
  LPPRINTER_INFO_4* = ptr PRINTER_INFO_4
  PPRINTER_INFO_5* = ptr PRINTER_INFO_5
  LPPRINTER_INFO_5* = ptr PRINTER_INFO_5
  PPRINTPROCESSOR_INFO_1* = ptr PRINTPROCESSOR_INFO_1
  LPPRINTPROCESSOR_INFO_1* = ptr PRINTPROCESSOR_INFO_1
  PFORM_INFO_1* = ptr FORM_INFO_1
  LPFORM_INFO_1* = ptr FORM_INFO_1
  PPRINTER_DEFAULTS* = ptr PRINTER_DEFAULTS
  LPPRINTER_DEFAULTS* = ptr PRINTER_DEFAULTS


# net/wininet.nim
const
  # INTERNET_SCHEME* = enum
  INTERNET_SCHEME_PARTIAL* = -2
  INTERNET_SCHEME_UNKNOWN* = -1
  INTERNET_SCHEME_DEFAULT* = 0
  INTERNET_SCHEME_FTP* = 1
  INTERNET_SCHEME_GOPHER* = 2
  INTERNET_SCHEME_HTTP* = 3
  INTERNET_SCHEME_HTTPS* = 4
  INTERNET_SCHEME_FILE* = 5
  INTERNET_SCHEME_NEWS* = 6
  INTERNET_SCHEME_MAILTO* = 7
  INTERNET_SCHEME_SOCKS* = 8

type
  HINTERNET* = HANDLE
  INTERNET_STATUS_CALLBACK* = proc (P1: HINTERNET, P2: DWORD, P3: DWORD, P4: PVOID, P5: DWORD): void {.stdcall.}

const
  INTERNET_INVALID_PORT_NUMBER* = 0
  INTERNET_DEFAULT_FTP_PORT* = 21
  INTERNET_DEFAULT_GOPHER_PORT* = 70
  INTERNET_DEFAULT_HTTP_PORT* = 80
  INTERNET_DEFAULT_HTTPS_PORT* = 443
  INTERNET_DEFAULT_SOCKS_PORT* = 1080
  MAX_CACHE_ENTRY_INFO_SIZE* = 4096
  INTERNET_MAX_HOST_NAME_LENGTH* = 256
  INTERNET_MAX_USER_NAME_LENGTH* = 128
  INTERNET_MAX_PASSWORD_LENGTH* = 128
  INTERNET_MAX_PORT_NUMBER_LENGTH* = 5
  INTERNET_MAX_PORT_NUMBER_VALUE* = 65535
  INTERNET_MAX_PATH_LENGTH* = 2048
  INTERNET_MAX_SCHEME_LENGTH* = 32
  INTERNET_MAX_URL_LENGTH* = (INTERNET_MAX_SCHEME_LENGTH + "://".len + INTERNET_MAX_PATH_LENGTH).SIZE_T
  INTERNET_KEEP_ALIVE_UNKNOWN* = DWORD.high
  INTERNET_KEEP_ALIVE_DISABLED* = 0
  INTERNET_KEEP_ALIVE_ENABLED* = 1
  INTERNET_REQFLAG_FROM_CACHE* = 1
  INTERNET_REQFLAG_ASYNC* = 2
  INTERNET_FLAG_RELOAD* = 0x80000000'u32
  INTERNET_FLAG_RAW_DATA* = 0x40000000
  INTERNET_FLAG_EXISTING_CONNECT* = 0x20000000
  INTERNET_FLAG_ASYNC* = 0x10000000
  INTERNET_FLAG_PASSIVE* = 0x08000000
  INTERNET_FLAG_NO_CACHE_WRITE* = 0x04000000
  INTERNET_FLAG_DONT_CACHE* = INTERNET_FLAG_NO_CACHE_WRITE.DWORD
  INTERNET_FLAG_MAKE_PERSISTENT* = 0x02000000
  INTERNET_FLAG_OFFLINE* = 0x01000000
  INTERNET_FLAG_SECURE* = 0x00800000
  INTERNET_FLAG_KEEP_CONNECTION* = 0x00400000
  INTERNET_FLAG_NO_AUTO_REDIRECT* = 0x00200000
  INTERNET_FLAG_READ_PREFETCH* = 0x00100000
  INTERNET_FLAG_NO_COOKIES* = 0x00080000
  INTERNET_FLAG_NO_AUTH* = 0x00040000
  INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP* = 0x00008000
  INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS* = 0x00004000
  INTERNET_FLAG_IGNORE_CERT_DATE_INVALID* = 0x00002000
  INTERNET_FLAG_IGNORE_CERT_CN_INVALID* = 0x00001000
  INTERNET_FLAG_RESYNCHRONIZE* = 0x00000800
  INTERNET_FLAG_HYPERLINK* = 0x00000400
  INTERNET_FLAG_NO_UI* = 0x00000200
  INTERNET_FLAG_PRAGMA_NOCACHE* = 0x00000100
  INTERNET_FLAG_MUST_CACHE_REQUEST* = 0x00000010
  INTERNET_FLAG_TRANSFER_ASCII* = 1
  INTERNET_FLAG_TRANSFER_BINARY* = 2
  SECURITY_INTERNET_MASK* = 0x0000F000
  SECURITY_SET_MASK* = SECURITY_INTERNET_MASK.DWORD
  INTERNET_FLAGS_MASK* = 0xFFFCFE13'u32
  INTERNET_OPTIONS_MASK* = (not INTERNET_FLAGS_MASK).DWORD
  INTERNET_NO_CALLBACK* = 0
  INTERNET_RFC1123_FORMAT* = 0
  INTERNET_RFC1123_BUFSIZE* = 30
  ICU_ESCAPE* = 0x80000000'u32
  ICU_USERNAME* = 0x40000000
  ICU_NO_ENCODE* = 0x20000000
  ICU_DECODE* = 0x10000000
  ICU_NO_META* = 0x08000000
  ICU_ENCODE_SPACES_ONLY* = 0x04000000
  ICU_BROWSER_MODE* = 0x02000000
  INTERNET_OPEN_TYPE_PRECONFIG* = 0
  INTERNET_OPEN_TYPE_DIRECT* = 1
  INTERNET_OPEN_TYPE_PROXY* = 3
  PRE_CONFIG_INTERNET_ACCESS* = INTERNET_OPEN_TYPE_PRECONFIG
  LOCAL_INTERNET_ACCESS* = INTERNET_OPEN_TYPE_DIRECT
  GATEWAY_INTERNET_ACCESS* = 2
  CERN_PROXY_INTERNET_ACCESS* = INTERNET_OPEN_TYPE_PROXY
  ISO_GLOBAL* = 1
  ISO_REGISTRY* = 2
  ISO_VALID_FLAGS* = ISO_GLOBAL or ISO_REGISTRY
  INTERNET_OPTION_CALLBACK* = 1
  INTERNET_OPTION_CONNECT_TIMEOUT* = 2
  INTERNET_OPTION_CONNECT_RETRIES* = 3
  INTERNET_OPTION_CONNECT_BACKOFF* = 4
  INTERNET_OPTION_SEND_TIMEOUT* = 5
  INTERNET_OPTION_CONTROL_SEND_TIMEOUT* = INTERNET_OPTION_SEND_TIMEOUT
  INTERNET_OPTION_RECEIVE_TIMEOUT* = INTERNET_OPTION_SEND_TIMEOUT + 1
  INTERNET_OPTION_CONTROL_RECEIVE_TIMEOUT* = INTERNET_OPTION_RECEIVE_TIMEOUT
  INTERNET_OPTION_DATA_SEND_TIMEOUT* = INTERNET_OPTION_RECEIVE_TIMEOUT + 1
  INTERNET_OPTION_DATA_RECEIVE_TIMEOUT* = INTERNET_OPTION_RECEIVE_TIMEOUT + 2
  INTERNET_OPTION_HANDLE_TYPE* = INTERNET_OPTION_RECEIVE_TIMEOUT + 3
  INTERNET_OPTION_CONTEXT_VALUE* = INTERNET_OPTION_RECEIVE_TIMEOUT + 4
  INTERNET_OPTION_LISTEN_TIMEOUT* = INTERNET_OPTION_RECEIVE_TIMEOUT + 5
  INTERNET_OPTION_READ_BUFFER_SIZE* = INTERNET_OPTION_RECEIVE_TIMEOUT + 6
  INTERNET_OPTION_WRITE_BUFFER_SIZE* = INTERNET_OPTION_RECEIVE_TIMEOUT + 7
  INTERNET_OPTION_ASYNC_ID* = 15
  INTERNET_OPTION_ASYNC_PRIORITY* = 16
  INTERNET_OPTION_PARENT_HANDLE* = 21
  INTERNET_OPTION_KEEP_CONNECTION* = 22
  INTERNET_OPTION_REQUEST_FLAGS* = 23
  INTERNET_OPTION_EXTENDED_ERROR* = 24
  INTERNET_OPTION_OFFLINE_MODE* = 26
  INTERNET_OPTION_CACHE_STREAM_HANDLE* = 27
  INTERNET_OPTION_USERNAME* = 28
  INTERNET_OPTION_PASSWORD* = 29
  INTERNET_OPTION_ASYNC* = 30
  INTERNET_OPTION_SECURITY_FLAGS* = 31
  INTERNET_OPTION_SECURITY_CERTIFICATE_STRUCT* = 32
  INTERNET_OPTION_DATAFILE_NAME* = 33
  INTERNET_OPTION_URL* = 34
  INTERNET_OPTION_SECURITY_CERTIFICATE* = 35
  INTERNET_OPTION_SECURITY_KEY_BITNESS* = 36
  INTERNET_OPTION_REFRESH* = 37
  INTERNET_OPTION_PROXY* = 38
  INTERNET_OPTION_SETTINGS_CHANGED* = 39
  INTERNET_OPTION_VERSION* = 40
  INTERNET_OPTION_USER_AGENT* = 41
  INTERNET_OPTION_END_BROWSER_SESSION* = 42
  INTERNET_OPTION_PROXY_USERNAME* = 43
  INTERNET_OPTION_PROXY_PASSWORD* = 44
  INTERNET_FIRST_OPTION* = INTERNET_OPTION_CALLBACK
  INTERNET_LAST_OPTION* = INTERNET_OPTION_USER_AGENT
  INTERNET_PRIORITY_FOREGROUND* = 1000
  INTERNET_HANDLE_TYPE_INTERNET* = 1
  INTERNET_HANDLE_TYPE_CONNECT_FTP* = 2
  INTERNET_HANDLE_TYPE_CONNECT_GOPHER* = 3
  INTERNET_HANDLE_TYPE_CONNECT_HTTP* = 4
  INTERNET_HANDLE_TYPE_FTP_FIND* = 5
  INTERNET_HANDLE_TYPE_FTP_FIND_HTML* = 6
  INTERNET_HANDLE_TYPE_FTP_FILE* = 7
  INTERNET_HANDLE_TYPE_FTP_FILE_HTML* = 8
  INTERNET_HANDLE_TYPE_GOPHER_FIND* = 9
  INTERNET_HANDLE_TYPE_GOPHER_FIND_HTML* = 10
  INTERNET_HANDLE_TYPE_GOPHER_FILE* = 11
  INTERNET_HANDLE_TYPE_GOPHER_FILE_HTML* = 12
  INTERNET_HANDLE_TYPE_HTTP_REQUEST* = 13
  SECURITY_FLAG_SECURE* = 0x00000001
  SECURITY_FLAG_SSL* = 0x00000002
  SECURITY_FLAG_SSL3* = 0x00000004
  SECURITY_FLAG_PCT* = 0x00000008
  SECURITY_FLAG_PCT4* = 0x00000010
  SECURITY_FLAG_IETFSSL4* = 0x00000020
  SECURITY_FLAG_IGNORE_REVOCATION* = 0x00000080
  SECURITY_FLAG_IGNORE_UNKNOWN_CA* = 0x00000100
  SECURITY_FLAG_IGNORE_WRONG_USAGE* = 0x00000200
  SECURITY_FLAG_40BIT* = 0x10000000
  SECURITY_FLAG_128BIT* = 0x20000000
  SECURITY_FLAG_56BIT* = 0x40000000
  SECURITY_FLAG_UNKNOWNBIT* = 0x80000000'u32
  SECURITY_FLAG_NORMALBITNESS* = SECURITY_FLAG_40BIT.DWORD
  SECURITY_FLAG_IGNORE_CERT_CN_INVALID* = INTERNET_FLAG_IGNORE_CERT_CN_INVALID.DWORD
  SECURITY_FLAG_IGNORE_CERT_DATE_INVALID* = INTERNET_FLAG_IGNORE_CERT_DATE_INVALID.DWORD
  SECURITY_FLAG_IGNORE_REDIRECT_TO_HTTPS* = INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTPS.DWORD
  SECURITY_FLAG_IGNORE_REDIRECT_TO_HTTP* = INTERNET_FLAG_IGNORE_REDIRECT_TO_HTTP.DWORD
  INTERNET_SERVICE_FTP* = 1
  INTERNET_SERVICE_GOPHER* = 2
  INTERNET_SERVICE_HTTP* = 3
  INTERNET_STATUS_RESOLVING_NAME* = 10
  INTERNET_STATUS_NAME_RESOLVED* = 11
  INTERNET_STATUS_CONNECTING_TO_SERVER* = 20
  INTERNET_STATUS_CONNECTED_TO_SERVER* = 21
  INTERNET_STATUS_SENDING_REQUEST* = 30
  INTERNET_STATUS_REQUEST_SENT* = 31
  INTERNET_STATUS_RECEIVING_RESPONSE* = 40
  INTERNET_STATUS_RESPONSE_RECEIVED* = 41
  INTERNET_STATUS_CTL_RESPONSE_RECEIVED* = 42
  INTERNET_STATUS_PREFETCH* = 43
  INTERNET_STATUS_CLOSING_CONNECTION* = 50
  INTERNET_STATUS_CONNECTION_CLOSED* = 51
  INTERNET_STATUS_HANDLE_CREATED* = 60
  INTERNET_STATUS_HANDLE_CLOSING* = 70
  INTERNET_STATUS_REQUEST_COMPLETE* = 100
  INTERNET_STATUS_REDIRECT* = 110
  INTERNET_INVALID_STATUS_CALLBACK* = cast[INTERNET_STATUS_CALLBACK](-1)
  FTP_TRANSFER_TYPE_UNKNOWN* = 0
  FTP_TRANSFER_TYPE_ASCII* = 1
  FTP_TRANSFER_TYPE_BINARY* = 2
  FTP_TRANSFER_TYPE_MASK* = 3
  MAX_GOPHER_DISPLAY_TEXT* = 128
  MAX_GOPHER_SELECTOR_TEXT* = 256
  MAX_GOPHER_HOST_NAME* = INTERNET_MAX_HOST_NAME_LENGTH
  MAX_GOPHER_LOCATOR_LENGTH* = (1 + MAX_GOPHER_DISPLAY_TEXT + 1 + MAX_GOPHER_SELECTOR_TEXT + 1 + MAX_GOPHER_HOST_NAME + 1 + INTERNET_MAX_PORT_NUMBER_LENGTH + 4)
  GOPHER_TYPE_TEXT_FILE* = 0x00000001
  GOPHER_TYPE_DIRECTORY* = 0x00000002
  GOPHER_TYPE_CSO* = 0x00000004
  GOPHER_TYPE_ERROR* = 0x00000008
  GOPHER_TYPE_MAC_BINHEX* = 0x00000010
  GOPHER_TYPE_DOS_ARCHIVE* = 0x00000020
  GOPHER_TYPE_UNIX_UUENCODED* = 0x00000040
  GOPHER_TYPE_INDEX_SERVER* = 0x00000080
  GOPHER_TYPE_TELNET* = 0x00000100
  GOPHER_TYPE_BINARY* = 0x00000200
  GOPHER_TYPE_REDUNDANT* = 0x00000400
  GOPHER_TYPE_TN3270* = 0x00000800
  GOPHER_TYPE_GIF* = 0x00001000
  GOPHER_TYPE_IMAGE* = 0x00002000
  GOPHER_TYPE_BITMAP* = 0x00004000
  GOPHER_TYPE_MOVIE* = 0x00008000
  GOPHER_TYPE_SOUND* = 0x00010000
  GOPHER_TYPE_HTML* = 0x00020000
  GOPHER_TYPE_PDF* = 0x00040000
  GOPHER_TYPE_CALENDAR* = 0x00080000
  GOPHER_TYPE_INLINE* = 0x00100000
  GOPHER_TYPE_UNKNOWN* = 0x20000000
  GOPHER_TYPE_ASK* = 0x40000000
  GOPHER_TYPE_GOPHER_PLUS* = 0x80000000'u32
  GOPHER_TYPE_FILE_MASK* = 0x001FF271

proc IS_GOPHER_FILE*(t: DWORD): BOOL = (t and GOPHER_TYPE_FILE_MASK).BOOL
proc IS_GOPHER_DIRECTORY*(t: DWORD): BOOL = (t and GOPHER_TYPE_DIRECTORY).BOOL
proc IS_GOPHER_PHONE_SERVER*(t: DWORD): BOOL = (t and GOPHER_TYPE_CSO).BOOL
proc IS_GOPHER_ERROR*(t: DWORD): BOOL = (t and GOPHER_TYPE_ERROR).BOOL
proc IS_GOPHER_INDEX_SERVER*(t: DWORD): BOOL = (t and GOPHER_TYPE_INDEX_SERVER).BOOL
proc IS_GOPHER_TELNET_SESSION*(t: DWORD): BOOL = (t and GOPHER_TYPE_TELNET).BOOL
proc IS_GOPHER_BACKUP_SERVER*(t: DWORD): BOOL = (t and GOPHER_TYPE_REDUNDANT).BOOL
proc IS_GOPHER_TN3270_SESSION*(t: DWORD): BOOL = (t and GOPHER_TYPE_TN3270).BOOL
proc IS_GOPHER_ASK*(t: DWORD): BOOL = (t and GOPHER_TYPE_ASK).BOOL
proc IS_GOPHER_PLUS*(t: DWORD): BOOL = (t and GOPHER_TYPE_GOPHER_PLUS).BOOL
proc IS_GOPHER_TYPE_KNOWN*(t: DWORD): BOOL = (if (t and GOPHER_TYPE_UNKNOWN) == 0: 1 else: 0)

const
  MAX_GOPHER_CATEGORY_NAME* = 128
  MAX_GOPHER_ATTRIBUTE_NAME* = 128
  MIN_GOPHER_ATTRIBUTE_LENGTH* = 256
  GOPHER_INFO_CATEGORY* = "+INFO"
  GOPHER_ADMIN_CATEGORY* = "+ADMIN"
  GOPHER_VIEWS_CATEGORY* = "+VIEWS"
  GOPHER_ABSTRACT_CATEGORY* = "+ABSTRACT"
  GOPHER_VERONICA_CATEGORY* = "+VERONICA"
  GOPHER_ADMIN_ATTRIBUTE* = "Admin"
  GOPHER_MOD_DATE_ATTRIBUTE* = "Mod-Date"
  GOPHER_TTL_ATTRIBUTE* = "TTL"
  GOPHER_SCORE_ATTRIBUTE* = "Score"
  GOPHER_RANGE_ATTRIBUTE* = "Score-range"
  GOPHER_SITE_ATTRIBUTE* = "Site"
  GOPHER_ORG_ATTRIBUTE* = "Org"
  GOPHER_LOCATION_ATTRIBUTE* = "Loc"
  GOPHER_GEOG_ATTRIBUTE* = "Geog"
  GOPHER_TIMEZONE_ATTRIBUTE* = "TZ"
  GOPHER_PROVIDER_ATTRIBUTE* = "Provider"
  GOPHER_VERSION_ATTRIBUTE* = "Version"
  GOPHER_ABSTRACT_ATTRIBUTE* = "Abstract"
  GOPHER_VIEW_ATTRIBUTE* = "View"
  GOPHER_TREEWALK_ATTRIBUTE* = "treewalk"
  GOPHER_ATTRIBUTE_ID_BASE* = 0xABCCCC00'u32
  GOPHER_CATEGORY_ID_ALL* = 0xABCCCC01'u32
  GOPHER_CATEGORY_ID_INFO* = 0xABCCCC02'u32
  GOPHER_CATEGORY_ID_ADMIN* = 0xABCCCC03'u32
  GOPHER_CATEGORY_ID_VIEWS* = 0xABCCCC04'u32
  GOPHER_CATEGORY_ID_ABSTRACT* = 0xABCCCC05'u32
  GOPHER_CATEGORY_ID_VERONICA* = 0xABCCCC06'u32
  GOPHER_CATEGORY_ID_ASK* = 0xABCCCC07'u32
  GOPHER_CATEGORY_ID_UNKNOWN* = 0xABCCCC08'u32
  GOPHER_ATTRIBUTE_ID_ALL* = 0xABCCCC09'u32
  GOPHER_ATTRIBUTE_ID_ADMIN* = 0xABCCCC0A'u32
  GOPHER_ATTRIBUTE_ID_MOD_DATE* = 0xABCCCC0B'u32
  GOPHER_ATTRIBUTE_ID_TTL* = 0xABCCCC0C'u32
  GOPHER_ATTRIBUTE_ID_SCORE* = 0xABCCCC0D'u32
  GOPHER_ATTRIBUTE_ID_RANGE* = 0xABCCCC0E'u32
  GOPHER_ATTRIBUTE_ID_SITE* = 0xABCCCC0F'u32
  GOPHER_ATTRIBUTE_ID_ORG* = 0xABCCCC10'u32
  GOPHER_ATTRIBUTE_ID_LOCATION* = 0xABCCCC11'u32
  GOPHER_ATTRIBUTE_ID_GEOG* = 0xABCCCC12'u32
  GOPHER_ATTRIBUTE_ID_TIMEZONE* = 0xABCCCC13'u32
  GOPHER_ATTRIBUTE_ID_PROVIDER* = 0xABCCCC14'u32
  GOPHER_ATTRIBUTE_ID_VERSION* = 0xABCCCC15'u32
  GOPHER_ATTRIBUTE_ID_ABSTRACT* = 0xABCCCC16'u32
  GOPHER_ATTRIBUTE_ID_VIEW* = 0xABCCCC17'u32
  GOPHER_ATTRIBUTE_ID_TREEWALK* = 0xABCCCC18'u32
  GOPHER_ATTRIBUTE_ID_UNKNOWN* = 0xABCCCC19'u32
  HTTP_MAJOR_VERSION* = 1
  HTTP_MINOR_VERSION* = 0
  HTTP_VERSION* = "HTTP/1.0"
  HTTP_QUERY_MIME_VERSION* = 0
  HTTP_QUERY_CONTENT_TYPE* = 1
  HTTP_QUERY_CONTENT_TRANSFER_ENCODING* = 2
  HTTP_QUERY_CONTENT_ID* = 3
  HTTP_QUERY_CONTENT_DESCRIPTION* = 4
  HTTP_QUERY_CONTENT_LENGTH* = 5
  HTTP_QUERY_CONTENT_LANGUAGE* = 6
  HTTP_QUERY_ALLOW* = 7
  HTTP_QUERY_PUBLIC* = 8
  HTTP_QUERY_DATE* = 9
  HTTP_QUERY_EXPIRES* = 10
  HTTP_QUERY_LAST_MODIFIED* = 11
  HTTP_QUERY_MESSAGE_ID* = 12
  HTTP_QUERY_URI* = 13
  HTTP_QUERY_DERIVED_FROM* = 14
  HTTP_QUERY_COST* = 15
  HTTP_QUERY_LINK* = 16
  HTTP_QUERY_PRAGMA* = 17
  HTTP_QUERY_VERSION* = 18
  HTTP_QUERY_STATUS_CODE* = 19
  HTTP_QUERY_STATUS_TEXT* = 20
  HTTP_QUERY_RAW_HEADERS* = 21
  HTTP_QUERY_RAW_HEADERS_CRLF* = 22
  HTTP_QUERY_CONNECTION* = 23
  HTTP_QUERY_ACCEPT* = 24
  HTTP_QUERY_ACCEPT_CHARSET* = 25
  HTTP_QUERY_ACCEPT_ENCODING* = 26
  HTTP_QUERY_ACCEPT_LANGUAGE* = 27
  HTTP_QUERY_AUTHORIZATION* = 28
  HTTP_QUERY_CONTENT_ENCODING* = 29
  HTTP_QUERY_FORWARDED* = 30
  HTTP_QUERY_FROM* = 31
  HTTP_QUERY_IF_MODIFIED_SINCE* = 32
  HTTP_QUERY_LOCATION* = 33
  HTTP_QUERY_ORIG_URI* = 34
  HTTP_QUERY_REFERER* = 35
  HTTP_QUERY_RETRY_AFTER* = 36
  HTTP_QUERY_SERVER* = 37
  HTTP_QUERY_TITLE* = 38
  HTTP_QUERY_USER_AGENT* = 39
  HTTP_QUERY_WWW_AUTHENTICATE* = 40
  HTTP_QUERY_PROXY_AUTHENTICATE* = 41
  HTTP_QUERY_ACCEPT_RANGES* = 42
  HTTP_QUERY_SET_COOKIE* = 43
  HTTP_QUERY_COOKIE* = 44
  HTTP_QUERY_REQUEST_METHOD* = 45
  HTTP_QUERY_MAX* = 45
  HTTP_QUERY_CUSTOM* = 65535
  HTTP_QUERY_FLAG_REQUEST_HEADERS* = 0x80000000'u32
  HTTP_QUERY_FLAG_SYSTEMTIME* = 0x40000000
  HTTP_QUERY_FLAG_NUMBER* = 0x20000000
  HTTP_QUERY_FLAG_COALESCE* = 0x10000000
  HTTP_QUERY_MODIFIER_FLAGS_MASK* = 0xF0000000'u32
  HTTP_QUERY_HEADER_MASK* = (not HTTP_QUERY_MODIFIER_FLAGS_MASK).DWORD
  HTTP_STATUS_OK* = 200
  HTTP_STATUS_CREATED* = 201
  HTTP_STATUS_ACCEPTED* = 202
  HTTP_STATUS_PARTIAL* = 203
  HTTP_STATUS_NO_CONTENT* = 204
  HTTP_STATUS_AMBIGUOUS* = 300
  HTTP_STATUS_MOVED* = 301
  HTTP_STATUS_REDIRECT* = 302
  HTTP_STATUS_REDIRECT_METHOD* = 303
  HTTP_STATUS_NOT_MODIFIED* = 304
  HTTP_STATUS_BAD_REQUEST* = 400
  HTTP_STATUS_DENIED* = 401
  HTTP_STATUS_PAYMENT_REQ* = 402
  HTTP_STATUS_FORBIDDEN* = 403
  HTTP_STATUS_NOT_FOUND* = 404
  HTTP_STATUS_BAD_METHOD* = 405
  HTTP_STATUS_NONE_ACCEPTABLE* = 406
  HTTP_STATUS_PROXY_AUTH_REQ* = 407
  HTTP_STATUS_REQUEST_TIMEOUT* = 408
  HTTP_STATUS_CONFLICT* = 409
  HTTP_STATUS_GONE* = 410
  HTTP_STATUS_AUTH_REFUSED* = 411
  HTTP_STATUS_SERVER_ERROR* = 500
  HTTP_STATUS_NOT_SUPPORTED* = 501
  HTTP_STATUS_BAD_GATEWAY* = 502
  HTTP_STATUS_SERVICE_UNAVAIL* = 503
  HTTP_STATUS_GATEWAY_TIMEOUT* = 504
  INTERNET_PREFETCH_PROGRESS* = 0
  INTERNET_PREFETCH_COMPLETE* = 1
  INTERNET_PREFETCH_ABORTED* = 2
  FLAGS_ERROR_UI_FILTER_FOR_ERRORS* = 0x01
  FLAGS_ERROR_UI_FLAGS_CHANGE_OPTIONS* = 0x02
  FLAGS_ERROR_UI_FLAGS_GENERATE_DATA* = 0x04
  FLAGS_ERROR_UI_FLAGS_NO_UI* = 0x08
  HTTP_ADDREQ_INDEX_MASK* = 0x0000FFFF
  HTTP_ADDREQ_FLAGS_MASK* = 0xFFFF0000'u32
  HTTP_ADDREQ_FLAG_COALESCE_WITH_SEMICOLON* = 0x01000000
  HTTP_ADDREQ_FLAG_ADD_IF_NEW* = 0x10000000
  HTTP_ADDREQ_FLAG_ADD* = 0x20000000
  HTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA* = 0x40000000
  HTTP_ADDREQ_FLAG_COALESCE* = HTTP_ADDREQ_FLAG_COALESCE_WITH_COMMA.DWORD
  HTTP_ADDREQ_FLAG_REPLACE* = 0x80000000'u32
  INTERNET_ERROR_BASE* = 12000
  ERROR_INTERNET_OUT_OF_HANDLES* = 12001
  ERROR_INTERNET_TIMEOUT* = 12002
  ERROR_INTERNET_EXTENDED_ERROR* = 12003
  ERROR_INTERNET_INTERNAL_ERROR* = 12004
  ERROR_INTERNET_INVALID_URL* = 12005
  ERROR_INTERNET_UNRECOGNIZED_SCHEME* = 12006
  ERROR_INTERNET_NAME_NOT_RESOLVED* = 12007
  ERROR_INTERNET_PROTOCOL_NOT_FOUND* = 12008
  ERROR_INTERNET_INVALID_OPTION* = 12009
  ERROR_INTERNET_BAD_OPTION_LENGTH* = 12010
  ERROR_INTERNET_OPTION_NOT_SETTABLE* = 12011
  ERROR_INTERNET_SHUTDOWN* = 12012
  ERROR_INTERNET_INCORRECT_USER_NAME* = 12013
  ERROR_INTERNET_INCORRECT_PASSWORD* = 12014
  ERROR_INTERNET_LOGIN_FAILURE* = 12015
  ERROR_INTERNET_INVALID_OPERATION* = 12016
  ERROR_INTERNET_OPERATION_CANCELLED* = 12017
  ERROR_INTERNET_INCORRECT_HANDLE_TYPE* = 12018
  ERROR_INTERNET_INCORRECT_HANDLE_STATE* = 12019
  ERROR_INTERNET_NOT_PROXY_REQUEST* = 12020
  ERROR_INTERNET_REGISTRY_VALUE_NOT_FOUND* = 12021
  ERROR_INTERNET_BAD_REGISTRY_PARAMETER* = 12022
  ERROR_INTERNET_NO_DIRECT_ACCESS* = 12023
  ERROR_INTERNET_NO_CONTEXT* = 12024
  ERROR_INTERNET_NO_CALLBACK* = 12025
  ERROR_INTERNET_REQUEST_PENDING* = 12026
  ERROR_INTERNET_INCORRECT_FORMAT* = 12027
  ERROR_INTERNET_ITEM_NOT_FOUND* = 12028
  ERROR_INTERNET_CANNOT_CONNECT* = 12029
  ERROR_INTERNET_CONNECTION_ABORTED* = 12030
  ERROR_INTERNET_CONNECTION_RESET* = 12031
  ERROR_INTERNET_FORCE_RETRY* = 12032
  ERROR_INTERNET_INVALID_PROXY_REQUEST* = 12033
  ERROR_INTERNET_NEED_UI* = 12034
  ERROR_INTERNET_HANDLE_EXISTS* = INTERNET_ERROR_BASE + 36
  ERROR_INTERNET_SEC_CERT_DATE_INVALID* = (INTERNET_ERROR_BASE + 36) + 1
  ERROR_INTERNET_SEC_CERT_CN_INVALID* = (INTERNET_ERROR_BASE + 36) + 2
  ERROR_INTERNET_HTTP_TO_HTTPS_ON_REDIR* = (INTERNET_ERROR_BASE + 36) + 3
  ERROR_INTERNET_HTTPS_TO_HTTP_ON_REDIR* = (INTERNET_ERROR_BASE + 36) + 4
  ERROR_INTERNET_MIXED_SECURITY* = (INTERNET_ERROR_BASE + 36) + 5
  ERROR_INTERNET_CHG_POST_IS_NON_SECURE* = (INTERNET_ERROR_BASE + 36) + 6
  ERROR_INTERNET_POST_IS_NON_SECURE* = (INTERNET_ERROR_BASE + 36) + 7
  ERROR_INTERNET_CLIENT_AUTH_CERT_NEEDED* = (INTERNET_ERROR_BASE + 36) + 8
  ERROR_INTERNET_INVALID_CA* = (INTERNET_ERROR_BASE + 36) + 9
  ERROR_INTERNET_CLIENT_AUTH_NOT_SETUP* = (INTERNET_ERROR_BASE + 36) + 10
  ERROR_INTERNET_ASYNC_THREAD_FAILED* = (INTERNET_ERROR_BASE + 36) + 11
  ERROR_INTERNET_REDIRECT_SCHEME_CHANGE* = (INTERNET_ERROR_BASE + 36) + 12
  ERROR_FTP_TRANSFER_IN_PROGRESS* = INTERNET_ERROR_BASE + 110
  ERROR_FTP_DROPPED* = (INTERNET_ERROR_BASE + 110) + 1
  ERROR_GOPHER_PROTOCOL_ERROR* = INTERNET_ERROR_BASE + 130
  ERROR_GOPHER_NOT_FILE* = (INTERNET_ERROR_BASE + 130) + 1
  ERROR_GOPHER_DATA_ERROR* = (INTERNET_ERROR_BASE + 130) + 2
  ERROR_GOPHER_END_OF_DATA* = (INTERNET_ERROR_BASE + 130) + 3
  ERROR_GOPHER_INVALID_LOCATOR* = (INTERNET_ERROR_BASE + 130) + 4
  ERROR_GOPHER_INCORRECT_LOCATOR_TYPE* = (INTERNET_ERROR_BASE + 130) + 5
  ERROR_GOPHER_NOT_GOPHER_PLUS* = (INTERNET_ERROR_BASE + 130) + 6
  ERROR_GOPHER_ATTRIBUTE_NOT_FOUND* = (INTERNET_ERROR_BASE + 130) + 7
  ERROR_GOPHER_UNKNOWN_LOCATOR* = (INTERNET_ERROR_BASE + 130) + 8
  ERROR_HTTP_HEADER_NOT_FOUND* = INTERNET_ERROR_BASE + 150
  ERROR_HTTP_DOWNLEVEL_SERVER* = (INTERNET_ERROR_BASE + 150) + 1
  ERROR_HTTP_INVALID_SERVER_RESPONSE* = (INTERNET_ERROR_BASE + 150) + 2
  ERROR_HTTP_INVALID_HEADER* = (INTERNET_ERROR_BASE + 150) + 3
  ERROR_HTTP_INVALID_QUERY_REQUEST* = (INTERNET_ERROR_BASE + 150) + 4
  ERROR_HTTP_HEADER_ALREADY_EXISTS* = (INTERNET_ERROR_BASE + 150) + 5
  ERROR_HTTP_REDIRECT_FAILED* = (INTERNET_ERROR_BASE + 150) + 6
  ERROR_INTERNET_SECURITY_CHANNEL_ERROR* = (INTERNET_ERROR_BASE + 150) + 7
  ERROR_INTERNET_UNABLE_TO_CACHE_FILE* = (INTERNET_ERROR_BASE + 150) + 8
  ERROR_INTERNET_TCPIP_NOT_INSTALLED* = (INTERNET_ERROR_BASE + 150) + 9
  ERROR_HTTP_NOT_REDIRECTED* = (INTERNET_ERROR_BASE + 150) + 10
  INTERNET_ERROR_LAST* = ERROR_INTERNET_TCPIP_NOT_INSTALLED
  NORMAL_CACHE_ENTRY* = 0x000001
  STABLE_CACHE_ENTRY* = 0x000002
  STICKY_CACHE_ENTRY* = 0x000004
  SPARSE_CACHE_ENTRY* = 0x010000
  OCX_CACHE_ENTRY* = 0x020000
  COOKIE_CACHE_ENTRY* = 0x100000
  URLHISTORY_CACHE_ENTRY* = 0x200000
  CACHE_ENTRY_ATTRIBUTE_FC* = 0x0004
  CACHE_ENTRY_HITRATE_FC* = 0x0010
  CACHE_ENTRY_MODTIME_FC* = 0x0040
  CACHE_ENTRY_EXPTIME_FC* = 0x0080
  CACHE_ENTRY_ACCTIME_FC* = 0x0100
  CACHE_ENTRY_SYNCTIME_FC* = 0x0200
  CACHE_ENTRY_HEADERINFO_FC* = 0x0400
  WININET_API_FLAG_ASYNC* = 1
  WININET_API_FLAG_SYNC* = 4
  WININET_API_FLAG_USE_CONTEXT* = 8
  IRF_ASYNC* = WININET_API_FLAG_ASYNC
  IRF_SYNC* = WININET_API_FLAG_SYNC
  IRF_USE_CONTEXT* = WININET_API_FLAG_USE_CONTEXT
  IRF_NO_WAIT* = 8
  HSR_ASYNC* = WININET_API_FLAG_ASYNC
  HSR_SYNC* = WININET_API_FLAG_SYNC
  HSR_USE_CONTEXT* = WININET_API_FLAG_USE_CONTEXT
  HSR_INITIATE* = 8
  HSR_DOWNLOAD* = 16
  HSR_CHUNKED* = 32
  INTERNET_DIAL_UNATTENDED* = 0x8000
  INTERNET_DIALSTATE_DISCONNECTED* = 1
  INTERENT_GOONLINE_REFRESH* = 1
  INTERENT_GOONLINE_MASK* = 1
  INTERNET_AUTODIAL_FORCE_ONLINE* = 1
  INTERNET_AUTODIAL_FORCE_UNATTENDED* = 2
  INTERNET_AUTODIAL_FAILIFSECURITYCHECK* = 4
  INTERNET_CONNECTION_MODEM* = 0x01
  INTERNET_CONNECTION_LAN* = 0x02
  INTERNET_CONNECTION_PROXY* = 0x04
  INTERNET_CONNECTION_MODEM_BUSY* = 0x08
  INTERNET_RAS_INSTALLED* = 0x10
  INTERNET_CONNECTION_OFFLINE* = 0x20
  INTERNET_CONNECTION_CONFIGURED* = 0x40
  CACHEGROUP_SEARCH_ALL* = 0
  CACHEGROUP_SEARCH_BYURL* = 1
  INTERNET_CACHE_GROUP_ADD* = 0
  INTERNET_CACHE_GROUP_REMOVE* = 1

type
  LPHINTERNET* = ptr HANDLE
  GROUPID* = LONGLONG
  INTERNET_PORT* = WORD
  LPINTERNET_PORT* = ptr WORD
  INTERNET_SCHEME* = int32

const
  INTERNET_SCHEME_FIRST* = INTERNET_SCHEME_FTP
  INTERNET_SCHEME_LAST* = INTERNET_SCHEME_SOCKS

type
  LPINTERNET_SCHEME* = ptr INTERNET_SCHEME
  INTERNET_ASYNC_RESULT* {.final, pure.} = object
    dwResult*: DWORD
    dwError*: DWORD
  LPINTERNET_ASYNC_RESULT* = ptr INTERNET_ASYNC_RESULT
  INTERNET_PREFETCH_STATUS* {.final, pure.} = object
    dwStatus*: DWORD
    dwSize*: DWORD
  LPINTERNET_PREFETCH_STATUS* = ptr INTERNET_PREFETCH_STATUS
  INTERNET_PROXY_INFO* {.final, pure.} = object
    dwAccessType*: DWORD
    lpszProxy*: LPCTSTR
    lpszProxyBypass*: LPCTSTR
  LPINTERNET_PROXY_INFO* = ptr INTERNET_PROXY_INFO
  INTERNET_VERSION_INFO* {.final, pure.} = object
    dwMajorVersion*: DWORD
    dwMinorVersion*: DWORD
  LPINTERNET_VERSION_INFO* = ptr INTERNET_VERSION_INFO
  URL_COMPONENTSA* {.final, pure.} = object
    dwStructSize*: DWORD
    lpszScheme*: LPSTR
    dwSchemeLength*: DWORD
    nScheme*: INTERNET_SCHEME
    lpszHostName*: LPSTR
    dwHostNameLength*: DWORD
    nPort*: INTERNET_PORT
    lpszUserName*: LPSTR
    dwUserNameLength*: DWORD
    lpszPassword*: LPSTR
    dwPasswordLength*: DWORD
    lpszUrlPath*: LPSTR
    dwUrlPathLength*: DWORD
    lpszExtraInfo*: LPSTR
    dwExtraInfoLength*: DWORD
  LPURL_COMPONENTSA* = ptr URL_COMPONENTSA
  URL_COMPONENTSW* {.final, pure.} = object
    dwStructSize*: DWORD
    lpszScheme*: LPWSTR
    dwSchemeLength*: DWORD
    nScheme*: INTERNET_SCHEME
    lpszHostName*: LPWSTR
    dwHostNameLength*: DWORD
    nPort*: INTERNET_PORT
    lpszUserName*: LPWSTR
    dwUserNameLength*: DWORD
    lpszPassword*: LPWSTR
    dwPasswordLength*: DWORD
    lpszUrlPath*: LPWSTR
    dwUrlPathLength*: DWORD
    lpszExtraInfo*: LPWSTR
    dwExtraInfoLength*: DWORD
  LPURL_COMPONENTSW* = ptr URL_COMPONENTSW
  INTERNET_CERTIFICATE_INFO* {.final, pure.} = object
    ftExpiry*: FILETIME
    ftStart*: FILETIME
    lpszSubjectInfo*: LPTSTR
    lpszIssuerInfo*: LPTSTR
    lpszProtocolName*: LPTSTR
    lpszSignatureAlgName*: LPTSTR
    lpszEncryptionAlgName*: LPTSTR
    dwKeySize*: DWORD
  LPINTERNET_CERTIFICATE_INFO* = ptr INTERNET_CERTIFICATE_INFO

type
  LPINTERNET_STATUS_CALLBACK* = ptr INTERNET_STATUS_CALLBACK
  GOPHER_FIND_DATAA* {.final, pure.} = object
    DisplayString*: array[MAX_GOPHER_DISPLAY_TEXT+1, CHAR]
    GopherType*: DWORD
    SizeLow*: DWORD
    SizeHigh*: DWORD
    LastModificationTime*: FILETIME
    Locator*: array[MAX_GOPHER_LOCATOR_LENGTH+1, CHAR]
  LPGOPHER_FIND_DATAA* = ptr GOPHER_FIND_DATAA
  GOPHER_FIND_DATAW* {.final, pure.} = object
    DisplayString*: array[MAX_GOPHER_DISPLAY_TEXT+1, WCHAR]
    GopherType*: DWORD
    SizeLow*: DWORD
    SizeHigh*: DWORD
    LastModificationTime*: FILETIME
    Locator*: array[MAX_GOPHER_LOCATOR_LENGTH+1, WCHAR]
  LPGOPHER_FIND_DATAW* = ptr GOPHER_FIND_DATAW
  GOPHER_ADMIN_ATTRIBUTE_TYPE* {.final, pure.} = object
    Comment*: LPCTSTR
    EmailAddress*: LPCTSTR
  LPGOPHER_ADMIN_ATTRIBUTE_TYPE* = ptr GOPHER_ADMIN_ATTRIBUTE_TYPE
  GOPHER_MOD_DATE_ATTRIBUTE_TYPE* {.final, pure.} = object
    DateAndTime*: FILETIME
  LPGOPHER_MOD_DATE_ATTRIBUTE_TYPE* = ptr GOPHER_MOD_DATE_ATTRIBUTE_TYPE
  GOPHER_TTL_ATTRIBUTE_TYPE* {.final, pure.} = object
    Ttl*: DWORD
  LPGOPHER_TTL_ATTRIBUTE_TYPE* = ptr GOPHER_TTL_ATTRIBUTE_TYPE
  GOPHER_SCORE_ATTRIBUTE_TYPE* {.final, pure.} = object
    Score*: INT
  LPGOPHER_SCORE_ATTRIBUTE_TYPE* = ptr GOPHER_SCORE_ATTRIBUTE_TYPE
  GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE* {.final, pure.} = object
    LowerBound*: INT
    UpperBound*: INT
  LPGOPHER_SCORE_RANGE_ATTRIBUTE_TYPE* = ptr GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE
  GOPHER_SITE_ATTRIBUTE_TYPE* {.final, pure.} = object
    Site*: LPCTSTR
  LPGOPHER_SITE_ATTRIBUTE_TYPE* = ptr GOPHER_SITE_ATTRIBUTE_TYPE
  GOPHER_ORGANIZATION_ATTRIBUTE_TYPE* {.final, pure.} = object
    Organization*: LPCTSTR
  LPGOPHER_ORGANIZATION_ATTRIBUTE_TYPE* = ptr GOPHER_ORGANIZATION_ATTRIBUTE_TYPE
  GOPHER_LOCATION_ATTRIBUTE_TYPE* {.final, pure.} = object
    Location*: LPCTSTR
  LPGOPHER_LOCATION_ATTRIBUTE_TYPE* = ptr GOPHER_LOCATION_ATTRIBUTE_TYPE
  GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE* {.final, pure.} = object
    DegreesNorth*: INT
    MinutesNorth*: INT
    SecondsNorth*: INT
    DegreesEast*: INT
    MinutesEast*: INT
    SecondsEast*: INT
  LPGOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE* = ptr GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE
  GOPHER_TIMEZONE_ATTRIBUTE_TYPE* {.final, pure.} = object
    Zone*: INT
  LPGOPHER_TIMEZONE_ATTRIBUTE_TYPE* = ptr GOPHER_TIMEZONE_ATTRIBUTE_TYPE
  GOPHER_PROVIDER_ATTRIBUTE_TYPE* {.final, pure.} = object
    Provider*: LPCTSTR
  LPGOPHER_PROVIDER_ATTRIBUTE_TYPE* = ptr GOPHER_PROVIDER_ATTRIBUTE_TYPE
  GOPHER_VERSION_ATTRIBUTE_TYPE* {.final, pure.} = object
    Version*: LPCTSTR
  LPGOPHER_VERSION_ATTRIBUTE_TYPE* = ptr GOPHER_VERSION_ATTRIBUTE_TYPE
  GOPHER_ABSTRACT_ATTRIBUTE_TYPE* {.final, pure.} = object
    ShortAbstract*: LPCTSTR
    AbstractFile*: LPCTSTR
  LPGOPHER_ABSTRACT_ATTRIBUTE_TYPE* = ptr GOPHER_ABSTRACT_ATTRIBUTE_TYPE
  GOPHER_VIEW_ATTRIBUTE_TYPE* {.final, pure.} = object
    ContentType*: LPCTSTR
    Language*: LPCTSTR
    Size*: DWORD
  LPGOPHER_VIEW_ATTRIBUTE_TYPE* = ptr GOPHER_VIEW_ATTRIBUTE_TYPE
  GOPHER_VERONICA_ATTRIBUTE_TYPE* {.final, pure.} = object
    TreeWalk*: BOOL
  LPGOPHER_VERONICA_ATTRIBUTE_TYPE* = ptr GOPHER_VERONICA_ATTRIBUTE_TYPE
  GOPHER_ASK_ATTRIBUTE_TYPE* {.final, pure.} = object
    QuestionType*: LPCTSTR
    QuestionText*: LPCTSTR
  LPGOPHER_ASK_ATTRIBUTE_TYPE* = ptr GOPHER_ASK_ATTRIBUTE_TYPE
  GOPHER_UNKNOWN_ATTRIBUTE_TYPE* {.final, pure.} = object
    Text*: LPCTSTR
  LPGOPHER_UNKNOWN_ATTRIBUTE_TYPE* = ptr GOPHER_UNKNOWN_ATTRIBUTE_TYPE
  GOPHER_ATTRIBUTE_TYPE_UNION1* {.final, union, pure.} = object
    Admin*: GOPHER_ADMIN_ATTRIBUTE_TYPE
    ModDate*: GOPHER_MOD_DATE_ATTRIBUTE_TYPE
    Ttl*: GOPHER_TTL_ATTRIBUTE_TYPE
    Score*: GOPHER_SCORE_ATTRIBUTE_TYPE
    ScoreRange*: GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE
    Site*: GOPHER_SITE_ATTRIBUTE_TYPE
    Organization*: GOPHER_ORGANIZATION_ATTRIBUTE_TYPE
    Location*: GOPHER_LOCATION_ATTRIBUTE_TYPE
    GeographicalLocation*: GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE
    TimeZone*: GOPHER_TIMEZONE_ATTRIBUTE_TYPE
    Provider*: GOPHER_PROVIDER_ATTRIBUTE_TYPE
    Version*: GOPHER_VERSION_ATTRIBUTE_TYPE
    Abstract*: GOPHER_ABSTRACT_ATTRIBUTE_TYPE
    View*: GOPHER_VIEW_ATTRIBUTE_TYPE
    Veronica*: GOPHER_VERONICA_ATTRIBUTE_TYPE
    Ask*: GOPHER_ASK_ATTRIBUTE_TYPE
    Unknown*: GOPHER_UNKNOWN_ATTRIBUTE_TYPE
  GOPHER_ATTRIBUTE_TYPE* {.final, pure.} = object
    CategoryId*: DWORD
    AttributeId*: DWORD
    u1*: GOPHER_ATTRIBUTE_TYPE_UNION1
  LPGOPHER_ATTRIBUTE_TYPE* = ptr GOPHER_ATTRIBUTE_TYPE
  GOPHER_ATTRIBUTE_ENUMERATOR* = proc (P1: LPGOPHER_ATTRIBUTE_TYPE, P2: DWORD): BOOL {.stdcall.}
  INTERNET_CACHE_ENTRY_INFOA* {.final, pure.} = object
    dwStructSize*: DWORD
    lpszSourceUrlName*: LPSTR
    lpszLocalFileName*: LPSTR
    CacheEntryType*: DWORD
    dwUseCount*: DWORD
    dwHitRate*: DWORD
    dwSizeLow*: DWORD
    dwSizeHigh*: DWORD
    LastModifiedTime*: FILETIME
    ExpireTime*: FILETIME
    LastAccessTime*: FILETIME
    LastSyncTime*: FILETIME
    lpHeaderInfo*: PBYTE
    dwHeaderInfoSize*: DWORD
    lpszFileExtension*: LPSTR
    dwReserved*: DWORD
  LPINTERNET_CACHE_ENTRY_INFOA* = ptr INTERNET_CACHE_ENTRY_INFOA
  INTERNET_CACHE_ENTRY_INFOW* {.final, pure.} = object
    dwStructSize*: DWORD
    lpszSourceUrlName*: LPWSTR
    lpszLocalFileName*: LPWSTR
    CacheEntryType*: DWORD
    dwUseCount*: DWORD
    dwHitRate*: DWORD
    dwSizeLow*: DWORD
    dwSizeHigh*: DWORD
    LastModifiedTime*: FILETIME
    ExpireTime*: FILETIME
    LastAccessTime*: FILETIME
    LastSyncTime*: FILETIME
    lpHeaderInfo*: PBYTE
    dwHeaderInfoSize*: DWORD
    lpszFileExtension*: LPWSTR
    dwReserved*: DWORD
  LPINTERNET_CACHE_ENTRY_INFOW* = ptr INTERNET_CACHE_ENTRY_INFOW
  INTERNET_BUFFERSA* {.final, pure.} = object
    dwStructSize*: DWORD
    Next*: ptr INTERNET_BUFFERSA
    lpcszHeader*: LPCSTR
    dwHeadersLength*: DWORD
    dwHeadersTotal*: DWORD
    lpvBuffer*: LPVOID
    dwBufferLength*: DWORD
    dwBufferTotal*: DWORD
    dwOffsetLow*: DWORD
    dwOffsetHigh*: DWORD
  LPINTERNET_BUFFERSA* = ptr INTERNET_BUFFERSA
  INTERNET_BUFFERSW* {.final, pure.} = object
    dwStructSize*: DWORD
    Next*: ptr INTERNET_BUFFERSW
    lpcszHeader*: LPCWSTR
    dwHeadersLength*: DWORD
    dwHeadersTotal*: DWORD
    lpvBuffer*: LPVOID
    dwBufferLength*: DWORD
    dwBufferTotal*: DWORD
    dwOffsetLow*: DWORD
    dwOffsetHigh*: DWORD
  LPINTERNET_BUFFERSW* = ptr INTERNET_BUFFERSW

const
  GROUP_OWNER_STORAGE_SIZE* = 4
  GROUPNAME_MAX_LENGTH* = 120

type
  INTERNET_CACHE_GROUP_INFOA* {.final, pure.} = object
    dwGroupSize*: DWORD
    dwGroupFlags*: DWORD
    dwGroupType*: DWORD
    dwDiskUsage*: DWORD
    dwDiskQuota*: DWORD
    dwOwnerStorage*: array[GROUP_OWNER_STORAGE_SIZE, DWORD]
    szGroupName*: array[GROUPNAME_MAX_LENGTH, CHAR]
  LPINTERNET_CACHE_GROUP_INFOA* = ptr INTERNET_CACHE_GROUP_INFOA
  INTERNET_CACHE_GROUP_INFOW* {.final, pure.} = object
    dwGroupSize*: DWORD
    dwGroupFlags*: DWORD
    dwGroupType*: DWORD
    dwDiskUsage*: DWORD
    dwDiskQuota*: DWORD
    dwOwnerStorage*: array[GROUP_OWNER_STORAGE_SIZE, DWORD]
    szGroupName*: array[GROUPNAME_MAX_LENGTH, WCHAR]
  LPINTERNET_CACHE_GROUP_INFOW* = ptr INTERNET_CACHE_GROUP_INFOW

proc InternetTimeFromSystemTime*(P1: ptr SYSTEMTIME, P2: DWORD, P3: LPSTR, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetTimeToSystemTime*(P1: LPCSTR, P2: ptr SYSTEMTIME, P3: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetDebugGetLocalTime*(P1: ptr SYSTEMTIME, P2: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetCrackUrlA*(P1: LPCSTR, P2: DWORD, P3: DWORD, P4: LPURL_COMPONENTSA): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetCrackUrlW*(P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: LPURL_COMPONENTSW): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetCreateUrlA*(P1: LPURL_COMPONENTSA, P2: DWORD, P3: LPSTR, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetCreateUrlW*(P1: LPURL_COMPONENTSW, P2: DWORD, P3: LPWSTR, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetCanonicalizeUrlA*(P1: LPCSTR, P2: LPSTR, P3: PDWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetCanonicalizeUrlW*(P1: LPCWSTR, P2: LPWSTR, P3: PDWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetCheckConnectionA*(P1: LPCSTR, P2: DWORD, P3: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetCheckConnectionW*(P1: LPCWSTR, P2: DWORD, P3: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetCombineUrlA*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR, P4: PDWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetCombineUrlW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: PDWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetOpenA*(P1: LPCSTR, P2: DWORD, P3: LPCSTR, P4: LPCSTR, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc InternetOpenW*(P1: LPCWSTR, P2: DWORD, P3: LPCWSTR, P4: LPCWSTR, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc InternetCloseHandle*(P1: HINTERNET): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetConnectA*(P1: HINTERNET, P2: LPCSTR, P3: INTERNET_PORT, P4: LPCSTR, P5: LPCSTR, P6: DWORD, P7: DWORD, P8: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc InternetConnectW*(P1: HINTERNET, P2: LPCWSTR, P3: INTERNET_PORT, P4: LPCWSTR, P5: LPCWSTR, P6: DWORD, P7: DWORD, P8: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc InternetOpenUrlA*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: DWORD, P6: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc InternetOpenUrlW*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: DWORD, P6: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc InternetReadFile*(P1: HINTERNET, P2: PVOID, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetSetFilePointer*(P1: HINTERNET, P2: LONG, P3: PVOID, P4: DWORD, P5: DWORD): DWORD {.winapi, dynlib: "wininet", importc.}
proc InternetWriteFile*(P1: HINTERNET, P2: LPCVOID, P3: DWORD, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetQueryDataAvailable*(P1: HINTERNET, P2: PDWORD, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetFindNextFileA*(P1: HINTERNET, P2: PVOID): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetFindNextFileW*(P1: HINTERNET, P2: PVOID): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetQueryOptionA*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetQueryOptionW*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetSetOptionA*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetSetOptionW*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetSetOptionExA*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetSetOptionExW*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetGetLastResponseInfoA*(P1: PDWORD, P2: LPSTR, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetGetLastResponseInfoW*(P1: PDWORD, P2: LPWSTR, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetSetStatusCallback*(P1: HINTERNET, P2: INTERNET_STATUS_CALLBACK): INTERNET_STATUS_CALLBACK {.winapi, dynlib: "wininet", importc.}
proc FtpGetFileSize*(P1: HINTERNET, P2: LPDWORD): DWORD {.winapi, dynlib: "wininet", importc.}
proc FtpFindFirstFileA*(P1: HINTERNET, P2: LPCSTR, P3: LPWIN32_FIND_DATA, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc FtpFindFirstFileW*(P1: HINTERNET, P2: LPCWSTR, P3: LPWIN32_FIND_DATA, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc FtpGetFileA*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: BOOL, P5: DWORD, P6: DWORD, P7: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpGetFileW*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: BOOL, P5: DWORD, P6: DWORD, P7: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpPutFileA*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpPutFileW*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpDeleteFileA*(P1: HINTERNET, P2: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpDeleteFileW*(P1: HINTERNET, P2: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpRenameFileA*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpRenameFileW*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpOpenFileA*(P1: HINTERNET, P2: LPCSTR, P3: DWORD, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc FtpOpenFileW*(P1: HINTERNET, P2: LPCWSTR, P3: DWORD, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc FtpCreateDirectoryA*(P1: HINTERNET, P2: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpCreateDirectoryW*(P1: HINTERNET, P2: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpRemoveDirectoryA*(P1: HINTERNET, P2: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpRemoveDirectoryW*(P1: HINTERNET, P2: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpSetCurrentDirectoryA*(P1: HINTERNET, P2: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpSetCurrentDirectoryW*(P1: HINTERNET, P2: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpGetCurrentDirectoryA*(P1: HINTERNET, P2: LPSTR, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpGetCurrentDirectoryW*(P1: HINTERNET, P2: LPWSTR, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpCommandA*(P1: HINTERNET, P2: BOOL, P3: DWORD, P4: LPCSTR, P5: DWORD_PTR, P6: ptr HINTERNET): BOOL {.winapi, dynlib: "wininet", importc.}
proc FtpCommandW*(P1: HINTERNET, P2: BOOL, P3: DWORD, P4: LPCWSTR, P5: DWORD_PTR, P6: ptr HINTERNET): BOOL {.winapi, dynlib: "wininet", importc.}
proc GopherCreateLocatorA*(P1: LPCSTR, P2: INTERNET_PORT, P3: LPCSTR, P4: LPCSTR, P5: DWORD, P6: LPSTR, P7: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc GopherCreateLocatorW*(P1: LPCWSTR, P2: INTERNET_PORT, P3: LPCWSTR, P4: LPCWSTR, P5: DWORD, P6: LPWSTR, P7: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc GopherGetLocatorTypeA*(P1: LPCSTR, P2: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc GopherGetLocatorTypeW*(P1: LPCWSTR, P2: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc GopherFindFirstFileA*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: LPGOPHER_FIND_DATAA, P5: DWORD, P6: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc GopherFindFirstFileW*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: LPGOPHER_FIND_DATAW, P5: DWORD, P6: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc GopherOpenFileA*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc GopherOpenFileW*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc GopherGetAttributeA*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: LPBYTE, P5: DWORD, P6: PDWORD, P7: GOPHER_ATTRIBUTE_ENUMERATOR, P8: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc GopherGetAttributeW*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: LPBYTE, P5: DWORD, P6: PDWORD, P7: GOPHER_ATTRIBUTE_ENUMERATOR, P8: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc HttpOpenRequestA*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR, P5: LPCSTR, P6: ptr LPCSTR, P7: DWORD, P8: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc HttpOpenRequestW*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR, P5: LPCWSTR, P6: ptr LPCWSTR, P7: DWORD, P8: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc.}
proc HttpAddRequestHeadersA*(P1: HINTERNET, P2: LPCSTR, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc HttpAddRequestHeadersW*(P1: HINTERNET, P2: LPCWSTR, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc HttpSendRequestA*(P1: HINTERNET, P2: LPCSTR, P3: DWORD, P4: PVOID, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc HttpSendRequestW*(P1: HINTERNET, P2: LPCWSTR, P3: DWORD, P4: PVOID, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc HttpQueryInfoA*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: PDWORD, P5: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc HttpQueryInfoW*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: PDWORD, P5: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetSetCookieA*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetSetCookieW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetGetCookieA*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetGetCookieW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetAttemptConnect*(P1: DWORD): DWORD {.winapi, dynlib: "wininet", importc.}
proc InternetErrorDlg*(P1: HWND, P2: HINTERNET, P3: DWORD, P4: DWORD, P5: ptr PVOID): DWORD {.winapi, dynlib: "wininet", importc.}
proc InternetConfirmZoneCrossing*(P1: HWND, P2: LPSTR, P3: LPSTR, P4: BOOL): DWORD {.winapi, dynlib: "wininet", importc.}
proc CreateUrlCacheEntryA*(P1: LPCSTR, P2: DWORD, P3: LPCSTR, P4: LPSTR, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc CreateUrlCacheEntryW*(P1: LPCWSTR, P2: DWORD, P3: LPCWSTR, P4: LPWSTR, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc CommitUrlCacheEntryA*(P1: LPCSTR, P2: LPCSTR, P3: FILETIME, P4: FILETIME, P5: DWORD, P6: LPBYTE, P7: DWORD, P8: LPCSTR, P9: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc CommitUrlCacheEntryW*(P1: LPCWSTR, P2: LPCWSTR, P3: FILETIME, P4: FILETIME, P5: DWORD, P6: LPBYTE, P7: DWORD, P8: LPCWSTR, P9: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc RetrieveUrlCacheEntryFileA*(P1: LPCSTR, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: PDWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc RetrieveUrlCacheEntryFileW*(P1: LPCWSTR, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: PDWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc UnlockUrlCacheEntryFile*(P1: LPCSTR, P2: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc RetrieveUrlCacheEntryStreamA*(P1: LPCSTR, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: PDWORD, P4: BOOL, P5: DWORD): HANDLE {.winapi, dynlib: "wininet", importc.}
proc RetrieveUrlCacheEntryStreamW*(P1: LPCWSTR, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: PDWORD, P4: BOOL, P5: DWORD): HANDLE {.winapi, dynlib: "wininet", importc.}
proc ReadUrlCacheEntryStream*(P1: HANDLE, P2: DWORD, P3: PVOID, P4: PDWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc UnlockUrlCacheEntryStream*(P1: HANDLE, P2: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc GetUrlCacheEntryInfoA*(P1: LPCSTR, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc GetUrlCacheEntryInfoW*(P1: LPCWSTR, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc SetUrlCacheEntryInfoA*(P1: LPCSTR, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc SetUrlCacheEntryInfoW*(P1: LPCWSTR, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc FindFirstUrlCacheEntryA*(P1: LPCSTR, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: PDWORD): HANDLE {.winapi, dynlib: "wininet", importc.}
proc FindFirstUrlCacheEntryW*(P1: LPCWSTR, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: PDWORD): HANDLE {.winapi, dynlib: "wininet", importc.}
proc FindNextUrlCacheEntryA*(P1: HANDLE, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc FindNextUrlCacheEntryW*(P1: HANDLE, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc FindCloseUrlCache*(P1: HANDLE): BOOL {.winapi, dynlib: "wininet", importc.}
proc DeleteUrlCacheEntry*(P1: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc AuthenticateUser*(P1: ptr PVOID, P2: LPSTR, P3: LPSTR, P4: DWORD, P5: LPSTR, P6: DWORD, P7: LPSTR, P8: LPSTR): DWORD {.winapi, dynlib: "wininet", importc.}
proc HttpSendRequestExA*(P1: HINTERNET, P2: LPINTERNET_BUFFERSA, P3: LPINTERNET_BUFFERSA, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc HttpSendRequestExW*(P1: HINTERNET, P2: LPINTERNET_BUFFERSW, P3: LPINTERNET_BUFFERSW, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc HttpEndRequestA*(P1: HINTERNET, P2: LPINTERNET_BUFFERSA, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc HttpEndRequestW*(P1: HINTERNET, P2: LPINTERNET_BUFFERSW, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetDial*(P1: HWND, P2: LPTSTR, P3: DWORD, P4: LPDWORD, P5: DWORD): DWORD {.winapi, dynlib: "wininet", importc.}
proc InternetHangUp*(P1: DWORD, P2: DWORD): DWORD {.winapi, dynlib: "wininet", importc.}
proc InternetGoOnline*(P1: LPTSTR, P2: HWND, P3: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetAutodial*(P1: DWORD, P2: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetAutodialHangup*(P1: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetGetConnectedState*(P1: LPDWORD, P2: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetSetDialState*(P1: LPCTSTR, P2: DWORD, P3: DWORD): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetReadFileExA*(P1: HINTERNET, P2: LPINTERNET_BUFFERSA, P3: DWORD, P4: DWORD_PTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc InternetReadFileExW*(P1: HINTERNET, P2: LPINTERNET_BUFFERSW, P3: DWORD, P4: DWORD_PTR): BOOL {.winapi, dynlib: "wininet", importc.}
proc CreateUrlCacheGroup*(P1: DWORD, P2: LPVOID): GROUPID {.winapi, dynlib: "wininet", importc.}
proc DeleteUrlCacheGroup*(P1: GROUPID, P2: DWORD, P3: LPVOID): BOOL {.winapi, dynlib: "wininet", importc.}
proc FindFirstUrlCacheGroup*(P1: DWORD, P2: DWORD, P3: LPVOID, P4: DWORD, P5: ptr GROUPID, P6: LPVOID): HANDLE {.winapi, dynlib: "wininet", importc.}
proc FindNextUrlCacheGroup*(P1: HANDLE, P2: ptr GROUPID, P3: LPVOID): BOOL {.winapi, dynlib: "wininet", importc.}
proc GetUrlCacheGroupAttributeA*(P1: GROUPID, P2: DWORD, P3: DWORD, P4: LPINTERNET_CACHE_GROUP_INFOA, P5: LPDWORD, P6: LPVOID): BOOL {.winapi, dynlib: "wininet", importc.}
proc GetUrlCacheGroupAttributeW*(P1: GROUPID, P2: DWORD, P3: DWORD, P4: LPINTERNET_CACHE_GROUP_INFOW, P5: LPDWORD, P6: LPVOID): BOOL {.winapi, dynlib: "wininet", importc.}
proc SetUrlCacheGroupAttributeA*(P1: GROUPID, P2: DWORD, P3: DWORD, P4: LPINTERNET_CACHE_GROUP_INFOA, P5: LPVOID): BOOL {.winapi, dynlib: "wininet", importc.}
proc SetUrlCacheGroupAttributeW*(P1: GROUPID, P2: DWORD, P3: DWORD, P4: LPINTERNET_CACHE_GROUP_INFOW, P5: LPVOID): BOOL {.winapi, dynlib: "wininet", importc.}

when not defined(winansi):
  type
    URL_COMPONENTS* = URL_COMPONENTSW
    LPURL_COMPONENTS* = LPURL_COMPONENTSW
    GOPHER_FIND_DATA* = GOPHER_FIND_DATAW
    LPGOPHER_FIND_DATA* = LPGOPHER_FIND_DATAW
    INTERNET_CACHE_ENTRY_INFO* = INTERNET_CACHE_ENTRY_INFOW
    LPINTERNET_CACHE_ENTRY_INFO* = LPINTERNET_CACHE_ENTRY_INFOW
    INTERNET_BUFFERS* = INTERNET_BUFFERSW
    INTERNET_CACHE_GROUP_INFO* = INTERNET_CACHE_GROUP_INFOW
    LPINTERNET_CACHE_GROUP_INFO* = LPINTERNET_CACHE_GROUP_INFOW

  proc InternetCrackUrl*(P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: LPURL_COMPONENTSW): BOOL {.winapi, dynlib: "wininet", importc: "InternetCrackUrlW".}
  proc InternetCreateUrl*(P1: LPURL_COMPONENTSW, P2: DWORD, P3: LPWSTR, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetCreateUrlW".}
  proc InternetCanonicalizeUrl*(P1: LPCWSTR, P2: LPWSTR, P3: PDWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetCanonicalizeUrlW".}
  proc InternetCheckConnection*(P1: LPCWSTR, P2: DWORD, P3: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetCheckConnectionW".}
  proc InternetCombineUrl*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: PDWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetCombineUrlW".}
  proc InternetOpen*(P1: LPCWSTR, P2: DWORD, P3: LPCWSTR, P4: LPCWSTR, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "InternetOpenW".}
  proc InternetConnect*(P1: HINTERNET, P2: LPCWSTR, P3: INTERNET_PORT, P4: LPCWSTR, P5: LPCWSTR, P6: DWORD, P7: DWORD, P8: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "InternetConnectW".}
  proc InternetOpenUrl*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: DWORD, P6: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "InternetOpenUrlW".}
  proc InternetFindNextFile*(P1: HINTERNET, P2: PVOID): BOOL {.winapi, dynlib: "wininet", importc: "InternetFindNextFileW".}
  proc InternetQueryOption*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetQueryOptionW".}
  proc InternetSetOption*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetSetOptionW".}
  proc InternetSetOptionEx*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetSetOptionExW".}
  proc InternetGetLastResponseInfo*(P1: PDWORD, P2: LPWSTR, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetGetLastResponseInfoW".}
  proc InternetReadFileEx*(P1: HINTERNET, P2: LPINTERNET_BUFFERSW, P3: DWORD, P4: DWORD_PTR): BOOL {.winapi, dynlib: "wininet", importc: "InternetReadFileExW".}
  proc FtpFindFirstFile*(P1: HINTERNET, P2: LPCWSTR, P3: LPWIN32_FIND_DATA, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "FtpFindFirstFileW".}
  proc FtpGetFile*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: BOOL, P5: DWORD, P6: DWORD, P7: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "FtpGetFileW".}
  proc FtpPutFile*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "FtpPutFileW".}
  proc FtpDeleteFile*(P1: HINTERNET, P2: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc: "FtpDeleteFileW".}
  proc FtpRenameFile*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc: "FtpRenameFileW".}
  proc FtpOpenFile*(P1: HINTERNET, P2: LPCWSTR, P3: DWORD, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "FtpOpenFileW".}
  proc FtpCreateDirectory*(P1: HINTERNET, P2: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc: "FtpCreateDirectoryW".}
  proc FtpRemoveDirectory*(P1: HINTERNET, P2: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc: "FtpRemoveDirectoryW".}
  proc FtpSetCurrentDirectory*(P1: HINTERNET, P2: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc: "FtpSetCurrentDirectoryW".}
  proc FtpGetCurrentDirectory*(P1: HINTERNET, P2: LPWSTR, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "FtpGetCurrentDirectoryW".}
  proc FtpCommand*(P1: HINTERNET, P2: BOOL, P3: DWORD, P4: LPCWSTR, P5: DWORD_PTR, P6: ptr HINTERNET): BOOL {.winapi, dynlib: "wininet", importc: "FtpCommandW".}
  proc GopherGetLocatorType*(P1: LPCWSTR, P2: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "GopherGetLocatorTypeW".}
  proc GopherCreateLocator*(P1: LPCWSTR, P2: INTERNET_PORT, P3: LPCWSTR, P4: LPCWSTR, P5: DWORD, P6: LPWSTR, P7: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "GopherCreateLocatorW".}
  proc GopherFindFirstFile*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: LPGOPHER_FIND_DATAW, P5: DWORD, P6: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "GopherFindFirstFileW".}
  proc GopherOpenFile*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "GopherOpenFileW".}
  proc GopherGetAttribute*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: LPBYTE, P5: DWORD, P6: PDWORD, P7: GOPHER_ATTRIBUTE_ENUMERATOR, P8: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "GopherGetAttributeW".}
  proc HttpSendRequest*(P1: HINTERNET, P2: LPCWSTR, P3: DWORD, P4: PVOID, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "HttpSendRequestW".}
  proc HttpOpenRequest*(P1: HINTERNET, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR, P5: LPCWSTR, P6: ptr LPCWSTR, P7: DWORD, P8: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "HttpOpenRequestW".}
  proc HttpAddRequestHeaders*(P1: HINTERNET, P2: LPCWSTR, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "HttpAddRequestHeadersW".}
  proc HttpQueryInfo*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: PDWORD, P5: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "HttpQueryInfoW".}
  proc InternetSetCookie*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): BOOL {.winapi, dynlib: "wininet", importc: "InternetSetCookieW".}
  proc InternetGetCookie*(P1: LPCWSTR, P2: LPCWSTR, P3: LPWSTR, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetGetCookieW".}
  proc CreateUrlCacheEntry*(P1: LPCWSTR, P2: DWORD, P3: LPCWSTR, P4: LPWSTR, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "CreateUrlCacheEntryW".}
  proc RetrieveUrlCacheEntryStream*(P1: LPCWSTR, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: PDWORD, P4: BOOL, P5: DWORD): HANDLE {.winapi, dynlib: "wininet", importc: "RetrieveUrlCacheEntryStreamW".}
  proc FindNextUrlCacheEntry*(P1: HANDLE, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "FindNextUrlCacheEntryW".}
  proc CommitUrlCacheEntry*(P1: LPCWSTR, P2: LPCWSTR, P3: FILETIME, P4: FILETIME, P5: DWORD, P6: LPBYTE, P7: DWORD, P8: LPCWSTR, P9: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "CommitUrlCacheEntryW".}
  proc GetUrlCacheEntryInfo*(P1: LPCWSTR, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "GetUrlCacheEntryInfoW".}
  proc SetUrlCacheEntryInfo*(P1: LPCWSTR, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "SetUrlCacheEntryInfoW".}
  proc FindFirstUrlCacheEntry*(P1: LPCWSTR, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: PDWORD): HANDLE {.winapi, dynlib: "wininet", importc: "FindFirstUrlCacheEntryW".}
  proc RetrieveUrlCacheEntryFile*(P1: LPCWSTR, P2: LPINTERNET_CACHE_ENTRY_INFOW, P3: PDWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "RetrieveUrlCacheEntryFileW".}
  proc HttpSendRequestEx*(P1: HINTERNET, P2: LPINTERNET_BUFFERSW, P3: LPINTERNET_BUFFERSW, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "HttpSendRequestExW".}
  proc HttpEndRequest*(P1: HINTERNET, P2: LPINTERNET_BUFFERSW, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "HttpEndRequestW".}
  proc GetUrlCacheGroupAttribute*(P1: GROUPID, P2: DWORD, P3: DWORD, P4: LPINTERNET_CACHE_GROUP_INFOW, P5: LPDWORD, P6: LPVOID): BOOL {.winapi, dynlib: "wininet", importc: "GetUrlCacheGroupAttributeW".}
  proc SetUrlCacheGroupAttribute*(P1: GROUPID, P2: DWORD, P3: DWORD, P4: LPINTERNET_CACHE_GROUP_INFOW, P5: LPVOID): BOOL {.winapi, dynlib: "wininet", importc: "SetUrlCacheGroupAttributeW".}

else:
  type
    URL_COMPONENTS* = URL_COMPONENTSA
    LPURL_COMPONENTS* = LPURL_COMPONENTSA
    GOPHER_FIND_DATA* = GOPHER_FIND_DATAA
    LPGOPHER_FIND_DATA* = LPGOPHER_FIND_DATAA
    INTERNET_CACHE_ENTRY_INFO* = INTERNET_CACHE_ENTRY_INFOA
    LPINTERNET_CACHE_ENTRY_INFO* = LPINTERNET_CACHE_ENTRY_INFOA
    INTERNET_BUFFERS* = INTERNET_BUFFERSA
    INTERNET_CACHE_GROUP_INFO* = INTERNET_CACHE_GROUP_INFOA
    LPINTERNET_CACHE_GROUP_INFO* = LPINTERNET_CACHE_GROUP_INFOA

  proc GopherGetAttribute*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: LPBYTE, P5: DWORD, P6: PDWORD, P7: GOPHER_ATTRIBUTE_ENUMERATOR, P8: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "GopherGetAttributeA".}
  proc InternetCrackUrl*(P1: LPCSTR, P2: DWORD, P3: DWORD, P4: LPURL_COMPONENTSA): BOOL {.winapi, dynlib: "wininet", importc: "InternetCrackUrlA".}
  proc InternetCreateUrl*(P1: LPURL_COMPONENTSA, P2: DWORD, P3: LPSTR, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetCreateUrlA".}
  proc InternetCanonicalizeUrl*(P1: LPCSTR, P2: LPSTR, P3: PDWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetCanonicalizeUrlA".}
  proc InternetCheckConnection*(P1: LPCSTR, P2: DWORD, P3: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetCheckConnectionA".}
  proc InternetCombineUrl*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR, P4: PDWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetCombineUrlA".}
  proc InternetOpen*(P1: LPCSTR, P2: DWORD, P3: LPCSTR, P4: LPCSTR, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "InternetOpenA".}
  proc InternetConnect*(P1: HINTERNET, P2: LPCSTR, P3: INTERNET_PORT, P4: LPCSTR, P5: LPCSTR, P6: DWORD, P7: DWORD, P8: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "InternetConnectA".}
  proc InternetOpenUrl*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: DWORD, P6: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "InternetOpenUrlA".}
  proc InternetFindNextFile*(P1: HINTERNET, P2: PVOID): BOOL {.winapi, dynlib: "wininet", importc: "InternetFindNextFileA".}
  proc InternetQueryOption*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetQueryOptionA".}
  proc InternetSetOption*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetSetOptionA".}
  proc InternetSetOptionEx*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetSetOptionExA".}
  proc InternetGetLastResponseInfo*(P1: PDWORD, P2: LPSTR, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetGetLastResponseInfoA".}
  proc InternetReadFileEx*(P1: HINTERNET, P2: LPINTERNET_BUFFERSA, P3: DWORD, P4: DWORD_PTR): BOOL {.winapi, dynlib: "wininet", importc: "InternetReadFileExA".}
  proc FtpFindFirstFile*(P1: HINTERNET, P2: LPCSTR, P3: LPWIN32_FIND_DATA, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "FtpFindFirstFileA".}
  proc FtpGetFile*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: BOOL, P5: DWORD, P6: DWORD, P7: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "FtpGetFileA".}
  proc FtpPutFile*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "FtpPutFileA".}
  proc FtpDeleteFile*(P1: HINTERNET, P2: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc: "FtpDeleteFileA".}
  proc FtpRenameFile*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc: "FtpRenameFileA".}
  proc FtpOpenFile*(P1: HINTERNET, P2: LPCSTR, P3: DWORD, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "FtpOpenFileA".}
  proc FtpCreateDirectory*(P1: HINTERNET, P2: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc: "FtpCreateDirectoryA".}
  proc FtpRemoveDirectory*(P1: HINTERNET, P2: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc: "FtpRemoveDirectoryA".}
  proc FtpSetCurrentDirectory*(P1: HINTERNET, P2: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc: "FtpSetCurrentDirectoryA".}
  proc FtpGetCurrentDirectory*(P1: HINTERNET, P2: LPSTR, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "FtpGetCurrentDirectoryA".}
  proc FtpCommand*(P1: HINTERNET, P2: BOOL, P3: DWORD, P4: LPCSTR, P5: DWORD_PTR, P6: ptr HINTERNET): BOOL {.winapi, dynlib: "wininet", importc: "FtpCommandA".}
  proc GopherGetLocatorType*(P1: LPCSTR, P2: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "GopherGetLocatorTypeA".}
  proc GopherCreateLocator*(P1: LPCSTR, P2: INTERNET_PORT, P3: LPCSTR, P4: LPCSTR, P5: DWORD, P6: LPSTR, P7: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "GopherCreateLocatorA".}
  proc GopherFindFirstFile*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: LPGOPHER_FIND_DATAA, P5: DWORD, P6: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "GopherFindFirstFileA".}
  proc GopherOpenFile*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: DWORD, P5: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "GopherOpenFileA".}
  proc HttpSendRequest*(P1: HINTERNET, P2: LPCSTR, P3: DWORD, P4: PVOID, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "HttpSendRequestA".}
  proc HttpOpenRequest*(P1: HINTERNET, P2: LPCSTR, P3: LPCSTR, P4: LPCSTR, P5: LPCSTR, P6: ptr LPCSTR, P7: DWORD, P8: DWORD): HINTERNET {.winapi, dynlib: "wininet", importc: "HttpOpenRequestA".}
  proc HttpAddRequestHeaders*(P1: HINTERNET, P2: LPCSTR, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "HttpAddRequestHeadersA".}
  proc HttpQueryInfo*(P1: HINTERNET, P2: DWORD, P3: PVOID, P4: PDWORD, P5: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "HttpQueryInfoA".}
  proc InternetSetCookie*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR): BOOL {.winapi, dynlib: "wininet", importc: "InternetSetCookieA".}
  proc InternetGetCookie*(P1: LPCSTR, P2: LPCSTR, P3: LPSTR, P4: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "InternetGetCookieA".}
  proc CreateUrlCacheEntry*(P1: LPCSTR, P2: DWORD, P3: LPCSTR, P4: LPSTR, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "CreateUrlCacheEntryA".}
  proc RetrieveUrlCacheEntryStream*(P1: LPCSTR, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: PDWORD, P4: BOOL, P5: DWORD): HANDLE {.winapi, dynlib: "wininet", importc: "RetrieveUrlCacheEntryStreamA".}
  proc FindNextUrlCacheEntry*(P1: HANDLE, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "FindNextUrlCacheEntryA".}
  proc CommitUrlCacheEntry*(P1: LPCSTR, P2: LPCSTR, P3: FILETIME, P4: FILETIME, P5: DWORD, P6: LPBYTE, P7: DWORD, P8: LPCSTR, P9: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "CommitUrlCacheEntryA".}
  proc GetUrlCacheEntryInfo*(P1: LPCSTR, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: PDWORD): BOOL {.winapi, dynlib: "wininet", importc: "GetUrlCacheEntryInfoA".}
  proc SetUrlCacheEntryInfo*(P1: LPCSTR, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "SetUrlCacheEntryInfoA".}
  proc FindFirstUrlCacheEntry*(P1: LPCSTR, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: PDWORD): HANDLE {.winapi, dynlib: "wininet", importc: "FindFirstUrlCacheEntryA".}
  proc RetrieveUrlCacheEntryFile*(P1: LPCSTR, P2: LPINTERNET_CACHE_ENTRY_INFOA, P3: PDWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "RetrieveUrlCacheEntryFileA".}
  proc HttpSendRequestEx*(P1: HINTERNET, P2: LPINTERNET_BUFFERSA, P3: LPINTERNET_BUFFERSA, P4: DWORD, P5: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "HttpSendRequestExA".}
  proc HttpEndRequest*(P1: HINTERNET, P2: LPINTERNET_BUFFERSA, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "wininet", importc: "HttpEndRequestA".}
  proc GetUrlCacheGroupAttribute*(P1: GROUPID, P2: DWORD, P3: DWORD, P4: LPINTERNET_CACHE_GROUP_INFOA, P5: LPDWORD, P6: LPVOID): BOOL {.winapi, dynlib: "wininet", importc: "GetUrlCacheGroupAttributeA".}
  proc SetUrlCacheGroupAttribute*(P1: GROUPID, P2: DWORD, P3: DWORD, P4: LPINTERNET_CACHE_GROUP_INFOA, P5: LPVOID): BOOL {.winapi, dynlib: "wininet", importc: "SetUrlCacheGroupAttributeA".}

type
  LPINTERNET_BUFFERS* = ptr INTERNET_BUFFERS

proc `Admin=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_ADMIN_ATTRIBUTE_TYPE) = self.u1.Admin = x
proc Admin*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_ADMIN_ATTRIBUTE_TYPE = self.u1.Admin
proc `ModDate=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_MOD_DATE_ATTRIBUTE_TYPE) = self.u1.ModDate = x
proc ModDate*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_MOD_DATE_ATTRIBUTE_TYPE = self.u1.ModDate
proc `Ttl=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_TTL_ATTRIBUTE_TYPE) = self.u1.Ttl = x
proc Ttl*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_TTL_ATTRIBUTE_TYPE = self.u1.Ttl
proc `Score=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_SCORE_ATTRIBUTE_TYPE) = self.u1.Score = x
proc Score*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_SCORE_ATTRIBUTE_TYPE = self.u1.Score
proc `ScoreRange=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE) = self.u1.ScoreRange = x
proc ScoreRange*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_SCORE_RANGE_ATTRIBUTE_TYPE = self.u1.ScoreRange
proc `Site=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_SITE_ATTRIBUTE_TYPE) = self.u1.Site = x
proc Site*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_SITE_ATTRIBUTE_TYPE = self.u1.Site
proc `Organization=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_ORGANIZATION_ATTRIBUTE_TYPE) = self.u1.Organization = x
proc Organization*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_ORGANIZATION_ATTRIBUTE_TYPE = self.u1.Organization
proc `Location=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_LOCATION_ATTRIBUTE_TYPE) = self.u1.Location = x
proc Location*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_LOCATION_ATTRIBUTE_TYPE = self.u1.Location
proc `GeographicalLocation=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE) = self.u1.GeographicalLocation = x
proc GeographicalLocation*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_GEOGRAPHICAL_LOCATION_ATTRIBUTE_TYPE = self.u1.GeographicalLocation
proc `TimeZone=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_TIMEZONE_ATTRIBUTE_TYPE) = self.u1.TimeZone = x
proc TimeZone*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_TIMEZONE_ATTRIBUTE_TYPE = self.u1.TimeZone
proc `Provider=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_PROVIDER_ATTRIBUTE_TYPE) = self.u1.Provider = x
proc Provider*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_PROVIDER_ATTRIBUTE_TYPE = self.u1.Provider
proc `Version=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_VERSION_ATTRIBUTE_TYPE) = self.u1.Version = x
proc Version*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_VERSION_ATTRIBUTE_TYPE = self.u1.Version
proc `Abstract=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_ABSTRACT_ATTRIBUTE_TYPE) = self.u1.Abstract = x
proc Abstract*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_ABSTRACT_ATTRIBUTE_TYPE = self.u1.Abstract
proc `View=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_VIEW_ATTRIBUTE_TYPE) = self.u1.View = x
proc View*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_VIEW_ATTRIBUTE_TYPE = self.u1.View
proc `Veronica=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_VERONICA_ATTRIBUTE_TYPE) = self.u1.Veronica = x
proc Veronica*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_VERONICA_ATTRIBUTE_TYPE = self.u1.Veronica
proc `Ask=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_ASK_ATTRIBUTE_TYPE) = self.u1.Ask = x
proc Ask*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_ASK_ATTRIBUTE_TYPE = self.u1.Ask
proc `Unknown=`*(self: var GOPHER_ATTRIBUTE_TYPE, x: GOPHER_UNKNOWN_ATTRIBUTE_TYPE) = self.u1.Unknown = x
proc Unknown*(self: GOPHER_ATTRIBUTE_TYPE): GOPHER_UNKNOWN_ATTRIBUTE_TYPE = self.u1.Unknown

# net/winsock2.nim

const
  # GUARANTEE* = enum
  BestEffortService* = 0
  ControlledLoadService* = 1
  PredictiveService* = 2
  GuaranteedDelayService* = 3
  GuaranteedService* = 4
  # WSAESETSERVICEOP* = enum
  RNRSERVICE_REGISTER* = 0
  RNRSERVICE_DEREGISTER* = 1
  RNRSERVICE_DELETE* = 2
  # WSAECOMPARATOR* = enum
  COMP_EQUAL* = 0
  COMP_NOTLESS* = 1
  # WSACOMPLETIONTYPE* = enum
  NSP_NOTIFY_IMMEDIATELY* = 0
  NSP_NOTIFY_HWND* = 1
  NSP_NOTIFY_EVENT* = 2
  NSP_NOTIFY_PORT* = 3
  NSP_NOTIFY_APC* = 4

type
  u_char* = char
  u_short* = uint16
  u_int = uint32
  u_long* = uint32
  SOCKET* = uint32

const
  FD_SETSIZE* = 64
  SD_RECEIVE* = 0
  SD_SEND* = 1
  SD_BOTH* = 2

type
  FD_SET* {.final, pure.} = object
    fd_count*: u_int
    fd_array*: array[FD_SETSIZE, SOCKET]
  PFD_SET* = ptr FD_SET
  LPFD_SET* = ptr FD_SET
  fd_set* = FD_SET

proc WSAFDIsSet*(P1: SOCKET, P2: ptr FD_SET): int32 {.winapi, dynlib: "ws2_32", importc.}
proc FD_ISSET*(P1: SOCKET, P2: ptr FD_SET): int32 {.winapi, dynlib: "ws2_32", importc: "__WSAFDIsSet".}
proc FD_CLR*(fd: SOCKET, s: ptr FD_SET): void =
  var i: u_int = 0
  while i < s.fd_count:
    if s.fd_array[i] == fd:
      while i < s.fd_count - 1:
        s.fd_array[i] = s.fd_array[i+1]
        i.inc
      s.fd_count.dec
      break
    i.inc
proc FD_ZERO*(s: ptr FD_SET): void = s.fd_count = 0

type
  TIMEVAL* {.final, pure.} = object
    tv_sec*: int32
    tv_usec*: int32
  PTIMEVAL* = ptr TIMEVAL
  LPTIMEVAL* = ptr TIMEVAL

proc opCmp*(self: TIMEVAL, tv: TIMEVAL): int32 =
  if self.tv_sec < tv.tv_sec: return -1
  if self.tv_sec > tv.tv_sec: return 1
  if self.tv_usec < tv.tv_usec: return -1
  if self.tv_usec > tv.tv_usec: return 1
  return 0

proc timerisset*(tvp: ptr TIMEVAL): bool = tvp.tv_sec.bool or tvp.tv_usec.bool
proc timerclear*(tvp: var TIMEVAL): void = tvp.tv_sec = 0; tvp.tv_usec = 0

type
  HOSTENT* {.final, pure.} = object
    h_name*: cstring
    h_aliases*: ptr cstring
    h_addrtype*: int16
    h_length*: int16
    h_addr_list*: ptr cstring
  PHOSTENT* = ptr HOSTENT
  LPHOSTENT* = ptr HOSTENT
  LINGER* {.final, pure.} = object
    l_onoff*: u_short
    l_linger*: u_short
  PLINGER* = ptr LINGER
  LPLINGER* = ptr LINGER

proc h_addr*(self: HOSTENT): cstring = self.h_addr_list[]
proc h_addr*(self: HOSTENT, h: cstring): cstring = self.h_addr_list[] = h

const
  IOCPARAM_MASK* = 0x7f
  IOC_VOID* = 0x20000000
  IOC_OUT* = 0x40000000
  IOC_IN* = 0x80000000'u32
  IOC_INOUT* = (IOC_IN or IOC_OUT).DWORD

template IOR(x: char, y: uint8, t: untyped): DWORD = IOC_OUT.DWORD or ((t.sizeof.DWORD and IOCPARAM_MASK) shl 16) or (x.DWORD shl 8) or y
template IOW(x: char, y: uint8, t: untyped): DWORD = IOC_IN.DWORD or ((t.sizeof.DWORD and IOCPARAM_MASK) shl 16) or (x.DWORD shl 8) or y

const
  FIONBIO*    = IOW('f', 126, u_long)
  FIONREAD*   = IOR('f', 127, u_long)
  FIOASYNC*   = IOW('f', 125, u_long)
  SIOCSHIWAT* = IOW('s',   0, u_long)
  SIOCGHIWAT* = IOR('s',   1, u_long)
  SIOCSLOWAT* = IOW('s',   2, u_long)
  SIOCGLOWAT* = IOR('s',   3, u_long)
  SIOCATMARK* = IOR('s',   7, u_long)

type
  netent* {.final, pure.} = object
    n_name*: cstring
    n_aliases*: ptr cstring
    n_addrtype*: int16
    n_net*: u_long
  SERVENT* {.final, pure.} = object
    s_name*: cstring
    s_aliases*: ptr cstring
    s_port*: int16
    s_proto*: cstring
  PSERVENT* = ptr SERVENT
  LPSERVENT* = ptr SERVENT
  PROTOENT* {.final, pure.} = object
    p_name*: cstring
    p_aliases*: ptr cstring
    p_proto*: int16
  PPROTOENT* = ptr PROTOENT
  LPPROTOENT* = ptr PROTOENT

const
  IPPROTO_IP* = 0
  IPPROTO_ICMP* = 1
  IPPROTO_IGMP* = 2
  IPPROTO_GGP* = 3
  IPPROTO_TCP* = 6
  IPPROTO_PUP* = 12
  IPPROTO_UDP* = 17
  IPPROTO_IDP* = 22
  IPPROTO_ND* = 77
  IPPROTO_RAW* = 255
  IPPROTO_MAX* = 256
  IPPROTO_HOPOPTS* = 0
  IPPROTO_IPV6* = 41
  IPPROTO_ROUTING* = 43
  IPPROTO_FRAGMENT* = 44
  IPPROTO_ESP* = 50
  IPPROTO_AH* = 51
  IPPROTO_ICMPV6* = 58
  IPPROTO_NONE* = 59
  IPPROTO_DSTOPTS* = 60
  IPPORT_ECHO* = 7
  IPPORT_DISCARD* = 9
  IPPORT_SYSTAT* = 11
  IPPORT_DAYTIME* = 13
  IPPORT_NETSTAT* = 15
  IPPORT_FTP* = 21
  IPPORT_TELNET* = 23
  IPPORT_SMTP* = 25
  IPPORT_TIMESERVER* = 37
  IPPORT_NAMESERVER* = 42
  IPPORT_WHOIS* = 43
  IPPORT_MTP* = 57
  IPPORT_TFTP* = 69
  IPPORT_RJE* = 77
  IPPORT_FINGER* = 79
  IPPORT_TTYLINK* = 87
  IPPORT_SUPDUP* = 95
  IPPORT_EXECSERVER* = 512
  IPPORT_LOGINSERVER* = 513
  IPPORT_CMDSERVER* = 514
  IPPORT_EFSSERVER* = 520
  IPPORT_BIFFUDP* = 512
  IPPORT_WHOSERVER* = 513
  IPPORT_ROUTESERVER* = 520
  IPPORT_RESERVED* = 1024
  IMPLINK_IP* = 155
  IMPLINK_LOWEXPER* = 156
  IMPLINK_HIGHEXPER* = 158

type
  IN_ADDR_UNION1_STRUCT4* {.final, pure.} = object
    s_w*: u_short
    s_imp*: u_short
  IN_ADDR_UNION1_STRUCT3* {.final, pure.} = object
    s_w1*: u_short
    s_w2*: u_short
  IN_ADDR_UNION1_STRUCT2* {.final, pure.} = object
    s_net*: u_char
    s_host*: u_char
    s_lh*: u_char
    s_impno*: u_char
  IN_ADDR_UNION1_STRUCT1* {.final, pure.} = object
    s_b1*: u_char
    s_b2*: u_char
    s_b3*: u_char
    s_b4*: u_char
  IN_ADDR_UNION1* {.final, union, pure.} = object
    s1*: IN_ADDR_UNION1_STRUCT1
    s2*: IN_ADDR_UNION1_STRUCT2
    s3*: IN_ADDR_UNION1_STRUCT3
    s4*: IN_ADDR_UNION1_STRUCT4
    S_addr*: u_long
    s_addr*: u_long
  IN_ADDR* {.final, pure.} = object
    u1*: IN_ADDR_UNION1

proc IN_CLASSA*(i: int32): bool = (i and 0x80000000) == 0

const
  IN_CLASSA_NET* = -16777216
  IN_CLASSA_NSHIFT* = 24
  IN_CLASSA_HOST* = 0x00ffffff
  IN_CLASSA_MAX* = 128

proc IN_CLASSB*(i: int32): bool = (i and 0xc0000000) == 0x80000000

const
  IN_CLASSB_NET* = -65536
  IN_CLASSB_NSHIFT* = 16
  IN_CLASSB_HOST* = 0x0000ffff
  IN_CLASSB_MAX* = 65536

proc IN_CLASSC*(i: int32): bool = (i and 0xe0000000 ) == 0xc0000000

const
  IN_CLASSC_NET* = -256
  IN_CLASSC_NSHIFT* = 8
  IN_CLASSC_HOST* = 0x000000ff
  INADDR_ANY* = 0
  INADDR_LOOPBACK* = 0x7F000001
  INADDR_BROADCAST* = 0xFFFFFFFF'u32
  INADDR_NONE* = 0xFFFFFFFF'u32

type
  SOCKADDR_IN* {.final, pure.} = object
    sin_family*: int16
    sin_port*: u_short
    sin_addr*: IN_ADDR
    sin_zero*: array[8, char]
  PSOCKADDR_IN* = ptr SOCKADDR_IN
  LPSOCKADDR_IN* = ptr SOCKADDR_IN

const
  WSADESCRIPTION_LEN* = 256
  WSASYS_STATUS_LEN* = 128

type
  WSADATA* {.final, pure.} = object
    wVersion*: WORD
    wHighVersion*: WORD
    szDescription*: array[WSADESCRIPTION_LEN+1, char]
    szSystemStatus*: array[WSASYS_STATUS_LEN+1, char]
    iMaxSockets*: uint16
    iMaxUdpDg*: uint16
    lpVendorInfo*: cstring
  LPWSADATA* = ptr WSADATA

const
  IP_OPTIONS* = 1
  SO_OPTIONS* = 1
  SO_DEBUG* = 1
  SO_ACCEPTCONN* = 2
  SO_REUSEADDR* = 4
  SO_KEEPALIVE* = 8
  SO_DONTROUTE* = 16
  SO_BROADCAST* = 32
  SO_USELOOPBACK* = 64
  SO_LINGER* = 128
  SO_OOBINLINE* = 256
  SO_DONTLINGER* = (not SO_LINGER)
  SO_EXCLUSIVEADDRUSE* = (not SO_REUSEADDR)
  SO_SNDBUF* = 0x1001
  SO_RCVBUF* = 0x1002
  SO_SNDLOWAT* = 0x1003
  SO_RCVLOWAT* = 0x1004
  SO_SNDTIMEO* = 0x1005
  SO_RCVTIMEO* = 0x1006
  SO_ERROR* = 0x1007
  SO_TYPE* = 0x1008
  INVALID_SOCKET* = 0xFFFFFFFF.SOCKET
  SOCKET_ERROR* = -1
  SOCK_STREAM* = 1
  SOCK_DGRAM* = 2
  SOCK_RAW* = 3
  SOCK_RDM* = 4
  SOCK_SEQPACKET* = 5
  TCP_NODELAY* = 0x0001
  AF_UNSPEC* = 0
  AF_UNIX* = 1
  AF_INET* = 2
  AF_IMPLINK* = 3
  AF_PUP* = 4
  AF_CHAOS* = 5
  AF_IPX* = 6
  AF_NS* = 6
  AF_ISO* = 7
  AF_OSI* = AF_ISO
  AF_ECMA* = (AF_ISO + 1)
  AF_DATAKIT* = (AF_ISO + 2)
  AF_CCITT* = (AF_ISO + 3)
  AF_SNA* = (AF_ISO + 4)
  AF_DECnet* = (AF_ISO + 5)
  AF_DLI* = (AF_ISO + 6)
  AF_LAT* = (AF_ISO + 7)
  AF_HYLINK* = (AF_ISO + 8)
  AF_APPLETALK* = (AF_ISO + 9)
  AF_NETBIOS* = (AF_ISO + 10)
  AF_VOICEVIEW* = (AF_ISO + 11)
  AF_FIREFOX* = (AF_ISO + 12)
  AF_UNKNOWN1* = (AF_ISO + 13)
  AF_BAN* = (AF_ISO + 14)
  AF_ATM* = (AF_ISO + 15)
  AF_INET6* = (AF_ISO + 16)
  AF_CLUSTER* = (AF_ISO + 17)
  AF_12844* = (AF_ISO + 18)
  AF_IRDA* = (AF_ISO + 19)
  AF_NETDES* = 28
  AF_MAX* = 29

type
  SOCKADDR* {.final, pure.} = object
    sa_family*: u_short
    sa_data*: array[14, char]
  PSOCKADDR* = ptr SOCKADDR
  LPSOCKADDR* = ptr SOCKADDR
  SOCKADDR_STORAGE* {.final, pure.} = object
    ss_family*: int16
    ss_pad1*: array[6, char]
    ss_align*: int64
    ss_pad2*: array[112, char]
  PSOCKADDR_STORAGE* = ptr SOCKADDR_STORAGE
  sockproto* {.final, pure.} = object
    sp_family*: u_short
    sp_protocol*: u_short

const
  PF_UNSPEC* = AF_UNSPEC
  PF_UNIX* = AF_UNIX
  PF_INET* = AF_INET
  PF_IMPLINK* = AF_IMPLINK
  PF_PUP* = AF_PUP
  PF_CHAOS* = AF_CHAOS
  PF_NS* = AF_NS
  PF_IPX* = AF_IPX
  PF_ISO* = AF_ISO
  PF_OSI* = AF_OSI
  PF_ECMA* = AF_ECMA
  PF_DATAKIT* = AF_DATAKIT
  PF_CCITT* = AF_CCITT
  PF_SNA* = AF_SNA
  PF_DECnet* = AF_DECnet
  PF_DLI* = AF_DLI
  PF_LAT* = AF_LAT
  PF_HYLINK* = AF_HYLINK
  PF_APPLETALK* = AF_APPLETALK
  PF_VOICEVIEW* = AF_VOICEVIEW
  PF_FIREFOX* = AF_FIREFOX
  PF_UNKNOWN1* = AF_UNKNOWN1
  PF_BAN* = AF_BAN
  PF_ATM* = AF_ATM
  PF_INET6* = AF_INET6
  PF_MAX* = AF_MAX
  SOL_SOCKET* = 0xFFFF
  SOMAXCONN* = 5
  MSG_OOB* = 1
  MSG_PEEK* = 2
  MSG_DONTROUTE* = 4
  MSG_MAXIOVLEN* = 16
  MSG_PARTIAL* = 0x8000
  MAXGETHOSTSTRUCT* = 1024
  FD_READ_BIT* = 0
  FD_WRITE_BIT* = 1
  FD_OOB_BIT* = 2
  FD_ACCEPT_BIT* = 3
  FD_CONNECT_BIT* = 4
  FD_CLOSE_BIT* = 5
  FD_QOS_BIT* = 6
  FD_GROUP_QOS_BIT* = 7
  FD_ROUTING_INTERFACE_CHANGE_BIT* = 8
  FD_ADDRESS_LIST_CHANGE_BIT* = 9
  FD_MAX_EVENTS* = 10
  FD_READ* = (1  shl  FD_READ_BIT)
  FD_WRITE* = (1  shl  FD_WRITE_BIT)
  FD_OOB* = (1  shl  FD_OOB_BIT)
  FD_ACCEPT* = (1  shl  FD_ACCEPT_BIT)
  FD_CONNECT* = (1  shl  FD_CONNECT_BIT)
  FD_CLOSE* = (1  shl  FD_CLOSE_BIT)
  FD_QOS* = (1  shl  FD_QOS_BIT)
  FD_GROUP_QOS* = (1  shl  FD_GROUP_QOS_BIT)
  FD_ROUTING_INTERFACE_CHANGE* = (1  shl  FD_ROUTING_INTERFACE_CHANGE_BIT)
  FD_ADDRESS_LIST_CHANGE* = (1  shl  FD_ADDRESS_LIST_CHANGE_BIT)
  FD_ALL_EVENTS* = (( 1  shl  FD_MAX_EVENTS ) - 1)
  WSABASEERR* = 10000
  WSAEINTR* = (WSABASEERR + 4)
  WSAEBADF* = (WSABASEERR + 9)
  WSAEACCES* = (WSABASEERR + 13)
  WSAEFAULT* = (WSABASEERR + 14)
  WSAEINVAL* = (WSABASEERR + 22)
  WSAEMFILE* = (WSABASEERR + 24)
  WSAEWOULDBLOCK* = (WSABASEERR + 35)
  WSAEINPROGRESS* = (WSABASEERR + 36)
  WSAEALREADY* = (WSABASEERR + 37)
  WSAENOTSOCK* = (WSABASEERR + 38)
  WSAEDESTADDRREQ* = (WSABASEERR + 39)
  WSAEMSGSIZE* = (WSABASEERR + 40)
  WSAEPROTOTYPE* = (WSABASEERR + 41)
  WSAENOPROTOOPT* = (WSABASEERR + 42)
  WSAEPROTONOSUPPORT* = (WSABASEERR + 43)
  WSAESOCKTNOSUPPORT* = (WSABASEERR + 44)
  WSAEOPNOTSUPP* = (WSABASEERR + 45)
  WSAEPFNOSUPPORT* = (WSABASEERR + 46)
  WSAEAFNOSUPPORT* = (WSABASEERR + 47)
  WSAEADDRINUSE* = (WSABASEERR + 48)
  WSAEADDRNOTAVAIL* = (WSABASEERR + 49)
  WSAENETDOWN* = (WSABASEERR + 50)
  WSAENETUNREACH* = (WSABASEERR + 51)
  WSAENETRESET* = (WSABASEERR + 52)
  WSAECONNABORTED* = (WSABASEERR + 53)
  WSAECONNRESET* = (WSABASEERR + 54)
  WSAENOBUFS* = (WSABASEERR + 55)
  WSAEISCONN* = (WSABASEERR + 56)
  WSAENOTCONN* = (WSABASEERR + 57)
  WSAESHUTDOWN* = (WSABASEERR + 58)
  WSAETOOMANYREFS* = (WSABASEERR + 59)
  WSAETIMEDOUT* = (WSABASEERR + 60)
  WSAECONNREFUSED* = (WSABASEERR + 61)
  WSAELOOP* = (WSABASEERR + 62)
  WSAENAMETOOLONG* = (WSABASEERR + 63)
  WSAEHOSTDOWN* = (WSABASEERR + 64)
  WSAEHOSTUNREACH* = (WSABASEERR + 65)
  WSAENOTEMPTY* = (WSABASEERR + 66)
  WSAEPROCLIM* = (WSABASEERR + 67)
  WSAEUSERS* = (WSABASEERR + 68)
  WSAEDQUOT* = (WSABASEERR + 69)
  WSAESTALE* = (WSABASEERR + 70)
  WSAEREMOTE* = (WSABASEERR + 71)
  WSAEDISCON* = (WSABASEERR + 101)
  WSASYSNOTREADY* = (WSABASEERR + 91)
  WSAVERNOTSUPPORTED* = (WSABASEERR + 92)
  WSANOTINITIALISED* = (WSABASEERR + 93)
  WSAHOST_NOT_FOUND* = (WSABASEERR + 1001)
  WSATRY_AGAIN* = (WSABASEERR + 1002)
  WSANO_RECOVERY* = (WSABASEERR + 1003)
  WSANO_DATA* = (WSABASEERR + 1004)
  WSANO_ADDRESS* = WSANO_DATA
  OLD_WSAENOMORE* = (WSABASEERR + 102)
  OLD_WSAECANCELLED* = (WSABASEERR + 103)
  WSAEINVALIDPROCTABLE* = (WSABASEERR + 104)
  WSAEINVALIDPROVIDER* = (WSABASEERR + 105)
  WSAEPROVIDERFAILEDINIT* = (WSABASEERR + 106)
  WSASYSCALLFAILURE* = (WSABASEERR + 107)
  WSASERVICE_NOT_FOUND* = (WSABASEERR + 108)
  WSATYPE_NOT_FOUND* = (WSABASEERR + 109)
  WSA_E_NO_MORE* = (WSABASEERR + 110)
  WSA_E_CANCELLED* = (WSABASEERR + 111)
  WSAEREFUSED* = (WSABASEERR + 112)
  WSA_QOS_RECEIVERS* = (WSABASEERR + 1005)
  WSA_QOS_SENDERS* = (WSABASEERR + 1006)
  WSA_QOS_NO_SENDERS* = (WSABASEERR + 1007)
  WSA_QOS_NO_RECEIVERS* = (WSABASEERR + 1008)
  WSA_QOS_REQUEST_CONFIRMED* = (WSABASEERR + 1009)
  WSA_QOS_ADMISSION_FAILURE* = (WSABASEERR + 1010)
  WSA_QOS_POLICY_FAILURE* = (WSABASEERR + 1011)
  WSA_QOS_BAD_STYLE* = (WSABASEERR + 1012)
  WSA_QOS_BAD_OBJECT* = (WSABASEERR + 1013)
  WSA_QOS_TRAFFIC_CTRL_ERROR* = (WSABASEERR + 1014)
  WSA_QOS_GENERIC_ERROR* = (WSABASEERR + 1015)
  WSA_QOS_ESERVICETYPE* = (WSABASEERR + 1016)
  WSA_QOS_EFLOWSPEC* = (WSABASEERR + 1017)
  WSA_QOS_EPROVSPECBUF* = (WSABASEERR + 1018)
  WSA_QOS_EFILTERSTYLE* = (WSABASEERR + 1019)
  WSA_QOS_EFILTERTYPE* = (WSABASEERR + 1020)
  WSA_QOS_EFILTERCOUNT* = (WSABASEERR + 1021)
  WSA_QOS_EOBJLENGTH* = (WSABASEERR + 1022)
  WSA_QOS_EFLOWCOUNT* = (WSABASEERR + 1023)
  WSA_QOS_EUNKOWNPSOBJ* = (WSABASEERR + 1024)
  WSA_QOS_EPOLICYOBJ* = (WSABASEERR + 1025)
  WSA_QOS_EFLOWDESC* = (WSABASEERR + 1026)
  WSA_QOS_EPSFLOWSPEC* = (WSABASEERR + 1027)
  WSA_QOS_EPSFILTERSPEC* = (WSABASEERR + 1028)
  WSA_QOS_ESDMODEOBJ* = (WSABASEERR + 1029)
  WSA_QOS_ESHAPERATEOBJ* = (WSABASEERR + 1030)
  WSA_QOS_RESERVED_PETYPE* = (WSABASEERR + 1031)
  HOST_NOT_FOUND* = WSAHOST_NOT_FOUND
  TRY_AGAIN* = WSATRY_AGAIN
  NO_RECOVERY* = WSANO_RECOVERY
  NO_DATA* = WSANO_DATA
  NO_ADDRESS* = WSANO_ADDRESS

proc accept*(P1: SOCKET, P2: ptr SOCKADDR, P3: ptr int32): SOCKET {.winapi, dynlib: "ws2_32", importc.}
proc `bind`*(P1: SOCKET, P2: ptr SOCKADDR, P3: int32): int32 {.winapi, dynlib: "ws2_32", importc: "bind".}
proc closesocket*(P1: SOCKET): int32 {.winapi, dynlib: "ws2_32", importc.}
proc connect*(P1: SOCKET, P2: ptr SOCKADDR, P3: int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc ioctlsocket*(P1: SOCKET, P2: int32, P3: ptr u_long): int32 {.winapi, dynlib: "ws2_32", importc.}
proc getpeername*(P1: SOCKET, P2: ptr SOCKADDR, P3: ptr int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc getsockname*(P1: SOCKET, P2: ptr SOCKADDR, P3: ptr int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc getsockopt*(P1: SOCKET, P2: int32, P3: int32, P4: pointer, P5: ptr int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc inet_addr*(P1: cstring): uint32 {.winapi, dynlib: "ws2_32", importc.}
proc listen*(P1: SOCKET, P2: int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc recv*(P1: SOCKET, P2: ptr uint8, P3: int32, P4: int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc recvfrom*(P1: SOCKET, P2: ptr uint8, P3: int32, P4: int32, P5: ptr SOCKADDR, P6: ptr int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc send*(P1: SOCKET, P2: ptr uint8, P3: int32, P4: int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc sendto*(P1: SOCKET, P2: ptr uint8, P3: int32, P4: int32, P5: ptr SOCKADDR, P6: int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc setsockopt*(P1: SOCKET, P2: int32, P3: int32, P4: pointer, P5: int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc shutdown*(P1: SOCKET, P2: int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc socket*(P1: int32, P2: int32, P3: int32): SOCKET {.winapi, dynlib: "ws2_32", importc.}

type
  LPFN_ACCEPT* = accept.type
  LPFN_BIND* = `bind`.type
  LPFN_CLOSESOCKET* = closesocket.type
  LPFN_CONNECT* = connect.type
  LPFN_IOCTLSOCKET* = ioctlsocket.type
  LPFN_GETPEERNAME* = getpeername.type
  LPFN_GETSOCKNAME* = getsockname.type
  LPFN_GETSOCKOPT* = getsockopt.type
  LPFN_INET_ADDR* = inet_addr.type
  LPFN_LISTEN* = listen.type
  LPFN_RECV* = recv.type
  LPFN_RECVFROM* = recvfrom.type
  LPFN_SEND* = send.type
  LPFN_SENDTO* = sendto.type
  LPFN_SETSOCKOPT* = setsockopt.type
  LPFN_SHUTDOWN* = shutdown.type
  LPFN_SOCKET* = socket.type

proc inet_ntoa*(P1: IN_ADDR): cstring {.winapi, dynlib: "ws2_32", importc.}
proc gethostbyaddr*(P1: cstring, P2: int32, P3: int32): ptr HOSTENT {.winapi, dynlib: "ws2_32", importc.}
proc gethostbyname*(P1: cstring): ptr HOSTENT {.winapi, dynlib: "ws2_32", importc.}
proc getservbyport*(P1: int32, P2: cstring): ptr SERVENT {.winapi, dynlib: "ws2_32", importc.}
proc getservbyname*(P1: cstring, P2: cstring): ptr SERVENT {.winapi, dynlib: "ws2_32", importc.}
proc getprotobynumber*(P1: int32): ptr PROTOENT {.winapi, dynlib: "ws2_32", importc.}
proc getprotobyname*(P1: cstring): ptr PROTOENT {.winapi, dynlib: "ws2_32", importc.}

type
  LPFN_INET_NTOA* = inet_ntoa.type
  LPFN_GETHOSTBYADDR* = gethostbyaddr.type
  LPFN_GETHOSTBYNAME* = gethostbyname.type
  LPFN_GETSERVBYPORT* = getservbyport.type
  LPFN_GETSERVBYNAME* = getservbyname.type
  LPFN_GETPROTOBYNUMBER* = getprotobynumber.type
  LPFN_GETPROTOBYNAME* = getprotobyname.type

proc WSAStartup*(P1: WORD, P2: LPWSADATA): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSACleanup*(): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSASetLastError*(P1: int32): void {.winapi, dynlib: "ws2_32", importc.}
proc WSAGetLastError*(): int32 {.winapi, dynlib: "ws2_32", importc.}
proc h_errno*(): int32 {.winapi, dynlib: "ws2_32", importc: "WSAGetLastError".}

type
  LPFN_WSASTARTUP* = WSAStartup.type
  LPFN_WSACLEANUP* = WSACleanup.type
  LPFN_WSASETLASTERROR* = WSASetLastError.type
  LPFN_WSAGETLASTERROR* = WSAGetLastError.type

proc WSAIsBlocking*(): BOOL {.winapi, dynlib: "ws2_32", importc.}
proc WSAUnhookBlockingHook*(): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSASetBlockingHook*(P1: FARPROC): FARPROC {.winapi, dynlib: "ws2_32", importc.}
proc WSACancelBlockingCall*(): int32 {.winapi, dynlib: "ws2_32", importc.}

type
  LPFN_WSAISBLOCKING* = WSAIsBlocking.type
  LPFN_WSAUNHOOKBLOCKINGHOOK* = WSAUnhookBlockingHook.type
  LPFN_WSASETBLOCKINGHOOK* = WSASetBlockingHook.type
  LPFN_WSACANCELBLOCKINGCALL* = WSACancelBlockingCall.type

proc WSAAsyncGetServByName*(P1: HWND, P2: u_int, P3: cstring, P4: cstring, P5: cstring, P6: int32): HANDLE {.winapi, dynlib: "ws2_32", importc.}
proc WSAAsyncGetServByPort*(P1: HWND, P2: u_int, P3: int32, P4: cstring, P5: cstring, P6: int32): HANDLE {.winapi, dynlib: "ws2_32", importc.}
proc WSAAsyncGetProtoByName*(P1: HWND, P2: u_int, P3: cstring, P4: cstring, P5: int32): HANDLE {.winapi, dynlib: "ws2_32", importc.}
proc WSAAsyncGetProtoByNumber*(P1: HWND, P2: u_int, P3: int32, P4: cstring, P5: int32): HANDLE {.winapi, dynlib: "ws2_32", importc.}
proc WSAAsyncGetHostByName*(P1: HWND, P2: u_int, P3: cstring, P4: cstring, P5: int32): HANDLE {.winapi, dynlib: "ws2_32", importc.}
proc WSAAsyncGetHostByAddr*(P1: HWND, P2: u_int, P3: cstring, P4: int32, P5: int32, P6: cstring, P7: int32): HANDLE {.winapi, dynlib: "ws2_32", importc.}
proc WSACancelAsyncRequest*(P1: HANDLE): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSAAsyncSelect*(P1: SOCKET, P2: HWND, P3: u_int, P4: int64): int32 {.winapi, dynlib: "ws2_32", importc.}

type
  LPFN_WSAAsyncGetServByName* = WSAAsyncGetServByName.type
  LPFN_WSAASYNCGETSERVBYPORT* = WSAAsyncGetServByPort.type
  LPFN_WSAASYNCGETPROTOBYNAME* = WSAAsyncGetProtoByName.type
  LPFN_WSAASYNCGETPROTOBYNUMBER* = WSAAsyncGetProtoByNumber.type
  LPFN_WSAASYNCGETHOSTBYNAME* = WSAAsyncGetHostByName.type
  LPFN_WSAASYNCGETHOSTBYADDR* = WSAAsyncGetHostByAddr.type
  LPFN_WSACANCELASYNCREQUEST* = WSACancelAsyncRequest.type
  LPFN_WSAASYNCSELECT* = WSAAsyncSelect.type

proc htonl*(P1: u_long): u_long {.winapi, dynlib: "ws2_32", importc.}
proc ntohl*(P1: u_long): u_long {.winapi, dynlib: "ws2_32", importc.}
proc htons*(P1: u_short): u_short {.winapi, dynlib: "ws2_32", importc.}
proc ntohs*(P1: u_short): u_short {.winapi, dynlib: "ws2_32", importc.}
proc select*(nfds: int32, P2: ptr fd_set, P3: ptr fd_set, P4: ptr fd_set, P5: ptr TIMEVAL): int32 {.winapi, dynlib: "ws2_32", importc.}

type
  LPFN_HTONL* = htonl.type
  LPFN_NTOHL* = ntohl.type
  LPFN_HTONS* = htons.type
  LPFN_NTOHS* = ntohs.type
  LPFN_SELECT* = select.type

proc gethostname*(P1: cstring, P2: int32): int32 {.winapi, dynlib: "ws2_32", importc.}

type
  LPFN_GETHOSTNAME* = gethostname.type

proc WSAMAKEASYNCREPLY*(a, b: auto): uint32 = (b.uint16.uint32 shl 16) or a.uint16.uint32
proc WSAMAKESELECTREPLY*(a, b: auto): uint32 = (b.uint16.uint32 shl 16) or a.uint16.uint32
proc WSAGETASYNCBUFLEN*(L: auto): uint16 = L.uint16
proc WSAGETSELECTEVENT*(L: auto): uint16 = L.uint16
proc WSAGETASYNCERROR*(L: auto): uint16 = (L shr 16).uint16
proc WSAGETSELECTERROR*(L: auto): uint16 = (L shr 16).uint16

const
  ADDR_ANY* = INADDR_ANY

proc IN_CLASSD*(i: int32): bool = (i and 0xf0000000) == 0xe0000000

const
  IN_CLASSD_NET* = -268435456
  IN_CLASSD_NSHIFT* = 28
  IN_CLASSD_HOST* = 0x0fffffff
  IN_MULTICAST* = IN_CLASSD
  FROM_PROTOCOL_INFO* = -1
  SO_GROUP_ID* = 0x2001
  SO_GROUP_PRIORITY* = 0x2002
  SO_MAX_MSG_SIZE* = 0x2003
  SO_PROTOCOL_INFOA* = 0x2004
  SO_PROTOCOL_INFOW* = 0x2005
  PVD_CONFIG* = 0x3001
  MSG_INTERRUPT* = 0x10

type
  WSAEVENT* = HANDLE
  LPWSAEVENT* = LPHANDLE
  WSAOVERLAPPED* = OVERLAPPED
  LPWSAOVERLAPPED* = ptr OVERLAPPED

const
  WSA_IO_PENDING* = ERROR_IO_PENDING
  WSA_IO_INCOMPLETE* = ERROR_IO_INCOMPLETE
  WSA_INVALID_HANDLE* = ERROR_INVALID_HANDLE
  WSA_INVALID_PARAMETER* = ERROR_INVALID_PARAMETER
  WSA_NOT_ENOUGH_MEMORY* = ERROR_NOT_ENOUGH_MEMORY
  WSA_OPERATION_ABORTED* = ERROR_OPERATION_ABORTED
  WSA_INVALID_EVENT* = 0.WSAEVENT
  WSA_MAXIMUM_WAIT_EVENTS* = MAXIMUM_WAIT_OBJECTS
  WSA_WAIT_FAILED* = 0xFFFFFFFF'u32
  WSA_WAIT_EVENT_0* = WAIT_OBJECT_0
  WSA_WAIT_IO_COMPLETION* = WAIT_IO_COMPLETION
  WSA_WAIT_TIMEOUT* = WAIT_TIMEOUT
  WSA_INFINITE* = INFINITE

type
  WSABUF* {.final, pure.} = object
    len*: uint32
    buf*: cstring
  LPWSABUF* = ptr WSABUF
  GUARANTEE* = int32
  SERVICETYPE* = uint32
  FLOWSPEC* {.final, pure.} = object
    TokenRate*: uint32
    TokenBucketSize*: uint32
    PeakBandwidth*: uint32
    Latency*: uint32
    DelayVariation*: uint32
    ServiceType*: SERVICETYPE
    MaxSduSize*: uint32
    MinimumPolicedSize*: uint32
  PFLOWSPEC* = ptr FLOWSPEC
  LPFLOWSPEC* = ptr FLOWSPEC
  QOS* {.final, pure.} = object
    SendingFlowspec*: FLOWSPEC
    ReceivingFlowspec*: FLOWSPEC
    ProviderSpecific*: WSABUF
  LPQOS* = ptr QOS

const
  CF_ACCEPT* = 0
  CF_REJECT* = 1
  CF_DEFER* = 2

type
  GROUP* = uint32

const
  SG_UNCONSTRAINED_GROUP* = 0x01
  SG_CONSTRAINED_GROUP* = 0x2

type
  WSANETWORKEVENTS* {.final, pure.} = object
    lNetworkEvents*: int32
    iErrorCode*: array[FD_MAX_EVENTS, int32]
  LPWSANETWORKEVENTS* = ptr WSANETWORKEVENTS

const
  MAX_PROTOCOL_CHAIN* = 7
  BASE_PROTOCOL* = 1
  LAYERED_PROTOCOL* = 0

type
  WSAESETSERVICEOP* = int32
  PWSAESETSERVICEOP* = ptr WSAESETSERVICEOP
  LPWSAESETSERVICEOP* = ptr WSAESETSERVICEOP
  AFPROTOCOLS* {.final, pure.} = object
    iAddressFamily*: INT
    iProtocol*: INT
  PAFPROTOCOLS* = ptr AFPROTOCOLS
  LPAFPROTOCOLS* = ptr AFPROTOCOLS
  WSAECOMPARATOR* = int32
  PWSAECOMPARATOR* = ptr WSAECOMPARATOR
  LPWSAECOMPARATOR* = ptr WSAECOMPARATOR
  WSAVERSION* {.final, pure.} = object
    dwVersion*: DWORD
    ecHow*: WSAECOMPARATOR
  PWSAVERSION* = ptr WSAVERSION
  LPWSAVERSION* = ptr WSAVERSION
  SOCKET_ADDRESS* {.final, pure.} = object
    lpSockaddr*: LPSOCKADDR
    iSockaddrLength*: INT
  PSOCKET_ADDRESS* = ptr SOCKET_ADDRESS
  LPSOCKET_ADDRESS* = ptr SOCKET_ADDRESS
  CSADDR_INFO* {.final, pure.} = object
    LocalAddr*: SOCKET_ADDRESS
    RemoteAddr*: SOCKET_ADDRESS
    iSocketType*: INT
    iProtocol*: INT
  PCSADDR_INFO* = ptr CSADDR_INFO
  LPCSADDR_INFO* = ptr CSADDR_INFO
  SOCKET_ADDRESS_LIST* {.final, pure.} = object
    iAddressCount*: INT
    Address*: array[1, SOCKET_ADDRESS]
  LPSOCKET_ADDRESS_LIST* = ptr SOCKET_ADDRESS_LIST
  # BLOB* {.final, pure.} = object
  #   cbSize*: ULONG
  #   pBlobData*: ptr BYTE
  # PBLOB* = ptr BLOB
  # LPBLOB* = ptr BLOB
  WSAQUERYSETA* {.final, pure.} = object
    dwSize*: DWORD
    lpszServiceInstanceName*: LPSTR
    lpServiceClassId*: LPGUID
    lpVersion*: LPWSAVERSION
    lpszComment*: LPSTR
    dwNameSpace*: DWORD
    lpNSProviderId*: LPGUID
    lpszContext*: LPSTR
    dwNumberOfProtocols*: DWORD
    lpafpProtocols*: LPAFPROTOCOLS
    lpszQueryString*: LPSTR
    dwNumberOfCsAddrs*: DWORD
    lpcsaBuffer*: LPCSADDR_INFO
    dwOutputFlags*: DWORD
    lpBlob*: LPBLOB
  PWSAQUERYSETA* = ptr WSAQUERYSETA
  LPWSAQUERYSETA* = ptr WSAQUERYSETA
  WSAQUERYSETW* {.final, pure.} = object
    dwSize*: DWORD
    lpszServiceInstanceName*: LPWSTR
    lpServiceClassId*: LPGUID
    lpVersion*: LPWSAVERSION
    lpszComment*: LPWSTR
    dwNameSpace*: DWORD
    lpNSProviderId*: LPGUID
    lpszContext*: LPWSTR
    dwNumberOfProtocols*: DWORD
    lpafpProtocols*: LPAFPROTOCOLS
    lpszQueryString*: LPWSTR
    dwNumberOfCsAddrs*: DWORD
    lpcsaBuffer*: LPCSADDR_INFO
    dwOutputFlags*: DWORD
    lpBlob*: LPBLOB
  PWSAQUERYSETW* = ptr WSAQUERYSETW
  LPWSAQUERYSETW* = ptr WSAQUERYSETW

when not defined(winansi):
  type
    WSAQUERYSET* = WSAQUERYSETW
    PWSAQUERYSET* = PWSAQUERYSETW
    LPWSAQUERYSET* = LPWSAQUERYSETW

else:
  type
    WSAQUERYSET* = WSAQUERYSETA
    PWSAQUERYSET* = PWSAQUERYSETA
    LPWSAQUERYSET* = LPWSAQUERYSETA

const
  LUP_DEEP* = 0x0001
  LUP_CONTAINERS* = 0x0002
  LUP_NOCONTAINERS* = 0x0004
  LUP_NEAREST* = 0x0008
  LUP_RETURN_NAME* = 0x0010
  LUP_RETURN_TYPE* = 0x0020
  LUP_RETURN_VERSION* = 0x0040
  LUP_RETURN_COMMENT* = 0x0080
  LUP_RETURN_ADDR* = 0x0100
  LUP_RETURN_BLOB* = 0x0200
  LUP_RETURN_ALIASES* = 0x0400
  LUP_RETURN_QUERY_STRING* = 0x0800
  LUP_RETURN_ALL* = 0x0FF0
  LUP_RES_SERVICE* = 0x8000
  LUP_FLUSHCACHE* = 0x1000
  LUP_FLUSHPREVIOUS* = 0x2000

type
  WSANSCLASSINFOA* {.final, pure.} = object
    lpszName*: LPSTR
    dwNameSpace*: DWORD
    dwValueType*: DWORD
    dwValueSize*: DWORD
    lpValue*: LPVOID
  PWSANSCLASSINFOA* = ptr WSANSCLASSINFOA
  LPWSANSCLASSINFOA* = ptr WSANSCLASSINFOA
  WSANSCLASSINFOW* {.final, pure.} = object
    lpszName*: LPWSTR
    dwNameSpace*: DWORD
    dwValueType*: DWORD
    dwValueSize*: DWORD
    lpValue*: LPVOID
  PWSANSCLASSINFOW* = ptr WSANSCLASSINFOW
  LPWSANSCLASSINFOW* = ptr WSANSCLASSINFOW

when not defined(winansi):
  type
    WSANSCLASSINFO* = WSANSCLASSINFOW
    PWSANSCLASSINFO* = PWSANSCLASSINFOW
    LPWSANSCLASSINFO* = LPWSANSCLASSINFOW

else:
  type
    WSANSCLASSINFO* = WSANSCLASSINFOA
    PWSANSCLASSINFO* = PWSANSCLASSINFOA
    LPWSANSCLASSINFO* = LPWSANSCLASSINFOA

type
  WSASERVICECLASSINFOA* {.final, pure.} = object
    lpServiceClassId*: LPGUID
    lpszServiceClassName*: LPSTR
    dwCount*: DWORD
    lpClassInfos*: LPWSANSCLASSINFOA
  PWSASERVICECLASSINFOA* = ptr WSASERVICECLASSINFOA
  LPWSASERVICECLASSINFOA* = ptr WSASERVICECLASSINFOA
  WSASERVICECLASSINFOW* {.final, pure.} = object
    lpServiceClassId*: LPGUID
    lpszServiceClassName*: LPWSTR
    dwCount*: DWORD
    lpClassInfos*: LPWSANSCLASSINFOW
  PWSASERVICECLASSINFOW* = ptr WSASERVICECLASSINFOW
  LPWSASERVICECLASSINFOW* = ptr WSASERVICECLASSINFOW

when not defined(winansi):
  type
    WSASERVICECLASSINFO* = WSASERVICECLASSINFOW
    PWSASERVICECLASSINFO* = PWSASERVICECLASSINFOW
    LPWSASERVICECLASSINFO* = LPWSASERVICECLASSINFOW

else:
  type
    WSASERVICECLASSINFO* = WSASERVICECLASSINFOA
    PWSASERVICECLASSINFO* = PWSASERVICECLASSINFOA
    LPWSASERVICECLASSINFO* = LPWSASERVICECLASSINFOA

type
  WSANAMESPACE_INFOA* {.final, pure.} = object
    NSProviderId*: GUID
    dwNameSpace*: DWORD
    fActive*: BOOL
    dwVersion*: DWORD
    lpszIdentifier*: LPSTR
  PWSANAMESPACE_INFOA* = ptr WSANAMESPACE_INFOA
  LPWSANAMESPACE_INFOA* = ptr WSANAMESPACE_INFOA
  WSANAMESPACE_INFOW* {.final, pure.} = object
    NSProviderId*: GUID
    dwNameSpace*: DWORD
    fActive*: BOOL
    dwVersion*: DWORD
    lpszIdentifier*: LPWSTR
  PWSANAMESPACE_INFOW* = ptr WSANAMESPACE_INFOW
  LPWSANAMESPACE_INFOW* = ptr WSANAMESPACE_INFOW

when not defined(winansi):
  type
    WSANAMESPACE_INFO* = WSANAMESPACE_INFOW
    PWSANAMESPACE_INFO* = PWSANAMESPACE_INFOW
    LPWSANAMESPACE_INFO* = LPWSANAMESPACE_INFOW

else:
  type
    WSANAMESPACE_INFO* = WSANAMESPACE_INFOA
    PWSANAMESPACE_INFO* = PWSANAMESPACE_INFOA
    LPWSANAMESPACE_INFO* = LPWSANAMESPACE_INFOA

type
  WSAPROTOCOLCHAIN* {.final, pure.} = object
    ChainLen*: int32
    ChainEntries*: array[MAX_PROTOCOL_CHAIN, DWORD]
  LPWSAPROTOCOLCHAIN* = ptr WSAPROTOCOLCHAIN

const
  WSAPROTOCOL_LEN* = 255

type
  WSAPROTOCOL_INFOA* {.final, pure.} = object
    dwServiceFlags1*: DWORD
    dwServiceFlags2*: DWORD
    dwServiceFlags3*: DWORD
    dwServiceFlags4*: DWORD
    dwProviderFlags*: DWORD
    ProviderId*: GUID
    dwCatalogEntryId*: DWORD
    ProtocolChain*: WSAPROTOCOLCHAIN
    iVersion*: int32
    iAddressFamily*: int32
    iMaxSockAddr*: int32
    iMinSockAddr*: int32
    iSocketType*: int32
    iProtocol*: int32
    iProtocolMaxOffset*: int32
    iNetworkByteOrder*: int32
    iSecurityScheme*: int32
    dwMessageSize*: DWORD
    dwProviderReserved*: DWORD
    szProtocol*: array[WSAPROTOCOL_LEN+1, CHAR]
  LPWSAPROTOCOL_INFOA* = ptr WSAPROTOCOL_INFOA
  WSAPROTOCOL_INFOW* {.final, pure.} = object
    dwServiceFlags1*: DWORD
    dwServiceFlags2*: DWORD
    dwServiceFlags3*: DWORD
    dwServiceFlags4*: DWORD
    dwProviderFlags*: DWORD
    ProviderId*: GUID
    dwCatalogEntryId*: DWORD
    ProtocolChain*: WSAPROTOCOLCHAIN
    iVersion*: int32
    iAddressFamily*: int32
    iMaxSockAddr*: int32
    iMinSockAddr*: int32
    iSocketType*: int32
    iProtocol*: int32
    iProtocolMaxOffset*: int32
    iNetworkByteOrder*: int32
    iSecurityScheme*: int32
    dwMessageSize*: DWORD
    dwProviderReserved*: DWORD
    szProtocol*: array[WSAPROTOCOL_LEN+1, WCHAR]
  LPWSAPROTOCOL_INFOW* = ptr WSAPROTOCOL_INFOW
  LPCONDITIONPROC* = proc (P1: LPWSABUF, P2: LPWSABUF, P3: LPQOS, P4: LPQOS, P5: LPWSABUF, P6: LPWSABUF, P7: ptr GROUP, P8: DWORD): int32 {.cdecl.}
  LPWSAOVERLAPPED_COMPLETION_ROUTINE* = proc (P1: DWORD, P2: DWORD, P3: LPWSAOVERLAPPED, P4: DWORD): void {.stdcall.}

when not defined(winansi):
  type
    WSAPROTOCOL_INFO* = WSAPROTOCOL_INFOW
    LPWSAPROTOCOL_INFO* = LPWSAPROTOCOL_INFOW

else:
  type
    WSAPROTOCOL_INFO* = WSAPROTOCOL_INFOA
    LPWSAPROTOCOL_INFO* = LPWSAPROTOCOL_INFOA

type
  WSACOMPLETIONTYPE* = int32
  PWSACOMPLETIONTYPE* = ptr WSACOMPLETIONTYPE
  LPWSACOMPLETIONTYPE* = ptr WSACOMPLETIONTYPE
  WSACOMPLETION_WSACOMPLETION_PARAMETERS_WSACOMPLETION_PORT* {.final, pure.} = object
    lpOverlapped*: LPWSAOVERLAPPED
    hPort*: HANDLE
    Key*: ULONG_PTR
  WSACOMPLETION_WSACOMPLETION_PARAMETERS_WSACOMPLETION_APC* {.final, pure.} = object
    lpOverlapped*: LPWSAOVERLAPPED
    lpfnCompletionProc*: LPWSAOVERLAPPED_COMPLETION_ROUTINE
  WSACOMPLETION_WSACOMPLETION_PARAMETERS_WSACOMPLETION_EVENT* {.final, pure.} = object
    lpOverlapped*: LPWSAOVERLAPPED
  WSACOMPLETION_WSACOMPLETION_PARAMETERS_WSACOMPLETION_WINDOWMESSAGE* {.final, pure.} = object
    hWnd*: HWND
    uMsg*: UINT
    context*: WPARAM
  WSACOMPLETION_WSACOMPLETION_PARAMETERS* {.final, union, pure.} = object
    WindowMessage*: WSACOMPLETION_WSACOMPLETION_PARAMETERS_WSACOMPLETION_WINDOWMESSAGE
    Event*: WSACOMPLETION_WSACOMPLETION_PARAMETERS_WSACOMPLETION_EVENT
    Apc*: WSACOMPLETION_WSACOMPLETION_PARAMETERS_WSACOMPLETION_APC
    Port*: WSACOMPLETION_WSACOMPLETION_PARAMETERS_WSACOMPLETION_PORT
  WSACOMPLETION* {.final, pure.} = object
    Type*: WSACOMPLETIONTYPE
    Parameters*: WSACOMPLETION_WSACOMPLETION_PARAMETERS
  PWSACOMPLETION* = ptr WSACOMPLETION
  LPWSACOMPLETION* = ptr WSACOMPLETION

const
  PFL_MULTIPLE_PROTO_ENTRIES* = 0x00000001
  PFL_RECOMMENDED_PROTO_ENTRY* = 0x00000002
  PFL_HIDDEN* = 0x00000004
  PFL_MATCHES_PROTOCOL_ZERO* = 0x00000008
  XP1_CONNECTIONLESS* = 0x00000001
  XP1_GUARANTEED_DELIVERY* = 0x00000002
  XP1_GUARANTEED_ORDER* = 0x00000004
  XP1_MESSAGE_ORIENTED* = 0x00000008
  XP1_PSEUDO_STREAM* = 0x00000010
  XP1_GRACEFUL_CLOSE* = 0x00000020
  XP1_EXPEDITED_DATA* = 0x00000040
  XP1_CONNECT_DATA* = 0x00000080
  XP1_DISCONNECT_DATA* = 0x00000100
  XP1_SUPPORT_BROADCAST* = 0x00000200
  XP1_SUPPORT_MULTIPOINT* = 0x00000400
  XP1_MULTIPOINT_CONTROL_PLANE* = 0x00000800
  XP1_MULTIPOINT_DATA_PLANE* = 0x00001000
  XP1_QOS_SUPPORTED* = 0x00002000
  XP1_INTERRUPT* = 0x00004000
  XP1_UNI_SEND* = 0x00008000
  XP1_UNI_RECV* = 0x00010000
  XP1_IFS_HANDLES* = 0x00020000
  XP1_PARTIAL_MESSAGE* = 0x00040000
  BIGENDIAN* = 0x0000
  LITTLEENDIAN* = 0x0001
  SECURITY_PROTOCOL_NONE* = 0x0000
  JL_SENDER_ONLY* = 0x01
  JL_RECEIVER_ONLY* = 0x02
  JL_BOTH* = 0x04
  WSA_FLAG_OVERLAPPED* = 0x01
  WSA_FLAG_MULTIPOINT_C_ROOT* = 0x02
  WSA_FLAG_MULTIPOINT_C_LEAF* = 0x04
  WSA_FLAG_MULTIPOINT_D_ROOT* = 0x08
  WSA_FLAG_MULTIPOINT_D_LEAF* = 0x10
  IOC_UNIX* = 0x00000000
  IOC_WS2* = 0x08000000
  IOC_PROTOCOL* = 0x10000000
  IOC_VENDOR* = 0x18000000

template WSAIO(x, y: DWORD): DWORD = IOC_VOID.DWORD or x or y
template WSAIOR(x, y: DWORD): DWORD = IOC_OUT.DWORD or x or y
template WSAIOW(x, y: DWORD): DWORD = IOC_IN.DWORD or x or y
template WSAIORW(x, y: DWORD): DWORD = IOC_INOUT.DWORD or x or y

const
  SIO_ASSOCIATE_HANDLE*               = WSAIOW(IOC_WS2.DWORD, 1.DWORD)
  SIO_ENABLE_CIRCULAR_QUEUEING*       = WSAIO(IOC_WS2.DWORD, 2.DWORD)
  SIO_FIND_ROUTE*                     = WSAIOR(IOC_WS2.DWORD, 3.DWORD)
  SIO_FLUSH*                          = WSAIO(IOC_WS2.DWORD, 4.DWORD)
  SIO_GET_BROADCAST_ADDRESS*          = WSAIOR(IOC_WS2.DWORD, 5.DWORD)
  SIO_GET_EXTENSION_FUNCTION_POINTER* = WSAIORW(IOC_WS2.DWORD, 6.DWORD)
  SIO_GET_QOS*                        = WSAIORW(IOC_WS2.DWORD, 7.DWORD)
  SIO_GET_GROUP_QOS*                  = WSAIORW(IOC_WS2.DWORD, 8.DWORD)
  SIO_MULTIPOINT_LOOPBACK*            = WSAIOW(IOC_WS2.DWORD, 9.DWORD)
  SIO_MULTICAST_SCOPE*                = WSAIOW(IOC_WS2.DWORD, 10.DWORD)
  SIO_SET_QOS*                        = WSAIOW(IOC_WS2.DWORD, 11.DWORD)
  SIO_SET_GROUP_QOS*                  = WSAIOW(IOC_WS2.DWORD, 12.DWORD)
  SIO_TRANSLATE_HANDLE*               = WSAIORW(IOC_WS2.DWORD, 13.DWORD)
  SIO_ROUTING_INTERFACE_QUERY*        = WSAIORW(IOC_WS2.DWORD, 20.DWORD)
  SIO_ROUTING_INTERFACE_CHANGE*       = WSAIOW(IOC_WS2.DWORD, 21.DWORD)
  SIO_ADDRESS_LIST_QUERY*             = WSAIOR(IOC_WS2.DWORD, 22.DWORD)
  SIO_ADDRESS_LIST_CHANGE*            = WSAIO(IOC_WS2.DWORD, 23.DWORD)
  SIO_QUERY_TARGET_PNP_HANDLE*        = WSAIOR(IOC_WS2.DWORD, 24.DWORD)
  SIO_NSP_NOTIFY_CHANGE*              = WSAIOW(IOC_WS2.DWORD, 25.DWORD)
  TH_NETDEV* = 1
  TH_TAPI* = 2

proc WSAAccept*(P1: SOCKET, P2: ptr SOCKADDR, P3: LPINT, P4: LPCONDITIONPROC, P5: DWORD): SOCKET {.winapi, dynlib: "ws2_32", importc.}
proc WSAAddressToStringA*(P1: LPSOCKADDR, P2: DWORD, P3: LPWSAPROTOCOL_INFOA, P4: LPSTR, P5: LPDWORD): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAAddressToStringW*(P1: LPSOCKADDR, P2: DWORD, P3: LPWSAPROTOCOL_INFOW, P4: LPWSTR, P5: LPDWORD): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSACloseEvent*(P1: WSAEVENT): BOOL {.winapi, dynlib: "ws2_32", importc.}
proc WSAConnect*(P1: SOCKET, P2: ptr SOCKADDR, P3: int32, P4: LPWSABUF, P5: LPWSABUF, P6: LPQOS, P7: LPQOS): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSACreateEvent*(): WSAEVENT {.winapi, dynlib: "ws2_32", importc.}
proc WSADuplicateSocketA*(P1: SOCKET, P2: DWORD, P3: LPWSAPROTOCOL_INFOA): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSADuplicateSocketW*(P1: SOCKET, P2: DWORD, P3: LPWSAPROTOCOL_INFOW): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSAEnumNameSpaceProvidersA*(P1: LPDWORD, P2: LPWSANAMESPACE_INFOA): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAEnumNameSpaceProvidersW*(P1: LPDWORD, P2: LPWSANAMESPACE_INFOW): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAEnumNetworkEvents*(P1: SOCKET, P2: WSAEVENT, P3: LPWSANETWORKEVENTS): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSAEnumProtocolsA*(P1: LPINT, P2: LPWSAPROTOCOL_INFOA, P3: LPDWORD): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSAEnumProtocolsW*(P1: LPINT, P2: LPWSAPROTOCOL_INFOW, P3: LPDWORD): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSAEventSelect*(P1: SOCKET, P2: WSAEVENT, P3: int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSAGetOverlappedResult*(P1: SOCKET, P2: LPWSAOVERLAPPED, P3: LPDWORD, P4: BOOL, P5: LPDWORD): BOOL {.winapi, dynlib: "ws2_32", importc.}
proc WSAGetQOSByName*(P1: SOCKET, P2: LPWSABUF, P3: LPQOS): BOOL {.winapi, dynlib: "ws2_32", importc.}
proc WSAGetServiceClassInfoA*(P1: LPGUID, P2: LPGUID, P3: LPDWORD, P4: LPWSASERVICECLASSINFOA): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAGetServiceClassInfoW*(P1: LPGUID, P2: LPGUID, P3: LPDWORD, P4: LPWSASERVICECLASSINFOW): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAGetServiceClassNameByClassIdA*(P1: LPGUID, P2: LPSTR, P3: LPDWORD): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAGetServiceClassNameByClassIdW*(P1: LPGUID, P2: LPWSTR, P3: LPDWORD): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAHtonl*(P1: SOCKET, P2: uint32, P3: ptr uint32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSAHtons*(P1: SOCKET, P2: uint16, P3: ptr uint16): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSAInstallServiceClassA*(P1: LPWSASERVICECLASSINFOA): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAInstallServiceClassW*(P1: LPWSASERVICECLASSINFOW): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAIoctl*(P1: SOCKET, P2: DWORD, P3: LPVOID, P4: DWORD, P5: LPVOID, P6: DWORD, P7: LPDWORD, P8: LPWSAOVERLAPPED, P9: LPWSAOVERLAPPED_COMPLETION_ROUTINE): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSAJoinLeaf*(P1: SOCKET, P2: ptr SOCKADDR, P3: int32, P4: LPWSABUF, P5: LPWSABUF, P6: LPQOS, P7: LPQOS, P8: DWORD): SOCKET {.winapi, dynlib: "ws2_32", importc.}
proc WSALookupServiceBeginA*(P1: LPWSAQUERYSETA, P2: DWORD, P3: LPHANDLE): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSALookupServiceBeginW*(lpqsRestrictions: LPWSAQUERYSETW, P2: DWORD, P3: LPHANDLE): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSALookupServiceNextA*(P1: HANDLE, P2: DWORD, P3: LPDWORD, P4: LPWSAQUERYSETA): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSALookupServiceNextW*(P1: HANDLE, P2: DWORD, P3: LPDWORD, P4: LPWSAQUERYSETW): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSALookupServiceEnd*(P1: HANDLE): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSANSPIoctl*(P1: HANDLE, P2: DWORD, P3: LPVOID, P4: DWORD, P5: LPVOID, P6: DWORD, P7: LPDWORD, P8: LPWSACOMPLETION): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSANtohl*(P1: SOCKET, P2: uint32, P3: ptr uint32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSANtohs*(P1: SOCKET, P2: uint16, P3: ptr uint16): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSARecv*(P1: SOCKET, P2: LPWSABUF, P3: DWORD, P4: LPDWORD, P5: LPDWORD, P6: LPWSAOVERLAPPED, P7: LPWSAOVERLAPPED_COMPLETION_ROUTINE): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSARecvDisconnect*(P1: SOCKET, P2: LPWSABUF): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSARecvFrom*(P1: SOCKET, P2: LPWSABUF, P3: DWORD, P4: LPDWORD, P5: LPDWORD, P6: ptr SOCKADDR, P7: LPINT, P8: LPWSAOVERLAPPED, P9: LPWSAOVERLAPPED_COMPLETION_ROUTINE): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSARemoveServiceClass*(P1: LPGUID): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAResetEvent*(P1: WSAEVENT): BOOL {.winapi, dynlib: "ws2_32", importc.}
proc WSASend*(P1: SOCKET, P2: LPWSABUF, P3: DWORD, P4: LPDWORD, P5: DWORD, P6: LPWSAOVERLAPPED, P7: LPWSAOVERLAPPED_COMPLETION_ROUTINE): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSASendDisconnect*(P1: SOCKET, P2: LPWSABUF): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSASendTo*(P1: SOCKET, P2: LPWSABUF, P3: DWORD, P4: LPDWORD, P5: DWORD, P6: ptr SOCKADDR, P7: int32, P8: LPWSAOVERLAPPED, P9: LPWSAOVERLAPPED_COMPLETION_ROUTINE): int32 {.winapi, dynlib: "ws2_32", importc.}
proc WSASetEvent*(P1: WSAEVENT): BOOL {.winapi, dynlib: "ws2_32", importc.}
proc WSASetServiceA*(P1: LPWSAQUERYSETA, P2: WSAESETSERVICEOP, P3: DWORD): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSASetServiceW*(P1: LPWSAQUERYSETW, P2: WSAESETSERVICEOP, P3: DWORD): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSASocketA*(P1: int32, P2: int32, P3: int32, P4: LPWSAPROTOCOL_INFOA, P5: GROUP, P6: DWORD): SOCKET {.winapi, dynlib: "ws2_32", importc.}
proc WSASocketW*(P1: int32, P2: int32, P3: int32, P4: LPWSAPROTOCOL_INFOW, P5: GROUP, P6: DWORD): SOCKET {.winapi, dynlib: "ws2_32", importc.}
proc WSAStringToAddressA*(P1: LPSTR, P2: INT, P3: LPWSAPROTOCOL_INFOA, P4: LPSOCKADDR, P5: LPINT): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAStringToAddressW*(P1: LPWSTR, P2: INT, P3: LPWSAPROTOCOL_INFOW, P4: LPSOCKADDR, P5: LPINT): INT {.winapi, dynlib: "ws2_32", importc.}
proc WSAWaitForMultipleEvents*(P1: DWORD, P2: ptr WSAEVENT, P3: BOOL, P4: DWORD, P5: BOOL): DWORD {.winapi, dynlib: "ws2_32", importc.}

type
  LPFN_WSAACCEPT* = WSAAccept.type
  LPFN_WSAADDRESSTOSTRINGA* = WSAAddressToStringA.type
  LPFN_WSAADDRESSTOSTRINGW* = WSAAddressToStringW.type
  LPFN_WSACLOSEEVENT* = WSACloseEvent.type
  LPFN_WSACONNECT* = WSAConnect.type
  LPFN_WSACREATEEVENT* = WSACreateEvent.type
  LPFN_WSADUPLICATESOCKETA* = WSADuplicateSocketA.type
  LPFN_WSADUPLICATESOCKETW* = WSADuplicateSocketW.type
  LPFN_WSAENUMNAMESPACEPROVIDERSA* = WSAEnumNameSpaceProvidersA.type
  LPFN_WSAENUMNAMESPACEPROVIDERSW* = WSAEnumNameSpaceProvidersW.type
  LPFN_WSAENUMNETWORKEVENTS* = WSAEnumNetworkEvents.type
  LPFN_WSAENUMPROTOCOLSA* = WSAEnumProtocolsA.type
  LPFN_WSAENUMPROTOCOLSW* = WSAEnumProtocolsW.type
  LPFN_WSAEVENTSELECT* = WSAEventSelect.type
  LPFN_WSAGETOVERLAPPEDRESULT* = WSAGetOverlappedResult.type
  LPFN_WSAGETQOSBYNAME* = WSAGetQOSByName.type
  LPFN_WSAGETSERVICECLASSINFOA* = WSAGetServiceClassInfoA.type
  LPFN_WSAGETSERVICECLASSINFOW* = WSAGetServiceClassInfoW.type
  LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDA* = WSAGetServiceClassNameByClassIdA.type
  LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDW* = WSAGetServiceClassNameByClassIdW.type
  LPFN_WSAHTONL* = WSAHtonl.type
  LPFN_WSAHTONS* = WSAHtons.type
  LPFN_WSAINSTALLSERVICECLASSA* = WSAInstallServiceClassA.type
  LPFN_WSAINSTALLSERVICECLASSW* = WSAInstallServiceClassW.type
  LPFN_WSAIOCTL* = WSAIoctl.type
  LPFN_WSAJOINLEAF* = WSAJoinLeaf.type
  LPFN_WSALOOKUPSERVICEBEGINA* = WSALookupServiceBeginA.type
  LPFN_WSALOOKUPSERVICEBEGINW* = WSALookupServiceBeginW.type
  LPFN_WSALOOKUPSERVICENEXTA* = WSALookupServiceNextA.type
  LPFN_WSALOOKUPSERVICENEXTW* = WSALookupServiceNextW.type
  LPFN_WSALOOKUPSERVICEEND* = WSALookupServiceEnd.type
  LPFN_WSANSPIoctl* = WSANSPIoctl.type
  LPFN_WSANTOHL* = WSANtohl.type
  LPFN_WSANTOHS* = WSANtohs.type
  LPFN_WSARECV* = WSARecv.type
  LPFN_WSARECVDISCONNECT* = WSARecvDisconnect.type
  LPFN_WSARECVFROM* = WSARecvFrom.type
  LPFN_WSAREMOVESERVICECLASS* = WSARemoveServiceClass.type
  LPFN_WSARESETEVENT* = WSAResetEvent.type
  LPFN_WSASEND* = WSASend.type
  LPFN_WSASENDDISCONNECT* = WSASendDisconnect.type
  LPFN_WSASENDTO* = WSASendTo.type
  LPFN_WSASETEVENT* = WSASetEvent.type
  LPFN_WSASETSERVICEA* = WSASetServiceA.type
  LPFN_WSASETSERVICEW* = WSASetServiceW.type
  LPFN_WSASOCKETA* = WSASocketA.type
  LPFN_WSASOCKETW* = WSASocketW.type
  LPFN_WSASTRINGTOADDRESSA* = WSAStringToAddressA.type
  LPFN_WSASTRINGTOADDRESSW* = WSAStringToAddressW.type
  LPFN_WSAWAITFORMULTIPLEEVENTS* = WSAWaitForMultipleEvents.type

when not defined(winansi):
  type
    LPFN_WSAADDRESSTOSTRING* = LPFN_WSAADDRESSTOSTRINGW
    LPFN_WSADUPLICATESOCKET* = LPFN_WSADUPLICATESOCKETW
    LPFN_WSAENUMNAMESPACEPROVIDERS* = LPFN_WSAENUMNAMESPACEPROVIDERSW
    LPFN_WSAENUMPROTOCOLS* = LPFN_WSAENUMPROTOCOLSW
    LPFN_WSAGETSERVICECLASSINFO* = LPFN_WSAGETSERVICECLASSINFOW
    LPFN_WSAGETSERVICECLASSNAMEBYCLASSID* = LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDW
    LPFN_WSAINSTALLSERVICECLASS* = LPFN_WSAINSTALLSERVICECLASSW
    LPFN_WSALOOKUPSERVICEBEGIN* = LPFN_WSALOOKUPSERVICEBEGINW
    LPFN_WSALOOKUPSERVICENEXT* = LPFN_WSALOOKUPSERVICENEXTW
    LPFN_WSASETSERVICE* = LPFN_WSASETSERVICEW
    LPFN_WSASOCKET* = LPFN_WSASOCKETW
    LPFN_WSASTRINGTOADDRESS* = LPFN_WSASTRINGTOADDRESSW

  proc WSAAddressToString*(P1: LPSOCKADDR, P2: DWORD, P3: LPWSAPROTOCOL_INFOW, P4: LPWSTR, P5: LPDWORD): INT {.winapi, dynlib: "ws2_32", importc: "WSAAddressToStringW".}
  proc WSADuplicateSocket*(P1: SOCKET, P2: DWORD, P3: LPWSAPROTOCOL_INFOW): int32 {.winapi, dynlib: "ws2_32", importc: "WSADuplicateSocketW".}
  proc WSAEnumNameSpaceProviders*(P1: LPDWORD, P2: LPWSANAMESPACE_INFOW): INT {.winapi, dynlib: "ws2_32", importc: "WSAEnumNameSpaceProvidersW".}
  proc WSAEnumProtocols*(P1: LPINT, P2: LPWSAPROTOCOL_INFOW, P3: LPDWORD): int32 {.winapi, dynlib: "ws2_32", importc: "WSAEnumProtocolsW".}
  proc WSAGetServiceClassInfo*(P1: LPGUID, P2: LPGUID, P3: LPDWORD, P4: LPWSASERVICECLASSINFOW): INT {.winapi, dynlib: "ws2_32", importc: "WSAGetServiceClassInfoW".}
  proc WSAGetServiceClassNameByClassId*(P1: LPGUID, P2: LPWSTR, P3: LPDWORD): INT {.winapi, dynlib: "ws2_32", importc: "WSAGetServiceClassNameByClassIdW".}
  proc WSASetService*(P1: LPWSAQUERYSETW, P2: WSAESETSERVICEOP, P3: DWORD): INT {.winapi, dynlib: "ws2_32", importc: "WSASetServiceW".}
  proc WSASocket*(P1: int32, P2: int32, P3: int32, P4: LPWSAPROTOCOL_INFOW, P5: GROUP, P6: DWORD): SOCKET {.winapi, dynlib: "ws2_32", importc: "WSASocketW".}
  proc WSAStringToAddress*(P1: LPWSTR, P2: INT, P3: LPWSAPROTOCOL_INFOW, P4: LPSOCKADDR, P5: LPINT): INT {.winapi, dynlib: "ws2_32", importc: "WSAStringToAddressW".}
  proc WSALookupServiceBegin*(lpqsRestrictions: LPWSAQUERYSETW, P2: DWORD, P3: LPHANDLE): INT {.winapi, dynlib: "ws2_32", importc: "WSALookupServiceBeginW".}
  proc WSALookupServiceNext*(P1: HANDLE, P2: DWORD, P3: LPDWORD, P4: LPWSAQUERYSETW): INT {.winapi, dynlib: "ws2_32", importc: "WSALookupServiceNextW".}
  proc WSAInstallServiceClass*(P1: LPWSASERVICECLASSINFOW): INT {.winapi, dynlib: "ws2_32", importc: "WSAInstallServiceClassW".}

else:
  type
    LPFN_WSAADDRESSTOSTRING* = LPFN_WSAADDRESSTOSTRINGA
    LPFN_WSADUPLICATESOCKET* = LPFN_WSADUPLICATESOCKETW
    LPFN_WSAENUMNAMESPACEPROVIDERS* = LPFN_WSAENUMNAMESPACEPROVIDERSA
    LPFN_WSAENUMPROTOCOLS* = LPFN_WSAENUMPROTOCOLSA
    LPFN_WSAGETSERVICECLASSINFO* = LPFN_WSAGETSERVICECLASSINFOA
    LPFN_WSAGETSERVICECLASSNAMEBYCLASSID* = LPFN_WSAGETSERVICECLASSNAMEBYCLASSIDA
    LPFN_WSAINSTALLSERVICECLASS* = LPFN_WSAINSTALLSERVICECLASSA
    LPFN_WSALOOKUPSERVICEBEGIN* = LPFN_WSALOOKUPSERVICEBEGINA
    LPFN_WSALOOKUPSERVICENEXT* = LPFN_WSALOOKUPSERVICENEXTA
    LPFN_WSASETSERVICE* = LPFN_WSASETSERVICEA
    LPFN_WSASOCKET* = LPFN_WSASOCKETA
    LPFN_WSASTRINGTOADDRESS* = LPFN_WSASTRINGTOADDRESSA

  proc WSAAddressToString*(P1: LPSOCKADDR, P2: DWORD, P3: LPWSAPROTOCOL_INFOA, P4: LPSTR, P5: LPDWORD): INT {.winapi, dynlib: "ws2_32", importc: "WSAAddressToStringA".}
  proc WSADuplicateSocket*(P1: SOCKET, P2: DWORD, P3: LPWSAPROTOCOL_INFOA): int32 {.winapi, dynlib: "ws2_32", importc: "WSADuplicateSocketA".}
  proc WSAEnumNameSpaceProviders*(P1: LPDWORD, P2: LPWSANAMESPACE_INFOA): INT {.winapi, dynlib: "ws2_32", importc: "WSAEnumNameSpaceProvidersA".}
  proc WSAEnumProtocols*(P1: LPINT, P2: LPWSAPROTOCOL_INFOA, P3: LPDWORD): int32 {.winapi, dynlib: "ws2_32", importc: "WSAEnumProtocolsA".}
  proc WSAGetServiceClassInfo*(P1: LPGUID, P2: LPGUID, P3: LPDWORD, P4: LPWSASERVICECLASSINFOA): INT {.winapi, dynlib: "ws2_32", importc: "WSAGetServiceClassInfoA".}
  proc WSAGetServiceClassNameByClassId*(P1: LPGUID, P2: LPSTR, P3: LPDWORD): INT {.winapi, dynlib: "ws2_32", importc: "WSAGetServiceClassNameByClassIdA".}
  proc WSAInstallServiceClass*(P1: LPWSASERVICECLASSINFOA): INT {.winapi, dynlib: "ws2_32", importc: "WSAInstallServiceClassA".}
  proc WSALookupServiceBegin*(P1: LPWSAQUERYSETA, P2: DWORD, P3: LPHANDLE): INT {.winapi, dynlib: "ws2_32", importc: "WSALookupServiceBeginA".}
  proc WSALookupServiceNext*(P1: HANDLE, P2: DWORD, P3: LPDWORD, P4: LPWSAQUERYSETA): INT {.winapi, dynlib: "ws2_32", importc: "WSALookupServiceNextA".}
  proc WSASocket*(P1: int32, P2: int32, P3: int32, P4: LPWSAPROTOCOL_INFOA, P5: GROUP, P6: DWORD): SOCKET {.winapi, dynlib: "ws2_32", importc: "WSASocketA".}
  proc WSAStringToAddress*(P1: LPSTR, P2: INT, P3: LPWSAPROTOCOL_INFOA, P4: LPSOCKADDR, P5: LPINT): INT {.winapi, dynlib: "ws2_32", importc: "WSAStringToAddressA".}
  proc WSASetService*(P1: LPWSAQUERYSETA, P2: WSAESETSERVICEOP, P3: DWORD): INT {.winapi, dynlib: "ws2_32", importc: "WSASetServiceA".}

proc `s_b1=`*(self: var IN_ADDR, x: u_char) = self.u1.s1.s_b1 = x
proc s_b1*(self: IN_ADDR): u_char = self.u1.s1.s_b1
proc `s_b2=`*(self: var IN_ADDR, x: u_char) = self.u1.s1.s_b2 = x
proc s_b2*(self: IN_ADDR): u_char = self.u1.s1.s_b2
proc `s_b3=`*(self: var IN_ADDR, x: u_char) = self.u1.s1.s_b3 = x
proc s_b3*(self: IN_ADDR): u_char = self.u1.s1.s_b3
proc `s_b4=`*(self: var IN_ADDR, x: u_char) = self.u1.s1.s_b4 = x
proc s_b4*(self: IN_ADDR): u_char = self.u1.s1.s_b4
proc `s_net=`*(self: var IN_ADDR, x: u_char) = self.u1.s2.s_net = x
proc s_net*(self: IN_ADDR): u_char = self.u1.s2.s_net
proc `s_host=`*(self: var IN_ADDR, x: u_char) = self.u1.s2.s_host = x
proc s_host*(self: IN_ADDR): u_char = self.u1.s2.s_host
proc `s_lh=`*(self: var IN_ADDR, x: u_char) = self.u1.s2.s_lh = x
proc s_lh*(self: IN_ADDR): u_char = self.u1.s2.s_lh
proc `s_impno=`*(self: var IN_ADDR, x: u_char) = self.u1.s2.s_impno = x
proc s_impno*(self: IN_ADDR): u_char = self.u1.s2.s_impno
proc `s_w1=`*(self: var IN_ADDR, x: u_short) = self.u1.s3.s_w1 = x
proc s_w1*(self: IN_ADDR): u_short = self.u1.s3.s_w1
proc `s_w2=`*(self: var IN_ADDR, x: u_short) = self.u1.s3.s_w2 = x
proc s_w2*(self: IN_ADDR): u_short = self.u1.s3.s_w2
proc `s_w=`*(self: var IN_ADDR, x: u_short) = self.u1.s4.s_w = x
proc s_w*(self: IN_ADDR): u_short = self.u1.s4.s_w
proc `s_imp=`*(self: var IN_ADDR, x: u_short) = self.u1.s4.s_imp = x
proc s_imp*(self: IN_ADDR): u_short = self.u1.s4.s_imp
proc `S_addr=`*(self: var IN_ADDR, x: u_long) = self.u1.S_addr = x
proc S_addr*(self: IN_ADDR): u_long = self.u1.S_addr
proc `s_addr=`*(self: var IN_ADDR, x: u_long) = self.u1.s_addr = x
proc s_addr*(self: IN_ADDR): u_long = self.u1.s_addr

# net/mswsock.nim

const
  SO_MAXDG* = 0x7009
  SO_MAXPATHDG* = 0x700A
  SO_CONNDATA* = 0x7000
  SO_CONNOPT* = 0x7001
  SO_DISCDATA* = 0x7002
  SO_DISCOPT* = 0x7003
  SO_CONNDATALEN* = 0x7004
  SO_CONNOPTLEN* = 0x7005
  SO_DISCDATALEN* = 0x7006
  SO_DISCOPTLEN* = 0x7007
  SO_UPDATE_ACCEPT_CONTENT* = 0x700B
  SO_OPENTYPE* = 0x7008
  SO_SYNCHRONOUS_ALERT* = 0x0010
  SO_SYNCHRONOUS_NONALERT* = 0x0020
  SO_CONNECT_TIME* = 0x700C
  TCP_BSDURGENT* = 0x7000
  TF_DISCONNECT* = 1
  TF_REUSE_SOCKET* = 2
  TF_WRITE_BEHIND* = 4
  TF_USE_DEFAULT_WORKER* = 0
  TF_USE_SYSTEM_THREAD* = 16
  TF_USE_KERNEL_APC* = 32

type
  TRANSMIT_FILE_BUFFERS* {.final, pure.} = object
    Head*: PVOID
    HeadLength*: DWORD
    Tail*: PVOID
    TailLength*: DWORD
  PTRANSMIT_FILE_BUFFERS* = ptr TRANSMIT_FILE_BUFFERS
  LPTRANSMIT_FILE_BUFFERS* = ptr TRANSMIT_FILE_BUFFERS

proc WSARecvEx*(P1: SOCKET, P2: cstring, P3: int32, P4: ptr int32): int32 {.winapi, dynlib: "mswsock", importc.}
proc GetAcceptExSockaddrs*(P1: PVOID, P2: DWORD, P3: DWORD, P4: DWORD, P5: ptr ptr SOCKADDR, P6: LPINT, P7: ptr ptr SOCKADDR, P8: LPINT): VOID {.winapi, dynlib: "mswsock", importc.}
proc TransmitFile*(P1: SOCKET, P2: HANDLE, P3: DWORD, P4: DWORD, P5: LPOVERLAPPED, P6: LPTRANSMIT_FILE_BUFFERS, P7: DWORD): BOOL {.winapi, dynlib: "mswsock", importc.}

type
  LPFN_ACCEPTEX* = proc (P1: SOCKET, P2: SOCKET, P3: PVOID, P4: DWORD, P5: DWORD, P6: DWORD, P7: LPDWORD, P8: LPOVERLAPPED): BOOL {.cdecl.}

const
  WSAID_ACCEPTEX* = DEFINE_GUID(0xb5367df1'u32, 0xcbac, 0x11cf, [0x95'u8, 0xca, 0x00, 0x80, 0x5f, 0x48, 0xa1, 0x92])

type
  LPFN_CONNECTEX* = proc (P1: SOCKET, P2: ptr SOCKADDR, P3: int32, P4: PVOID, P5: DWORD, P6: LPDWORD, P7: LPOVERLAPPED): BOOL {.cdecl.}

const
  WSAID_CONNECTEX* = DEFINE_GUID(0x25a207b9'u32, 0xddf3, 0x4660, [0x8e'u8, 0xe9, 0x76, 0xe5, 0x8c, 0x74, 0x06, 0x3e])
  TP_ELEMENT_FILE* = 1
  TP_ELEMENT_MEMORY* = 2
  TP_ELEMENT_EOP* = 4

type
  TRANSMIT_PACKETS_ELEMENT_UNION1_STRUCT1* {.final, pure.} = object
    nFileOffset*: LARGE_INTEGER
    hFile*: HANDLE
  TRANSMIT_PACKETS_ELEMENT_UNION1* {.final, union, pure.} = object
    s1*: TRANSMIT_PACKETS_ELEMENT_UNION1_STRUCT1
    pBuffer*: PVOID
  TRANSMIT_PACKETS_ELEMENT* {.final, pure.} = object
    dwElFlags*: ULONG
    cLength*: ULONG
    u1*: TRANSMIT_PACKETS_ELEMENT_UNION1
  WSAMSG* {.final, pure.} = object
    name*: LPSOCKADDR
    namelen*: INT
    lpBuffers*: LPWSABUF
    dwBufferCount*: DWORD
    Control*: WSABUF
    dwFlags*: DWORD
  PWSAMSG* = ptr WSAMSG
  LPWSAMSG* = ptr WSAMSG
  WSACMSGHDR* {.final, pure.} = object
    cmsg_len*: UINT
    cmsg_level*: INT
    cmsg_type*: INT

proc DisconnectEx*(P1: SOCKET, P2: LPOVERLAPPED, P3: DWORD, P4: DWORD): BOOL {.winapi, dynlib: "mswsock", importc.}
proc WSARecvMsg*(P1: SOCKET, P2: LPWSAMSG, P3: LPDWORD, P4: LPWSAOVERLAPPED, P5: LPWSAOVERLAPPED_COMPLETION_ROUTINE): int32 {.winapi, dynlib: "mswsock", importc.}

proc `nFileOffset=`*(self: var TRANSMIT_PACKETS_ELEMENT, x: LARGE_INTEGER) = self.u1.s1.nFileOffset = x
proc nFileOffset*(self: TRANSMIT_PACKETS_ELEMENT): LARGE_INTEGER = self.u1.s1.nFileOffset
proc `hFile=`*(self: var TRANSMIT_PACKETS_ELEMENT, x: HANDLE) = self.u1.s1.hFile = x
proc hFile*(self: TRANSMIT_PACKETS_ELEMENT): HANDLE = self.u1.s1.hFile
proc `pBuffer=`*(self: var TRANSMIT_PACKETS_ELEMENT, x: PVOID) = self.u1.pBuffer = x
proc pBuffer*(self: TRANSMIT_PACKETS_ELEMENT): PVOID = self.u1.pBuffer

# net/lmerr.nim

const
  NERR_Success* = 0
  NERR_BASE* = 2100
  NERR_NetNotStarted* = NERR_BASE + 2
  NERR_UnknownServer* = (NERR_BASE + 2) + 1
  NERR_ShareMem* = (NERR_BASE + 2) + 2
  NERR_NoNetworkResource* = (NERR_BASE + 2) + 3
  NERR_RemoteOnly* = (NERR_BASE + 2) + 4
  NERR_DevNotRedirected* = (NERR_BASE + 2) + 5
  NERR_ServerNotStarted* = NERR_BASE + 14
  NERR_ItemNotFound* = (NERR_BASE + 14) + 1
  NERR_UnknownDevDir* = (NERR_BASE + 14) + 2
  NERR_RedirectedPath* = (NERR_BASE + 14) + 3
  NERR_DuplicateShare* = (NERR_BASE + 14) + 4
  NERR_NoRoom* = (NERR_BASE + 14) + 5
  NERR_TooManyItems* = NERR_BASE + 21
  NERR_InvalidMaxUsers* = (NERR_BASE + 21) + 1
  NERR_BufTooSmall* = (NERR_BASE + 21) + 2
  NERR_RemoteErr* = NERR_BASE + 27
  NERR_LanmanIniError* = NERR_BASE + 31
  NERR_NetworkError* = NERR_BASE + 36
  NERR_WkstaInconsistentState* = (NERR_BASE + 36) + 1
  NERR_WkstaNotStarted* = (NERR_BASE + 36) + 2
  NERR_BrowserNotStarted* = (NERR_BASE + 36) + 3
  NERR_InternalError* = (NERR_BASE + 36) + 4
  NERR_BadTransactConfig* = (NERR_BASE + 36) + 5
  NERR_InvalidAPI* = (NERR_BASE + 36) + 6
  NERR_BadEventName* = (NERR_BASE + 36) + 7
  NERR_DupNameReboot* = (NERR_BASE + 36) + 8
  NERR_CfgCompNotFound* = NERR_BASE + 46
  NERR_CfgParamNotFound* = (NERR_BASE + 46) + 1
  NERR_LineTooLong* = NERR_BASE + 49
  NERR_QNotFound* = (NERR_BASE + 49) + 1
  NERR_JobNotFound* = (NERR_BASE + 49) + 2
  NERR_DestNotFound* = (NERR_BASE + 49) + 3
  NERR_DestExists* = (NERR_BASE + 49) + 4
  NERR_QExists* = (NERR_BASE + 49) + 5
  NERR_QNoRoom* = (NERR_BASE + 49) + 6
  NERR_JobNoRoom* = (NERR_BASE + 49) + 7
  NERR_DestNoRoom* = (NERR_BASE + 49) + 8
  NERR_DestIdle* = (NERR_BASE + 49) + 9
  NERR_DestInvalidOp* = (NERR_BASE + 49) + 10
  NERR_ProcNoRespond* = (NERR_BASE + 49) + 11
  NERR_SpoolerNotLoaded* = (NERR_BASE + 49) + 12
  NERR_DestInvalidState* = (NERR_BASE + 49) + 13
  NERR_QInvalidState* = (NERR_BASE + 49) + 14
  NERR_JobInvalidState* = (NERR_BASE + 49) + 15
  NERR_SpoolNoMemory* = (NERR_BASE + 49) + 16
  NERR_DriverNotFound* = (NERR_BASE + 49) + 17
  NERR_DataTypeInvalid* = (NERR_BASE + 49) + 18
  NERR_ProcNotFound* = (NERR_BASE + 49) + 19
  NERR_ServiceTableLocked* = NERR_BASE + 80
  NERR_ServiceTableFull* = (NERR_BASE + 80) + 1
  NERR_ServiceInstalled* = (NERR_BASE + 80) + 2
  NERR_ServiceEntryLocked* = (NERR_BASE + 80) + 3
  NERR_ServiceNotInstalled* = (NERR_BASE + 80) + 4
  NERR_BadServiceName* = (NERR_BASE + 80) + 5
  NERR_ServiceCtlTimeout* = (NERR_BASE + 80) + 6
  NERR_ServiceCtlBusy* = (NERR_BASE + 80) + 7
  NERR_BadServiceProgName* = (NERR_BASE + 80) + 8
  NERR_ServiceNotCtrl* = (NERR_BASE + 80) + 9
  NERR_ServiceKillProc* = (NERR_BASE + 80) + 10
  NERR_ServiceCtlNotValid* = (NERR_BASE + 80) + 11
  NERR_NotInDispatchTbl* = (NERR_BASE + 80) + 12
  NERR_BadControlRecv* = (NERR_BASE + 80) + 13
  NERR_ServiceNotStarting* = (NERR_BASE + 80) + 14
  NERR_AlreadyLoggedOn* = NERR_BASE + 100
  NERR_NotLoggedOn* = (NERR_BASE + 100) + 1
  NERR_BadUsername* = (NERR_BASE + 100) + 2
  NERR_BadPassword* = (NERR_BASE + 100) + 3
  NERR_UnableToAddName_W* = (NERR_BASE + 100) + 4
  NERR_UnableToAddName_F* = (NERR_BASE + 100) + 5
  NERR_UnableToDelName_W* = (NERR_BASE + 100) + 6
  NERR_UnableToDelName_F* = (NERR_BASE + 100) + 7
  NERR_LogonsPaused* = NERR_BASE + 109
  NERR_LogonServerConflict* = (NERR_BASE + 109) + 1
  NERR_LogonNoUserPath* = (NERR_BASE + 109) + 2
  NERR_LogonScriptError* = (NERR_BASE + 109) + 3
  NERR_StandaloneLogon* = NERR_BASE + 114
  NERR_LogonServerNotFound* = (NERR_BASE + 114) + 1
  NERR_LogonDomainExists* = (NERR_BASE + 114) + 2
  NERR_NonValidatedLogon* = (NERR_BASE + 114) + 3
  NERR_ACFNotFound* = NERR_BASE + 119
  NERR_GroupNotFound* = (NERR_BASE + 119) + 1
  NERR_UserNotFound* = (NERR_BASE + 119) + 2
  NERR_ResourceNotFound* = (NERR_BASE + 119) + 3
  NERR_GroupExists* = (NERR_BASE + 119) + 4
  NERR_UserExists* = (NERR_BASE + 119) + 5
  NERR_ResourceExists* = (NERR_BASE + 119) + 6
  NERR_NotPrimary* = (NERR_BASE + 119) + 7
  NERR_ACFNotLoaded* = (NERR_BASE + 119) + 8
  NERR_ACFNoRoom* = (NERR_BASE + 119) + 9
  NERR_ACFFileIOFail* = (NERR_BASE + 119) + 10
  NERR_ACFTooManyLists* = (NERR_BASE + 119) + 11
  NERR_UserLogon* = (NERR_BASE + 119) + 12
  NERR_ACFNoParent* = (NERR_BASE + 119) + 13
  NERR_CanNotGrowSegment* = (NERR_BASE + 119) + 14
  NERR_SpeGroupOp* = (NERR_BASE + 119) + 15
  NERR_NotInCache* = (NERR_BASE + 119) + 16
  NERR_UserInGroup* = (NERR_BASE + 119) + 17
  NERR_UserNotInGroup* = (NERR_BASE + 119) + 18
  NERR_AccountUndefined* = (NERR_BASE + 119) + 19
  NERR_AccountExpired* = (NERR_BASE + 119) + 20
  NERR_InvalidWorkstation* = (NERR_BASE + 119) + 21
  NERR_InvalidLogonHours* = (NERR_BASE + 119) + 22
  NERR_PasswordExpired* = (NERR_BASE + 119) + 23
  NERR_PasswordCantChange* = (NERR_BASE + 119) + 24
  NERR_PasswordHistConflict* = (NERR_BASE + 119) + 25
  NERR_PasswordTooShort* = (NERR_BASE + 119) + 26
  NERR_PasswordTooRecent* = (NERR_BASE + 119) + 27
  NERR_InvalidDatabase* = (NERR_BASE + 119) + 28
  NERR_DatabaseUpToDate* = (NERR_BASE + 119) + 29
  NERR_SyncRequired* = (NERR_BASE + 119) + 30
  NERR_UseNotFound* = (NERR_BASE + 119) + 31
  NERR_BadAsgType* = (NERR_BASE + 119) + 32
  NERR_DeviceIsShared* = (NERR_BASE + 119) + 33
  NERR_NoComputerName* = NERR_BASE + 170
  NERR_MsgAlreadyStarted* = (NERR_BASE + 170) + 1
  NERR_MsgInitFailed* = (NERR_BASE + 170) + 2
  NERR_NameNotFound* = (NERR_BASE + 170) + 3
  NERR_AlreadyForwarded* = (NERR_BASE + 170) + 4
  NERR_AddForwarded* = (NERR_BASE + 170) + 5
  NERR_AlreadyExists* = (NERR_BASE + 170) + 6
  NERR_TooManyNames* = (NERR_BASE + 170) + 7
  NERR_DelComputerName* = (NERR_BASE + 170) + 8
  NERR_LocalForward* = (NERR_BASE + 170) + 9
  NERR_GrpMsgProcessor* = (NERR_BASE + 170) + 10
  NERR_PausedRemote* = (NERR_BASE + 170) + 11
  NERR_BadReceive* = (NERR_BASE + 170) + 12
  NERR_NameInUse* = (NERR_BASE + 170) + 13
  NERR_MsgNotStarted* = (NERR_BASE + 170) + 14
  NERR_NotLocalName* = (NERR_BASE + 170) + 15
  NERR_NoForwardName* = (NERR_BASE + 170) + 16
  NERR_RemoteFull* = (NERR_BASE + 170) + 17
  NERR_NameNotForwarded* = (NERR_BASE + 170) + 18
  NERR_TruncatedBroadcast* = (NERR_BASE + 170) + 19
  NERR_InvalidDevice* = NERR_BASE + 194
  NERR_WriteFault* = (NERR_BASE + 194) + 1
  NERR_DuplicateName* = NERR_BASE + 197
  NERR_DeleteLater* = (NERR_BASE + 197) + 1
  NERR_IncompleteDel* = (NERR_BASE + 197) + 2
  NERR_MultipleNets* = (NERR_BASE + 197) + 3
  NERR_NetNameNotFound* = NERR_BASE + 210
  NERR_DeviceNotShared* = (NERR_BASE + 210) + 1
  NERR_ClientNameNotFound* = (NERR_BASE + 210) + 2
  NERR_FileIdNotFound* = NERR_BASE + 214
  NERR_ExecFailure* = (NERR_BASE + 214) + 1
  NERR_TmpFile* = (NERR_BASE + 214) + 2
  NERR_TooMuchData* = (NERR_BASE + 214) + 3
  NERR_DeviceShareConflict* = (NERR_BASE + 214) + 4
  NERR_BrowserTableIncomplete* = (NERR_BASE + 214) + 5
  NERR_NotLocalDomain* = (NERR_BASE + 214) + 6
  NERR_DevInvalidOpCode* = NERR_BASE + 231
  NERR_DevNotFound* = (NERR_BASE + 231) + 1
  NERR_DevNotOpen* = (NERR_BASE + 231) + 2
  NERR_BadQueueDevString* = (NERR_BASE + 231) + 3
  NERR_BadQueuePriority* = (NERR_BASE + 231) + 4
  NERR_NoCommDevs* = NERR_BASE + 237
  NERR_QueueNotFound* = (NERR_BASE + 237) + 1
  NERR_BadDevString* = NERR_BASE + 240
  NERR_BadDev* = (NERR_BASE + 240) + 1
  NERR_InUseBySpooler* = (NERR_BASE + 240) + 2
  NERR_CommDevInUse* = (NERR_BASE + 240) + 3
  NERR_InvalidComputer* = NERR_BASE + 251
  NERR_MaxLenExceeded* = NERR_BASE + 254
  NERR_BadComponent* = NERR_BASE + 256
  NERR_CantType* = (NERR_BASE + 256) + 1
  NERR_TooManyEntries* = NERR_BASE + 262
  NERR_ProfileFileTooBig* = NERR_BASE + 270
  NERR_ProfileOffset* = (NERR_BASE + 270) + 1
  NERR_ProfileCleanup* = (NERR_BASE + 270) + 2
  NERR_ProfileUnknownCmd* = (NERR_BASE + 270) + 3
  NERR_ProfileLoadErr* = (NERR_BASE + 270) + 4
  NERR_ProfileSaveErr* = (NERR_BASE + 270) + 5
  NERR_LogOverflow* = NERR_BASE + 277
  NERR_LogFileChanged* = (NERR_BASE + 277) + 1
  NERR_LogFileCorrupt* = (NERR_BASE + 277) + 2
  NERR_SourceIsDir* = (NERR_BASE + 277) + 3
  NERR_BadSource* = (NERR_BASE + 277) + 4
  NERR_BadDest* = (NERR_BASE + 277) + 5
  NERR_DifferentServers* = (NERR_BASE + 277) + 6
  NERR_RunSrvPaused* = NERR_BASE + 285
  NERR_ErrCommRunSrv* = NERR_BASE + 289
  NERR_ErrorExecingGhost* = NERR_BASE + 291
  NERR_ShareNotFound* = (NERR_BASE + 291) + 1
  NERR_InvalidLana* = NERR_BASE + 300
  NERR_OpenFiles* = (NERR_BASE + 300) + 1
  NERR_ActiveConns* = (NERR_BASE + 300) + 2
  NERR_BadPasswordCore* = (NERR_BASE + 300) + 3
  NERR_DevInUse* = (NERR_BASE + 300) + 4
  NERR_LocalDrive* = (NERR_BASE + 300) + 5
  NERR_AlertExists* = NERR_BASE + 330
  NERR_TooManyAlerts* = (NERR_BASE + 330) + 1
  NERR_NoSuchAlert* = (NERR_BASE + 330) + 2
  NERR_BadRecipient* = (NERR_BASE + 330) + 3
  NERR_AcctLimitExceeded* = (NERR_BASE + 330) + 4
  NERR_InvalidLogSeek* = NERR_BASE + 340
  NERR_BadUasConfig* = NERR_BASE + 350
  NERR_InvalidUASOp* = (NERR_BASE + 350) + 1
  NERR_LastAdmin* = (NERR_BASE + 350) + 2
  NERR_DCNotFound* = (NERR_BASE + 350) + 3
  NERR_LogonTrackingError* = (NERR_BASE + 350) + 4
  NERR_NetlogonNotStarted* = (NERR_BASE + 350) + 5
  NERR_CanNotGrowUASFile* = (NERR_BASE + 350) + 6
  NERR_TimeDiffAtDC* = (NERR_BASE + 350) + 7
  NERR_PasswordMismatch* = (NERR_BASE + 350) + 8
  NERR_NoSuchServer* = NERR_BASE + 360
  NERR_NoSuchSession* = (NERR_BASE + 360) + 1
  NERR_NoSuchConnection* = (NERR_BASE + 360) + 2
  NERR_TooManyServers* = (NERR_BASE + 360) + 3
  NERR_TooManySessions* = (NERR_BASE + 360) + 4
  NERR_TooManyConnections* = (NERR_BASE + 360) + 5
  NERR_TooManyFiles* = (NERR_BASE + 360) + 6
  NERR_NoAlternateServers* = (NERR_BASE + 360) + 7
  NERR_TryDownLevel* = NERR_BASE + 370
  NERR_UPSDriverNotStarted* = NERR_BASE + 380
  NERR_UPSInvalidConfig* = (NERR_BASE + 380) + 1
  NERR_UPSInvalidCommPort* = (NERR_BASE + 380) + 2
  NERR_UPSSignalAsserted* = (NERR_BASE + 380) + 3
  NERR_UPSShutdownFailed* = (NERR_BASE + 380) + 4
  NERR_BadDosRetCode* = NERR_BASE + 400
  NERR_ProgNeedsExtraMem* = (NERR_BASE + 400) + 1
  NERR_BadDosFunction* = (NERR_BASE + 400) + 2
  NERR_RemoteBootFailed* = (NERR_BASE + 400) + 3
  NERR_BadFileCheckSum* = (NERR_BASE + 400) + 4
  NERR_NoRplBootSystem* = (NERR_BASE + 400) + 5
  NERR_RplLoadrNetBiosErr* = (NERR_BASE + 400) + 6
  NERR_RplLoadrDiskErr* = (NERR_BASE + 400) + 7
  NERR_ImageParamErr* = (NERR_BASE + 400) + 8
  NERR_TooManyImageParams* = (NERR_BASE + 400) + 9
  NERR_NonDosFloppyUsed* = (NERR_BASE + 400) + 10
  NERR_RplBootRestart* = (NERR_BASE + 400) + 11
  NERR_RplSrvrCallFailed* = (NERR_BASE + 400) + 12
  NERR_CantConnectRplSrvr* = (NERR_BASE + 400) + 13
  NERR_CantOpenImageFile* = (NERR_BASE + 400) + 14
  NERR_CallingRplSrvr* = (NERR_BASE + 400) + 15
  NERR_StartingRplBoot* = (NERR_BASE + 400) + 16
  NERR_RplBootServiceTerm* = (NERR_BASE + 400) + 17
  NERR_RplBootStartFailed* = (NERR_BASE + 400) + 18
  NERR_RPL_CONNECTED* = (NERR_BASE + 400) + 19
  NERR_BrowserConfiguredToNotRun* = NERR_BASE + 450
  NERR_RplNoAdaptersStarted* = NERR_BASE + 510
  NERR_RplBadRegistry* = (NERR_BASE + 510) + 1
  NERR_RplBadDatabase* = (NERR_BASE + 510) + 2
  NERR_RplRplfilesShare* = (NERR_BASE + 510) + 3
  NERR_RplNotRplServer* = (NERR_BASE + 510) + 4
  NERR_RplCannotEnum* = (NERR_BASE + 510) + 5
  NERR_RplWkstaInfoCorrupted* = (NERR_BASE + 510) + 6
  NERR_RplWkstaNotFound* = (NERR_BASE + 510) + 7
  NERR_RplWkstaNameUnavailable* = (NERR_BASE + 510) + 8
  NERR_RplProfileInfoCorrupted* = (NERR_BASE + 510) + 9
  NERR_RplProfileNotFound* = (NERR_BASE + 510) + 10
  NERR_RplProfileNameUnavailable* = (NERR_BASE + 510) + 11
  NERR_RplProfileNotEmpty* = (NERR_BASE + 510) + 12
  NERR_RplConfigInfoCorrupted* = (NERR_BASE + 510) + 13
  NERR_RplConfigNotFound* = (NERR_BASE + 510) + 14
  NERR_RplAdapterInfoCorrupted* = (NERR_BASE + 510) + 15
  NERR_RplInternal* = (NERR_BASE + 510) + 16
  NERR_RplVendorInfoCorrupted* = (NERR_BASE + 510) + 17
  NERR_RplBootInfoCorrupted* = (NERR_BASE + 510) + 18
  NERR_RplWkstaNeedsUserAcct* = (NERR_BASE + 510) + 19
  NERR_RplNeedsRPLUSERAcct* = (NERR_BASE + 510) + 20
  NERR_RplBootNotFound* = (NERR_BASE + 510) + 21
  NERR_RplIncompatibleProfile* = (NERR_BASE + 510) + 22
  NERR_RplAdapterNameUnavailable* = (NERR_BASE + 510) + 23
  NERR_RplConfigNotEmpty* = (NERR_BASE + 510) + 24
  NERR_RplBootInUse* = (NERR_BASE + 510) + 25
  NERR_RplBackupDatabase* = (NERR_BASE + 510) + 26
  NERR_RplAdapterNotFound* = (NERR_BASE + 510) + 27
  NERR_RplVendorNotFound* = (NERR_BASE + 510) + 28
  NERR_RplVendorNameUnavailable* = (NERR_BASE + 510) + 29
  NERR_RplBootNameUnavailable* = (NERR_BASE + 510) + 30
  NERR_RplConfigNameUnavailable* = (NERR_BASE + 510) + 31
  NERR_DfsInternalCorruption* = NERR_BASE + 560
  NERR_DfsVolumeDataCorrupt* = (NERR_BASE + 560) + 1
  NERR_DfsNoSuchVolume* = (NERR_BASE + 560) + 2
  NERR_DfsVolumeAlreadyExists* = (NERR_BASE + 560) + 3
  NERR_DfsAlreadyShared* = (NERR_BASE + 560) + 4
  NERR_DfsNoSuchShare* = (NERR_BASE + 560) + 5
  NERR_DfsNotALeafVolume* = (NERR_BASE + 560) + 6
  NERR_DfsLeafVolume* = (NERR_BASE + 560) + 7
  NERR_DfsVolumeHasMultipleServers* = (NERR_BASE + 560) + 8
  NERR_DfsCantCreateJunctionPoint* = (NERR_BASE + 560) + 9
  NERR_DfsServerNotDfsAware* = (NERR_BASE + 560) + 10
  NERR_DfsBadRenamePath* = (NERR_BASE + 560) + 11
  NERR_DfsVolumeIsOffline* = (NERR_BASE + 560) + 12
  NERR_DfsNoSuchServer* = (NERR_BASE + 560) + 13
  NERR_DfsCyclicalName* = (NERR_BASE + 560) + 14
  NERR_DfsNotSupportedInServerDfs* = (NERR_BASE + 560) + 15
  NERR_DfsDuplicateService* = (NERR_BASE + 560) + 16
  NERR_DfsCantRemoveLastServerShare* = (NERR_BASE + 560) + 17
  NERR_DfsVolumeIsInterDfs* = (NERR_BASE + 560) + 18
  NERR_DfsInconsistent* = (NERR_BASE + 560) + 19
  NERR_DfsServerUpgraded* = (NERR_BASE + 560) + 20
  NERR_DfsDataIsIdentical* = (NERR_BASE + 560) + 21
  NERR_DfsCantRemoveDfsRoot* = (NERR_BASE + 560) + 22
  NERR_DfsChildOrParentInDfs* = (NERR_BASE + 560) + 23
  NERR_DfsInternalError* = NERR_BASE + 590
  MAX_NERR* = NERR_BASE + 899

# net/lmcons.nim

const
  MESSAGE_FILENAME* = "NETMSG"
  OS2MSG_FILENAME* = "BASE"
  HELP_MSG_FILENAME* = "NETH"

type
  NET_API_STATUS* = DWORD
  API_RET_TYPE* = DWORD

const
  MIN_LANMAN_MESSAGE_ID* = NERR_BASE
  MAX_LANMAN_MESSAGE_ID* = 5799
  CNLEN* = 15
  UNCLEN* = CNLEN + 2
  DNLEN* = 15
  LM20_CNLEN* = 15
  LM20_DNLEN* = 15
  LM20_SNLEN* = 15
  LM20_STXTLEN* = 63
  LM20_UNCLEN* = LM20_CNLEN + 2
  LM20_NNLEN* = 12
  LM20_RMLEN* = LM20_UNCLEN + 1 + LM20_NNLEN
  NNLEN* = 80
  RMLEN* = UNCLEN + 1 + NNLEN
  SNLEN* = 80
  STXTLEN* = 256
  PATHLEN* = 256
  LM20_PATHLEN* = 256
  DEVLEN* = 80
  LM20_DEVLEN* = 8
  EVLEN* = 16
  UNLEN* = 256
  LM20_UNLEN* = 20
  GNLEN* = UNLEN
  LM20_GNLEN* = LM20_UNLEN
  PWLEN* = 256
  LM20_PWLEN* = 14
  SHPWLEN* = 8
  CLTYPE_LEN* = 12
  QNLEN* = NNLEN
  LM20_QNLEN* = LM20_NNLEN
  MAXCOMMENTSZ* = 256
  LM20_MAXCOMMENTSZ* = 48
  ALERTSZ* = 128
  MAXDEVENTRIES* = 32
  NETBIOS_NAME_LEN* = 16
  MAX_PREFERRED_LENGTH* = 0xFFFFFFFF'u32
  CRYPT_KEY_LEN* = 7
  CRYPT_TXT_LEN* = 8
  ENCRYPTED_PWLEN* = 16
  SESSION_PWLEN* = 24
  SESSION_CRYPT_KLEN* = 21
  PARMNUM_ALL* = 0
  PARM_ERROR_UNKNOWN* = 0xFFFFFFFF'u32
  PARM_ERROR_NONE* = 0
  PARMNUM_BASE_INFOLEVEL* = 1000
  PLATFORM_ID_DOS* = 300
  PLATFORM_ID_OS2* = 400
  PLATFORM_ID_NT* = 500
  PLATFORM_ID_OSF* = 600
  PLATFORM_ID_VMS* = 700

when not defined(winansi):
  type
    LMSTR* = LPWSTR
    LMCSTR* = LPCWSTR

else:
  type
    LMSTR* = LPSTR
    LMCSTR* = LPCSTR

# net/lmaccess.nim

const
  GROUP_SPECIALGRP_USERS* = "USERS"
  GROUP_SPECIALGRP_ADMINS* = "ADMINS"
  GROUP_SPECIALGRP_GUESTS* = "GUESTS"
  GROUP_SPECIALGRP_LOCAL* = "LOCAL"
  ACCESS_LETTERS* = "RWCXDAP "
  NETLOGON_CONTROL_QUERY* = 1
  NETLOGON_CONTROL_REPLICATE* = 2
  NETLOGON_CONTROL_SYNCHRONIZE* = 3
  NETLOGON_CONTROL_PDC_REPLICATE* = 4
  NETLOGON_CONTROL_REDISCOVER* = 5
  NETLOGON_CONTROL_TC_QUERY* = 6
  NETLOGON_CONTROL_BACKUP_CHANGE_LOG* = 65532
  NETLOGON_CONTROL_TRUNCATE_LOG* = 65533
  NETLOGON_CONTROL_SET_DBFLAG* = 65534
  NETLOGON_CONTROL_BREAKPOINT* = 65535
  UF_SCRIPT* = 1
  UF_ACCOUNTDISABLE* = 2
  UF_HOMEDIR_REQUIRED* = 8
  UF_LOCKOUT* = 16
  UF_PASSWD_NOTREQD* = 32
  UF_PASSWD_CANT_CHANGE* = 64
  UF_TEMP_DUPLICATE_ACCOUNT* = 256
  UF_NORMAL_ACCOUNT* = 512
  UF_INTERDOMAIN_TRUST_ACCOUNT* = 2048
  UF_WORKSTATION_TRUST_ACCOUNT* = 4096
  UF_SERVER_TRUST_ACCOUNT* = 8192
  UF_MNS_LOGON_ACCOUNT* = 131072
  UF_MACHINE_ACCOUNT_MASK* = UF_INTERDOMAIN_TRUST_ACCOUNT or UF_WORKSTATION_TRUST_ACCOUNT or UF_SERVER_TRUST_ACCOUNT
  UF_ACCOUNT_TYPE_MASK* = UF_TEMP_DUPLICATE_ACCOUNT or UF_NORMAL_ACCOUNT or UF_INTERDOMAIN_TRUST_ACCOUNT or UF_WORKSTATION_TRUST_ACCOUNT or UF_SERVER_TRUST_ACCOUNT
  UF_DONT_EXPIRE_PASSWD* = 65536
  UF_SETTABLE_BITS* = UF_SCRIPT or UF_ACCOUNTDISABLE or UF_LOCKOUT or UF_HOMEDIR_REQUIRED or UF_PASSWD_NOTREQD or UF_PASSWD_CANT_CHANGE or UF_ACCOUNT_TYPE_MASK or UF_DONT_EXPIRE_PASSWD
  FILTER_TEMP_DUPLICATE_ACCOUNT* = 1
  FILTER_NORMAL_ACCOUNT* = 2
  FILTER_INTERDOMAIN_TRUST_ACCOUNT* = 8
  FILTER_WORKSTATION_TRUST_ACCOUNT* = 16
  FILTER_SERVER_TRUST_ACCOUNT* = 32
  LG_INCLUDE_INDIRECT* = 1
  AF_OP_PRINT* = 1
  AF_OP_COMM* = 2
  AF_OP_SERVER* = 4
  AF_OP_ACCOUNTS* = 8
  AF_SETTABLE_BITS* = ( AF_OP_PRINT or AF_OP_COMM or AF_OP_SERVER or AF_OP_ACCOUNTS )
  UAS_ROLE_STANDALONE* = 0
  UAS_ROLE_MEMBER* = 1
  UAS_ROLE_BACKUP* = 2
  UAS_ROLE_PRIMARY* = 3
  USER_NAME_PARMNUM* = 1
  USER_PASSWORD_PARMNUM* = 3
  USER_PASSWORD_AGE_PARMNUM* = 4
  USER_PRIV_PARMNUM* = 5
  USER_HOME_DIR_PARMNUM* = 6
  USER_COMMENT_PARMNUM* = 7
  USER_FLAGS_PARMNUM* = 8
  USER_SCRIPT_PATH_PARMNUM* = 9
  USER_AUTH_FLAGS_PARMNUM* = 10
  USER_FULL_NAME_PARMNUM* = 11
  USER_USR_COMMENT_PARMNUM* = 12
  USER_PARMS_PARMNUM* = 13
  USER_WORKSTATIONS_PARMNUM* = 14
  USER_LAST_LOGON_PARMNUM* = 15
  USER_LAST_LOGOFF_PARMNUM* = 16
  USER_ACCT_EXPIRES_PARMNUM* = 17
  USER_MAX_STORAGE_PARMNUM* = 18
  USER_UNITS_PER_WEEK_PARMNUM* = 19
  USER_LOGON_HOURS_PARMNUM* = 20
  USER_PAD_PW_COUNT_PARMNUM* = 21
  USER_NUM_LOGONS_PARMNUM* = 22
  USER_LOGON_SERVER_PARMNUM* = 23
  USER_COUNTRY_CODE_PARMNUM* = 24
  USER_CODE_PAGE_PARMNUM* = 25
  USER_PRIMARY_GROUP_PARMNUM* = 51
  USER_PROFILE* = 52
  USER_PROFILE_PARMNUM* = 52
  USER_HOME_DIR_DRIVE_PARMNUM* = 53
  USER_NAME_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_NAME_PARMNUM
  USER_PASSWORD_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_PASSWORD_PARMNUM
  USER_PASSWORD_AGE_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_PASSWORD_AGE_PARMNUM
  USER_PRIV_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_PRIV_PARMNUM
  USER_HOME_DIR_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_HOME_DIR_PARMNUM
  USER_COMMENT_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_COMMENT_PARMNUM
  USER_FLAGS_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_FLAGS_PARMNUM
  USER_SCRIPT_PATH_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_SCRIPT_PATH_PARMNUM
  USER_AUTH_FLAGS_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_AUTH_FLAGS_PARMNUM
  USER_FULL_NAME_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_FULL_NAME_PARMNUM
  USER_USR_COMMENT_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_USR_COMMENT_PARMNUM
  USER_PARMS_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_PARMS_PARMNUM
  USER_WORKSTATIONS_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_WORKSTATIONS_PARMNUM
  USER_LAST_LOGON_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_LAST_LOGON_PARMNUM
  USER_LAST_LOGOFF_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_LAST_LOGOFF_PARMNUM
  USER_ACCT_EXPIRES_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_ACCT_EXPIRES_PARMNUM
  USER_MAX_STORAGE_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_MAX_STORAGE_PARMNUM
  USER_UNITS_PER_WEEK_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_UNITS_PER_WEEK_PARMNUM
  USER_LOGON_HOURS_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_LOGON_HOURS_PARMNUM
  USER_PAD_PW_COUNT_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_PAD_PW_COUNT_PARMNUM
  USER_NUM_LOGONS_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_NUM_LOGONS_PARMNUM
  USER_LOGON_SERVER_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_LOGON_SERVER_PARMNUM
  USER_COUNTRY_CODE_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_COUNTRY_CODE_PARMNUM
  USER_CODE_PAGE_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_CODE_PAGE_PARMNUM
  USER_PRIMARY_GROUP_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_PRIMARY_GROUP_PARMNUM
  USER_HOME_DIR_DRIVE_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+USER_HOME_DIR_DRIVE_PARMNUM
  NULL_USERSETINFO_PASSWD* = " "
  TIMEQ_FOREVER* = 0xffffffff'u32
  USER_MAXSTORAGE_UNLIMITED* = 0xffffffff'u32
  USER_NO_LOGOFF* = 0xffffffff'u32
  UNITS_PER_DAY* = 24
  UNITS_PER_WEEK* = 168
  USER_PRIV_MASK* = 3
  USER_PRIV_GUEST* = 0
  USER_PRIV_USER* = 1
  USER_PRIV_ADMIN* = 2
  MAX_PASSWD_LEN* = PWLEN
  DEF_MIN_PWLEN* = 6
  DEF_PWUNIQUENESS* = 5
  DEF_MAX_PWHIST* = 8
  DEF_MAX_PWAGE* = TIMEQ_FOREVER
  DEF_MIN_PWAGE* = 0
  DEF_FORCE_LOGOFF* = 0xffffffff'u32
  DEF_MAX_BADPW* = 0
  ONE_DAY* = 86400
  VALIDATED_LOGON* = 0
  PASSWORD_EXPIRED* = 2
  NON_VALIDATED_LOGON* = 3
  VALID_LOGOFF* = 1
  MODALS_MIN_PASSWD_LEN_PARMNUM* = 1
  MODALS_MAX_PASSWD_AGE_PARMNUM* = 2
  MODALS_MIN_PASSWD_AGE_PARMNUM* = 3
  MODALS_FORCE_LOGOFF_PARMNUM* = 4
  MODALS_PASSWD_HIST_LEN_PARMNUM* = 5
  MODALS_ROLE_PARMNUM* = 6
  MODALS_PRIMARY_PARMNUM* = 7
  MODALS_DOMAIN_NAME_PARMNUM* = 8
  MODALS_DOMAIN_ID_PARMNUM* = 9
  MODALS_LOCKOUT_DURATION_PARMNUM* = 10
  MODALS_LOCKOUT_OBSERVATION_WINDOW_PARMNUM* = 11
  MODALS_LOCKOUT_THRESHOLD_PARMNUM* = 12
  MODALS_MIN_PASSWD_LEN_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+MODALS_MIN_PASSWD_LEN_PARMNUM )
  MODALS_MAX_PASSWD_AGE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+MODALS_MAX_PASSWD_AGE_PARMNUM )
  MODALS_MIN_PASSWD_AGE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+MODALS_MIN_PASSWD_AGE_PARMNUM )
  MODALS_FORCE_LOGOFF_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+MODALS_FORCE_LOGOFF_PARMNUM )
  MODALS_PASSWD_HIST_LEN_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+MODALS_PASSWD_HIST_LEN_PARMNUM )
  MODALS_ROLE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+MODALS_ROLE_PARMNUM )
  MODALS_PRIMARY_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+MODALS_PRIMARY_PARMNUM )
  MODALS_DOMAIN_NAME_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+MODALS_DOMAIN_NAME_PARMNUM )
  MODALS_DOMAIN_ID_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+MODALS_DOMAIN_ID_PARMNUM )
  GROUPIDMASK* = 0x8000
  GROUP_ALL_PARMNUM* = 0
  GROUP_NAME_PARMNUM* = 1
  GROUP_COMMENT_PARMNUM* = 2
  GROUP_ATTRIBUTES_PARMNUM* = 3
  GROUP_ALL_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL + GROUP_ALL_PARMNUM
  GROUP_NAME_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL + GROUP_NAME_PARMNUM
  GROUP_COMMENT_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL + GROUP_COMMENT_PARMNUM
  GROUP_ATTRIBUTES_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL + GROUP_ATTRIBUTES_PARMNUM
  LOCALGROUP_NAME_PARMNUM* = 1
  LOCALGROUP_COMMENT_PARMNUM* = 2
  MAXPERMENTRIES* = 64
  ACCESS_NONE* = 0
  ACCESS_READ* = 1
  ACCESS_WRITE* = 2
  ACCESS_CREATE* = 4
  ACCESS_EXEC* = 8
  ACCESS_DELETE* = 16
  ACCESS_ATRIB* = 32
  ACCESS_PERM* = 64
  ACCESS_ALL* = ACCESS_READ or ACCESS_WRITE or ACCESS_CREATE or ACCESS_EXEC or ACCESS_DELETE or ACCESS_ATRIB or ACCESS_PERM
  ACCESS_GROUP* = 0x8000
  ACCESS_AUDIT* = 1
  ACCESS_SUCCESS_OPEN* = 16
  ACCESS_SUCCESS_WRITE* = 32
  ACCESS_SUCCESS_DELETE* = 64
  ACCESS_SUCCESS_ACL* = 128
  ACCESS_SUCCESS_MASK* = 240
  ACCESS_FAIL_OPEN* = 256
  ACCESS_FAIL_WRITE* = 512
  ACCESS_FAIL_DELETE* = 1024
  ACCESS_FAIL_ACL* = 2048
  ACCESS_FAIL_MASK* = 3840
  ACCESS_FAIL_SHIFT* = 4
  ACCESS_RESOURCE_NAME_PARMNUM* = 1
  ACCESS_ATTR_PARMNUM* = 2
  ACCESS_COUNT_PARMNUM* = 3
  ACCESS_ACCESS_LIST_PARMNUM* = 4
  ACCESS_RESOURCE_NAME_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+ACCESS_RESOURCE_NAME_PARMNUM )
  ACCESS_ATTR_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+ACCESS_ATTR_PARMNUM )
  ACCESS_COUNT_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+ACCESS_COUNT_PARMNUM )
  ACCESS_ACCESS_LIST_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+ACCESS_ACCESS_LIST_PARMNUM )
  NETLOGON_REPLICATION_NEEDED* = 1
  NETLOGON_REPLICATION_IN_PROGRESS* = 2
  NETLOGON_FULL_SYNC_REPLICATION* = 4
  NETLOGON_REDO_NEEDED* = 8

type
  USER_INFO_0* {.final, pure.} = object
    usri0_name*: LPWSTR
  PUSER_INFO_0* = ptr USER_INFO_0
  LPUSER_INFO_0* = ptr USER_INFO_0
  USER_INFO_1* {.final, pure.} = object
    usri1_name*: LPWSTR
    usri1_password*: LPWSTR
    usri1_password_age*: DWORD
    usri1_priv*: DWORD
    usri1_home_dir*: LPWSTR
    usri1_comment*: LPWSTR
    usri1_flags*: DWORD
    usri1_script_path*: LPWSTR
  PUSER_INFO_1* = ptr USER_INFO_1
  LPUSER_INFO_1* = ptr USER_INFO_1
  USER_INFO_2* {.final, pure.} = object
    usri2_name*: LPWSTR
    usri2_password*: LPWSTR
    usri2_password_age*: DWORD
    usri2_priv*: DWORD
    usri2_home_dir*: LPWSTR
    usri2_comment*: LPWSTR
    usri2_flags*: DWORD
    usri2_script_path*: LPWSTR
    usri2_auth_flags*: DWORD
    usri2_full_name*: LPWSTR
    usri2_usr_comment*: LPWSTR
    usri2_parms*: LPWSTR
    usri2_workstations*: LPWSTR
    usri2_last_logon*: DWORD
    usri2_last_logoff*: DWORD
    usri2_acct_expires*: DWORD
    usri2_max_storage*: DWORD
    usri2_units_per_week*: DWORD
    usri2_logon_hours*: PBYTE
    usri2_bad_pw_count*: DWORD
    usri2_num_logons*: DWORD
    usri2_logon_server*: LPWSTR
    usri2_country_code*: DWORD
    usri2_code_page*: DWORD
  PUSER_INFO_2* = ptr USER_INFO_2
  LPUSER_INFO_2* = ptr USER_INFO_2
  USER_INFO_3* {.final, pure.} = object
    usri3_name*: LPWSTR
    usri3_password*: LPWSTR
    usri3_password_age*: DWORD
    usri3_priv*: DWORD
    usri3_home_dir*: LPWSTR
    usri3_comment*: LPWSTR
    usri3_flags*: DWORD
    usri3_script_path*: LPWSTR
    usri3_auth_flags*: DWORD
    usri3_full_name*: LPWSTR
    usri3_usr_comment*: LPWSTR
    usri3_parms*: LPWSTR
    usri3_workstations*: LPWSTR
    usri3_last_logon*: DWORD
    usri3_last_logoff*: DWORD
    usri3_acct_expires*: DWORD
    usri3_max_storage*: DWORD
    usri3_units_per_week*: DWORD
    usri3_logon_hours*: PBYTE
    usri3_bad_pw_count*: DWORD
    usri3_num_logons*: DWORD
    usri3_logon_server*: LPWSTR
    usri3_country_code*: DWORD
    usri3_code_page*: DWORD
    usri3_user_id*: DWORD
    usri3_primary_group_id*: DWORD
    usri3_profile*: LPWSTR
    usri3_home_dir_drive*: LPWSTR
    usri3_password_expired*: DWORD
  PUSER_INFO_3* = ptr USER_INFO_3
  LPUSER_INFO_3* = ptr USER_INFO_3
  USER_INFO_10* {.final, pure.} = object
    usri10_name*: LPWSTR
    usri10_comment*: LPWSTR
    usri10_usr_comment*: LPWSTR
    usri10_full_name*: LPWSTR
  PUSER_INFO_10* = ptr USER_INFO_10
  LPUSER_INFO_10* = ptr USER_INFO_10
  USER_INFO_11* {.final, pure.} = object
    usri11_name*: LPWSTR
    usri11_comment*: LPWSTR
    usri11_usr_comment*: LPWSTR
    usri11_full_name*: LPWSTR
    usri11_priv*: DWORD
    usri11_auth_flags*: DWORD
    usri11_password_age*: DWORD
    usri11_home_dir*: LPWSTR
    usri11_parms*: LPWSTR
    usri11_last_logon*: DWORD
    usri11_last_logoff*: DWORD
    usri11_bad_pw_count*: DWORD
    usri11_num_logons*: DWORD
    usri11_logon_server*: LPWSTR
    usri11_country_code*: DWORD
    usri11_workstations*: LPWSTR
    usri11_max_storage*: DWORD
    usri11_units_per_week*: DWORD
    usri11_logon_hours*: PBYTE
    usri11_code_page*: DWORD
  PUSER_INFO_11* = ptr USER_INFO_11
  LPUSER_INFO_11* = ptr USER_INFO_11
  USER_INFO_20* {.final, pure.} = object
    usri20_name*: LPWSTR
    usri20_full_name*: LPWSTR
    usri20_comment*: LPWSTR
    usri20_flags*: DWORD
    usri20_user_id*: DWORD
  PUSER_INFO_20* = ptr USER_INFO_20
  LPUSER_INFO_20* = ptr USER_INFO_20
  USER_INFO_21* {.final, pure.} = object
    usri21_password*: array[ENCRYPTED_PWLEN, BYTE]
  PUSER_INFO_21* = ptr USER_INFO_21
  LPUSER_INFO_21* = ptr USER_INFO_21
  USER_INFO_22* {.final, pure.} = object
    usri22_name*: LPWSTR
    usri22_password*: array[ENCRYPTED_PWLEN, BYTE]
    usri22_password_age*: DWORD
    usri22_priv*: DWORD
    usri22_home_dir*: LPWSTR
    usri22_comment*: LPWSTR
    usri22_flags*: DWORD
    usri22_script_path*: LPWSTR
    usri22_auth_flags*: DWORD
    usri22_full_name*: LPWSTR
    usri22_usr_comment*: LPWSTR
    usri22_parms*: LPWSTR
    usri22_workstations*: LPWSTR
    usri22_last_logon*: DWORD
    usri22_last_logoff*: DWORD
    usri22_acct_expires*: DWORD
    usri22_max_storage*: DWORD
    usri22_units_per_week*: DWORD
    usri22_logon_hours*: PBYTE
    usri22_bad_pw_count*: DWORD
    usri22_num_logons*: DWORD
    usri22_logon_server*: LPWSTR
    usri22_country_code*: DWORD
    usri22_code_page*: DWORD
  PUSER_INFO_22* = ptr USER_INFO_22
  LPUSER_INFO_22* = ptr USER_INFO_22
  USER_INFO_1003* {.final, pure.} = object
    usri1003_password*: LPWSTR
  PUSER_INFO_1003* = ptr USER_INFO_1003
  LPUSER_INFO_1003* = ptr USER_INFO_1003
  USER_INFO_1005* {.final, pure.} = object
    usri1005_priv*: DWORD
  PUSER_INFO_1005* = ptr USER_INFO_1005
  LPUSER_INFO_1005* = ptr USER_INFO_1005
  USER_INFO_1006* {.final, pure.} = object
    usri1006_home_dir*: LPWSTR
  PUSER_INFO_1006* = ptr USER_INFO_1006
  LPUSER_INFO_1006* = ptr USER_INFO_1006
  USER_INFO_1007* {.final, pure.} = object
    usri1007_comment*: LPWSTR
  PUSER_INFO_1007* = ptr USER_INFO_1007
  LPUSER_INFO_1007* = ptr USER_INFO_1007
  USER_INFO_1008* {.final, pure.} = object
    usri1008_flags*: DWORD
  PUSER_INFO_1008* = ptr USER_INFO_1008
  LPUSER_INFO_1008* = ptr USER_INFO_1008
  USER_INFO_1009* {.final, pure.} = object
    usri1009_script_path*: LPWSTR
  PUSER_INFO_1009* = ptr USER_INFO_1009
  LPUSER_INFO_1009* = ptr USER_INFO_1009
  USER_INFO_1010* {.final, pure.} = object
    usri1010_auth_flags*: DWORD
  PUSER_INFO_1010* = ptr USER_INFO_1010
  LPUSER_INFO_1010* = ptr USER_INFO_1010
  USER_INFO_1011* {.final, pure.} = object
    usri1011_full_name*: LPWSTR
  PUSER_INFO_1011* = ptr USER_INFO_1011
  LPUSER_INFO_1011* = ptr USER_INFO_1011
  USER_INFO_1012* {.final, pure.} = object
    usri1012_usr_comment*: LPWSTR
  PUSER_INFO_1012* = ptr USER_INFO_1012
  LPUSER_INFO_1012* = ptr USER_INFO_1012
  USER_INFO_1013* {.final, pure.} = object
    usri1013_parms*: LPWSTR
  PUSER_INFO_1013* = ptr USER_INFO_1013
  LPUSER_INFO_1013* = ptr USER_INFO_1013
  USER_INFO_1014* {.final, pure.} = object
    usri1014_workstations*: LPWSTR
  PUSER_INFO_1014* = ptr USER_INFO_1014
  LPUSER_INFO_1014* = ptr USER_INFO_1014
  USER_INFO_1017* {.final, pure.} = object
    usri1017_acct_expires*: DWORD
  PUSER_INFO_1017* = ptr USER_INFO_1017
  LPUSER_INFO_1017* = ptr USER_INFO_1017
  USER_INFO_1018* {.final, pure.} = object
    usri1018_max_storage*: DWORD
  PUSER_INFO_1018* = ptr USER_INFO_1018
  LPUSER_INFO_1018* = ptr USER_INFO_1018
  USER_INFO_1020* {.final, pure.} = object
    usri1020_units_per_week*: DWORD
    usri1020_logon_hours*: PBYTE
  PUSER_INFO_1020* = ptr USER_INFO_1020
  LPUSER_INFO_1020* = ptr USER_INFO_1020
  USER_INFO_1023* {.final, pure.} = object
    usri1023_logon_server*: LPWSTR
  PUSER_INFO_1023* = ptr USER_INFO_1023
  LPUSER_INFO_1023* = ptr USER_INFO_1023
  USER_INFO_1024* {.final, pure.} = object
    usri1024_country_code*: DWORD
  PUSER_INFO_1024* = ptr USER_INFO_1024
  LPUSER_INFO_1024* = ptr USER_INFO_1024
  USER_INFO_1025* {.final, pure.} = object
    usri1025_code_page*: DWORD
  PUSER_INFO_1025* = ptr USER_INFO_1025
  LPUSER_INFO_1025* = ptr USER_INFO_1025
  USER_INFO_1051* {.final, pure.} = object
    usri1051_primary_group_id*: DWORD
  PUSER_INFO_1051* = ptr USER_INFO_1051
  LPUSER_INFO_1051* = ptr USER_INFO_1051
  USER_INFO_1052* {.final, pure.} = object
    usri1052_profile*: LPWSTR
  PUSER_INFO_1052* = ptr USER_INFO_1052
  LPUSER_INFO_1052* = ptr USER_INFO_1052
  USER_INFO_1053* {.final, pure.} = object
    usri1053_home_dir_drive*: LPWSTR
  PUSER_INFO_1053* = ptr USER_INFO_1053
  LPUSER_INFO_1053* = ptr USER_INFO_1053
  USER_MODALS_INFO_0* {.final, pure.} = object
    usrmod0_min_passwd_len*: DWORD
    usrmod0_max_passwd_age*: DWORD
    usrmod0_min_passwd_age*: DWORD
    usrmod0_force_logoff*: DWORD
    usrmod0_password_hist_len*: DWORD
  PUSER_MODALS_INFO_0* = ptr USER_MODALS_INFO_0
  LPUSER_MODALS_INFO_0* = ptr USER_MODALS_INFO_0
  USER_MODALS_INFO_1* {.final, pure.} = object
    usrmod1_role*: DWORD
    usrmod1_primary*: LPWSTR
  PUSER_MODALS_INFO_1* = ptr USER_MODALS_INFO_1
  LPUSER_MODALS_INFO_1* = ptr USER_MODALS_INFO_1
  USER_MODALS_INFO_2* {.final, pure.} = object
    usrmod2_domain_name*: LPWSTR
    usrmod2_domain_id*: PSID
  PUSER_MODALS_INFO_2* = ptr USER_MODALS_INFO_2
  LPUSER_MODALS_INFO_2* = ptr USER_MODALS_INFO_2
  USER_MODALS_INFO_3* {.final, pure.} = object
    usrmod3_lockout_duration*: DWORD
    usrmod3_lockout_observation_window*: DWORD
    usrmod3_lockout_threshold*: DWORD
  PUSER_MODALS_INFO_3* = ptr USER_MODALS_INFO_3
  LPUSER_MODALS_INFO_3* = ptr USER_MODALS_INFO_3
  USER_MODALS_INFO_1001* {.final, pure.} = object
    usrmod1001_min_passwd_len*: DWORD
  PUSER_MODALS_INFO_1001* = ptr USER_MODALS_INFO_1001
  LPUSER_MODALS_INFO_1001* = ptr USER_MODALS_INFO_1001
  USER_MODALS_INFO_1002* {.final, pure.} = object
    usrmod1002_max_passwd_age*: DWORD
  PUSER_MODALS_INFO_1002* = ptr USER_MODALS_INFO_1002
  LPUSER_MODALS_INFO_1002* = ptr USER_MODALS_INFO_1002
  USER_MODALS_INFO_1003* {.final, pure.} = object
    usrmod1003_min_passwd_age*: DWORD
  PUSER_MODALS_INFO_1003* = ptr USER_MODALS_INFO_1003
  LPUSER_MODALS_INFO_1003* = ptr USER_MODALS_INFO_1003
  USER_MODALS_INFO_1004* {.final, pure.} = object
    usrmod1004_force_logoff*: DWORD
  PUSER_MODALS_INFO_1004* = ptr USER_MODALS_INFO_1004
  LPUSER_MODALS_INFO_1004* = ptr USER_MODALS_INFO_1004
  USER_MODALS_INFO_1005* {.final, pure.} = object
    usrmod1005_password_hist_len*: DWORD
  PUSER_MODALS_INFO_1005* = ptr USER_MODALS_INFO_1005
  LPUSER_MODALS_INFO_1005* = ptr USER_MODALS_INFO_1005
  USER_MODALS_INFO_1006* {.final, pure.} = object
    usrmod1006_role*: DWORD
  PUSER_MODALS_INFO_1006* = ptr USER_MODALS_INFO_1006
  LPUSER_MODALS_INFO_1006* = ptr USER_MODALS_INFO_1006
  USER_MODALS_INFO_1007* {.final, pure.} = object
    usrmod1007_primary*: LPWSTR
  PUSER_MODALS_INFO_1007* = ptr USER_MODALS_INFO_1007
  LPUSER_MODALS_INFO_1007* = ptr USER_MODALS_INFO_1007
  GROUP_INFO_0* {.final, pure.} = object
    grpi0_name*: LPWSTR
  PGROUP_INFO_0* = ptr GROUP_INFO_0
  LPGROUP_INFO_0* = ptr GROUP_INFO_0
  GROUP_INFO_1* {.final, pure.} = object
    grpi1_name*: LPWSTR
    grpi1_comment*: LPWSTR
  PGROUP_INFO_1* = ptr GROUP_INFO_1
  LPGROUP_INFO_1* = ptr GROUP_INFO_1
  GROUP_INFO_2* {.final, pure.} = object
    grpi2_name*: LPWSTR
    grpi2_comment*: LPWSTR
    grpi2_group_id*: DWORD
    grpi2_attributes*: DWORD
  PGROUP_INFO_2* = ptr GROUP_INFO_2
  GROUP_INFO_1002* {.final, pure.} = object
    grpi1002_comment*: LPWSTR
  PGROUP_INFO_1002* = ptr GROUP_INFO_1002
  LPGROUP_INFO_1002* = ptr GROUP_INFO_1002
  GROUP_INFO_1005* {.final, pure.} = object
    grpi1005_attributes*: DWORD
  PGROUP_INFO_1005* = ptr GROUP_INFO_1005
  LPGROUP_INFO_1005* = ptr GROUP_INFO_1005
  GROUP_USERS_INFO_0* {.final, pure.} = object
    grui0_name*: LPWSTR
  PGROUP_USERS_INFO_0* = ptr GROUP_USERS_INFO_0
  LPGROUP_USERS_INFO_0* = ptr GROUP_USERS_INFO_0
  GROUP_USERS_INFO_1* {.final, pure.} = object
    grui1_name*: LPWSTR
    grui1_attributes*: DWORD
  PGROUP_USERS_INFO_1* = ptr GROUP_USERS_INFO_1
  LPGROUP_USERS_INFO_1* = ptr GROUP_USERS_INFO_1
  LOCALGROUP_INFO_0* {.final, pure.} = object
    lgrpi0_name*: LPWSTR
  PLOCALGROUP_INFO_0* = ptr LOCALGROUP_INFO_0
  LPLOCALGROUP_INFO_0* = ptr LOCALGROUP_INFO_0
  LOCALGROUP_INFO_1* {.final, pure.} = object
    lgrpi1_name*: LPWSTR
    lgrpi1_comment*: LPWSTR
  PLOCALGROUP_INFO_1* = ptr LOCALGROUP_INFO_1
  LPLOCALGROUP_INFO_1* = ptr LOCALGROUP_INFO_1
  LOCALGROUP_INFO_1002* {.final, pure.} = object
    lgrpi1002_comment*: LPWSTR
  PLOCALGROUP_INFO_1002* = ptr LOCALGROUP_INFO_1002
  LPLOCALGROUP_INFO_1002* = ptr LOCALGROUP_INFO_1002
  LOCALGROUP_MEMBERS_INFO_0* {.final, pure.} = object
    lgrmi0_sid*: PSID
  PLOCALGROUP_MEMBERS_INFO_0* = ptr LOCALGROUP_MEMBERS_INFO_0
  LPLOCALGROUP_MEMBERS_INFO_0* = ptr LOCALGROUP_MEMBERS_INFO_0
  LOCALGROUP_MEMBERS_INFO_1* {.final, pure.} = object
    lgrmi1_sid*: PSID
    lgrmi1_sidusage*: SID_NAME_USE
    lgrmi1_name*: LPWSTR
  PLOCALGROUP_MEMBERS_INFO_1* = ptr LOCALGROUP_MEMBERS_INFO_1
  LPLOCALGROUP_MEMBERS_INFO_1* = ptr LOCALGROUP_MEMBERS_INFO_1
  LOCALGROUP_MEMBERS_INFO_2* {.final, pure.} = object
    lgrmi2_sid*: PSID
    lgrmi2_sidusage*: SID_NAME_USE
    lgrmi2_domainandname*: LPWSTR
  PLOCALGROUP_MEMBERS_INFO_2* = ptr LOCALGROUP_MEMBERS_INFO_2
  LPLOCALGROUP_MEMBERS_INFO_2* = ptr LOCALGROUP_MEMBERS_INFO_2
  LOCALGROUP_MEMBERS_INFO_3* {.final, pure.} = object
    lgrmi3_domainandname*: LPWSTR
  PLOCALGROUP_MEMBERS_INFO_3* = ptr LOCALGROUP_MEMBERS_INFO_3
  LPLOCALGROUP_MEMBERS_INFO_3* = ptr LOCALGROUP_MEMBERS_INFO_3
  LOCALGROUP_USERS_INFO_0* {.final, pure.} = object
    lgrui0_name*: LPWSTR
  PLOCALGROUP_USERS_INFO_0* = ptr LOCALGROUP_USERS_INFO_0
  LPLOCALGROUP_USERS_INFO_0* = ptr LOCALGROUP_USERS_INFO_0
  NET_DISPLAY_USER* {.final, pure.} = object
    usri1_name*: LPWSTR
    usri1_comment*: LPWSTR
    usri1_flags*: DWORD
    usri1_full_name*: LPWSTR
    usri1_user_id*: DWORD
    usri1_next_index*: DWORD
  PNET_DISPLAY_USER* = ptr NET_DISPLAY_USER
  NET_DISPLAY_MACHINE* {.final, pure.} = object
    usri2_name*: LPWSTR
    usri2_comment*: LPWSTR
    usri2_flags*: DWORD
    usri2_user_id*: DWORD
    usri2_next_index*: DWORD
  PNET_DISPLAY_MACHINE* = ptr NET_DISPLAY_MACHINE
  NET_DISPLAY_GROUP* {.final, pure.} = object
    grpi3_name*: LPWSTR
    grpi3_comment*: LPWSTR
    grpi3_group_id*: DWORD
    grpi3_attributes*: DWORD
    grpi3_next_index*: DWORD
  PNET_DISPLAY_GROUP* = ptr NET_DISPLAY_GROUP
  ACCESS_INFO_0* {.final, pure.} = object
    acc0_resource_name*: LPTSTR
  PACCESS_INFO_0* = ptr ACCESS_INFO_0
  LPACCESS_INFO_0* = ptr ACCESS_INFO_0
  ACCESS_INFO_1* {.final, pure.} = object
    acc1_resource_name*: LPTSTR
    acc1_attr*: DWORD
    acc1_count*: DWORD
  PACCESS_INFO_1* = ptr ACCESS_INFO_1
  LPACCESS_INFO_1* = ptr ACCESS_INFO_1
  ACCESS_INFO_1002* {.final, pure.} = object
    acc1002_attr*: DWORD
  PACCESS_INFO_1002* = ptr ACCESS_INFO_1002
  LPACCESS_INFO_1002* = ptr ACCESS_INFO_1002
  ACCESS_LIST* {.final, pure.} = object
    acl_ugname*: LPTSTR
    acl_access*: DWORD
  PACCESS_LIST* = ptr ACCESS_LIST
  LPACCESS_LIST* = ptr ACCESS_LIST
  NETLOGON_INFO_1* {.final, pure.} = object
    netlog1_flags*: DWORD
    netlog1_pdc_connection_status*: NET_API_STATUS
  PNETLOGON_INFO_1* = ptr NETLOGON_INFO_1
  NETLOGON_INFO_2* {.final, pure.} = object
    netlog2_flags*: DWORD
    netlog2_pdc_connection_status*: NET_API_STATUS
    netlog2_trusted_dc_name*: LPWSTR
    netlog2_tc_connection_status*: NET_API_STATUS
  PNETLOGON_INFO_2* = ptr NETLOGON_INFO_2
  NETLOGON_INFO_3* {.final, pure.} = object
    netlog3_flags*: DWORD
    netlog3_logon_attempts*: DWORD
    netlog3_reserved1*: DWORD
    netlog3_reserved2*: DWORD
    netlog3_reserved3*: DWORD
    netlog3_reserved4*: DWORD
    netlog3_reserved5*: DWORD
  PNETLOGON_INFO_3* = ptr NETLOGON_INFO_3

proc NetAccessAdd*(P1: LPCWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetAccessEnum*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: DWORD, P5: ptr PBYTE, P6: DWORD, P7: PDWORD, P8: PDWORD, P9: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetAccessGetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetAccessSetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: PBYTE, P5: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetAccessDel*(P1: LPCWSTR, P2: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetAccessGetUserPerms*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUserAdd*(P1: LPCWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUserEnum*(P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: ptr PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD, P8: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUserGetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUserSetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: PBYTE, P5: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUserDel*(P1: LPCWSTR, P2: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUserGetGroups*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUserSetGroups*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: PBYTE, P5: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUserGetLocalGroups*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: DWORD, P5: ptr PBYTE, P6: DWORD, P7: PDWORD, P8: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUserModalsGet*(P1: LPCWSTR, P2: DWORD, P3: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUserModalsSet*(P1: LPCWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUserChangePassword*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGroupAdd*(P1: LPCWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGroupAddUser*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGroupEnum*(P1: LPCWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGroupGetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGroupSetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: PBYTE, P5: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGroupDel*(P1: LPCWSTR, P2: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGroupDelUser*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGroupGetUsers*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD, P8: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGroupSetUsers*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: PBYTE, P5: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetLocalGroupAdd*(P1: LPCWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetLocalGroupAddMember*(P1: LPCWSTR, P2: LPCWSTR, P3: PSID): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetLocalGroupEnum*(P1: LPCWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetLocalGroupGetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetLocalGroupSetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: PBYTE, P5: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetLocalGroupDel*(P1: LPCWSTR, P2: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetLocalGroupDelMember*(P1: LPCWSTR, P2: LPCWSTR, P3: PSID): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetLocalGroupGetMembers*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD, P8: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetLocalGroupSetMembers*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: PBYTE, P5: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetLocalGroupAddMembers*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: PBYTE, P5: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetLocalGroupDelMembers*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: PBYTE, P5: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetQueryDisplayInformation*(P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: DWORD, P5: DWORD, P6: PDWORD, P7: ptr PVOID): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGetDisplayInformationIndex*(P1: LPCWSTR, P2: DWORD, P3: LPCWSTR, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGetDCName*(P1: LPCWSTR, P2: LPCWSTR, P3: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetGetAnyDCName*(P1: LPCWSTR, P2: LPCWSTR, P3: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc I_NetLogonControl*(P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc I_NetLogonControl2*(P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: PBYTE, P5: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmalert.nim

const
  ALERTER_MAILSLOT* = r"\\.\MAILSLOT\Alerter"
  ALERT_PRINT_EVENT* = "PRINTING"
  ALERT_MESSAGE_EVENT* = "MESSAGE"
  ALERT_ERRORLOG_EVENT* = "ERRORLOG"
  ALERT_ADMIN_EVENT* = "ADMIN"
  ALERT_USER_EVENT* = "USER"
  PRJOB_QSTATUS* = 3
  PRJOB_DEVSTATUS* = 508
  PRJOB_COMPLETE* = 4
  PRJOB_INTERV* = 8
  PRJOB* = 16
  PRJOB_DESTOFFLINE* = 32
  PRJOB_DESTPAUSED* = 64
  PRJOB_NOTIFY* = 128
  PRJOB_DESTNOPAPER* = 256
  PRJOB_DELETED* = 32768
  PRJOB_QS_QUEUED* = 0
  PRJOB_QS_PAUSED* = 1
  PRJOB_QS_SPOOLING* = 2
  PRJOB_QS_PRINTING* = 3

type
  ADMIN_OTHER_INFO* {.final, pure.} = object
    alrtad_errcode*: DWORD
    alrtad_numstrings*: DWORD
  PADMIN_OTHER_INFO* = ptr ADMIN_OTHER_INFO
  LPADMIN_OTHER_INFO* = ptr ADMIN_OTHER_INFO
  STD_ALERT* {.final, pure.} = object
    alrt_timestamp*: DWORD
    alrt_eventname*: array[EVLEN+1, TCHAR]
    alrt_servicename*: array[SNLEN+1, TCHAR]
  PSTD_ALERT* = ptr STD_ALERT
  LPSTD_ALERT* = ptr STD_ALERT
  ERRLOG_OTHER_INFO* {.final, pure.} = object
    alrter_errcode*: DWORD
    alrter_offset*: DWORD
  PERRLOG_OTHER_INFO* = ptr ERRLOG_OTHER_INFO
  LPERRLOG_OTHER_INFO* = ptr ERRLOG_OTHER_INFO
  PRINT_OTHER_INFO* {.final, pure.} = object
    alrtpr_jobid*: DWORD
    alrtpr_status*: DWORD
    alrtpr_submitted*: DWORD
    alrtpr_size*: DWORD
  PPRINT_OTHER_INFO* = ptr PRINT_OTHER_INFO
  LPPRINT_OTHER_INFO* = ptr PRINT_OTHER_INFO
  USER_OTHER_INFO* {.final, pure.} = object
    alrtus_errcode*: DWORD
    alrtus_numstrings*: DWORD
  PUSER_OTHER_INFO* = ptr USER_OTHER_INFO
  LPUSER_OTHER_INFO* = ptr USER_OTHER_INFO

proc NetAlertRaise*(P1: LPCWSTR, P2: PVOID, P3: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetAlertRaiseEx*(P1: LPCWSTR, P2: PVOID, P3: DWORD, P4: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmapibuf.nim

proc NetApiBufferAllocate*(P1: DWORD, P2: ptr PVOID): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetApiBufferFree*(P1: PVOID): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetApiBufferReallocate*(P1: PVOID, P2: DWORD, P3: ptr PVOID): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetApiBufferSize*(P1: PVOID, P2: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetapipBufferAllocate*(P1: DWORD, P2: ptr PVOID): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmat.nim

const
  JOB_RUN_PERIODICALLY* = 1
  JOB_EXEC_ERROR* = 2
  JOB_RUNS_TODAY* = 4
  JOB_ADD_CURRENT_DATE* = 8
  JOB_NONINTERACTIVE* = 16
  JOB_INPUT_FLAGS* = JOB_RUN_PERIODICALLY or JOB_ADD_CURRENT_DATE or JOB_NONINTERACTIVE
  JOB_OUTPUT_FLAGS* = JOB_RUN_PERIODICALLY or JOB_EXEC_ERROR or JOB_RUNS_TODAY or JOB_NONINTERACTIVE

type
  AT_ENUM* {.final, pure.} = object
    JobId*: DWORD
    JobTime*: DWORD
    DaysOfMonth*: DWORD
    DaysOfWeek*: UCHAR
    Flags*: UCHAR
    Command*: LPWSTR
  PAT_ENUM* = ptr AT_ENUM
  LPAT_ENUM* = ptr AT_ENUM
  AT_INFO* {.final, pure.} = object
    JobTime*: DWORD
    DaysOfMonth*: DWORD
    DaysOfWeek*: UCHAR
    Flags*: UCHAR
    Command*: LPWSTR
  PAT_INFO* = ptr AT_INFO
  LPAT_INFO* = ptr AT_INFO

proc NetScheduleJobAdd*(P1: LPWSTR, P2: PBYTE, P3: LPDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetScheduleJobDel*(P1: LPWSTR, P2: DWORD, P3: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetScheduleJobEnum*(P1: LPWSTR, P2: ptr PBYTE, P3: DWORD, P4: PDWORD, P5: PDWORD, P6: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetScheduleJobGetInfo*(P1: LPWSTR, P2: DWORD, P3: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmaudit.nim

const
  LOGFLAGS_FORWARD* = 0
  LOGFLAGS_BACKWARD* = 1
  LOGFLAGS_SEEK* = 2
  ACTION_LOCKOUT* = 0
  ACTION_ADMINUNLOCK* = 1
  AE_GUEST* = 0
  AE_USER* = 1
  AE_ADMIN* = 2
  AE_NORMAL* = 0
  AE_USERLIMIT* = 0
  AE_GENERAL* = 0
  AE_ERROR* = 1
  AE_SESSDIS* = 1
  AE_BADPW* = 1
  AE_AUTODIS* = 2
  AE_UNSHARE* = 2
  AE_ADMINPRIVREQD* = 2
  AE_ADMINDIS* = 3
  AE_NOACCESSPERM* = 3
  AE_ACCRESTRICT* = 4
  AE_NORMAL_CLOSE* = 0
  AE_SES_CLOSE* = 1
  AE_ADMIN_CLOSE* = 2
  AE_LIM_UNKNOWN* = 0
  AE_LIM_LOGONHOURS* = 1
  AE_LIM_EXPIRED* = 2
  AE_LIM_INVAL_WKSTA* = 3
  AE_LIM_DISABLED* = 4
  AE_LIM_DELETED* = 5
  AE_MOD* = 0
  AE_DELETE* = 1
  AE_ADD* = 2
  AE_UAS_USER* = 0
  AE_UAS_GROUP* = 1
  AE_UAS_MODALS* = 2
  SVAUD_SERVICE* = 1
  SVAUD_GOODSESSLOGON* = 6
  SVAUD_BADSESSLOGON* = 24
  SVAUD_SESSLOGON* = SVAUD_GOODSESSLOGON or SVAUD_BADSESSLOGON
  SVAUD_GOODNETLOGON* = 96
  SVAUD_BADNETLOGON* = 384
  SVAUD_NETLOGON* = SVAUD_GOODNETLOGON or SVAUD_BADNETLOGON
  SVAUD_LOGON* = SVAUD_NETLOGON or SVAUD_SESSLOGON
  SVAUD_GOODUSE* = 0x600
  SVAUD_BADUSE* = 0x1800
  SVAUD_USE* = SVAUD_GOODUSE or SVAUD_BADUSE
  SVAUD_USERLIST* = 8192
  SVAUD_PERMISSIONS* = 16384
  SVAUD_RESOURCE* = 32768
  SVAUD_LOGONLIM* = 65536
  AA_AUDIT_ALL* = 1
  AA_A_OWNER* = 4
  AA_CLOSE* = 8
  AA_S_OPEN* = 16
  AA_S_WRITE* = 32
  AA_S_CREATE* = 32
  AA_S_DELETE* = 64
  AA_S_ACL* = 128
  AA_S_ALL* = 253
  AA_F_OPEN* = 256
  AA_F_WRITE* = 512
  AA_F_CREATE* = 512
  AA_F_DELETE* = 1024
  AA_F_ACL* = 2048
  AA_F_ALL* = AA_F_OPEN or AA_F_WRITE or AA_F_DELETE or AA_F_ACL
  AA_A_OPEN* = 2048
  AA_A_WRITE* = 4096
  AA_A_CREATE* = 8192
  AA_A_DELETE* = 16384
  AA_A_ACL* = 32768
  AA_A_ALL* = AA_F_OPEN or AA_F_WRITE or AA_F_DELETE or AA_F_ACL

type
  AUDIT_ENTRY* {.final, pure.} = object
    ae_len*: DWORD
    ae_reserved*: DWORD
    ae_time*: DWORD
    ae_type*: DWORD
    ae_data_offset*: DWORD
    ae_data_size*: DWORD
  PAUDIT_ENTRY* = ptr AUDIT_ENTRY
  LPAUDIT_ENTRY* = ptr AUDIT_ENTRY
  HLOG* {.final, pure.} = object
    time*: DWORD
    last_flags*: DWORD
    offset*: DWORD
    rec_offset*: DWORD
  PHLOG* = ptr HLOG
  LPHLOG* = ptr HLOG
  AE_SRVSTATUS* {.final, pure.} = object
    ae_sv_status*: DWORD
  PAE_SRVSTATUS* = ptr AE_SRVSTATUS
  LPAE_SRVSTATUS* = ptr AE_SRVSTATUS
  AE_SESSLOGON* {.final, pure.} = object
    ae_so_compname*: DWORD
    ae_so_username*: DWORD
    ae_so_privilege*: DWORD
  PAE_SESSLOGON* = ptr AE_SESSLOGON
  LPAE_SESSLOGON* = ptr AE_SESSLOGON
  AE_SESSLOGOFF* {.final, pure.} = object
    ae_sf_compname*: DWORD
    ae_sf_username*: DWORD
    ae_sf_reason*: DWORD
  PAE_SESSLOGOFF* = ptr AE_SESSLOGOFF
  LPAE_SESSLOGOFF* = ptr AE_SESSLOGOFF
  AE_SESSPWERR* {.final, pure.} = object
    ae_sp_compname*: DWORD
    ae_sp_username*: DWORD
  PAE_SESSPWERR* = ptr AE_SESSPWERR
  LPAE_SESSPWERR* = ptr AE_SESSPWERR
  AE_CONNSTART* {.final, pure.} = object
    ae_ct_compname*: DWORD
    ae_ct_username*: DWORD
    ae_ct_netname*: DWORD
    ae_ct_connid*: DWORD
  PAE_CONNSTART* = ptr AE_CONNSTART
  LPAE_CONNSTART* = ptr AE_CONNSTART
  AE_CONNSTOP* {.final, pure.} = object
    ae_cp_compname*: DWORD
    ae_cp_username*: DWORD
    ae_cp_netname*: DWORD
    ae_cp_connid*: DWORD
    ae_cp_reason*: DWORD
  PAE_CONNSTOP* = ptr AE_CONNSTOP
  LPAE_CONNSTOP* = ptr AE_CONNSTOP
  AE_CONNREJ* {.final, pure.} = object
    ae_cr_compname*: DWORD
    ae_cr_username*: DWORD
    ae_cr_netname*: DWORD
    ae_cr_reason*: DWORD
  PAE_CONNREJ* = ptr AE_CONNREJ
  LPAE_CONNREJ* = ptr AE_CONNREJ
  AE_RESACCESS* {.final, pure.} = object
    ae_ra_compname*: DWORD
    ae_ra_username*: DWORD
    ae_ra_resname*: DWORD
    ae_ra_operation*: DWORD
    ae_ra_returncode*: DWORD
    ae_ra_restype*: DWORD
    ae_ra_fileid*: DWORD
  PAE_RESACCESS* = ptr AE_RESACCESS
  LPAE_RESACCESS* = ptr AE_RESACCESS
  AE_RESACCESSREJ* {.final, pure.} = object
    ae_rr_compname*: DWORD
    ae_rr_username*: DWORD
    ae_rr_resname*: DWORD
    ae_rr_operation*: DWORD
  PAE_RESACCESSREJ* = ptr AE_RESACCESSREJ
  LPAE_RESACCESSREJ* = ptr AE_RESACCESSREJ
  AE_CLOSEFILE* {.final, pure.} = object
    ae_cf_compname*: DWORD
    ae_cf_username*: DWORD
    ae_cf_resname*: DWORD
    ae_cf_fileid*: DWORD
    ae_cf_duration*: DWORD
    ae_cf_reason*: DWORD
  PAE_CLOSEFILE* = ptr AE_CLOSEFILE
  LPAE_CLOSEFILE* = ptr AE_CLOSEFILE
  AE_SERVICESTAT* {.final, pure.} = object
    ae_ss_compname*: DWORD
    ae_ss_username*: DWORD
    ae_ss_svcname*: DWORD
    ae_ss_status*: DWORD
    ae_ss_code*: DWORD
    ae_ss_text*: DWORD
    ae_ss_returnval*: DWORD
  PAE_SERVICESTAT* = ptr AE_SERVICESTAT
  LPAE_SERVICESTAT* = ptr AE_SERVICESTAT
  AE_ACLMOD* {.final, pure.} = object
    ae_am_compname*: DWORD
    ae_am_username*: DWORD
    ae_am_resname*: DWORD
    ae_am_action*: DWORD
    ae_am_datalen*: DWORD
  PAE_ACLMOD* = ptr AE_ACLMOD
  LPAE_ACLMOD* = ptr AE_ACLMOD
  AE_UASMOD* {.final, pure.} = object
    ae_um_compname*: DWORD
    ae_um_username*: DWORD
    ae_um_resname*: DWORD
    ae_um_rectype*: DWORD
    ae_um_action*: DWORD
    ae_um_datalen*: DWORD
  PAE_UASMOD* = ptr AE_UASMOD
  LPAE_UASMOD* = ptr AE_UASMOD
  AE_NETLOGON* {.final, pure.} = object
    ae_no_compname*: DWORD
    ae_no_username*: DWORD
    ae_no_privilege*: DWORD
    ae_no_authflags*: DWORD
  PAE_NETLOGON* = ptr AE_NETLOGON
  LPAE_NETLOGON* = ptr AE_NETLOGON
  AE_NETLOGOFF* {.final, pure.} = object
    ae_nf_compname*: DWORD
    ae_nf_username*: DWORD
    ae_nf_reserved1*: DWORD
    ae_nf_reserved2*: DWORD
  PAE_NETLOGOFF* = ptr AE_NETLOGOFF
  LPAE_NETLOGOFF* = ptr AE_NETLOGOFF
  AE_ACCLIM* {.final, pure.} = object
    ae_al_compname*: DWORD
    ae_al_username*: DWORD
    ae_al_resname*: DWORD
    ae_al_limit*: DWORD
  PAE_ACCLIM* = ptr AE_ACCLIM
  LPAE_ACCLIM* = ptr AE_ACCLIM
  AE_LOCKOUT* {.final, pure.} = object
    ae_lk_compname*: DWORD
    ae_lk_username*: DWORD
    ae_lk_action*: DWORD
    ae_lk_bad_pw_count*: DWORD
  PAE_LOCKOUT* = ptr AE_LOCKOUT
  LPAE_LOCKOUT* = ptr AE_LOCKOUT
  AE_GENERIC* {.final, pure.} = object
    ae_ge_msgfile*: DWORD
    ae_ge_msgnum*: DWORD
    ae_ge_params*: DWORD
    ae_ge_param1*: DWORD
    ae_ge_param2*: DWORD
    ae_ge_param3*: DWORD
    ae_ge_param4*: DWORD
    ae_ge_param5*: DWORD
    ae_ge_param6*: DWORD
    ae_ge_param7*: DWORD
    ae_ge_param8*: DWORD
    ae_ge_param9*: DWORD
  PAE_GENERIC* = ptr AE_GENERIC
  LPAE_GENERIC* = ptr AE_GENERIC

proc NetAuditClear*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetAuditRead*(P1: LPTSTR, P2: LPTSTR, P3: LPHLOG, P4: DWORD, P5: PDWORD, P6: DWORD, P7: DWORD, P8: ptr PBYTE, P9: DWORD, P10: PDWORD, P11: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetAuditWrite*(P1: DWORD, P2: PBYTE, P3: DWORD, P4: LPTSTR, P5: PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmbrowsr.nim

const
  BROWSER_ROLE_PDC* = 1
  BROWSER_ROLE_BDC* = 2

type
  BROWSER_STATISTICS* {.final, pure.} = object
    StatisticsStartTime*: LARGE_INTEGER
    NumberOfServerAnnouncements*: LARGE_INTEGER
    NumberOfDomainAnnouncements*: LARGE_INTEGER
    NumberOfElectionPackets*: ULONG
    NumberOfMailslotWrites*: ULONG
    NumberOfGetBrowserServerListRequests*: ULONG
    NumberOfServerEnumerations*: ULONG
    NumberOfDomainEnumerations*: ULONG
    NumberOfOtherEnumerations*: ULONG
    NumberOfMissedServerAnnouncements*: ULONG
    NumberOfMissedMailslotDatagrams*: ULONG
    NumberOfMissedGetBrowserServerListRequests*: ULONG
    NumberOfFailedServerAnnounceAllocations*: ULONG
    NumberOfFailedMailslotAllocations*: ULONG
    NumberOfFailedMailslotReceives*: ULONG
    NumberOfFailedMailslotWrites*: ULONG
    NumberOfFailedMailslotOpens*: ULONG
    NumberOfDuplicateMasterAnnouncements*: ULONG
    NumberOfIllegalDatagrams*: LARGE_INTEGER
  PBROWSER_STATISTICS* = ptr BROWSER_STATISTICS
  LPBROWSER_STATISTICS* = ptr BROWSER_STATISTICS
  BROWSER_STATISTICS_100* {.final, pure.} = object
    StartTime*: LARGE_INTEGER
    NumberOfServerAnnouncements*: LARGE_INTEGER
    NumberOfDomainAnnouncements*: LARGE_INTEGER
    NumberOfElectionPackets*: ULONG
    NumberOfMailslotWrites*: ULONG
    NumberOfGetBrowserServerListRequests*: ULONG
    NumberOfIllegalDatagrams*: LARGE_INTEGER
  PBROWSER_STATISTICS_100* = ptr BROWSER_STATISTICS_100
  BROWSER_STATISTICS_101* {.final, pure.} = object
    StartTime*: LARGE_INTEGER
    NumberOfServerAnnouncements*: LARGE_INTEGER
    NumberOfDomainAnnouncements*: LARGE_INTEGER
    NumberOfElectionPackets*: ULONG
    NumberOfMailslotWrites*: ULONG
    NumberOfGetBrowserServerListRequests*: ULONG
    NumberOfIllegalDatagrams*: LARGE_INTEGER
    NumberOfMissedServerAnnouncements*: ULONG
    NumberOfMissedMailslotDatagrams*: ULONG
    NumberOfMissedGetBrowserServerListRequests*: ULONG
    NumberOfFailedServerAnnounceAllocations*: ULONG
    NumberOfFailedMailslotAllocations*: ULONG
    NumberOfFailedMailslotReceives*: ULONG
    NumberOfFailedMailslotWrites*: ULONG
    NumberOfFailedMailslotOpens*: ULONG
    NumberOfDuplicateMasterAnnouncements*: ULONG
  PBROWSER_STATISTICS_101* = ptr BROWSER_STATISTICS_101

proc I_BrowserServerEnum*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: ptr PBYTE, P6: DWORD, P7: PDWORD, P8: PDWORD, P9: DWORD, P10: LPCWSTR, P11: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc I_BrowserServerEnumEx*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: ptr PBYTE, P6: DWORD, P7: PDWORD, P8: PDWORD, P9: DWORD, P10: LPCWSTR, P11: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc I_BrowserQueryEmulatedDomains*(P1: LPWSTR, P2: ptr PBYTE, P3: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc I_BrowserQueryOtherDomains*(P1: LPCWSTR, P2: ptr PBYTE, P3: PDWORD, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc I_BrowserResetNetlogonState*(P1: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc I_BrowserSetNetlogonState*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR, P4: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc I_BrowserQueryStatistics*(P1: LPCWSTR, P2: ptr LPBROWSER_STATISTICS): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc I_BrowserResetStatistics*(P1: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc I_BrowserServerEnumForXactsrv*(P1: LPCWSTR, P2: LPCWSTR, P3: ULONG, P4: USHORT, P5: PVOID, P6: WORD, P7: DWORD, P8: PDWORD, P9: PDWORD, P10: DWORD, P11: LPCWSTR, P12: LPCWSTR, P13: PWORD): WORD {.winapi, dynlib: "netapi32", importc.}
proc I_BrowserDebugTrace*(P1: PWCHAR, P2: PCHAR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmchdev.nim

const
  CHARDEVQ_NO_REQUESTS* = -1
  CHARDEV_CLOSE* = 0
  CHARDEVQ_MAX_PRIORITY* = 1
  CHARDEVQ_DEV_PARMNUM* = 1
  HANDLE_INFO_LEVEL_1* = 1
  HANDLE_CHARTIME_PARMNUM* = 1
  HANDLE_CHARCOUNT_PARMNUM* = 2
  CHARDEV_STAT_OPENED* = 2
  CHARDEVQ_PRIORITY_PARMNUM* = 2
  CHARDEVQ_DEVS_PARMNUM* = 3
  CHARDEV_STAT_ERROR* = 4
  CHARDEVQ_NUMUSERS_PARMNUM* = 4
  CHARDEVQ_NUMAHEAD_PARMNUM* = 5
  CHARDEVQ_DEF_PRIORITY* = 5
  CHARDEVQ_PRIORITY_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+CHARDEVQ_PRIORITY_PARMNUM
  CHARDEVQ_DEVS_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+CHARDEVQ_DEVS_PARMNUM
  CHARDEVQ_MIN_PRIORITY* = 9

type
  CHARDEV_INFO_0* {.final, pure.} = object
    ch0_dev*: LPWSTR
  PCHARDEV_INFO_0* = ptr CHARDEV_INFO_0
  LPCHARDEV_INFO_0* = ptr CHARDEV_INFO_0
  CHARDEV_INFO_1* {.final, pure.} = object
    ch1_dev*: LPWSTR
    ch1_status*: DWORD
    ch1_username*: LPWSTR
    ch1_time*: DWORD
  PCHARDEV_INFO_1* = ptr CHARDEV_INFO_1
  LPCHARDEV_INFO_1* = ptr CHARDEV_INFO_1
  CHARDEVQ_INFO_0* {.final, pure.} = object
    cq0_dev*: LPWSTR
  PCHARDEVQ_INFO_0* = ptr CHARDEVQ_INFO_0
  LPCHARDEVQ_INFO_0* = ptr CHARDEVQ_INFO_0
  CHARDEVQ_INFO_1* {.final, pure.} = object
    cq1_dev*: LPWSTR
    cq1_priority*: DWORD
    cq1_devs*: LPWSTR
    cq1_numusers*: DWORD
    cq1_numahead*: DWORD
  PCHARDEVQ_INFO_1* = ptr CHARDEVQ_INFO_1
  LPCHARDEVQ_INFO_1* = ptr CHARDEVQ_INFO_1
  CHARDEVQ_INFO_1002* {.final, pure.} = object
    cq1002_priority*: DWORD
  PCHARDEVQ_INFO_1002* = ptr CHARDEVQ_INFO_1002
  LPCHARDEVQ_INFO_1002* = ptr CHARDEVQ_INFO_1002
  CHARDEVQ_INFO_1003* {.final, pure.} = object
    cq1003_devs*: LPWSTR
  PCHARDEVQ_INFO_1003* = ptr CHARDEVQ_INFO_1003
  LPCHARDEVQ_INFO_1003* = ptr CHARDEVQ_INFO_1003
  HANDLE_INFO_1* {.final, pure.} = object
    hdli1_chartime*: DWORD
    hdli1_charcount*: DWORD
  PHANDLE_INFO_1* = ptr HANDLE_INFO_1
  LPHANDLE_INFO_1* = ptr HANDLE_INFO_1

proc NetCharDevEnum*(P1: LPCWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetCharDevGetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetCharDevControl*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetCharDevQEnum*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD, P8: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetCharDevQGetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetCharDevQSetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: PBYTE, P5: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetCharDevQPurge*(P1: LPCWSTR, P2: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetCharDevQPurgeSelf*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetHandleGetInfo*(P1: HANDLE, P2: DWORD, P3: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetHandleSetInfo*(P1: HANDLE, P2: DWORD, P3: PBYTE, P4: DWORD, P5: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmconfig.nim

type
  CONFIG_INFO_0* {.final, pure.} = object
    cfgi0_key*: LPWSTR
    cfgi0_data*: LPWSTR
  PCONFIG_INFO_0* = ptr CONFIG_INFO_0
  LPCONFIG_INFO_0* = ptr CONFIG_INFO_0

proc NetConfigGet*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetConfigGetAll*(P1: LPCWSTR, P2: LPCWSTR, P3: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetConfigSet*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: DWORD, P5: DWORD, P6: PBYTE, P7: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmerrlog.nim

const
  ERRLOG_BASE* = 3100
  ERRLOG2_BASE* = 5700
  NELOG_Internal_Error* = ERRLOG_BASE
  NELOG_Resource_Shortage* = ( ERRLOG_BASE+1 )
  NELOG_Unable_To_Lock_Segment* = ( ERRLOG_BASE+2 )
  NELOG_Unable_To_Unlock_Segment* = ( ERRLOG_BASE+3 )
  NELOG_Uninstall_Service* = ( ERRLOG_BASE+4 )
  NELOG_Init_Exec_Fail* = ( ERRLOG_BASE+5 )
  NELOG_Ncb_Error* = ( ERRLOG_BASE+6 )
  NELOG_Net_Not_Started* = ( ERRLOG_BASE+7 )
  NELOG_Ioctl_Error* = ( ERRLOG_BASE+8 )
  NELOG_System_Semaphore* = ( ERRLOG_BASE+9 )
  NELOG_Init_OpenCreate_Err* = ( ERRLOG_BASE+10 )
  NELOG_NetBios* = ( ERRLOG_BASE+11 )
  NELOG_SMB_Illegal* = ( ERRLOG_BASE+12 )
  NELOG_Service_Fail* = ( ERRLOG_BASE+13 )
  NELOG_Entries_Lost* = ( ERRLOG_BASE+14 )
  NELOG_Init_Seg_Overflow* = ( ERRLOG_BASE+20 )
  NELOG_Srv_No_Mem_Grow* = ( ERRLOG_BASE+21 )
  NELOG_Access_File_Bad* = ( ERRLOG_BASE+22 )
  NELOG_Srvnet_Not_Started* = ( ERRLOG_BASE+23 )
  NELOG_Init_Chardev_Err* = ( ERRLOG_BASE+24 )
  NELOG_Remote_API* = ( ERRLOG_BASE+25 )
  NELOG_Ncb_TooManyErr* = ( ERRLOG_BASE+26 )
  NELOG_Mailslot_err* = ( ERRLOG_BASE+27 )
  NELOG_ReleaseMem_Alert* = ( ERRLOG_BASE+28 )
  NELOG_AT_cannot_write* = ( ERRLOG_BASE+29 )
  NELOG_Cant_Make_Msg_File* = ( ERRLOG_BASE+30 )
  NELOG_Exec_Netservr_NoMem* = ( ERRLOG_BASE+31 )
  NELOG_Server_Lock_Failure* = ( ERRLOG_BASE+32 )
  NELOG_Msg_Shutdown* = ( ERRLOG_BASE+40 )
  NELOG_Msg_Sem_Shutdown* = ( ERRLOG_BASE+41 )
  NELOG_Msg_Log_Err* = ( ERRLOG_BASE+50 )
  NELOG_VIO_POPUP_ERR* = ( ERRLOG_BASE+51 )
  NELOG_Msg_Unexpected_SMB_Type* = ( ERRLOG_BASE+52 )
  NELOG_Wksta_Infoseg* = ( ERRLOG_BASE+60 )
  NELOG_Wksta_Compname* = ( ERRLOG_BASE+61 )
  NELOG_Wksta_BiosThreadFailure* = ( ERRLOG_BASE+62 )
  NELOG_Wksta_IniSeg* = ( ERRLOG_BASE+63 )
  NELOG_Wksta_HostTab_Full* = ( ERRLOG_BASE+64 )
  NELOG_Wksta_Bad_Mailslot_SMB* = ( ERRLOG_BASE+65 )
  NELOG_Wksta_UASInit* = ( ERRLOG_BASE+66 )
  NELOG_Wksta_SSIRelogon* = ( ERRLOG_BASE+67 )
  NELOG_Build_Name* = ( ERRLOG_BASE+70 )
  NELOG_Name_Expansion* = ( ERRLOG_BASE+71 )
  NELOG_Message_Send* = ( ERRLOG_BASE+72 )
  NELOG_Mail_Slt_Err* = ( ERRLOG_BASE+73 )
  NELOG_AT_cannot_read* = ( ERRLOG_BASE+74 )
  NELOG_AT_sched_err* = ( ERRLOG_BASE+75 )
  NELOG_AT_schedule_file_created* = ( ERRLOG_BASE+76 )
  NELOG_Srvnet_NB_Open* = ( ERRLOG_BASE+77 )
  NELOG_AT_Exec_Err* = ( ERRLOG_BASE+78 )
  NELOG_Lazy_Write_Err* = ( ERRLOG_BASE+80 )
  NELOG_HotFix* = ( ERRLOG_BASE+81 )
  NELOG_HardErr_From_Server* = ( ERRLOG_BASE+82 )
  NELOG_LocalSecFail1* = ( ERRLOG_BASE+83 )
  NELOG_LocalSecFail2* = ( ERRLOG_BASE+84 )
  NELOG_LocalSecFail3* = ( ERRLOG_BASE+85 )
  NELOG_LocalSecGeneralFail* = ( ERRLOG_BASE+86 )
  NELOG_NetWkSta_Internal_Error* = ( ERRLOG_BASE+90 )
  NELOG_NetWkSta_No_Resource* = ( ERRLOG_BASE+91 )
  NELOG_NetWkSta_SMB_Err* = ( ERRLOG_BASE+92 )
  NELOG_NetWkSta_VC_Err* = ( ERRLOG_BASE+93 )
  NELOG_NetWkSta_Stuck_VC_Err* = ( ERRLOG_BASE+94 )
  NELOG_NetWkSta_NCB_Err* = ( ERRLOG_BASE+95 )
  NELOG_NetWkSta_Write_Behind_Err* = ( ERRLOG_BASE+96 )
  NELOG_NetWkSta_Reset_Err* = ( ERRLOG_BASE+97 )
  NELOG_NetWkSta_Too_Many* = ( ERRLOG_BASE+98 )
  NELOG_Srv_Thread_Failure* = ( ERRLOG_BASE+104 )
  NELOG_Srv_Close_Failure* = ( ERRLOG_BASE+105 )
  NELOG_ReplUserCurDir* = ( ERRLOG_BASE+106 )
  NELOG_ReplCannotMasterDir* = ( ERRLOG_BASE+107 )
  NELOG_ReplUpdateError* = ( ERRLOG_BASE+108 )
  NELOG_ReplLostMaster* = ( ERRLOG_BASE+109 )
  NELOG_NetlogonAuthDCFail* = ( ERRLOG_BASE+110 )
  NELOG_ReplLogonFailed* = ( ERRLOG_BASE+111 )
  NELOG_ReplNetErr* = ( ERRLOG_BASE+112 )
  NELOG_ReplMaxFiles* = ( ERRLOG_BASE+113 )
  NELOG_ReplMaxTreeDepth* = ( ERRLOG_BASE+114 )
  NELOG_ReplBadMsg* = ( ERRLOG_BASE+115 )
  NELOG_ReplSysErr* = ( ERRLOG_BASE+116 )
  NELOG_ReplUserLoged* = ( ERRLOG_BASE+117 )
  NELOG_ReplBadImport* = ( ERRLOG_BASE+118 )
  NELOG_ReplBadExport* = ( ERRLOG_BASE+119 )
  NELOG_ReplSignalFileErr* = ( ERRLOG_BASE+120 )
  NELOG_DiskFT* = ( ERRLOG_BASE+121 )
  NELOG_ReplAccessDenied* = ( ERRLOG_BASE+122 )
  NELOG_NetlogonFailedPrimary* = ( ERRLOG_BASE+123 )
  NELOG_NetlogonPasswdSetFailed* = ( ERRLOG_BASE+124 )
  NELOG_NetlogonTrackingError* = ( ERRLOG_BASE+125 )
  NELOG_NetlogonSyncError* = ( ERRLOG_BASE+126 )
  NELOG_UPS_PowerOut* = ( ERRLOG_BASE+130 )
  NELOG_UPS_Shutdown* = ( ERRLOG_BASE+131 )
  NELOG_UPS_CmdFileError* = ( ERRLOG_BASE+132 )
  NELOG_UPS_CannotOpenDriver* = ( ERRLOG_BASE+133 )
  NELOG_UPS_PowerBack* = ( ERRLOG_BASE+134 )
  NELOG_UPS_CmdFileConfig* = ( ERRLOG_BASE+135 )
  NELOG_UPS_CmdFileExec* = ( ERRLOG_BASE+136 )
  NELOG_Missing_Parameter* = ( ERRLOG_BASE+150 )
  NELOG_Invalid_Config_Line* = ( ERRLOG_BASE+151 )
  NELOG_Invalid_Config_File* = ( ERRLOG_BASE+152 )
  NELOG_File_Changed* = ( ERRLOG_BASE+153 )
  NELOG_Files_Dont_Fit* = ( ERRLOG_BASE+154 )
  NELOG_Wrong_DLL_Version* = ( ERRLOG_BASE+155 )
  NELOG_Error_in_DLL* = ( ERRLOG_BASE+156 )
  NELOG_System_Error* = ( ERRLOG_BASE+157 )
  NELOG_FT_ErrLog_Too_Large* = ( ERRLOG_BASE+158 )
  NELOG_FT_Update_In_Progress* = ( ERRLOG_BASE+159 )
  NELOG_OEM_Code* = ( ERRLOG_BASE+199 )
  NELOG_NetlogonSSIInitError* = ERRLOG2_BASE
  NELOG_NetlogonFailedToUpdateTrustList* = ( ERRLOG2_BASE+1 )
  NELOG_NetlogonFailedToAddRpcInterface* = ( ERRLOG2_BASE+2 )
  NELOG_NetlogonFailedToReadMailslot* = ( ERRLOG2_BASE+3 )
  NELOG_NetlogonFailedToRegisterSC* = ( ERRLOG2_BASE+4 )
  NELOG_NetlogonChangeLogCorrupt* = ( ERRLOG2_BASE+5 )
  NELOG_NetlogonFailedToCreateShare* = ( ERRLOG2_BASE+6 )
  NELOG_NetlogonDownLevelLogonFailed* = ( ERRLOG2_BASE+7 )
  NELOG_NetlogonDownLevelLogoffFailed* = ( ERRLOG2_BASE+8 )
  NELOG_NetlogonNTLogonFailed* = ( ERRLOG2_BASE+9 )
  NELOG_NetlogonNTLogoffFailed* = ( ERRLOG2_BASE+10 )
  NELOG_NetlogonPartialSyncCallSuccess* = ( ERRLOG2_BASE+11 )
  NELOG_NetlogonPartialSyncCallFailed* = ( ERRLOG2_BASE+12 )
  NELOG_NetlogonFullSyncCallSuccess* = ( ERRLOG2_BASE+13 )
  NELOG_NetlogonFullSyncCallFailed* = ( ERRLOG2_BASE+14 )
  NELOG_NetlogonPartialSyncSuccess* = ( ERRLOG2_BASE+15 )
  NELOG_NetlogonPartialSyncFailed* = ( ERRLOG2_BASE+16 )
  NELOG_NetlogonFullSyncSuccess* = ( ERRLOG2_BASE+17 )
  NELOG_NetlogonFullSyncFailed* = ( ERRLOG2_BASE+18 )
  NELOG_NetlogonAuthNoDomainController* = ( ERRLOG2_BASE+19 )
  NELOG_NetlogonAuthNoTrustLsaSecret* = ( ERRLOG2_BASE+20 )
  NELOG_NetlogonAuthNoTrustSamAccount* = ( ERRLOG2_BASE+21 )
  NELOG_NetlogonServerAuthFailed* = ( ERRLOG2_BASE+22 )
  NELOG_NetlogonServerAuthNoTrustSamAccount* = ( ERRLOG2_BASE+23 )
  NELOG_FailedToRegisterSC* = ( ERRLOG2_BASE+24 )
  NELOG_FailedToSetServiceStatus* = ( ERRLOG2_BASE+25 )
  NELOG_FailedToGetComputerName* = ( ERRLOG2_BASE+26 )
  NELOG_DriverNotLoaded* = ( ERRLOG2_BASE+27 )
  NELOG_NoTranportLoaded* = ( ERRLOG2_BASE+28 )
  NELOG_NetlogonFailedDomainDelta* = ( ERRLOG2_BASE+29 )
  NELOG_NetlogonFailedGlobalGroupDelta* = ( ERRLOG2_BASE+30 )
  NELOG_NetlogonFailedLocalGroupDelta* = ( ERRLOG2_BASE+31 )
  NELOG_NetlogonFailedUserDelta* = ( ERRLOG2_BASE+32 )
  NELOG_NetlogonFailedPolicyDelta* = ( ERRLOG2_BASE+33 )
  NELOG_NetlogonFailedTrustedDomainDelta* = ( ERRLOG2_BASE+34 )
  NELOG_NetlogonFailedAccountDelta* = ( ERRLOG2_BASE+35 )
  NELOG_NetlogonFailedSecretDelta* = ( ERRLOG2_BASE+36 )
  NELOG_NetlogonSystemError* = ( ERRLOG2_BASE+37 )
  NELOG_NetlogonDuplicateMachineAccounts* = ( ERRLOG2_BASE+38 )
  NELOG_NetlogonTooManyGlobalGroups* = ( ERRLOG2_BASE+39 )
  NELOG_NetlogonBrowserDriver* = ( ERRLOG2_BASE+40 )
  NELOG_NetlogonAddNameFailure* = ( ERRLOG2_BASE+41 )
  NELOG_RplMessages* = ( ERRLOG2_BASE+42 )
  NELOG_RplXnsBoot* = ( ERRLOG2_BASE+43 )
  NELOG_RplSystem* = ( ERRLOG2_BASE+44 )
  NELOG_RplWkstaTimeout* = ( ERRLOG2_BASE+45 )
  NELOG_RplWkstaFileOpen* = ( ERRLOG2_BASE+46 )
  NELOG_RplWkstaFileRead* = ( ERRLOG2_BASE+47 )
  NELOG_RplWkstaMemory* = ( ERRLOG2_BASE+48 )
  NELOG_RplWkstaFileChecksum* = ( ERRLOG2_BASE+49 )
  NELOG_RplWkstaFileLineCount* = ( ERRLOG2_BASE+50 )
  NELOG_RplWkstaBbcFile* = ( ERRLOG2_BASE+51 )
  NELOG_RplWkstaFileSize* = ( ERRLOG2_BASE+52 )
  NELOG_RplWkstaInternal* = ( ERRLOG2_BASE+53 )
  NELOG_RplWkstaWrongVersion* = ( ERRLOG2_BASE+54 )
  NELOG_RplWkstaNetwork* = ( ERRLOG2_BASE+55 )
  NELOG_RplAdapterResource* = ( ERRLOG2_BASE+56 )
  NELOG_RplFileCopy* = ( ERRLOG2_BASE+57 )
  NELOG_RplFileDelete* = ( ERRLOG2_BASE+58 )
  NELOG_RplFilePerms* = ( ERRLOG2_BASE+59 )
  NELOG_RplCheckConfigs* = ( ERRLOG2_BASE+60 )
  NELOG_RplCreateProfiles* = ( ERRLOG2_BASE+61 )
  NELOG_RplRegistry* = ( ERRLOG2_BASE+62 )
  NELOG_RplReplaceRPLDISK* = ( ERRLOG2_BASE+63 )
  NELOG_RplCheckSecurity* = ( ERRLOG2_BASE+64 )
  NELOG_RplBackupDatabase* = ( ERRLOG2_BASE+65 )
  NELOG_RplInitDatabase* = ( ERRLOG2_BASE+66 )
  NELOG_RplRestoreDatabaseFailure* = ( ERRLOG2_BASE+67 )
  NELOG_RplRestoreDatabaseSuccess* = ( ERRLOG2_BASE+68 )
  NELOG_RplInitRestoredDatabase* = ( ERRLOG2_BASE+69 )
  NELOG_NetlogonSessionTypeWrong* = ( ERRLOG2_BASE+70 )

type
  ERROR_LOG* {.final, pure.} = object
    el_len*: DWORD
    el_reserved*: DWORD
    el_time*: DWORD
    el_error*: DWORD
    el_name*: LPWSTR
    el_text*: LPWSTR
    el_data*: LPBYTE
    el_data_size*: DWORD
    el_nstrings*: DWORD
  PERROR_LOG* = ptr ERROR_LOG
  # LPERROR_LOG* = ptr ERROR_LOG

proc NetErrorLogClear*(P1: LPCWSTR, P2: LPCWSTR, P3: LPBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetErrorLogRead*(P1: LPCWSTR, P2: LPWSTR, P3: LPHLOG, P4: DWORD, P5: LPDWORD, P6: DWORD, P7: DWORD, P8: ptr LPBYTE, P9: DWORD, P10: LPDWORD, P11: LPDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetErrorLogWrite*(P1: LPBYTE, P2: DWORD, P3: LPCWSTR, P4: LPBYTE, P5: DWORD, P6: LPBYTE, P7: DWORD, P8: LPBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmmsg.nim

const
  MSGNAME_NOT_FORWARDED* = 0
  MSGNAME_FORWARDED_TO* = 4
  MSGNAME_FORWARDED_FROM* = 16

type
  MSG_INFO_0* {.final, pure.} = object
    msgi0_name*: LPWSTR
  PMSG_INFO_0* = ptr MSG_INFO_0
  LPMSG_INFO_0* = ptr MSG_INFO_0
  MSG_INFO_1* {.final, pure.} = object
    msgi1_name*: LPWSTR
    msgi1_forward_flag*: DWORD
    msgi1_forward*: LPWSTR
  PMSG_INFO_1* = ptr MSG_INFO_1
  LPMSG_INFO_1* = ptr MSG_INFO_1

proc NetMessageBufferSend*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR, P4: PBYTE, P5: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetMessageNameAdd*(P1: LPCWSTR, P2: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetMessageNameDel*(P1: LPCWSTR, P2: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetMessageNameEnum*(P1: LPCWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetMessageNameGetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmremutl.nim

const
  SUPPORTS_REMOTE_ADMIN_PROTOCOL* = 2
  SUPPORTS_RPC* = 4
  SUPPORTS_SAM_PROTOCOL* = 8
  SUPPORTS_UNICODE* = 16
  SUPPORTS_LOCAL* = 32
  SUPPORTS_ANY* = -1
  NO_PERMISSION_REQUIRED* = 1
  ALLOCATE_RESPONSE* = 2
  USE_SPECIFIC_TRANSPORT* = 0x80000000'i32

type
  DESC_CHAR* = TCHAR
  LPDESC* = ptr DESC_CHAR
  TIME_OF_DAY_INFO* {.final, pure.} = object
    tod_elapsedt*: DWORD
    tod_msecs*: DWORD
    tod_hours*: DWORD
    tod_mins*: DWORD
    tod_secs*: DWORD
    tod_hunds*: DWORD
    tod_timezone*: LONG
    tod_tinterval*: DWORD
    tod_day*: DWORD
    tod_month*: DWORD
    tod_year*: DWORD
    tod_weekday*: DWORD
  PTIME_OF_DAY_INFO* = ptr TIME_OF_DAY_INFO
  LPTIME_OF_DAY_INFO* = ptr TIME_OF_DAY_INFO

proc NetRemoteTOD*(P1: LPCWSTR, P2: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetRemoteComputerSupports*(P1: LPCWSTR, P2: DWORD, P3: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc RxRemoteApi*(P1: DWORD, P2: LPCWSTR, P3: LPDESC, P4: LPDESC, P5: LPDESC, P6: LPDESC, P7: LPDESC, P8: LPDESC, P9: LPDESC, P10: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", varargs, importc.}

# net/lmrepl.nim

const
  REPL_ROLE_EXPORT* = 1
  REPL_ROLE_IMPORT* = 2
  REPL_ROLE_BOTH* = 3
  REPL_INTERVAL_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+0
  REPL_PULSE_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+1
  REPL_GUARDTIME_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+2
  REPL_RANDOM_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+3
  REPL_UNLOCK_NOFORCE* = 0
  REPL_UNLOCK_FORCE* = 1
  REPL_STATE_OK* = 0
  REPL_STATE_NO_MASTER* = 1
  REPL_STATE_NO_SYNC* = 2
  REPL_STATE_NEVER_REPLICATED* = 3
  REPL_INTEGRITY_FILE* = 1
  REPL_INTEGRITY_TREE* = 2
  REPL_EXTENT_FILE* = 1
  REPL_EXTENT_TREE* = 2
  REPL_EXPORT_INTEGRITY_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+0
  REPL_EXPORT_EXTENT_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL+1

type
  REPL_INFO_0* {.final, pure.} = object
    rp0_role*: DWORD
    rp0_exportpath*: LPWSTR
    rp0_exportlist*: LPWSTR
    rp0_importpath*: LPWSTR
    rp0_importlist*: LPWSTR
    rp0_logonusername*: LPWSTR
    rp0_interval*: DWORD
    rp0_pulse*: DWORD
    rp0_guardtime*: DWORD
    rp0_random*: DWORD
  PREPL_INFO_0* = ptr REPL_INFO_0
  LPREPL_INFO_0* = ptr REPL_INFO_0
  REPL_INFO_1000* {.final, pure.} = object
    rp1000_interval*: DWORD
  PREPL_INFO_1000* = ptr REPL_INFO_1000
  LPREPL_INFO_1000* = ptr REPL_INFO_1000
  REPL_INFO_1001* {.final, pure.} = object
    rp1001_pulse*: DWORD
  PREPL_INFO_1001* = ptr REPL_INFO_1001
  LPREPL_INFO_1001* = ptr REPL_INFO_1001
  REPL_INFO_1002* {.final, pure.} = object
    rp1002_guardtime*: DWORD
  PREPL_INFO_1002* = ptr REPL_INFO_1002
  LPREPL_INFO_1002* = ptr REPL_INFO_1002
  REPL_INFO_1003* {.final, pure.} = object
    rp1003_random*: DWORD
  PREPL_INFO_1003* = ptr REPL_INFO_1003
  LPREPL_INFO_1003* = ptr REPL_INFO_1003
  REPL_EDIR_INFO_0* {.final, pure.} = object
    rped0_dirname*: LPWSTR
  PREPL_EDIR_INFO_0* = ptr REPL_EDIR_INFO_0
  LPREPL_EDIR_INFO_0* = ptr REPL_EDIR_INFO_0
  REPL_EDIR_INFO_1* {.final, pure.} = object
    rped1_dirname*: LPWSTR
    rped1_integrity*: DWORD
    rped1_extent*: DWORD
  PREPL_EDIR_INFO_1* = ptr REPL_EDIR_INFO_1
  LPREPL_EDIR_INFO_1* = ptr REPL_EDIR_INFO_1
  REPL_EDIR_INFO_2* {.final, pure.} = object
    rped2_dirname*: LPWSTR
    rped2_integrity*: DWORD
    rped2_extent*: DWORD
    rped2_lockcount*: DWORD
    rped2_locktime*: DWORD
  PREPL_EDIR_INFO_2* = ptr REPL_EDIR_INFO_2
  LPREPL_EDIR_INFO_2* = ptr REPL_EDIR_INFO_2
  REPL_EDIR_INFO_1000* {.final, pure.} = object
    rped1000_integrity*: DWORD
  PREPL_EDIR_INFO_1000* = ptr REPL_EDIR_INFO_1000
  LPREPL_EDIR_INFO_1000* = ptr REPL_EDIR_INFO_1000
  REPL_EDIR_INFO_1001* {.final, pure.} = object
    rped1001_extent*: DWORD
  PREPL_EDIR_INFO_1001* = ptr REPL_EDIR_INFO_1001
  LPREPL_EDIR_INFO_1001* = ptr REPL_EDIR_INFO_1001
  REPL_IDIR_INFO_0* {.final, pure.} = object
    rpid0_dirname*: LPWSTR
  PREPL_IDIR_INFO_0* = ptr REPL_IDIR_INFO_0
  LPREPL_IDIR_INFO_0* = ptr REPL_IDIR_INFO_0
  REPL_IDIR_INFO_1* {.final, pure.} = object
    rpid1_dirname*: LPWSTR
    rpid1_state*: DWORD
    rpid1_mastername*: LPWSTR
    rpid1_last_update_time*: DWORD
    rpid1_lockcount*: DWORD
    rpid1_locktime*: DWORD
  PREPL_IDIR_INFO_1* = ptr REPL_IDIR_INFO_1
  LPREPL_IDIR_INFO_1* = ptr REPL_IDIR_INFO_1

proc NetReplGetInfo*(P1: LPCWSTR, P2: DWORD, P3: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplSetInfo*(P1: LPCWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplExportDirAdd*(P1: LPCWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplExportDirDel*(P1: LPCWSTR, P2: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplExportDirEnum*(P1: LPCWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplExportDirGetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplExportDirSetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: PBYTE, P5: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplExportDirLock*(P1: LPCWSTR, P2: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplExportDirUnlock*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplImportDirAdd*(P1: LPCWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplImportDirDel*(P1: LPCWSTR, P2: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplImportDirEnum*(P1: LPCWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplImportDirGetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplImportDirLock*(P1: LPCWSTR, P2: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetReplImportDirUnlock*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmserver.nim

type
  SERVER_INFO_100* {.final, pure.} = object
    sv100_platform_id*: DWORD
    sv100_name*: LPWSTR
  PSERVER_INFO_100* = ptr SERVER_INFO_100
  LPSERVER_INFO_100* = ptr SERVER_INFO_100
  SERVER_INFO_101* {.final, pure.} = object
    sv101_platform_id*: DWORD
    sv101_name*: LPWSTR
    sv101_version_major*: DWORD
    sv101_version_minor*: DWORD
    sv101_type*: DWORD
    sv101_comment*: LPWSTR
  PSERVER_INFO_101* = ptr SERVER_INFO_101
  LPSERVER_INFO_101* = ptr SERVER_INFO_101
  SERVER_INFO_102* {.final, pure.} = object
    sv102_platform_id*: DWORD
    sv102_name*: LPWSTR
    sv102_version_major*: DWORD
    sv102_version_minor*: DWORD
    sv102_type*: DWORD
    sv102_comment*: LPWSTR
    sv102_users*: DWORD
    sv102_disc*: LONG
    sv102_hidden*: BOOL
    sv102_announce*: DWORD
    sv102_anndelta*: DWORD
    sv102_licenses*: DWORD
    sv102_userpath*: LPWSTR
  PSERVER_INFO_102* = ptr SERVER_INFO_102
  LPSERVER_INFO_102* = ptr SERVER_INFO_102
  SERVER_INFO_402* {.final, pure.} = object
    sv402_ulist_mtime*: DWORD
    sv402_glist_mtime*: DWORD
    sv402_alist_mtime*: DWORD
    sv402_alerts*: LPWSTR
    sv402_security*: DWORD
    sv402_numadmin*: DWORD
    sv402_lanmask*: DWORD
    sv402_guestacct*: LPWSTR
    sv402_chdevs*: DWORD
    sv402_chdevq*: DWORD
    sv402_chdevjobs*: DWORD
    sv402_connections*: DWORD
    sv402_shares*: DWORD
    sv402_openfiles*: DWORD
    sv402_sessopens*: DWORD
    sv402_sessvcs*: DWORD
    sv402_sessreqs*: DWORD
    sv402_opensearch*: DWORD
    sv402_activelocks*: DWORD
    sv402_numreqbuf*: DWORD
    sv402_sizreqbuf*: DWORD
    sv402_numbigbuf*: DWORD
    sv402_numfiletasks*: DWORD
    sv402_alertsched*: DWORD
    sv402_erroralert*: DWORD
    sv402_logonalert*: DWORD
    sv402_accessalert*: DWORD
    sv402_diskalert*: DWORD
    sv402_netioalert*: DWORD
    sv402_maxauditsz*: DWORD
    sv402_srvheuristics*: LPWSTR
  PSERVER_INFO_402* = ptr SERVER_INFO_402
  LPSERVER_INFO_402* = ptr SERVER_INFO_402
  SERVER_INFO_403* {.final, pure.} = object
    sv403_ulist_mtime*: DWORD
    sv403_glist_mtime*: DWORD
    sv403_alist_mtime*: DWORD
    sv403_alerts*: LPWSTR
    sv403_security*: DWORD
    sv403_numadmin*: DWORD
    sv403_lanmask*: DWORD
    sv403_guestacct*: LPWSTR
    sv403_chdevs*: DWORD
    sv403_chdevq*: DWORD
    sv403_chdevjobs*: DWORD
    sv403_connections*: DWORD
    sv403_shares*: DWORD
    sv403_openfiles*: DWORD
    sv403_sessopens*: DWORD
    sv403_sessvcs*: DWORD
    sv403_sessreqs*: DWORD
    sv403_opensearch*: DWORD
    sv403_activelocks*: DWORD
    sv403_numreqbuf*: DWORD
    sv403_sizreqbuf*: DWORD
    sv403_numbigbuf*: DWORD
    sv403_numfiletasks*: DWORD
    sv403_alertsched*: DWORD
    sv403_erroralert*: DWORD
    sv403_logonalert*: DWORD
    sv403_accessalert*: DWORD
    sv403_diskalert*: DWORD
    sv403_netioalert*: DWORD
    sv403_maxauditsz*: DWORD
    sv403_srvheuristics*: LPWSTR
    sv403_auditedevents*: DWORD
    sv403_autoprofile*: DWORD
    sv403_autopath*: LPWSTR
  PSERVER_INFO_403* = ptr SERVER_INFO_403
  LPSERVER_INFO_403* = ptr SERVER_INFO_403
  SERVER_INFO_502* {.final, pure.} = object
    sv502_sessopens*: DWORD
    sv502_sessvcs*: DWORD
    sv502_opensearch*: DWORD
    sv502_sizreqbuf*: DWORD
    sv502_initworkitems*: DWORD
    sv502_maxworkitems*: DWORD
    sv502_rawworkitems*: DWORD
    sv502_irpstacksize*: DWORD
    sv502_maxrawbuflen*: DWORD
    sv502_sessusers*: DWORD
    sv502_sessconns*: DWORD
    sv502_maxpagedmemoryusage*: DWORD
    sv502_maxnonpagedmemoryusage*: DWORD
    sv502_enablesoftcompat*: BOOL
    sv502_enableforcedlogoff*: BOOL
    sv502_timesource*: BOOL
    sv502_acceptdownlevelapis*: BOOL
    sv502_lmannounce*: BOOL
  PSERVER_INFO_502* = ptr SERVER_INFO_502
  LPSERVER_INFO_502* = ptr SERVER_INFO_502
  SERVER_INFO_503* {.final, pure.} = object
    sv503_sessopens*: DWORD
    sv503_sessvcs*: DWORD
    sv503_opensearch*: DWORD
    sv503_sizreqbuf*: DWORD
    sv503_initworkitems*: DWORD
    sv503_maxworkitems*: DWORD
    sv503_rawworkitems*: DWORD
    sv503_irpstacksize*: DWORD
    sv503_maxrawbuflen*: DWORD
    sv503_sessusers*: DWORD
    sv503_sessconns*: DWORD
    sv503_maxpagedmemoryusage*: DWORD
    sv503_maxnonpagedmemoryusage*: DWORD
    sv503_enablesoftcompat*: BOOL
    sv503_enableforcedlogoff*: BOOL
    sv503_timesource*: BOOL
    sv503_acceptdownlevelapis*: BOOL
    sv503_lmannounce*: BOOL
    sv503_domain*: LPWSTR
    sv503_maxcopyreadlen*: DWORD
    sv503_maxcopywritelen*: DWORD
    sv503_minkeepsearch*: DWORD
    sv503_maxkeepsearch*: DWORD
    sv503_minkeepcomplsearch*: DWORD
    sv503_maxkeepcomplsearch*: DWORD
    sv503_threadcountadd*: DWORD
    sv503_numblockthreads*: DWORD
    sv503_scavtimeout*: DWORD
    sv503_minrcvqueue*: DWORD
    sv503_minfreeworkitems*: DWORD
    sv503_xactmemsize*: DWORD
    sv503_threadpriority*: DWORD
    sv503_maxmpxct*: DWORD
    sv503_oplockbreakwait*: DWORD
    sv503_oplockbreakresponsewait*: DWORD
    sv503_enableoplocks*: BOOL
    sv503_enableoplockforceclose*: BOOL
    sv503_enablefcbopens*: BOOL
    sv503_enableraw*: BOOL
    sv503_enablesharednetdrives*: BOOL
    sv503_minfreeconnections*: DWORD
    sv503_maxfreeconnections*: DWORD
  PSERVER_INFO_503* = ptr SERVER_INFO_503
  LPSERVER_INFO_503* = ptr SERVER_INFO_503
  SERVER_INFO_599* {.final, pure.} = object
    sv599_sessopens*: DWORD
    sv599_sessvcs*: DWORD
    sv599_opensearch*: DWORD
    sv599_sizreqbuf*: DWORD
    sv599_initworkitems*: DWORD
    sv599_maxworkitems*: DWORD
    sv599_rawworkitems*: DWORD
    sv599_irpstacksize*: DWORD
    sv599_maxrawbuflen*: DWORD
    sv599_sessusers*: DWORD
    sv599_sessconns*: DWORD
    sv599_maxpagedmemoryusage*: DWORD
    sv599_maxnonpagedmemoryusage*: DWORD
    sv599_enablesoftcompat*: BOOL
    sv599_enableforcedlogoff*: BOOL
    sv599_timesource*: BOOL
    sv599_acceptdownlevelapis*: BOOL
    sv599_lmannounce*: BOOL
    sv599_domain*: LPWSTR
    sv599_maxcopyreadlen*: DWORD
    sv599_maxcopywritelen*: DWORD
    sv599_minkeepsearch*: DWORD
    sv599_maxkeepsearch*: DWORD
    sv599_minkeepcomplsearch*: DWORD
    sv599_maxkeepcomplsearch*: DWORD
    sv599_threadcountadd*: DWORD
    sv599_numblockthreads*: DWORD
    sv599_scavtimeout*: DWORD
    sv599_minrcvqueue*: DWORD
    sv599_minfreeworkitems*: DWORD
    sv599_xactmemsize*: DWORD
    sv599_threadpriority*: DWORD
    sv599_maxmpxct*: DWORD
    sv599_oplockbreakwait*: DWORD
    sv599_oplockbreakresponsewait*: DWORD
    sv599_enableoplocks*: BOOL
    sv599_enableoplockforceclose*: BOOL
    sv599_enablefcbopens*: BOOL
    sv599_enableraw*: BOOL
    sv599_enablesharednetdrives*: BOOL
    sv599_minfreeconnections*: DWORD
    sv599_maxfreeconnections*: DWORD
    sv599_initsesstable*: DWORD
    sv599_initconntable*: DWORD
    sv599_initfiletable*: DWORD
    sv599_initsearchtable*: DWORD
    sv599_alertschedule*: DWORD
    sv599_errorthreshold*: DWORD
    sv599_networkerrorthreshold*: DWORD
    sv599_diskspacethreshold*: DWORD
    sv599_reserved*: DWORD
    sv599_maxlinkdelay*: DWORD
    sv599_minlinkthroughput*: DWORD
    sv599_linkinfovalidtime*: DWORD
    sv599_scavqosinfoupdatetime*: DWORD
    sv599_maxworkitemidletime*: DWORD
  PSERVER_INFO_599* = ptr SERVER_INFO_599
  LPSERVER_INFO_599* = ptr SERVER_INFO_599
  SERVER_INFO_598* {.final, pure.} = object
    sv598_maxrawworkitems*: DWORD
    sv598_maxthreadsperqueue*: DWORD
    sv598_producttype*: DWORD
    sv598_serversize*: DWORD
    sv598_connectionlessautodisc*: DWORD
    sv598_sharingviolationretries*: DWORD
    sv598_sharingviolationdelay*: DWORD
    sv598_maxglobalopensearch*: DWORD
    sv598_removeduplicatesearches*: DWORD
    sv598_lockviolationoffset*: DWORD
    sv598_lockviolationdelay*: DWORD
    sv598_mdlreadswitchover*: DWORD
    sv598_cachedopenlimit*: DWORD
    sv598_otherqueueaffinity*: DWORD
    sv598_restrictnullsessaccess*: BOOL
    sv598_enablewfw311directipx*: BOOL
    sv598_queuesamplesecs*: DWORD
    sv598_balancecount*: DWORD
    sv598_preferredaffinity*: DWORD
    sv598_maxfreerfcbs*: DWORD
    sv598_maxfreemfcbs*: DWORD
    sv598_maxfreelfcbs*: DWORD
    sv598_maxfreepagedpoolchunks*: DWORD
    sv598_minpagedpoolchunksize*: DWORD
    sv598_maxpagedpoolchunksize*: DWORD
    sv598_sendsfrompreferredprocessor*: BOOL
  PSERVER_INFO_598* = ptr SERVER_INFO_598
  LPSERVER_INFO_598* = ptr SERVER_INFO_598
  SERVER_INFO_1005* {.final, pure.} = object
    sv1005_comment*: LPWSTR
  PSERVER_INFO_1005* = ptr SERVER_INFO_1005
  LPSERVER_INFO_1005* = ptr SERVER_INFO_1005
  SERVER_INFO_1107* {.final, pure.} = object
    sv1107_users*: DWORD
  PSERVER_INFO_1107* = ptr SERVER_INFO_1107
  LPSERVER_INFO_1107* = ptr SERVER_INFO_1107
  SERVER_INFO_1010* {.final, pure.} = object
    sv1010_disc*: LONG
  PSERVER_INFO_1010* = ptr SERVER_INFO_1010
  LPSERVER_INFO_1010* = ptr SERVER_INFO_1010
  SERVER_INFO_1016* {.final, pure.} = object
    sv1016_hidden*: BOOL
  PSERVER_INFO_1016* = ptr SERVER_INFO_1016
  LPSERVER_INFO_1016* = ptr SERVER_INFO_1016
  SERVER_INFO_1017* {.final, pure.} = object
    sv1017_announce*: DWORD
  PSERVER_INFO_1017* = ptr SERVER_INFO_1017
  LPSERVER_INFO_1017* = ptr SERVER_INFO_1017
  SERVER_INFO_1018* {.final, pure.} = object
    sv1018_anndelta*: DWORD
  PSERVER_INFO_1018* = ptr SERVER_INFO_1018
  LPSERVER_INFO_1018* = ptr SERVER_INFO_1018
  SERVER_INFO_1501* {.final, pure.} = object
    sv1501_sessopens*: DWORD
  PSERVER_INFO_1501* = ptr SERVER_INFO_1501
  LPSERVER_INFO_1501* = ptr SERVER_INFO_1501
  SERVER_INFO_1502* {.final, pure.} = object
    sv1502_sessvcs*: DWORD
  PSERVER_INFO_1502* = ptr SERVER_INFO_1502
  LPSERVER_INFO_1502* = ptr SERVER_INFO_1502
  SERVER_INFO_1503* {.final, pure.} = object
    sv1503_opensearch*: DWORD
  PSERVER_INFO_1503* = ptr SERVER_INFO_1503
  LPSERVER_INFO_1503* = ptr SERVER_INFO_1503
  SERVER_INFO_1506* {.final, pure.} = object
    sv1506_maxworkitems*: DWORD
  PSERVER_INFO_1506* = ptr SERVER_INFO_1506
  LPSERVER_INFO_1506* = ptr SERVER_INFO_1506
  SERVER_INFO_1509* {.final, pure.} = object
    sv1509_maxrawbuflen*: DWORD
  PSERVER_INFO_1509* = ptr SERVER_INFO_1509
  LPSERVER_INFO_1509* = ptr SERVER_INFO_1509
  SERVER_INFO_1510* {.final, pure.} = object
    sv1510_sessusers*: DWORD
  PSERVER_INFO_1510* = ptr SERVER_INFO_1510
  LPSERVER_INFO_1510* = ptr SERVER_INFO_1510
  SERVER_INFO_1511* {.final, pure.} = object
    sv1511_sessconns*: DWORD
  PSERVER_INFO_1511* = ptr SERVER_INFO_1511
  LPSERVER_INFO_1511* = ptr SERVER_INFO_1511
  SERVER_INFO_1512* {.final, pure.} = object
    sv1512_maxnonpagedmemoryusage*: DWORD
  PSERVER_INFO_1512* = ptr SERVER_INFO_1512
  LPSERVER_INFO_1512* = ptr SERVER_INFO_1512
  SERVER_INFO_1513* {.final, pure.} = object
    sv1513_maxpagedmemoryusage*: DWORD
  PSERVER_INFO_1513* = ptr SERVER_INFO_1513
  LPSERVER_INFO_1513* = ptr SERVER_INFO_1513
  SERVER_INFO_1514* {.final, pure.} = object
    sv1514_enablesoftcompat*: BOOL
  PSERVER_INFO_1514* = ptr SERVER_INFO_1514
  LPSERVER_INFO_1514* = ptr SERVER_INFO_1514
  SERVER_INFO_1515* {.final, pure.} = object
    sv1515_enableforcedlogoff*: BOOL
  PSERVER_INFO_1515* = ptr SERVER_INFO_1515
  LPSERVER_INFO_1515* = ptr SERVER_INFO_1515
  SERVER_INFO_1516* {.final, pure.} = object
    sv1516_timesource*: BOOL
  PSERVER_INFO_1516* = ptr SERVER_INFO_1516
  LPSERVER_INFO_1516* = ptr SERVER_INFO_1516
  SERVER_INFO_1518* {.final, pure.} = object
    sv1518_lmannounce*: BOOL
  PSERVER_INFO_1518* = ptr SERVER_INFO_1518
  LPSERVER_INFO_1518* = ptr SERVER_INFO_1518
  SERVER_INFO_1520* {.final, pure.} = object
    sv1520_maxcopyreadlen*: DWORD
  PSERVER_INFO_1520* = ptr SERVER_INFO_1520
  LPSERVER_INFO_1520* = ptr SERVER_INFO_1520
  SERVER_INFO_1521* {.final, pure.} = object
    sv1521_maxcopywritelen*: DWORD
  PSERVER_INFO_1521* = ptr SERVER_INFO_1521
  LPSERVER_INFO_1521* = ptr SERVER_INFO_1521
  SERVER_INFO_1522* {.final, pure.} = object
    sv1522_minkeepsearch*: DWORD
  PSERVER_INFO_1522* = ptr SERVER_INFO_1522
  LPSERVER_INFO_1522* = ptr SERVER_INFO_1522
  SERVER_INFO_1523* {.final, pure.} = object
    sv1523_maxkeepsearch*: DWORD
  PSERVER_INFO_1523* = ptr SERVER_INFO_1523
  LPSERVER_INFO_1523* = ptr SERVER_INFO_1523
  SERVER_INFO_1524* {.final, pure.} = object
    sv1524_minkeepcomplsearch*: DWORD
  PSERVER_INFO_1524* = ptr SERVER_INFO_1524
  LPSERVER_INFO_1524* = ptr SERVER_INFO_1524
  SERVER_INFO_1525* {.final, pure.} = object
    sv1525_maxkeepcomplsearch*: DWORD
  PSERVER_INFO_1525* = ptr SERVER_INFO_1525
  LPSERVER_INFO_1525* = ptr SERVER_INFO_1525
  SERVER_INFO_1528* {.final, pure.} = object
    sv1528_scavtimeout*: DWORD
  PSERVER_INFO_1528* = ptr SERVER_INFO_1528
  LPSERVER_INFO_1528* = ptr SERVER_INFO_1528
  SERVER_INFO_1529* {.final, pure.} = object
    sv1529_minrcvqueue*: DWORD
  PSERVER_INFO_1529* = ptr SERVER_INFO_1529
  LPSERVER_INFO_1529* = ptr SERVER_INFO_1529
  SERVER_INFO_1530* {.final, pure.} = object
    sv1530_minfreeworkitems*: DWORD
  PSERVER_INFO_1530* = ptr SERVER_INFO_1530
  LPSERVER_INFO_1530* = ptr SERVER_INFO_1530
  SERVER_INFO_1533* {.final, pure.} = object
    sv1533_maxmpxct*: DWORD
  PSERVER_INFO_1533* = ptr SERVER_INFO_1533
  LPSERVER_INFO_1533* = ptr SERVER_INFO_1533
  SERVER_INFO_1534* {.final, pure.} = object
    sv1534_oplockbreakwait*: DWORD
  PSERVER_INFO_1534* = ptr SERVER_INFO_1534
  LPSERVER_INFO_1534* = ptr SERVER_INFO_1534
  SERVER_INFO_1535* {.final, pure.} = object
    sv1535_oplockbreakresponsewait*: DWORD
  PSERVER_INFO_1535* = ptr SERVER_INFO_1535
  LPSERVER_INFO_1535* = ptr SERVER_INFO_1535
  SERVER_INFO_1536* {.final, pure.} = object
    sv1536_enableoplocks*: BOOL
  PSERVER_INFO_1536* = ptr SERVER_INFO_1536
  LPSERVER_INFO_1536* = ptr SERVER_INFO_1536
  SERVER_INFO_1537* {.final, pure.} = object
    sv1537_enableoplockforceclose*: BOOL
  PSERVER_INFO_1537* = ptr SERVER_INFO_1537
  LPSERVER_INFO_1537* = ptr SERVER_INFO_1537
  SERVER_INFO_1538* {.final, pure.} = object
    sv1538_enablefcbopens*: BOOL
  PSERVER_INFO_1538* = ptr SERVER_INFO_1538
  LPSERVER_INFO_1538* = ptr SERVER_INFO_1538
  SERVER_INFO_1539* {.final, pure.} = object
    sv1539_enableraw*: BOOL
  PSERVER_INFO_1539* = ptr SERVER_INFO_1539
  LPSERVER_INFO_1539* = ptr SERVER_INFO_1539
  SERVER_INFO_1540* {.final, pure.} = object
    sv1540_enablesharednetdrives*: BOOL
  PSERVER_INFO_1540* = ptr SERVER_INFO_1540
  LPSERVER_INFO_1540* = ptr SERVER_INFO_1540
  SERVER_INFO_1541* {.final, pure.} = object
    sv1541_minfreeconnections*: BOOL
  PSERVER_INFO_1541* = ptr SERVER_INFO_1541
  LPSERVER_INFO_1541* = ptr SERVER_INFO_1541
  SERVER_INFO_1542* {.final, pure.} = object
    sv1542_maxfreeconnections*: BOOL
  PSERVER_INFO_1542* = ptr SERVER_INFO_1542
  LPSERVER_INFO_1542* = ptr SERVER_INFO_1542
  SERVER_INFO_1543* {.final, pure.} = object
    sv1543_initsesstable*: DWORD
  PSERVER_INFO_1543* = ptr SERVER_INFO_1543
  LPSERVER_INFO_1543* = ptr SERVER_INFO_1543
  SERVER_INFO_1544* {.final, pure.} = object
    sv1544_initconntable*: DWORD
  PSERVER_INFO_1544* = ptr SERVER_INFO_1544
  LPSERVER_INFO_1544* = ptr SERVER_INFO_1544
  SERVER_INFO_1545* {.final, pure.} = object
    sv1545_initfiletable*: DWORD
  PSERVER_INFO_1545* = ptr SERVER_INFO_1545
  LPSERVER_INFO_1545* = ptr SERVER_INFO_1545
  SERVER_INFO_1546* {.final, pure.} = object
    sv1546_initsearchtable*: DWORD
  PSERVER_INFO_1546* = ptr SERVER_INFO_1546
  LPSERVER_INFO_1546* = ptr SERVER_INFO_1546
  SERVER_INFO_1547* {.final, pure.} = object
    sv1547_alertschedule*: DWORD
  PSERVER_INFO_1547* = ptr SERVER_INFO_1547
  LPSERVER_INFO_1547* = ptr SERVER_INFO_1547
  SERVER_INFO_1548* {.final, pure.} = object
    sv1548_errorthreshold*: DWORD
  PSERVER_INFO_1548* = ptr SERVER_INFO_1548
  LPSERVER_INFO_1548* = ptr SERVER_INFO_1548
  SERVER_INFO_1549* {.final, pure.} = object
    sv1549_networkerrorthreshold*: DWORD
  PSERVER_INFO_1549* = ptr SERVER_INFO_1549
  LPSERVER_INFO_1549* = ptr SERVER_INFO_1549
  SERVER_INFO_1550* {.final, pure.} = object
    sv1550_diskspacethreshold*: DWORD
  PSERVER_INFO_1550* = ptr SERVER_INFO_1550
  LPSERVER_INFO_1550* = ptr SERVER_INFO_1550
  SERVER_INFO_1552* {.final, pure.} = object
    sv1552_maxlinkdelay*: DWORD
  PSERVER_INFO_1552* = ptr SERVER_INFO_1552
  LPSERVER_INFO_1552* = ptr SERVER_INFO_1552
  SERVER_INFO_1553* {.final, pure.} = object
    sv1553_minlinkthroughput*: DWORD
  PSERVER_INFO_1553* = ptr SERVER_INFO_1553
  LPSERVER_INFO_1553* = ptr SERVER_INFO_1553
  SERVER_INFO_1554* {.final, pure.} = object
    sv1554_linkinfovalidtime*: DWORD
  PSERVER_INFO_1554* = ptr SERVER_INFO_1554
  LPSERVER_INFO_1554* = ptr SERVER_INFO_1554
  SERVER_INFO_1555* {.final, pure.} = object
    sv1555_scavqosinfoupdatetime*: DWORD
  PSERVER_INFO_1555* = ptr SERVER_INFO_1555
  LPSERVER_INFO_1555* = ptr SERVER_INFO_1555
  SERVER_INFO_1556* {.final, pure.} = object
    sv1556_maxworkitemidletime*: DWORD
  PSERVER_INFO_1556* = ptr SERVER_INFO_1556
  LPSERVER_INFO_1556* = ptr SERVER_INFO_1556
  SERVER_INFO_1557* {.final, pure.} = object
    sv1557_maxrawworkitems*: DWORD
  PSERVER_INFO_1557* = ptr SERVER_INFO_1557
  LPSERVER_INFO_1557* = ptr SERVER_INFO_1557
  SERVER_INFO_1560* {.final, pure.} = object
    sv1560_producttype*: DWORD
  PSERVER_INFO_1560* = ptr SERVER_INFO_1560
  LPSERVER_INFO_1560* = ptr SERVER_INFO_1560
  SERVER_INFO_1561* {.final, pure.} = object
    sv1561_serversize*: DWORD
  PSERVER_INFO_1561* = ptr SERVER_INFO_1561
  LPSERVER_INFO_1561* = ptr SERVER_INFO_1561
  SERVER_INFO_1562* {.final, pure.} = object
    sv1562_connectionlessautodisc*: DWORD
  PSERVER_INFO_1562* = ptr SERVER_INFO_1562
  LPSERVER_INFO_1562* = ptr SERVER_INFO_1562
  SERVER_INFO_1563* {.final, pure.} = object
    sv1563_sharingviolationretries*: DWORD
  PSERVER_INFO_1563* = ptr SERVER_INFO_1563
  LPSERVER_INFO_1563* = ptr SERVER_INFO_1563
  SERVER_INFO_1564* {.final, pure.} = object
    sv1564_sharingviolationdelay*: DWORD
  PSERVER_INFO_1564* = ptr SERVER_INFO_1564
  LPSERVER_INFO_1564* = ptr SERVER_INFO_1564
  SERVER_INFO_1565* {.final, pure.} = object
    sv1565_maxglobalopensearch*: DWORD
  PSERVER_INFO_1565* = ptr SERVER_INFO_1565
  LPSERVER_INFO_1565* = ptr SERVER_INFO_1565
  SERVER_INFO_1566* {.final, pure.} = object
    sv1566_removeduplicatesearches*: BOOL
  PSERVER_INFO_1566* = ptr SERVER_INFO_1566
  LPSERVER_INFO_1566* = ptr SERVER_INFO_1566
  SERVER_INFO_1567* {.final, pure.} = object
    sv1567_lockviolationretries*: DWORD
  PSERVER_INFO_1567* = ptr SERVER_INFO_1567
  LPSERVER_INFO_1567* = ptr SERVER_INFO_1567
  SERVER_INFO_1568* {.final, pure.} = object
    sv1568_lockviolationoffset*: DWORD
  PSERVER_INFO_1568* = ptr SERVER_INFO_1568
  LPSERVER_INFO_1568* = ptr SERVER_INFO_1568
  SERVER_INFO_1569* {.final, pure.} = object
    sv1569_lockviolationdelay*: DWORD
  PSERVER_INFO_1569* = ptr SERVER_INFO_1569
  LPSERVER_INFO_1569* = ptr SERVER_INFO_1569
  SERVER_INFO_1570* {.final, pure.} = object
    sv1570_mdlreadswitchover*: DWORD
  PSERVER_INFO_1570* = ptr SERVER_INFO_1570
  LPSERVER_INFO_1570* = ptr SERVER_INFO_1570
  SERVER_INFO_1571* {.final, pure.} = object
    sv1571_cachedopenlimit*: DWORD
  PSERVER_INFO_1571* = ptr SERVER_INFO_1571
  LPSERVER_INFO_1571* = ptr SERVER_INFO_1571
  SERVER_INFO_1572* {.final, pure.} = object
    sv1572_criticalthreads*: DWORD
  PSERVER_INFO_1572* = ptr SERVER_INFO_1572
  LPSERVER_INFO_1572* = ptr SERVER_INFO_1572
  SERVER_INFO_1573* {.final, pure.} = object
    sv1573_restrictnullsessaccess*: DWORD
  PSERVER_INFO_1573* = ptr SERVER_INFO_1573
  LPSERVER_INFO_1573* = ptr SERVER_INFO_1573
  SERVER_INFO_1574* {.final, pure.} = object
    sv1574_enablewfw311directipx*: DWORD
  PSERVER_INFO_1574* = ptr SERVER_INFO_1574
  LPSERVER_INFO_1574* = ptr SERVER_INFO_1574
  SERVER_INFO_1575* {.final, pure.} = object
    sv1575_otherqueueaffinity*: DWORD
  PSERVER_INFO_1575* = ptr SERVER_INFO_1575
  LPSERVER_INFO_1575* = ptr SERVER_INFO_1575
  SERVER_INFO_1576* {.final, pure.} = object
    sv1576_queuesamplesecs*: DWORD
  PSERVER_INFO_1576* = ptr SERVER_INFO_1576
  LPSERVER_INFO_1576* = ptr SERVER_INFO_1576
  SERVER_INFO_1577* {.final, pure.} = object
    sv1577_balancecount*: DWORD
  PSERVER_INFO_1577* = ptr SERVER_INFO_1577
  LPSERVER_INFO_1577* = ptr SERVER_INFO_1577
  SERVER_INFO_1578* {.final, pure.} = object
    sv1578_preferredaffinity*: DWORD
  PSERVER_INFO_1578* = ptr SERVER_INFO_1578
  LPSERVER_INFO_1578* = ptr SERVER_INFO_1578
  SERVER_INFO_1579* {.final, pure.} = object
    sv1579_maxfreerfcbs*: DWORD
  PSERVER_INFO_1579* = ptr SERVER_INFO_1579
  LPSERVER_INFO_1579* = ptr SERVER_INFO_1579
  SERVER_INFO_1580* {.final, pure.} = object
    sv1580_maxfreemfcbs*: DWORD
  PSERVER_INFO_1580* = ptr SERVER_INFO_1580
  LPSERVER_INFO_1580* = ptr SERVER_INFO_1580
  SERVER_INFO_1581* {.final, pure.} = object
    sv1581_maxfreemlcbs*: DWORD
  PSERVER_INFO_1581* = ptr SERVER_INFO_1581
  LPSERVER_INFO_1581* = ptr SERVER_INFO_1581
  SERVER_INFO_1582* {.final, pure.} = object
    sv1582_maxfreepagedpoolchunks*: DWORD
  PSERVER_INFO_1582* = ptr SERVER_INFO_1582
  LPSERVER_INFO_1582* = ptr SERVER_INFO_1582
  SERVER_INFO_1583* {.final, pure.} = object
    sv1583_minpagedpoolchunksize*: DWORD
  PSERVER_INFO_1583* = ptr SERVER_INFO_1583
  LPSERVER_INFO_1583* = ptr SERVER_INFO_1583
  SERVER_INFO_1584* {.final, pure.} = object
    sv1584_maxpagedpoolchunksize*: DWORD
  PSERVER_INFO_1584* = ptr SERVER_INFO_1584
  LPSERVER_INFO_1584* = ptr SERVER_INFO_1584
  SERVER_INFO_1585* {.final, pure.} = object
    sv1585_sendsfrompreferredprocessor*: BOOL
  PSERVER_INFO_1585* = ptr SERVER_INFO_1585
  LPSERVER_INFO_1585* = ptr SERVER_INFO_1585
  SERVER_INFO_1586* {.final, pure.} = object
    sv1586_maxthreadsperqueue*: BOOL
  PSERVER_INFO_1586* = ptr SERVER_INFO_1586
  LPSERVER_INFO_1586* = ptr SERVER_INFO_1586
  SERVER_TRANSPORT_INFO_0* {.final, pure.} = object
    svti0_numberofvcs*: DWORD
    svti0_transportname*: LPWSTR
    svti0_transportaddress*: PBYTE
    svti0_transportaddresslength*: DWORD
    svti0_networkaddress*: LPWSTR
  PSERVER_TRANSPORT_INFO_0* = ptr SERVER_TRANSPORT_INFO_0
  LPSERVER_TRANSPORT_INFO_0* = ptr SERVER_TRANSPORT_INFO_0

proc NetServerEnum*(P1: LPCWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: DWORD, P8: LPCWSTR, P9: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServerEnumEx*(P1: LPCWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: DWORD, P8: LPCWSTR, P9: LPCWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServerGetInfo*(P1: LPWSTR, P2: DWORD, P3: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServerSetInfo*(P1: LPWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServerSetInfoCommandLine*(P1: WORD, P2: ptr LPWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServerDiskEnum*(P1: LPWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServerComputerNameAdd*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServerComputerNameDel*(P1: LPWSTR, P2: LPWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServerTransportAdd*(P1: LPWSTR, P2: DWORD, P3: PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServerTransportAddEx*(P1: LPWSTR, P2: DWORD, P3: PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServerTransportDel*(P1: LPWSTR, P2: DWORD, P3: PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServerTransportEnum*(P1: LPWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc SetServiceBits*(P1: SERVICE_STATUS_HANDLE, P2: DWORD, P3: BOOL, P4: BOOL): BOOL {.winapi, dynlib: "advapi32", importc.}

const
  SVI1_NUM_ELEMENTS* = 5
  SVI2_NUM_ELEMENTS* = 40
  SVI3_NUM_ELEMENTS* = 44
  SV_MAX_CMD_LEN* = PATHLEN
  SW_AUTOPROF_LOAD_MASK* = 1
  SW_AUTOPROF_SAVE_MASK* = 2
  SV_MAX_SRV_HEUR_LEN* = 32
  SV_USERS_PER_LICENSE* = 5
  SV_PLATFORM_ID_OS2* = 400
  SV_PLATFORM_ID_NT* = 500
  MAJOR_VERSION_MASK* = 15
  SV_TYPE_WORKSTATION* = 1
  SV_TYPE_SERVER* = 2
  SV_TYPE_SQLSERVER* = 4
  SV_TYPE_DOMAIN_CTRL* = 8
  SV_TYPE_DOMAIN_BAKCTRL* = 16
  SV_TYPE_TIME_SOURCE* = 32
  SV_TYPE_AFP* = 64
  SV_TYPE_NOVELL* = 128
  SV_TYPE_DOMAIN_MEMBER* = 256
  SV_TYPE_PRINTQ_SERVER* = 512
  SV_TYPE_DIALIN_SERVER* = 1024
  SV_TYPE_XENIX_SERVER* = 2048
  SV_TYPE_SERVER_UNIX* = SV_TYPE_XENIX_SERVER
  SV_TYPE_NT* = 4096
  SV_TYPE_WFW* = 8192
  SV_TYPE_SERVER_MFPN* = 16384
  SV_TYPE_SERVER_NT* = 32768
  SV_TYPE_POTENTIAL_BROWSER* = 65536
  SV_TYPE_BACKUP_BROWSER* = 0x20000
  SV_TYPE_MASTER_BROWSER* = 0x40000
  SV_TYPE_DOMAIN_MASTER* = 0x80000
  SV_TYPE_SERVER_OSF* = 0x100000
  SV_TYPE_SERVER_VMS* = 0x200000
  SV_TYPE_WINDOWS* = 0x400000
  SV_TYPE_ALTERNATE_XPORT* = 0x20000000
  SV_TYPE_LOCAL_LIST_ONLY* = 0x40000000
  SV_TYPE_DOMAIN_ENUM* = 0x80000000'i32
  SV_TYPE_ALL* = -1
  SV_NODISC* = ( -1 )
  SV_USERSECURITY* = 1
  SV_SHARESECURITY* = 0
  SV_HIDDEN* = 1
  SV_VISIBLE* = 0
  SV_PLATFORM_ID_PARMNUM* = 101
  SV_NAME_PARMNUM* = 102
  SV_VERSION_MAJOR_PARMNUM* = 103
  SV_VERSION_MINOR_PARMNUM* = 104
  SV_TYPE_PARMNUM* = 105
  SV_COMMENT_PARMNUM* = 5
  SV_USERS_PARMNUM* = 107
  SV_DISC_PARMNUM* = 10
  SV_HIDDEN_PARMNUM* = 16
  SV_ANNOUNCE_PARMNUM* = 17
  SV_ANNDELTA_PARMNUM* = 18
  SV_USERPATH_PARMNUM* = 112
  SV_ULIST_MTIME_PARMNUM* = 401
  SV_GLIST_MTIME_PARMNUM* = 402
  SV_ALIST_MTIME_PARMNUM* = 403
  SV_ALERTS_PARMNUM* = 11
  SV_SECURITY_PARMNUM* = 405
  SV_NUMADMIN_PARMNUM* = 406
  SV_LANMASK_PARMNUM* = 407
  SV_GUESTACC_PARMNUM* = 408
  SV_CHDEVQ_PARMNUM* = 410
  SV_CHDEVJOBS_PARMNUM* = 411
  SV_CONNECTIONS_PARMNUM* = 412
  SV_SHARES_PARMNUM* = 413
  SV_OPENFILES_PARMNUM* = 414
  SV_SESSREQS_PARMNUM* = 417
  SV_ACTIVELOCKS_PARMNUM* = 419
  SV_NUMREQBUF_PARMNUM* = 420
  SV_NUMBIGBUF_PARMNUM* = 422
  SV_NUMFILETASKS_PARMNUM* = 423
  SV_ALERTSCHED_PARMNUM* = 37
  SV_ERRORALERT_PARMNUM* = 38
  SV_LOGONALERT_PARMNUM* = 39
  SV_ACCESSALERT_PARMNUM* = 40
  SV_DISKALERT_PARMNUM* = 41
  SV_NETIOALERT_PARMNUM* = 42
  SV_MAXAUDITSZ_PARMNUM* = 43
  SV_SRVHEURISTICS_PARMNUM* = 431
  SV_SESSOPENS_PARMNUM* = 501
  SV_SESSVCS_PARMNUM* = 502
  SV_OPENSEARCH_PARMNUM* = 503
  SV_SIZREQBUF_PARMNUM* = 504
  SV_INITWORKITEMS_PARMNUM* = 505
  SV_MAXWORKITEMS_PARMNUM* = 506
  SV_RAWWORKITEMS_PARMNUM* = 507
  SV_IRPSTACKSIZE_PARMNUM* = 508
  SV_MAXRAWBUFLEN_PARMNUM* = 509
  SV_SESSUSERS_PARMNUM* = 510
  SV_SESSCONNS_PARMNUM* = 511
  SV_MAXNONPAGEDMEMORYUSAGE_PARMNUM* = 512
  SV_MAXPAGEDMEMORYUSAGE_PARMNUM* = 513
  SV_ENABLESOFTCOMPAT_PARMNUM* = 514
  SV_ENABLEFORCEDLOGOFF_PARMNUM* = 515
  SV_TIMESOURCE_PARMNUM* = 516
  SV_ACCEPTDOWNLEVELAPIS_PARMNUM* = 517
  SV_LMANNOUNCE_PARMNUM* = 518
  SV_DOMAIN_PARMNUM* = 519
  SV_MAXCOPYREADLEN_PARMNUM* = 520
  SV_MAXCOPYWRITELEN_PARMNUM* = 521
  SV_MINKEEPSEARCH_PARMNUM* = 522
  SV_MAXKEEPSEARCH_PARMNUM* = 523
  SV_MINKEEPCOMPLSEARCH_PARMNUM* = 524
  SV_MAXKEEPCOMPLSEARCH_PARMNUM* = 525
  SV_THREADCOUNTADD_PARMNUM* = 526
  SV_NUMBLOCKTHREADS_PARMNUM* = 527
  SV_SCAVTIMEOUT_PARMNUM* = 528
  SV_MINRCVQUEUE_PARMNUM* = 529
  SV_MINFREEWORKITEMS_PARMNUM* = 530
  SV_XACTMEMSIZE_PARMNUM* = 531
  SV_THREADPRIORITY_PARMNUM* = 532
  SV_MAXMPXCT_PARMNUM* = 533
  SV_OPLOCKBREAKWAIT_PARMNUM* = 534
  SV_OPLOCKBREAKRESPONSEWAIT_PARMNUM* = 535
  SV_ENABLEOPLOCKS_PARMNUM* = 536
  SV_ENABLEOPLOCKFORCECLOSE_PARMNUM* = 537
  SV_ENABLEFCBOPENS_PARMNUM* = 538
  SV_ENABLERAW_PARMNUM* = 539
  SV_ENABLESHAREDNETDRIVES_PARMNUM* = 540
  SV_MINFREECONNECTIONS_PARMNUM* = 541
  SV_MAXFREECONNECTIONS_PARMNUM* = 542
  SV_INITSESSTABLE_PARMNUM* = 543
  SV_INITCONNTABLE_PARMNUM* = 544
  SV_INITFILETABLE_PARMNUM* = 545
  SV_INITSEARCHTABLE_PARMNUM* = 546
  SV_ALERTSCHEDULE_PARMNUM* = 547
  SV_ERRORTHRESHOLD_PARMNUM* = 548
  SV_NETWORKERRORTHRESHOLD_PARMNUM* = 549
  SV_DISKSPACETHRESHOLD_PARMNUM* = 550
  SV_MAXLINKDELAY_PARMNUM* = 552
  SV_MINLINKTHROUGHPUT_PARMNUM* = 553
  SV_LINKINFOVALIDTIME_PARMNUM* = 554
  SV_SCAVQOSINFOUPDATETIME_PARMNUM* = 555
  SV_MAXWORKITEMIDLETIME_PARMNUM* = 556
  SV_MAXRAWWORKITEMS_PARMNUM* = 557
  SV_PRODUCTTYPE_PARMNUM* = 560
  SV_SERVERSIZE_PARMNUM* = 561
  SV_CONNECTIONLESSAUTODISC_PARMNUM* = 562
  SV_SHARINGVIOLATIONRETRIES_PARMNUM* = 563
  SV_SHARINGVIOLATIONDELAY_PARMNUM* = 564
  SV_MAXGLOBALOPENSEARCH_PARMNUM* = 565
  SV_REMOVEDUPLICATESEARCHES_PARMNUM* = 566
  SV_LOCKVIOLATIONRETRIES_PARMNUM* = 567
  SV_LOCKVIOLATIONOFFSET_PARMNUM* = 568
  SV_LOCKVIOLATIONDELAY_PARMNUM* = 569
  SV_MDLREADSWITCHOVER_PARMNUM* = 570
  SV_CACHEDOPENLIMIT_PARMNUM* = 571
  SV_CRITICALTHREADS_PARMNUM* = 572
  SV_RESTRICTNULLSESSACCESS_PARMNUM* = 573
  SV_ENABLEWFW311DIRECTIPX_PARMNUM* = 574
  SV_OTHERQUEUEAFFINITY_PARMNUM* = 575
  SV_QUEUESAMPLESECS_PARMNUM* = 576
  SV_BALANCECOUNT_PARMNUM* = 577
  SV_PREFERREDAFFINITY_PARMNUM* = 578
  SV_MAXFREERFCBS_PARMNUM* = 579
  SV_MAXFREEMFCBS_PARMNUM* = 580
  SV_MAXFREELFCBS_PARMNUM* = 581
  SV_MAXFREEPAGEDPOOLCHUNKS_PARMNUM* = 582
  SV_MINPAGEDPOOLCHUNKSIZE_PARMNUM* = 583
  SV_MAXPAGEDPOOLCHUNKSIZE_PARMNUM* = 584
  SV_SENDSFROMPREFERREDPROCESSOR_PARMNUM* = 585
  SV_MAXTHREADSPERQUEUE_PARMNUM* = 586
  SV_COMMENT_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_COMMENT_PARMNUM )
  SV_USERS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_USERS_PARMNUM )
  SV_DISC_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_DISC_PARMNUM )
  SV_HIDDEN_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_HIDDEN_PARMNUM )
  SV_ANNOUNCE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ANNOUNCE_PARMNUM )
  SV_ANNDELTA_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ANNDELTA_PARMNUM )
  SV_SESSOPENS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_SESSOPENS_PARMNUM )
  SV_SESSVCS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_SESSVCS_PARMNUM )
  SV_OPENSEARCH_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_OPENSEARCH_PARMNUM )
  SV_MAXWORKITEMS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXWORKITEMS_PARMNUM )
  SV_MAXRAWBUFLEN_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXRAWBUFLEN_PARMNUM )
  SV_SESSUSERS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_SESSUSERS_PARMNUM )
  SV_SESSCONNS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_SESSCONNS_PARMNUM )
  SV_MAXNONPAGEDMEMORYUSAGE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXNONPAGEDMEMORYUSAGE_PARMNUM )
  SV_MAXPAGEDMEMORYUSAGE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXPAGEDMEMORYUSAGE_PARMNUM )
  SV_ENABLESOFTCOMPAT_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ENABLESOFTCOMPAT_PARMNUM )
  SV_ENABLEFORCEDLOGOFF_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ENABLEFORCEDLOGOFF_PARMNUM )
  SV_TIMESOURCE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_TIMESOURCE_PARMNUM )
  SV_LMANNOUNCE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_LMANNOUNCE_PARMNUM )
  SV_MAXCOPYREADLEN_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXCOPYREADLEN_PARMNUM )
  SV_MAXCOPYWRITELEN_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXCOPYWRITELEN_PARMNUM )
  SV_MINKEEPSEARCH_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MINKEEPSEARCH_PARMNUM )
  SV_MAXKEEPSEARCH_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXKEEPSEARCH_PARMNUM )
  SV_MINKEEPCOMPLSEARCH_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MINKEEPCOMPLSEARCH_PARMNUM )
  SV_MAXKEEPCOMPLSEARCH_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXKEEPCOMPLSEARCH_PARMNUM )
  SV_SCAVTIMEOUT_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_SCAVTIMEOUT_PARMNUM )
  SV_MINRCVQUEUE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MINRCVQUEUE_PARMNUM )
  SV_MINFREEWORKITEMS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MINFREEWORKITEMS_PARMNUM )
  SV_MAXMPXCT_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXMPXCT_PARMNUM )
  SV_OPLOCKBREAKWAIT_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_OPLOCKBREAKWAIT_PARMNUM )
  SV_OPLOCKBREAKRESPONSEWAIT_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_OPLOCKBREAKRESPONSEWAIT_PARMNUM )
  SV_ENABLEOPLOCKS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ENABLEOPLOCKS_PARMNUM )
  SV_ENABLEOPLOCKFORCECLOSE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ENABLEOPLOCKFORCECLOSE_PARMNUM )
  SV_ENABLEFCBOPENS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ENABLEFCBOPENS_PARMNUM )
  SV_ENABLERAW_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ENABLERAW_PARMNUM )
  SV_ENABLESHAREDNETDRIVES_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ENABLESHAREDNETDRIVES_PARMNUM )
  SV_MINFREECONNECTIONS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MINFREECONNECTIONS_PARMNUM )
  SV_MAXFREECONNECTIONS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXFREECONNECTIONS_PARMNUM )
  SV_INITSESSTABLE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_INITSESSTABLE_PARMNUM )
  SV_INITCONNTABLE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_INITCONNTABLE_PARMNUM )
  SV_INITFILETABLE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_INITFILETABLE_PARMNUM )
  SV_INITSEARCHTABLE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_INITSEARCHTABLE_PARMNUM )
  SV_ALERTSCHEDULE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ALERTSCHEDULE_PARMNUM )
  SV_ERRORTHRESHOLD_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ERRORTHRESHOLD_PARMNUM )
  SV_NETWORKERRORTHRESHOLD_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_NETWORKERRORTHRESHOLD_PARMNUM )
  SV_DISKSPACETHRESHOLD_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_DISKSPACETHRESHOLD_PARMNUM )
  SV_MAXLINKDELAY_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXLINKDELAY_PARMNUM )
  SV_MINLINKTHROUGHPUT_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MINLINKTHROUGHPUT_PARMNUM )
  SV_LINKINFOVALIDTIME_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_LINKINFOVALIDTIME_PARMNUM )
  SV_SCAVQOSINFOUPDATETIME_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_SCAVQOSINFOUPDATETIME_PARMNUM )
  SV_MAXWORKITEMIDLETIME_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXWORKITEMIDLETIME_PARMNUM )
  SV_MAXRAWWORKITEMS_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXRAWWORKITEMS_PARMNUM )
  SV_PRODUCTTYPE_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_PRODUCTTYPE_PARMNUM )
  SV_SERVERSIZE_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_SERVERSIZE_PARMNUM )
  SV_CONNECTIONLESSAUTODISC_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_CONNECTIONLESSAUTODISC_PARMNUM )
  SV_SHARINGVIOLATIONRETRIES_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_SHARINGVIOLATIONRETRIES_PARMNUM )
  SV_SHARINGVIOLATIONDELAY_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_SHARINGVIOLATIONDELAY_PARMNUM )
  SV_MAXGLOBALOPENSEARCH_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXGLOBALOPENSEARCH_PARMNUM )
  SV_REMOVEDUPLICATESEARCHES_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_REMOVEDUPLICATESEARCHES_PARMNUM )
  SV_LOCKVIOLATIONRETRIES_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_LOCKVIOLATIONRETRIES_PARMNUM )
  SV_LOCKVIOLATIONOFFSET_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_LOCKVIOLATIONOFFSET_PARMNUM )
  SV_LOCKVIOLATIONDELAY_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_LOCKVIOLATIONDELAY_PARMNUM )
  SV_MDLREADSWITCHOVER_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MDLREADSWITCHOVER_PARMNUM )
  SV_CACHEDOPENLIMIT_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_CACHEDOPENLIMIT_PARMNUM )
  SV_CRITICALTHREADS_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_CRITICALTHREADS_PARMNUM )
  SV_RESTRICTNULLSESSACCESS_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_RESTRICTNULLSESSACCESS_PARMNUM )
  SV_ENABLEWFW311DIRECTIPX_INFOLOEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_ENABLEWFW311DIRECTIPX_PARMNUM )
  SV_OTHERQUEUEAFFINITY_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_OTHERQUEUEAFFINITY_PARMNUM )
  SV_QUEUESAMPLESECS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_QUEUESAMPLESECS_PARMNUM )
  SV_BALANCECOUNT_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_BALANCECOUNT_PARMNUM )
  SV_PREFERREDAFFINITY_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_PREFERREDAFFINITY_PARMNUM )
  SV_MAXFREERFCBS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXFREERFCBS_PARMNUM )
  SV_MAXFREEMFCBS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXFREEMFCBS_PARMNUM )
  SV_MAXFREELFCBS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXFREELFCBS_PARMNUM )
  SV_MAXFREEPAGEDPOOLCHUNKS_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXFREEPAGEDPOOLCHUNKS_PARMNUM )
  SV_MINPAGEDPOOLCHUNKSIZE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MINPAGEDPOOLCHUNKSIZE_PARMNUM )
  SV_MAXPAGEDPOOLCHUNKSIZE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXPAGEDPOOLCHUNKSIZE_PARMNUM )
  SV_SENDSFROMPREFERREDPROCESSOR_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_SENDSFROMPREFERREDPROCESSOR_PARMNUM )
  SV_MAXTHREADSPERQUEUE_INFOLEVEL* = ( PARMNUM_BASE_INFOLEVEL+SV_MAXTHREADSPERQUEUE_PARMNUM )

# net/lmshare.nim

const
  SHARE_NETNAME_PARMNUM* = 1
  SHARE_TYPE_PARMNUM* = 3
  SHARE_REMARK_PARMNUM* = 4
  SHARE_PERMISSIONS_PARMNUM* = 5
  SHARE_MAX_USES_PARMNUM* = 6
  SHARE_CURRENT_USES_PARMNUM* = 7
  SHARE_PATH_PARMNUM* = 8
  SHARE_PASSWD_PARMNUM* = 9
  SHARE_FILE_SD_PARMNUM* = 501
  SHARE_REMARK_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL + SHARE_REMARK_PARMNUM
  SHARE_MAX_USES_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL + SHARE_MAX_USES_PARMNUM
  SHARE_FILE_SD_INFOLEVEL* = PARMNUM_BASE_INFOLEVEL + SHARE_FILE_SD_PARMNUM
  SHI1_NUM_ELEMENTS* = 4
  SHI2_NUM_ELEMENTS* = 10
  STYPE_DISKTREE* = 0
  STYPE_PRINTQ* = 1
  STYPE_DEVICE* = 2
  STYPE_IPC* = 3
  STYPE_DFS* = 100
  STYPE_SPECIAL* = 0x80000000'i32
  SHI_USES_UNLIMITED* = 0xFFFFFFFF'u32
  SESS_GUEST* = 1
  SESS_NOENCRYPTION* = 2
  SESI1_NUM_ELEMENTS* = 8
  SESI2_NUM_ELEMENTS* = 9
  PERM_FILE_READ* = 1
  PERM_FILE_WRITE* = 2
  PERM_FILE_CREATE* = 4

type
  FILE_INFO_2* {.final, pure.} = object
    fi2_id*: DWORD
  PFILE_INFO_2* = ptr FILE_INFO_2
  LPFILE_INFO_2* = ptr FILE_INFO_2
  FILE_INFO_3* {.final, pure.} = object
    fi3_id*: DWORD
    fi3_permissions*: DWORD
    fi3_num_locks*: DWORD
    fi3_pathname*: LPTSTR
    fi3_username*: LPTSTR
  PFILE_INFO_3* = ptr FILE_INFO_3
  LPFILE_INFO_3* = ptr FILE_INFO_3
  SHARE_INFO_0* {.final, pure.} = object
    shi0_netname*: LPTSTR
  PSHARE_INFO_0* = ptr SHARE_INFO_0
  LPSHARE_INFO_0* = ptr SHARE_INFO_0
  SHARE_INFO_1* {.final, pure.} = object
    shi1_netname*: LPTSTR
    shi1_type*: DWORD
    shi1_remark*: LPTSTR
  PSHARE_INFO_1* = ptr SHARE_INFO_1
  LPSHARE_INFO_1* = ptr SHARE_INFO_1
  SHARE_INFO_2* {.final, pure.} = object
    shi2_netname*: LPTSTR
    shi2_type*: DWORD
    shi2_remark*: LPTSTR
    shi2_permissions*: DWORD
    shi2_max_uses*: DWORD
    shi2_current_uses*: DWORD
    shi2_path*: LPTSTR
    shi2_passwd*: LPTSTR
  PSHARE_INFO_2* = ptr SHARE_INFO_2
  LPSHARE_INFO_2* = ptr SHARE_INFO_2
  SHARE_INFO_502* {.final, pure.} = object
    shi502_netname*: LPTSTR
    shi502_type*: DWORD
    shi502_remark*: LPTSTR
    shi502_permissions*: DWORD
    shi502_max_uses*: DWORD
    shi502_current_uses*: DWORD
    shi502_path*: LPTSTR
    shi502_passwd*: LPTSTR
    shi502_reserved*: DWORD
    shi502_security_descriptor*: PSECURITY_DESCRIPTOR
  PSHARE_INFO_502* = ptr SHARE_INFO_502
  LPSHARE_INFO_502* = ptr SHARE_INFO_502
  SHARE_INFO_1004* {.final, pure.} = object
    shi1004_remark*: LPTSTR
  PSHARE_INFO_1004* = ptr SHARE_INFO_1004
  LPSHARE_INFO_1004* = ptr SHARE_INFO_1004
  SHARE_INFO_1006* {.final, pure.} = object
    shi1006_max_uses*: DWORD
  PSHARE_INFO_1006* = ptr SHARE_INFO_1006
  LPSHARE_INFO_1006* = ptr SHARE_INFO_1006
  SHARE_INFO_1501* {.final, pure.} = object
    shi1501_reserved*: DWORD
    shi1501_security_descriptor*: PSECURITY_DESCRIPTOR
  PSHARE_INFO_1501* = ptr SHARE_INFO_1501
  LPSHARE_INFO_1501* = ptr SHARE_INFO_1501
  SESSION_INFO_0* {.final, pure.} = object
    sesi0_cname*: LPWSTR
  PSESSION_INFO_0* = ptr SESSION_INFO_0
  LPSESSION_INFO_0* = ptr SESSION_INFO_0
  SESSION_INFO_1* {.final, pure.} = object
    sesi1_cname*: LPTSTR
    sesi1_username*: LPTSTR
    sesi1_num_opens*: DWORD
    sesi1_time*: DWORD
    sesi1_idle_time*: DWORD
    sesi1_user_flags*: DWORD
  PSESSION_INFO_1* = ptr SESSION_INFO_1
  LPSESSION_INFO_1* = ptr SESSION_INFO_1
  SESSION_INFO_2* {.final, pure.} = object
    sesi2_cname*: LPTSTR
    sesi2_username*: LPTSTR
    sesi2_num_opens*: DWORD
    sesi2_time*: DWORD
    sesi2_idle_time*: DWORD
    sesi2_user_flags*: DWORD
    sesi2_cltype_name*: LPWSTR
  PSESSION_INFO_2* = ptr SESSION_INFO_2
  LPSESSION_INFO_2* = ptr SESSION_INFO_2
  SESSION_INFO_10* {.final, pure.} = object
    sesi10_cname*: LPWSTR
    sesi10_username*: LPWSTR
    sesi10_time*: DWORD
    sesi10_idle_time*: DWORD
  PSESSION_INFO_10* = ptr SESSION_INFO_10
  LPSESSION_INFO_10* = ptr SESSION_INFO_10
  SESSION_INFO_502* {.final, pure.} = object
    sesi502_cname*: LPWSTR
    sesi502_username*: LPWSTR
    sesi502_num_opens*: DWORD
    sesi502_time*: DWORD
    sesi502_idle_time*: DWORD
    sesi502_user_flags*: DWORD
    sesi502_cltype_name*: LPWSTR
    sesi502_transport*: LPWSTR
  PSESSION_INFO_502* = ptr SESSION_INFO_502
  LPSESSION_INFO_502* = ptr SESSION_INFO_502
  CONNECTION_INFO_0* {.final, pure.} = object
    coni0_id*: DWORD
  PCONNECTION_INFO_0* = ptr CONNECTION_INFO_0
  LPCONNECTION_INFO_0* = ptr CONNECTION_INFO_0
  CONNECTION_INFO_1* {.final, pure.} = object
    coni1_id*: DWORD
    coni1_type*: DWORD
    coni1_num_opens*: DWORD
    coni1_num_users*: DWORD
    coni1_time*: DWORD
    coni1_username*: LPWSTR
    coni1_netname*: LPWSTR
  PCONNECTION_INFO_1* = ptr CONNECTION_INFO_1
  LPCONNECTION_INFO_1* = ptr CONNECTION_INFO_1

proc NetShareAdd*(P1: LPWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetShareEnum*(P1: LPWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetShareEnumSticky*(P1: LPWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, resume_handle: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetShareGetInfo*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetShareSetInfo*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: PBYTE, P5: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetShareDel*(P1: LPWSTR, P2: LPWSTR, P3: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetShareDelSticky*(P1: LPWSTR, P2: LPWSTR, P3: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetShareCheck*(P1: LPWSTR, P2: LPWSTR, P3: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetSessionEnum*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR, P4: DWORD, P5: ptr PBYTE, P6: DWORD, P7: PDWORD, P8: PDWORD, P9: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetSessionDel*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetSessionGetInfo*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR, P4: DWORD, P5: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetConnectionEnum*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: ptr PBYTE, P5: DWORD, P6: PDWORD, P7: PDWORD, P8: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetFileClose*(P1: LPWSTR, P2: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetFileEnum*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR, P4: DWORD, P5: ptr PBYTE, P6: DWORD, P7: PDWORD, P8: PDWORD, P9: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetFileGetInfo*(P1: LPWSTR, P2: DWORD, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmsname.nim

const
  SERVICE_WORKSTATION* = "LanmanWorkstation"
  SERVICE_LM20_WORKSTATION* = "WORKSTATION"
  WORKSTATION_DISPLAY_NAME* = "Workstation"
  SERVICE_SERVER* = "LanmanServer"
  SERVICE_LM20_SERVER* = "SERVER"
  SERVER_DISPLAY_NAME* = "Server"
  SERVICE_BROWSER* = "BROWSER"
  SERVICE_LM20_BROWSER* = SERVICE_BROWSER
  SERVICE_MESSENGER* = "MESSENGER"
  SERVICE_LM20_MESSENGER* = SERVICE_MESSENGER
  SERVICE_NETRUN* = "NETRUN"
  SERVICE_LM20_NETRUN* = SERVICE_NETRUN
  SERVICE_SPOOLER* = "SPOOLER"
  SERVICE_LM20_SPOOLER* = SERVICE_SPOOLER
  SERVICE_ALERTER* = "ALERTER"
  SERVICE_LM20_ALERTER* = SERVICE_ALERTER
  SERVICE_NETLOGON* = "NETLOGON"
  SERVICE_LM20_NETLOGON* = SERVICE_NETLOGON
  SERVICE_NETPOPUP* = "NETPOPUP"
  SERVICE_LM20_NETPOPUP* = SERVICE_NETPOPUP
  SERVICE_SQLSERVER* = "SQLSERVER"
  SERVICE_LM20_SQLSERVER* = SERVICE_SQLSERVER
  SERVICE_REPL* = "REPLICATOR"
  SERVICE_LM20_REPL* = SERVICE_REPL
  SERVICE_RIPL* = "REMOTEBOOT"
  SERVICE_LM20_RIPL* = SERVICE_RIPL
  SERVICE_TIMESOURCE* = "TIMESOURCE"
  SERVICE_LM20_TIMESOURCE* = SERVICE_TIMESOURCE
  SERVICE_AFP* = "AFP"
  SERVICE_LM20_AFP* = SERVICE_AFP
  SERVICE_UPS* = "UPS"
  SERVICE_LM20_UPS* = SERVICE_UPS
  SERVICE_XACTSRV* = "XACTSRV"
  SERVICE_LM20_XACTSRV* = SERVICE_XACTSRV
  SERVICE_TCPIP* = "TCPIP"
  SERVICE_LM20_TCPIP* = SERVICE_TCPIP
  SERVICE_NBT* = "NBT"
  SERVICE_LM20_NBT* = SERVICE_NBT
  SERVICE_LMHOSTS* = "LMHOSTS"
  SERVICE_LM20_LMHOSTS* = SERVICE_LMHOSTS
  SERVICE_TELNET* = "Telnet"
  SERVICE_LM20_TELNET* = SERVICE_TELNET
  SERVICE_SCHEDULE* = "Schedule"
  SERVICE_LM20_SCHEDULE* = SERVICE_SCHEDULE
  SERVICE_NTLMSSP* = "NtLmSsp"
  SERVICE_DHCP* = "DHCP"
  SERVICE_LM20_DHCP* = SERVICE_DHCP
  SERVICE_NWSAP* = "NwSapAgent"
  SERVICE_LM20_NWSAP* = SERVICE_NWSAP
  NWSAP_DISPLAY_NAME* = "NW Sap Agent"
  SERVICE_NWCS* = "NWCWorkstation"

# net/lmstats.nim

const
  STATSOPT_CLR* = 1
  STATS_NO_VALUE* = 0xFFFFFFFF'u32
  STATS_OVERFLOW* = 0xFFFFFFFE'u32

type
  STAT_SERVER_0* {.final, pure.} = object
    sts0_start*: DWORD
    sts0_fopens*: DWORD
    sts0_devopens*: DWORD
    sts0_jobsqueued*: DWORD
    sts0_sopens*: DWORD
    sts0_stimedout*: DWORD
    sts0_serrorout*: DWORD
    sts0_pwerrors*: DWORD
    sts0_permerrors*: DWORD
    sts0_syserrors*: DWORD
    sts0_bytessent_low*: DWORD
    sts0_bytessent_high*: DWORD
    sts0_bytesrcvd_low*: DWORD
    sts0_bytesrcvd_high*: DWORD
    sts0_avresponse*: DWORD
    sts0_reqbufneed*: DWORD
    sts0_bigbufneed*: DWORD
  PSTAT_SERVER_0* = ptr STAT_SERVER_0
  LPSTAT_SERVER_0* = ptr STAT_SERVER_0
  STAT_WORKSTATION_0* {.final, pure.} = object
    StatisticsStartTime*: LARGE_INTEGER
    BytesReceived*: LARGE_INTEGER
    SmbsReceived*: LARGE_INTEGER
    PagingReadBytesRequested*: LARGE_INTEGER
    NonPagingReadBytesRequested*: LARGE_INTEGER
    CacheReadBytesRequested*: LARGE_INTEGER
    NetworkReadBytesRequested*: LARGE_INTEGER
    BytesTransmitted*: LARGE_INTEGER
    SmbsTransmitted*: LARGE_INTEGER
    PagingWriteBytesRequested*: LARGE_INTEGER
    NonPagingWriteBytesRequested*: LARGE_INTEGER
    CacheWriteBytesRequested*: LARGE_INTEGER
    NetworkWriteBytesRequested*: LARGE_INTEGER
    InitiallyFailedOperations*: DWORD
    FailedCompletionOperations*: DWORD
    ReadOperations*: DWORD
    RandomReadOperations*: DWORD
    ReadSmbs*: DWORD
    LargeReadSmbs*: DWORD
    SmallReadSmbs*: DWORD
    WriteOperations*: DWORD
    RandomWriteOperations*: DWORD
    WriteSmbs*: DWORD
    LargeWriteSmbs*: DWORD
    SmallWriteSmbs*: DWORD
    RawReadsDenied*: DWORD
    RawWritesDenied*: DWORD
    NetworkErrors*: DWORD
    Sessions*: DWORD
    FailedSessions*: DWORD
    Reconnects*: DWORD
    CoreConnects*: DWORD
    Lanman20Connects*: DWORD
    Lanman21Connects*: DWORD
    LanmanNtConnects*: DWORD
    ServerDisconnects*: DWORD
    HungSessions*: DWORD
    UseCount*: DWORD
    FailedUseCount*: DWORD
    CurrentCommands*: DWORD
  PSTAT_WORKSTATION_0* = ptr STAT_WORKSTATION_0
  LPSTAT_WORKSTATION_0* = ptr STAT_WORKSTATION_0

proc NetStatisticsGet*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: DWORD, P5: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmsvc.nim

const
  SERVICE_DOS_ENCRYPTION* = "ENCRYPT"
  SERVICE_UNINSTALLED* = 0
  SERVICE_INSTALL_PENDING* = 1
  SERVICE_UNINSTALL_PENDING* = 2
  SERVICE_INSTALLED* = 3
  SERVICE_INSTALL_STATE* = 3
  SERVICE_PAUSE_STATE* = 18
  LM20_SERVICE_ACTIVE* = 0
  LM20_SERVICE_CONTINUE_PENDING* = 4
  LM20_SERVICE_PAUSE_PENDING* = 8
  LM20_SERVICE_PAUSED* = 18
  SERVICE_NOT_UNINSTALLABLE* = 0
  SERVICE_UNINSTALLABLE* = 16
  SERVICE_NOT_PAUSABLE* = 0
  SERVICE_PAUSABLE* = 32
  SERVICE_REDIR_PAUSED* = 0x700
  SERVICE_REDIR_DISK_PAUSED* = 256
  SERVICE_REDIR_PRINT_PAUSED* = 512
  SERVICE_REDIR_COMM_PAUSED* = 1024
  SERVICE_CTRL_INTERROGATE* = 0
  SERVICE_CTRL_PAUSE* = 1
  SERVICE_CTRL_CONTINUE* = 2
  SERVICE_CTRL_UNINSTALL* = 3
  SERVICE_CTRL_REDIR_DISK* = 1
  SERVICE_CTRL_REDIR_PRINT* = 2
  SERVICE_CTRL_REDIR_COMM* = 4
  SERVICE_IP_NO_HINT* = 0
  SERVICE_CCP_NO_HINT* = 0
  SERVICE_IP_QUERY_HINT* = 0x10000
  SERVICE_CCP_QUERY_HINT* = 0x10000
  SERVICE_IP_CHKPT_NUM* = 255
  SERVICE_CCP_CHKPT_NUM* = 255
  SERVICE_IP_WAIT_TIME* = 0xFF00
  SERVICE_CCP_WAIT_TIME* = 0xFF00
  SERVICE_IP_WAITTIME_SHIFT* = 8
  SERVICE_NTIP_WAITTIME_SHIFT* = 12
  UPPER_HINT_MASK* = 0xFF00
  LOWER_HINT_MASK* = 255
  UPPER_GET_HINT_MASK* = 0xFF00000
  LOWER_GET_HINT_MASK* = 0xFF00
  SERVICE_NT_MAXTIME* = 0xFFFF
  SERVICE_RESRV_MASK* = 0x1FFFF
  SERVICE_MAXTIME* = 255
  SERVICE_BASE* = 3050
  SERVICE_UIC_NORMAL* = 0
  SERVICE_UIC_BADPARMVAL* = SERVICE_BASE+1
  SERVICE_UIC_MISSPARM* = SERVICE_BASE+2
  SERVICE_UIC_UNKPARM* = SERVICE_BASE+3
  SERVICE_UIC_RESOURCE* = SERVICE_BASE+4
  SERVICE_UIC_CONFIG* = SERVICE_BASE+5
  SERVICE_UIC_SYSTEM* = SERVICE_BASE+6
  SERVICE_UIC_INTERNAL* = SERVICE_BASE+7
  SERVICE_UIC_AMBIGPARM* = SERVICE_BASE+8
  SERVICE_UIC_DUPPARM* = SERVICE_BASE+9
  SERVICE_UIC_KILL* = SERVICE_BASE+10
  SERVICE_UIC_EXEC* = SERVICE_BASE+11
  SERVICE_UIC_SUBSERV* = SERVICE_BASE+12
  SERVICE_UIC_CONFLPARM* = SERVICE_BASE+13
  SERVICE_UIC_FILE* = SERVICE_BASE+14
  SERVICE_UIC_M_NULL* = 0
  SERVICE_UIC_M_MEMORY* = SERVICE_BASE+20
  SERVICE_UIC_M_DISK* = SERVICE_BASE+21
  SERVICE_UIC_M_THREADS* = SERVICE_BASE+22
  SERVICE_UIC_M_PROCESSES* = SERVICE_BASE+23
  SERVICE_UIC_M_SECURITY* = SERVICE_BASE+24
  SERVICE_UIC_M_LANROOT* = SERVICE_BASE+25
  SERVICE_UIC_M_REDIR* = SERVICE_BASE+26
  SERVICE_UIC_M_SERVER* = SERVICE_BASE+27
  SERVICE_UIC_M_SEC_FILE_ERR* = SERVICE_BASE+28
  SERVICE_UIC_M_FILES* = SERVICE_BASE+29
  SERVICE_UIC_M_LOGS* = SERVICE_BASE+30
  SERVICE_UIC_M_LANGROUP* = SERVICE_BASE+31
  SERVICE_UIC_M_MSGNAME* = SERVICE_BASE+32
  SERVICE_UIC_M_ANNOUNCE* = SERVICE_BASE+33
  SERVICE_UIC_M_UAS* = SERVICE_BASE+34
  SERVICE_UIC_M_SERVER_SEC_ERR* = SERVICE_BASE+35
  SERVICE_UIC_M_WKSTA* = SERVICE_BASE+37
  SERVICE_UIC_M_ERRLOG* = SERVICE_BASE+38
  SERVICE_UIC_M_FILE_UW* = SERVICE_BASE+39
  SERVICE_UIC_M_ADDPAK* = SERVICE_BASE+40
  SERVICE_UIC_M_LAZY* = SERVICE_BASE+41
  SERVICE_UIC_M_UAS_MACHINE_ACCT* = SERVICE_BASE+42
  SERVICE_UIC_M_UAS_SERVERS_NMEMB* = SERVICE_BASE+43
  SERVICE_UIC_M_UAS_SERVERS_NOGRP* = SERVICE_BASE+44
  SERVICE_UIC_M_UAS_INVALID_ROLE* = SERVICE_BASE+45
  SERVICE_UIC_M_NETLOGON_NO_DC* = SERVICE_BASE+46
  SERVICE_UIC_M_NETLOGON_DC_CFLCT* = SERVICE_BASE+47
  SERVICE_UIC_M_NETLOGON_AUTH* = SERVICE_BASE+48
  SERVICE_UIC_M_UAS_PROLOG* = SERVICE_BASE+49
  SERVICE2_BASE* = 5600
  SERVICE_UIC_M_NETLOGON_MPATH* = SERVICE2_BASE+0
  SERVICE_UIC_M_LSA_MACHINE_ACCT* = SERVICE2_BASE+1
  SERVICE_UIC_M_DATABASE_ERROR* = SERVICE2_BASE+2

type
  SERVICE_INFO_0* {.final, pure.} = object
    svci0_name*: LPWSTR
  PSERVICE_INFO_0* = ptr SERVICE_INFO_0
  LPSERVICE_INFO_0* = ptr SERVICE_INFO_0
  SERVICE_INFO_1* {.final, pure.} = object
    svci1_name*: LPWSTR
    svci1_status*: DWORD
    svci1_code*: DWORD
    svci1_pid*: DWORD
  PSERVICE_INFO_1* = ptr SERVICE_INFO_1
  LPSERVICE_INFO_1* = ptr SERVICE_INFO_1
  SERVICE_INFO_2* {.final, pure.} = object
    svci2_name*: LPWSTR
    svci2_status*: DWORD
    svci2_code*: DWORD
    svci2_pid*: DWORD
    svci2_text*: LPWSTR
    svci2_specific_error*: DWORD
    svci2_display_name*: LPWSTR
  PSERVICE_INFO_2* = ptr SERVICE_INFO_2
  LPSERVICE_INFO_2* = ptr SERVICE_INFO_2

proc NetServiceControl*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: DWORD, P5: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServiceEnum*(P1: LPCWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServiceGetInfo*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetServiceInstall*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: ptr LPCWSTR, P5: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmuse.nim

const
  USE_LOCAL_PARMNUM* = 1
  USE_REMOTE_PARMNUM* = 2
  USE_PASSWORD_PARMNUM* = 3
  USE_ASGTYPE_PARMNUM* = 4
  USE_USERNAME_PARMNUM* = 5
  USE_DOMAINNAME_PARMNUM* = 6
  USE_OK* = 0
  USE_PAUSED* = 1
  USE_SESSLOST* = 2
  USE_DISCONN* = USE_SESSLOST
  USE_NETERR* = USE_SESSLOST + 1
  USE_CONN* = USE_SESSLOST + 2
  USE_RECONN* = USE_SESSLOST + 3
  USE_WILDCARD* = 0xFFFFFFFF'u32
  USE_DISKDEV* = 0
  USE_SPOOLDEV* = 1
  USE_CHARDEV* = 2
  USE_IPC* = 3

type
  USE_INFO_0* {.final, pure.} = object
    ui0_local*: LPWSTR
    ui0_remote*: LPWSTR
  PUSE_INFO_0* = ptr USE_INFO_0
  LPUSE_INFO_0* = ptr USE_INFO_0
  USE_INFO_1* {.final, pure.} = object
    ui1_local*: LPWSTR
    ui1_remote*: LPWSTR
    ui1_password*: LPWSTR
    ui1_status*: DWORD
    ui1_asg_type*: DWORD
    ui1_refcount*: DWORD
    ui1_usecount*: DWORD
  PUSE_INFO_1* = ptr USE_INFO_1
  LPUSE_INFO_1* = ptr USE_INFO_1
  USE_INFO_2* {.final, pure.} = object
    ui2_local*: LPWSTR
    ui2_remote*: LPWSTR
    ui2_password*: LPWSTR
    ui2_status*: DWORD
    ui2_asg_type*: DWORD
    ui2_refcount*: DWORD
    ui2_usecount*: DWORD
    ui2_username*: LPWSTR
    ui2_domainname*: LPWSTR
  PUSE_INFO_2* = ptr USE_INFO_2
  LPUSE_INFO_2* = ptr USE_INFO_2

proc NetUseAdd*(P1: LPWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUseDel*(P1: LPWSTR, P2: LPWSTR, P3: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUseEnum*(P1: LPWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetUseGetInfo*(P1: LPWSTR, P2: LPWSTR, P3: DWORD, P4: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/lmuseflg.nim

const
  USE_NOFORCE* = 0
  USE_FORCE* = 1
  USE_LOTS_OF_FORCE* = 2

# net/lmwksta.nim

const
  WKSTA_COMPUTERNAME_PARMNUM* = 1
  WKSTA_LANGROUP_PARMNUM* = 2
  WKSTA_VER_MAJOR_PARMNUM* = 4
  WKSTA_VER_MINOR_PARMNUM* = 5
  WKSTA_LOGGED_ON_USERS_PARMNUM* = 6
  WKSTA_LANROOT_PARMNUM* = 7
  WKSTA_LOGON_DOMAIN_PARMNUM* = 8
  WKSTA_LOGON_SERVER_PARMNUM* = 9
  WKSTA_CHARWAIT_PARMNUM* = 10
  WKSTA_CHARTIME_PARMNUM* = 11
  WKSTA_CHARCOUNT_PARMNUM* = 12
  WKSTA_KEEPCONN_PARMNUM* = 13
  WKSTA_KEEPSEARCH_PARMNUM* = 14
  WKSTA_MAXCMDS_PARMNUM* = 15
  WKSTA_NUMWORKBUF_PARMNUM* = 16
  WKSTA_MAXWRKCACHE_PARMNUM* = 17
  WKSTA_SESSTIMEOUT_PARMNUM* = 18
  WKSTA_SIZERROR_PARMNUM* = 19
  WKSTA_NUMALERTS_PARMNUM* = 20
  WKSTA_NUMSERVICES_PARMNUM* = 21
  WKSTA_NUMCHARBUF_PARMNUM* = 22
  WKSTA_SIZCHARBUF_PARMNUM* = 23
  WKSTA_ERRLOGSZ_PARMNUM* = 27
  WKSTA_PRINTBUFTIME_PARMNUM* = 28
  WKSTA_SIZWORKBUF_PARMNUM* = 29
  WKSTA_MAILSLOTS_PARMNUM* = 30
  WKSTA_NUMDGRAMBUF_PARMNUM* = 31
  WKSTA_WRKHEURISTICS_PARMNUM* = 32
  WKSTA_MAXTHREADS_PARMNUM* = 33
  WKSTA_LOCKQUOTA_PARMNUM* = 41
  WKSTA_LOCKINCREMENT_PARMNUM* = 42
  WKSTA_LOCKMAXIMUM_PARMNUM* = 43
  WKSTA_PIPEINCREMENT_PARMNUM* = 44
  WKSTA_PIPEMAXIMUM_PARMNUM* = 45
  WKSTA_DORMANTFILELIMIT_PARMNUM* = 46
  WKSTA_CACHEFILETIMEOUT_PARMNUM* = 47
  WKSTA_USEOPPORTUNISTICLOCKING_PARMNUM* = 48
  WKSTA_USEUNLOCKBEHIND_PARMNUM* = 49
  WKSTA_USECLOSEBEHIND_PARMNUM* = 50
  WKSTA_BUFFERNAMEDPIPES_PARMNUM* = 51
  WKSTA_USELOCKANDREADANDUNLOCK_PARMNUM* = 52
  WKSTA_UTILIZENTCACHING_PARMNUM* = 53
  WKSTA_USERAWREAD_PARMNUM* = 54
  WKSTA_USERAWWRITE_PARMNUM* = 55
  WKSTA_USEWRITERAWWITHDATA_PARMNUM* = 56
  WKSTA_USEENCRYPTION_PARMNUM* = 57
  WKSTA_BUFFILESWITHDENYWRITE_PARMNUM* = 58
  WKSTA_BUFFERREADONLYFILES_PARMNUM* = 59
  WKSTA_FORCECORECREATEMODE_PARMNUM* = 60
  WKSTA_USE512BYTESMAXTRANSFER_PARMNUM* = 61
  WKSTA_READAHEADTHRUPUT_PARMNUM* = 62
  WKSTA_PLATFORM_ID_PARMNUM* = 100
  WKSTA_OTH_DOMAINS_PARMNUM* = 101
  TRANSPORT_QUALITYOFSERVICE_PARMNUM* = 201
  TRANSPORT_NAME_PARMNUM* = 202

type
  WKSTA_INFO_100* {.final, pure.} = object
    wki100_platform_id*: DWORD
    wki100_computername*: LPWSTR
    wki100_langroup*: LPWSTR
    wki100_ver_major*: DWORD
    wki100_ver_minor*: DWORD
  PWKSTA_INFO_100* = ptr WKSTA_INFO_100
  LPWKSTA_INFO_100* = ptr WKSTA_INFO_100
  WKSTA_INFO_101* {.final, pure.} = object
    wki101_platform_id*: DWORD
    wki101_computername*: LPWSTR
    wki101_langroup*: LPWSTR
    wki101_ver_major*: DWORD
    wki101_ver_minor*: DWORD
    wki101_lanroot*: LPWSTR
  PWKSTA_INFO_101* = ptr WKSTA_INFO_101
  LPWKSTA_INFO_101* = ptr WKSTA_INFO_101
  WKSTA_INFO_102* {.final, pure.} = object
    wki102_platform_id*: DWORD
    wki102_computername*: LPWSTR
    wki102_langroup*: LPWSTR
    wki102_ver_major*: DWORD
    wki102_ver_minor*: DWORD
    wki102_lanroot*: LPWSTR
    wki102_logged_on_users*: DWORD
  PWKSTA_INFO_102* = ptr WKSTA_INFO_102
  LPWKSTA_INFO_102* = ptr WKSTA_INFO_102
  WKSTA_INFO_302* {.final, pure.} = object
    wki302_char_wait*: DWORD
    wki302_collection_time*: DWORD
    wki302_maximum_collection_count*: DWORD
    wki302_keep_conn*: DWORD
    wki302_keep_search*: DWORD
    wki302_max_cmds*: DWORD
    wki302_num_work_buf*: DWORD
    wki302_siz_work_buf*: DWORD
    wki302_max_wrk_cache*: DWORD
    wki302_sess_timeout*: DWORD
    wki302_siz_error*: DWORD
    wki302_num_alerts*: DWORD
    wki302_num_services*: DWORD
    wki302_errlog_sz*: DWORD
    wki302_print_buf_time*: DWORD
    wki302_num_char_buf*: DWORD
    wki302_siz_char_buf*: DWORD
    wki302_wrk_heuristics*: LPWSTR
    wki302_mailslots*: DWORD
    wki302_num_dgram_buf*: DWORD
  PWKSTA_INFO_302* = ptr WKSTA_INFO_302
  LPWKSTA_INFO_302* = ptr WKSTA_INFO_302
  WKSTA_INFO_402* {.final, pure.} = object
    wki402_char_wait*: DWORD
    wki402_collection_time*: DWORD
    wki402_maximum_collection_count*: DWORD
    wki402_keep_conn*: DWORD
    wki402_keep_search*: DWORD
    wki402_max_cmds*: DWORD
    wki402_num_work_buf*: DWORD
    wki402_siz_work_buf*: DWORD
    wki402_max_wrk_cache*: DWORD
    wki402_sess_timeout*: DWORD
    wki402_siz_error*: DWORD
    wki402_num_alerts*: DWORD
    wki402_num_services*: DWORD
    wki402_errlog_sz*: DWORD
    wki402_print_buf_time*: DWORD
    wki402_num_char_buf*: DWORD
    wki402_siz_char_buf*: DWORD
    wki402_wrk_heuristics*: LPWSTR
    wki402_mailslots*: DWORD
    wki402_num_dgram_buf*: DWORD
    wki402_max_threads*: DWORD
  PWKSTA_INFO_402* = ptr WKSTA_INFO_402
  LPWKSTA_INFO_402* = ptr WKSTA_INFO_402
  WKSTA_INFO_502* {.final, pure.} = object
    wki502_char_wait*: DWORD
    wki502_collection_time*: DWORD
    wki502_maximum_collection_count*: DWORD
    wki502_keep_conn*: DWORD
    wki502_max_cmds*: DWORD
    wki502_sess_timeout*: DWORD
    wki502_siz_char_buf*: DWORD
    wki502_max_threads*: DWORD
    wki502_lock_quota*: DWORD
    wki502_lock_increment*: DWORD
    wki502_lock_maximum*: DWORD
    wki502_pipe_increment*: DWORD
    wki502_pipe_maximum*: DWORD
    wki502_cache_file_timeout*: DWORD
    wki502_dormant_file_limit*: DWORD
    wki502_read_ahead_throughput*: DWORD
    wki502_num_mailslot_buffers*: DWORD
    wki502_num_srv_announce_buffers*: DWORD
    wki502_max_illegal_datagram_events*: DWORD
    wki502_illegal_datagram_event_reset_frequency*: DWORD
    wki502_log_election_packets*: BOOL
    wki502_use_opportunistic_locking*: BOOL
    wki502_use_unlock_behind*: BOOL
    wki502_use_close_behind*: BOOL
    wki502_buf_named_pipes*: BOOL
    wki502_use_lock_read_unlock*: BOOL
    wki502_utilize_nt_caching*: BOOL
    wki502_use_raw_read*: BOOL
    wki502_use_raw_write*: BOOL
    wki502_use_write_raw_data*: BOOL
    wki502_use_encryption*: BOOL
    wki502_buf_files_deny_write*: BOOL
    wki502_buf_read_only_files*: BOOL
    wki502_force_core_create_mode*: BOOL
    wki502_use_512_byte_max_transfer*: BOOL
  PWKSTA_INFO_502* = ptr WKSTA_INFO_502
  LPWKSTA_INFO_502* = ptr WKSTA_INFO_502
  WKSTA_INFO_1010* {.final, pure.} = object
    wki1010_char_wait*: DWORD
  PWKSTA_INFO_1010* = ptr WKSTA_INFO_1010
  LPWKSTA_INFO_1010* = ptr WKSTA_INFO_1010
  WKSTA_INFO_1011* {.final, pure.} = object
    wki1011_collection_time*: DWORD
  PWKSTA_INFO_1011* = ptr WKSTA_INFO_1011
  LPWKSTA_INFO_1011* = ptr WKSTA_INFO_1011
  WKSTA_INFO_1012* {.final, pure.} = object
    wki1012_maximum_collection_count*: DWORD
  PWKSTA_INFO_1012* = ptr WKSTA_INFO_1012
  LPWKSTA_INFO_1012* = ptr WKSTA_INFO_1012
  WKSTA_INFO_1027* {.final, pure.} = object
    wki1027_errlog_sz*: DWORD
  PWKSTA_INFO_1027* = ptr WKSTA_INFO_1027
  LPWKSTA_INFO_1027* = ptr WKSTA_INFO_1027
  WKSTA_INFO_1028* {.final, pure.} = object
    wki1028_print_buf_time*: DWORD
  PWKSTA_INFO_1028* = ptr WKSTA_INFO_1028
  LPWKSTA_INFO_1028* = ptr WKSTA_INFO_1028
  WKSTA_INFO_1032* {.final, pure.} = object
    wki1032_wrk_heuristics*: DWORD
  PWKSTA_INFO_1032* = ptr WKSTA_INFO_1032
  LPWKSTA_INFO_1032* = ptr WKSTA_INFO_1032
  WKSTA_INFO_1013* {.final, pure.} = object
    wki1013_keep_conn*: DWORD
  PWKSTA_INFO_1013* = ptr WKSTA_INFO_1013
  LPWKSTA_INFO_1013* = ptr WKSTA_INFO_1013
  WKSTA_INFO_1018* {.final, pure.} = object
    wki1018_sess_timeout*: DWORD
  PWKSTA_INFO_1018* = ptr WKSTA_INFO_1018
  LPWKSTA_INFO_1018* = ptr WKSTA_INFO_1018
  WKSTA_INFO_1023* {.final, pure.} = object
    wki1023_siz_char_buf*: DWORD
  PWKSTA_INFO_1023* = ptr WKSTA_INFO_1023
  LPWKSTA_INFO_1023* = ptr WKSTA_INFO_1023
  WKSTA_INFO_1033* {.final, pure.} = object
    wki1033_max_threads*: DWORD
  PWKSTA_INFO_1033* = ptr WKSTA_INFO_1033
  LPWKSTA_INFO_1033* = ptr WKSTA_INFO_1033
  WKSTA_INFO_1041* {.final, pure.} = object
    wki1041_lock_quota*: DWORD
  PWKSTA_INFO_1041* = ptr WKSTA_INFO_1041
  LPWKSTA_INFO_1041* = ptr WKSTA_INFO_1041
  WKSTA_INFO_1042* {.final, pure.} = object
    wki1042_lock_increment*: DWORD
  PWKSTA_INFO_1042* = ptr WKSTA_INFO_1042
  LPWKSTA_INFO_1042* = ptr WKSTA_INFO_1042
  WKSTA_INFO_1043* {.final, pure.} = object
    wki1043_lock_maximum*: DWORD
  PWKSTA_INFO_1043* = ptr WKSTA_INFO_1043
  LPWKSTA_INFO_1043* = ptr WKSTA_INFO_1043
  WKSTA_INFO_1044* {.final, pure.} = object
    wki1044_pipe_increment*: DWORD
  PWKSTA_INFO_1044* = ptr WKSTA_INFO_1044
  LPWKSTA_INFO_1044* = ptr WKSTA_INFO_1044
  WKSTA_INFO_1045* {.final, pure.} = object
    wki1045_pipe_maximum*: DWORD
  PWKSTA_INFO_1045* = ptr WKSTA_INFO_1045
  LPWKSTA_INFO_1045* = ptr WKSTA_INFO_1045
  WKSTA_INFO_1046* {.final, pure.} = object
    wki1046_dormant_file_limit*: DWORD
  PWKSTA_INFO_1046* = ptr WKSTA_INFO_1046
  LPWKSTA_INFO_1046* = ptr WKSTA_INFO_1046
  WKSTA_INFO_1047* {.final, pure.} = object
    wki1047_cache_file_timeout*: DWORD
  PWKSTA_INFO_1047* = ptr WKSTA_INFO_1047
  LPWKSTA_INFO_1047* = ptr WKSTA_INFO_1047
  WKSTA_INFO_1048* {.final, pure.} = object
    wki1048_use_opportunistic_locking*: BOOL
  PWKSTA_INFO_1048* = ptr WKSTA_INFO_1048
  LPWKSTA_INFO_1048* = ptr WKSTA_INFO_1048
  WKSTA_INFO_1049* {.final, pure.} = object
    wki1049_use_unlock_behind*: BOOL
  PWKSTA_INFO_1049* = ptr WKSTA_INFO_1049
  LPWKSTA_INFO_1049* = ptr WKSTA_INFO_1049
  WKSTA_INFO_1050* {.final, pure.} = object
    wki1050_use_close_behind*: BOOL
  PWKSTA_INFO_1050* = ptr WKSTA_INFO_1050
  LPWKSTA_INFO_1050* = ptr WKSTA_INFO_1050
  WKSTA_INFO_1051* {.final, pure.} = object
    wki1051_buf_named_pipes*: BOOL
  PWKSTA_INFO_1051* = ptr WKSTA_INFO_1051
  LPWKSTA_INFO_1051* = ptr WKSTA_INFO_1051
  WKSTA_INFO_1052* {.final, pure.} = object
    wki1052_use_lock_read_unlock*: BOOL
  PWKSTA_INFO_1052* = ptr WKSTA_INFO_1052
  LPWKSTA_INFO_1052* = ptr WKSTA_INFO_1052
  WKSTA_INFO_1053* {.final, pure.} = object
    wki1053_utilize_nt_caching*: BOOL
  PWKSTA_INFO_1053* = ptr WKSTA_INFO_1053
  LPWKSTA_INFO_1053* = ptr WKSTA_INFO_1053
  WKSTA_INFO_1054* {.final, pure.} = object
    wki1054_use_raw_read*: BOOL
  PWKSTA_INFO_1054* = ptr WKSTA_INFO_1054
  LPWKSTA_INFO_1054* = ptr WKSTA_INFO_1054
  WKSTA_INFO_1055* {.final, pure.} = object
    wki1055_use_raw_write*: BOOL
  PWKSTA_INFO_1055* = ptr WKSTA_INFO_1055
  LPWKSTA_INFO_1055* = ptr WKSTA_INFO_1055
  WKSTA_INFO_1056* {.final, pure.} = object
    wki1056_use_write_raw_data*: BOOL
  PWKSTA_INFO_1056* = ptr WKSTA_INFO_1056
  LPWKSTA_INFO_1056* = ptr WKSTA_INFO_1056
  WKSTA_INFO_1057* {.final, pure.} = object
    wki1057_use_encryption*: BOOL
  PWKSTA_INFO_1057* = ptr WKSTA_INFO_1057
  LPWKSTA_INFO_1057* = ptr WKSTA_INFO_1057
  WKSTA_INFO_1058* {.final, pure.} = object
    wki1058_buf_files_deny_write*: BOOL
  PWKSTA_INFO_1058* = ptr WKSTA_INFO_1058
  LPWKSTA_INFO_1058* = ptr WKSTA_INFO_1058
  WKSTA_INFO_1059* {.final, pure.} = object
    wki1059_buf_read_only_files*: BOOL
  PWKSTA_INFO_1059* = ptr WKSTA_INFO_1059
  LPWKSTA_INFO_1059* = ptr WKSTA_INFO_1059
  WKSTA_INFO_1060* {.final, pure.} = object
    wki1060_force_core_create_mode*: BOOL
  PWKSTA_INFO_1060* = ptr WKSTA_INFO_1060
  LPWKSTA_INFO_1060* = ptr WKSTA_INFO_1060
  WKSTA_INFO_1061* {.final, pure.} = object
    wki1061_use_512_byte_max_transfer*: BOOL
  PWKSTA_INFO_1061* = ptr WKSTA_INFO_1061
  LPWKSTA_INFO_1061* = ptr WKSTA_INFO_1061
  WKSTA_INFO_1062* {.final, pure.} = object
    wki1062_read_ahead_throughput*: DWORD
  PWKSTA_INFO_1062* = ptr WKSTA_INFO_1062
  LPWKSTA_INFO_1062* = ptr WKSTA_INFO_1062
  WKSTA_USER_INFO_0* {.final, pure.} = object
    wkui0_username*: LPWSTR
  PWKSTA_USER_INFO_0* = ptr WKSTA_USER_INFO_0
  LPWKSTA_USER_INFO_0* = ptr WKSTA_USER_INFO_0
  WKSTA_USER_INFO_1* {.final, pure.} = object
    wkui1_username*: LPWSTR
    wkui1_logon_domain*: LPWSTR
    wkui1_oth_domains*: LPWSTR
    wkui1_logon_server*: LPWSTR
  PWKSTA_USER_INFO_1* = ptr WKSTA_USER_INFO_1
  LPWKSTA_USER_INFO_1* = ptr WKSTA_USER_INFO_1
  WKSTA_USER_INFO_1101* {.final, pure.} = object
    wkui1101_oth_domains*: LPWSTR
  PWKSTA_USER_INFO_1101* = ptr WKSTA_USER_INFO_1101
  LPWKSTA_USER_INFO_1101* = ptr WKSTA_USER_INFO_1101
  WKSTA_TRANSPORT_INFO_0* {.final, pure.} = object
    wkti0_quality_of_service*: DWORD
    wkti0_number_of_vcs*: DWORD
    wkti0_transport_name*: LPWSTR
    wkti0_transport_address*: LPWSTR
    wkti0_wan_ish*: BOOL
  PWKSTA_TRANSPORT_INFO_0* = ptr WKSTA_TRANSPORT_INFO_0
  LPWKSTA_TRANSPORT_INFO_0* = ptr WKSTA_TRANSPORT_INFO_0

proc NetWkstaGetInfo*(P1: LPWSTR, P2: DWORD, P3: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetWkstaSetInfo*(P1: LPWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetWkstaUserGetInfo*(P1: LPWSTR, P2: DWORD, P3: ptr PBYTE): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetWkstaUserSetInfo*(P1: LPWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetWkstaUserEnum*(P1: LPWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetWkstaTransportAdd*(P1: LPWSTR, P2: DWORD, P3: PBYTE, P4: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetWkstaTransportDel*(P1: LPWSTR, P2: LPWSTR, P3: DWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}
proc NetWkstaTransportEnum*(P1: LPWSTR, P2: DWORD, P3: ptr PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD, P7: PDWORD): NET_API_STATUS {.winapi, dynlib: "netapi32", importc.}

# net/ras.nim

const
  # RASCONNSTATE* = enum
  RASCS_OpenPort* = 0
  RASCS_PortOpened* = 1
  RASCS_ConnectDevice* = 2
  RASCS_DeviceConnected* = 3
  RASCS_AllDevicesConnected* = 4
  RASCS_Authenticate* = 5
  RASCS_AuthNotify* = 6
  RASCS_AuthRetry* = 7
  RASCS_AuthCallback* = 8
  RASCS_AuthChangePassword* = 9
  RASCS_AuthProject* = 10
  RASCS_AuthLinkSpeed* = 11
  RASCS_AuthAck* = 12
  RASCS_ReAuthenticate* = 13
  RASCS_Authenticated* = 14
  RASCS_PrepareForCallback* = 15
  RASCS_WaitForModemReset* = 16
  RASCS_WaitForCallback* = 17
  RASCS_Projected* = 18
  RASCS_StartAuthentication* = 19
  RASCS_CallbackComplete* = 20
  RASCS_LogonNetwork* = 21
  RASCS_SubEntryConnected* = 22
  RASCS_SubEntryDisconnected* = 23
  RASCS_Interactive* = 4096
  RASCS_RetryAuthentication* = 4097
  RASCS_CallbackSetByCaller* = 4098
  RASCS_PasswordExpired* = 4099
  RASCS_InvokeEapUI* = 4100
  RASCS_Connected* = 8192
  RASCS_Disconnected* = 8193
#* RASPROJECTION* = enum
  RASP_PppIp* = 0x8021
  RASP_PppIpx* = 0x802B
  RASP_PppNbf* = 0x803F
  RASP_PppCcp* = 0x80FD
  RASP_PppLcp* = 0xC021
  RASP_Amb* = 0x10000
  RASP_Slip* = 0x20000

const
  RAS_MaxDeviceType* = 16
  RAS_MaxPhoneNumber* = 128
  RAS_MaxIpAddress* = 15
  RAS_MaxIpxAddress* = 21
  RAS_MaxEntryName* = 256
  RAS_MaxDeviceName* = 128
  RAS_MaxCallbackNumber* = RAS_MaxPhoneNumber
  RAS_MaxAreaCode* = 10
  RAS_MaxPadType* = 32
  RAS_MaxX25Address* = 200
  RAS_MaxFacilities* = 200
  RAS_MaxUserData* = 200
  RAS_MaxReplyMessage* = 1024
  RDEOPT_UsePrefixSuffix* = 0x00000001
  RDEOPT_PausedStates* = 0x00000002
  RDEOPT_IgnoreModemSpeaker* = 0x00000004
  RDEOPT_SetModemSpeaker* = 0x00000008
  RDEOPT_IgnoreSoftwareCompression* = 0x00000010
  RDEOPT_SetSoftwareCompression* = 0x00000020
  RDEOPT_DisableConnectedUI* = 0x00000040
  RDEOPT_DisableReconnectUI* = 0x00000080
  RDEOPT_DisableReconnect* = 0x00000100
  RDEOPT_NoUser* = 0x00000200
  RDEOPT_PauseOnScript* = 0x00000400
  RDEOPT_Router* = 0x00000800
  REN_User* = 0x00000000
  REN_AllUsers* = 0x00000001
  VS_Default* = 0
  VS_PptpOnly* = 1
  VS_PptpFirst* = 2
  VS_L2tpOnly* = 3
  VS_L2tpFirst* = 4
  RASDIALEVENT* = "RasDialEvent"
  WM_RASDIALEVENT* = 0xCCCD
  RASEO_UseCountryAndAreaCodes* = 0x00000001
  RASEO_SpecificIpAddr* = 0x00000002
  RASEO_SpecificNameServers* = 0x00000004
  RASEO_IpHeaderCompression* = 0x00000008
  RASEO_RemoteDefaultGateway* = 0x00000010
  RASEO_DisableLcpExtensions* = 0x00000020
  RASEO_TerminalBeforeDial* = 0x00000040
  RASEO_TerminalAfterDial* = 0x00000080
  RASEO_ModemLights* = 0x00000100
  RASEO_SwCompression* = 0x00000200
  RASEO_RequireEncryptedPw* = 0x00000400
  RASEO_RequireMsEncryptedPw* = 0x00000800
  RASEO_RequireDataEncryption* = 0x00001000
  RASEO_NetworkLogon* = 0x00002000
  RASEO_UseLogonCredentials* = 0x00004000
  RASEO_PromoteAlternates* = 0x00008000
  RASNP_NetBEUI* = 0x00000001
  RASNP_Ipx* = 0x00000002
  RASNP_Ip* = 0x00000004
  RASFP_Ppp* = 0x00000001
  RASFP_Slip* = 0x00000002
  RASFP_Ras* = 0x00000004
  RASDT_Modem* = "modem"
  RASDT_Isdn* = "isdn"
  RASDT_X25* = "x25"
  RASDT_Vpn* = "vpn"
  RASDT_Pad* = "pad"
  RASDT_Generic* = "GENERIC"
  RASDT_Serial* = "SERIAL"
  RASDT_FrameRelay* = "FRAMERELAY"
  RASDT_Atm* = "ATM"
  RASDT_Sonet* = "SONET"
  RASDT_SW56* = "SW56"
  RASDT_Irda* = "IRDA"
  RASDT_Parallel* = "PARALLEL"
  RASET_Phone* = 1
  RASET_Vpn* = 2
  RASET_Direct* = 3
  RASET_Internet* = 4
  RASEO_SecureLocalFiles* = 0x00010000
  RASCN_Connection* = 0x00000001
  RASCN_Disconnection* = 0x00000002
  RASCN_BandwidthAdded* = 0x00000004
  RASCN_BandwidthRemoved* = 0x00000008
  RASEDM_DialAll* = 1
  RASEDM_DialAsNeeded* = 2
  RASIDS_Disabled* = -1
  RASIDS_UseGlobalValue* = 0
  RASADFLG_PositionDlg* = 0x00000001
  RASCM_UserName* = 0x00000001
  RASCM_Password* = 0x00000002
  RASCM_Domain* = 0x00000004
  RASADP_DisableConnectionQuery* = 0
  RASADP_LoginSessionDisable* = 1
  RASADP_SavedAddressesLimit* = 2
  RASADP_FailedConnectionTimeout* = 3
  RASADP_ConnectionQueryTimeout* = 4
  RDEOPT_CustomDial* = 0x00001000
  RASLCPAP_PAP* = 0xC023
  RASLCPAP_SPAP* = 0xC027
  RASLCPAP_CHAP* = 0xC223
  RASLCPAP_EAP* = 0xC227
  RASLCPAD_CHAP_MD5* = 0x05
  RASLCPAD_CHAP_MS* = 0x80
  RASLCPAD_CHAP_MSV2* = 0x81
  RASLCPO_PFC* = 0x00000001
  RASLCPO_ACFC* = 0x00000002
  RASLCPO_SSHF* = 0x00000004
  RASLCPO_DES_56* = 0x00000008
  RASLCPO_3_DES* = 0x00000010
  RASCCPCA_MPPC* = 0x00000006
  RASCCPCA_STAC* = 0x00000005
  RASCCPO_Compression* = 0x00000001
  RASCCPO_HistoryLess* = 0x00000002
  RASCCPO_Encryption56bit* = 0x00000010
  RASCCPO_Encryption40bit* = 0x00000020
  RASCCPO_Encryption128bit* = 0x00000040
  RASEO_RequireEAP* = 0x00020000
  RASEO_RequirePAP* = 0x00040000
  RASEO_RequireSPAP* = 0x00080000
  RASEO_Custom* = 0x00100000
  RASEO_PreviewPhoneNumber* = 0x00200000
  RASEO_SharedPhoneNumbers* = 0x00800000
  RASEO_PreviewUserPw* = 0x01000000
  RASEO_PreviewDomain* = 0x02000000
  RASEO_ShowDialingProgress* = 0x04000000
  RASEO_RequireCHAP* = 0x08000000
  RASEO_RequireMsCHAP* = 0x10000000
  RASEO_RequireMsCHAP2* = 0x20000000
  RASEO_RequireW95MSCHAP* = 0x40000000
  RASEO_CustomScript* = 0x80000000'i32
  RASIPO_VJ* = 0x00000001
  RCD_SingleUser* = 0
  RCD_AllUsers* = 0x00000001
  RCD_Eap* = 0x00000002
  RASEAPF_NonInteractive* = 0x00000002
  RASEAPF_Logon* = 0x00000004
  RASEAPF_Preview* = 0x00000008
  ET_40Bit* = 1
  ET_128Bit* = 2
  ET_None* = 0
  ET_Require* = 1
  ET_RequireMax* = 2
  ET_Optional* = 3
  RASCS_PAUSED* = 0x1000
  RASCS_DONE* = 0x2000

type
  RASCONNSTATE* = int32
  LPRASCONNSTATE* = ptr RASCONNSTATE
  RASPROJECTION* = int32
  LPRASPROJECTION* = ptr RASPROJECTION
  HRASCONN* = HANDLE
  LPHRASCONN* = ptr HRASCONN
  RASCONNW* {.final, pure.} = object
    dwSize*: DWORD
    hrasconn*: HRASCONN
    szEntryName*: array[RAS_MaxEntryName + 1, WCHAR]
    szDeviceType*: array[RAS_MaxDeviceType + 1, WCHAR]
    szDeviceName*: array[RAS_MaxDeviceName + 1, WCHAR]
    szPhonebook*: array[MAX_PATH, WCHAR]
    dwSubEntry*: DWORD
    guidEntry*: GUID
    dwFlags*: DWORD
    luid*: LUID
  LPRASCONNW* = ptr RASCONNW
  RASCONNA* {.final, pure.} = object
    dwSize*: DWORD
    hrasconn*: HRASCONN
    szEntryName*: array[RAS_MaxEntryName + 1, CHAR]
    szDeviceType*: array[RAS_MaxDeviceType + 1, CHAR]
    szDeviceName*: array[RAS_MaxDeviceName + 1, CHAR]
    szPhonebook*: array[MAX_PATH, CHAR]
    dwSubEntry*: DWORD
    guidEntry*: GUID
    dwFlags*: DWORD
    luid*: LUID
  LPRASCONNA* = ptr RASCONNA
  RASCONNSTATUSW* {.final, pure.} = object
    dwSize*: DWORD
    rasconnstate*: RASCONNSTATE
    dwError*: DWORD
    szDeviceType*: array[RAS_MaxDeviceType + 1, WCHAR]
    szDeviceName*: array[RAS_MaxDeviceName + 1, WCHAR]
    szPhoneNumber*: array[RAS_MaxPhoneNumber + 1, WCHAR]
  LPRASCONNSTATUSW* = ptr RASCONNSTATUSW
  RASCONNSTATUSA* {.final, pure.} = object
    dwSize*: DWORD
    rasconnstate*: RASCONNSTATE
    dwError*: DWORD
    szDeviceType*: array[RAS_MaxDeviceType + 1, CHAR]
    szDeviceName*: array[RAS_MaxDeviceName + 1, CHAR]
    szPhoneNumber*: array[RAS_MaxPhoneNumber + 1, CHAR]
  LPRASCONNSTATUSA* = ptr RASCONNSTATUSA
  RASDIALPARAMSW* {.final, pure.} = object
    dwSize*: DWORD
    szEntryName*: array[RAS_MaxEntryName + 1, WCHAR]
    szPhoneNumber*: array[RAS_MaxPhoneNumber + 1, WCHAR]
    szCallbackNumber*: array[RAS_MaxCallbackNumber + 1, WCHAR]
    szUserName*: array[UNLEN + 1, WCHAR]
    szPassword*: array[PWLEN + 1, WCHAR]
    szDomain*: array[DNLEN + 1, WCHAR]
    dwSubEntry*: DWORD
    dwCallbackId*: ULONG_PTR
  LPRASDIALPARAMSW* = ptr RASDIALPARAMSW
  RASDIALPARAMSA* {.final, pure.} = object
    dwSize*: DWORD
    szEntryName*: array[RAS_MaxEntryName + 1, CHAR]
    szPhoneNumber*: array[RAS_MaxPhoneNumber + 1, CHAR]
    szCallbackNumber*: array[RAS_MaxCallbackNumber + 1, CHAR]
    szUserName*: array[UNLEN + 1, CHAR]
    szPassword*: array[PWLEN + 1, CHAR]
    szDomain*: array[DNLEN + 1, CHAR]
    dwSubEntry*: DWORD
    dwCallbackId*: ULONG_PTR
  LPRASDIALPARAMSA* = ptr RASDIALPARAMSA
  RASEAPINFO* {.final, pure.} = object
    dwSizeofEapInfo*: DWORD
    pbEapInfo*: ptr BYTE
  RASDIALEXTENSIONS* {.final, pure.} = object
    dwSize*: DWORD
    dwfOptions*: DWORD
    hwndParent*: HWND
    reserved*: ULONG_PTR
    reserved1*: ULONG_PTR
    RasEapInfo*: RASEAPINFO
  LPRASDIALEXTENSIONS* = ptr RASDIALEXTENSIONS
  RASENTRYNAMEW* {.final, pure.} = object
    dwSize*: DWORD
    szEntryName*: array[RAS_MaxEntryName + 1, WCHAR]
    dwFlags*: DWORD
    szPhonebookPath*: array[MAX_PATH + 1, WCHAR]
  LPRASENTRYNAMEW* = ptr RASENTRYNAMEW
  RASENTRYNAMEA* {.final, pure.} = object
    dwSize*: DWORD
    szEntryName*: array[RAS_MaxEntryName + 1, CHAR]
    dwFlags*: DWORD
    szPhonebookPath*: array[MAX_PATH + 1, CHAR]
  LPRASENTRYNAMEA* = ptr RASENTRYNAMEA
  RASAMBW* {.final, pure.} = object
    dwSize*: DWORD
    dwError*: DWORD
    szNetBiosError*: array[NETBIOS_NAME_LEN + 1, WCHAR]
    bLana*: BYTE
  LPRASAMBW* = ptr RASAMBW
  RASAMBA* {.final, pure.} = object
    dwSize*: DWORD
    dwError*: DWORD
    szNetBiosError*: array[NETBIOS_NAME_LEN + 1, CHAR]
    bLana*: BYTE
  LPRASAMBA* = ptr RASAMBA
  RASPPPNBFW* {.final, pure.} = object
    dwSize*: DWORD
    dwError*: DWORD
    dwNetBiosError*: DWORD
    szNetBiosError*: array[NETBIOS_NAME_LEN + 1, WCHAR]
    szWorkstationName*: array[NETBIOS_NAME_LEN + 1, WCHAR]
    bLana*: BYTE
  LPRASPPPNBFW* = ptr RASPPPNBFW
  RASPPPNBFA* {.final, pure.} = object
    dwSize*: DWORD
    dwError*: DWORD
    dwNetBiosError*: DWORD
    szNetBiosError*: array[NETBIOS_NAME_LEN + 1, CHAR]
    szWorkstationName*: array[NETBIOS_NAME_LEN + 1, CHAR]
    bLana*: BYTE
  LPRASPPPNBFA* = ptr RASPPPNBFA
  RASPPPIPXW* {.final, pure.} = object
    dwSize*: DWORD
    dwError*: DWORD
    szIpxAddress*: array[RAS_MaxIpxAddress + 1, WCHAR]
  LPRASPPPIPXW* = ptr RASPPPIPXW
  RASPPPIPXA* {.final, pure.} = object
    dwSize*: DWORD
    dwError*: DWORD
    szIpxAddress*: array[RAS_MaxIpxAddress + 1, CHAR]
  LPRASPPPIPXA* = ptr RASPPPIPXA
  RASPPPIPW* {.final, pure.} = object
    dwSize*: DWORD
    dwError*: DWORD
    szIpAddress*: array[RAS_MaxIpAddress + 1, WCHAR]
    szServerIpAddress*: array[RAS_MaxIpAddress + 1, WCHAR]
    dwOptions*: DWORD
    dwServerOptions*: DWORD
  LPRASPPPIPW* = ptr RASPPPIPW
  RASPPPIPA* {.final, pure.} = object
    dwSize*: DWORD
    dwError*: DWORD
    szIpAddress*: array[RAS_MaxIpAddress + 1, CHAR]
    szServerIpAddress*: array[RAS_MaxIpAddress + 1, CHAR]
    dwOptions*: DWORD
    dwServerOptions*: DWORD
  LPRASPPPIPA* = ptr RASPPPIPA
  RASPPPLCPW* {.final, pure.} = object
    dwSize*: DWORD
    fBundled*: BOOL
    dwError*: DWORD
    dwAuthenticationProtocol*: DWORD
    dwAuthenticationData*: DWORD
    dwEapTypeId*: DWORD
    dwServerAuthenticationProtocol*: DWORD
    dwServerAuthenticationData*: DWORD
    dwServerEapTypeId*: DWORD
    fMultilink*: BOOL
    dwTerminateReason*: DWORD
    dwServerTerminateReason*: DWORD
    szReplyMessage*: array[RAS_MaxReplyMessage, WCHAR]
    dwOptions*: DWORD
    dwServerOptions*: DWORD
  LPRASPPPLCPW* = ptr RASPPPLCPW
  RASPPPLCPA* {.final, pure.} = object
    dwSize*: DWORD
    fBundled*: BOOL
    dwError*: DWORD
    dwAuthenticationProtocol*: DWORD
    dwAuthenticationData*: DWORD
    dwEapTypeId*: DWORD
    dwServerAuthenticationProtocol*: DWORD
    dwServerAuthenticationData*: DWORD
    dwServerEapTypeId*: DWORD
    fMultilink*: BOOL
    dwTerminateReason*: DWORD
    dwServerTerminateReason*: DWORD
    szReplyMessage*: array[RAS_MaxReplyMessage, CHAR]
    dwOptions*: DWORD
    dwServerOptions*: DWORD
  LPRASPPPLCPA* = ptr RASPPPLCPA
  RASSLIPW* {.final, pure.} = object
    dwSize*: DWORD
    dwError*: DWORD
    szIpAddress*: array[RAS_MaxIpAddress + 1, WCHAR]
  LPRASSLIPW* = ptr RASSLIPW
  RASSLIPA* {.final, pure.} = object
    dwSize*: DWORD
    dwError*: DWORD
    szIpAddress*: array[RAS_MaxIpAddress + 1, CHAR]
  LPRASSLIPA* = ptr RASSLIPA
  RASDEVINFOW* {.final, pure.} = object
    dwSize*: DWORD
    szDeviceType*: array[RAS_MaxDeviceType + 1, WCHAR]
    szDeviceName*: array[RAS_MaxDeviceName + 1, WCHAR]
  LPRASDEVINFOW* = ptr RASDEVINFOW
  RASDEVINFOA* {.final, pure.} = object
    dwSize*: DWORD
    szDeviceType*: array[RAS_MaxDeviceType + 1, CHAR]
    szDeviceName*: array[RAS_MaxDeviceName + 1, CHAR]
  LPRASDEVINFOA* = ptr RASDEVINFOA
  RASCTRYINFO* {.final, pure.} = object
    dwSize*: DWORD
    dwCountryID*: DWORD
    dwNextCountryID*: DWORD
    dwCountryCode*: DWORD
    dwCountryNameOffset*: DWORD
  LPRASCTRYINFO* = ptr RASCTRYINFO
  RASCTRYINFOW* = RASCTRYINFO
  RASCTRYINFOA* = RASCTRYINFO
  LPRASCTRYINFOW* = ptr RASCTRYINFOW
  LPRASCTRYINFOA* = ptr RASCTRYINFOA
  RASIPADDR* {.final, pure.} = object
    a*: BYTE
    b*: BYTE
    c*: BYTE
    d*: BYTE
  RASENTRYW* {.final, pure.} = object
    dwSize*: DWORD
    dwfOptions*: DWORD
    dwCountryID*: DWORD
    dwCountryCode*: DWORD
    szAreaCode*: array[RAS_MaxAreaCode + 1, WCHAR]
    szLocalPhoneNumber*: array[RAS_MaxPhoneNumber + 1, WCHAR]
    dwAlternateOffset*: DWORD
    ipaddr*: RASIPADDR
    ipaddrDns*: RASIPADDR
    ipaddrDnsAlt*: RASIPADDR
    ipaddrWins*: RASIPADDR
    ipaddrWinsAlt*: RASIPADDR
    dwFrameSize*: DWORD
    dwfNetProtocols*: DWORD
    dwFramingProtocol*: DWORD
    szScript*: array[MAX_PATH, WCHAR]
    szAutodialDll*: array[MAX_PATH, WCHAR]
    szAutodialFunc*: array[MAX_PATH, WCHAR]
    szDeviceType*: array[RAS_MaxDeviceType + 1, WCHAR]
    szDeviceName*: array[RAS_MaxDeviceName + 1, WCHAR]
    szX25PadType*: array[RAS_MaxPadType + 1, WCHAR]
    szX25Address*: array[RAS_MaxX25Address + 1, WCHAR]
    szX25Facilities*: array[RAS_MaxFacilities + 1, WCHAR]
    szX25UserData*: array[RAS_MaxUserData + 1, WCHAR]
    dwChannels*: DWORD
    dwReserved1*: DWORD
    dwReserved2*: DWORD
    dwSubEntries*: DWORD
    dwDialMode*: DWORD
    dwDialExtraPercent*: DWORD
    dwDialExtraSampleSeconds*: DWORD
    dwHangUpExtraPercent*: DWORD
    dwHangUpExtraSampleSeconds*: DWORD
    dwIdleDisconnectSeconds*: DWORD
    dwType*: DWORD
    dwEncryptionType*: DWORD
    dwCustomAuthKey*: DWORD
    guidId*: GUID
    szCustomDialDll*: array[MAX_PATH, WCHAR]
    dwVpnStrategy*: DWORD
  LPRASENTRYW* = ptr RASENTRYW
  RASENTRYA* {.final, pure.} = object
    dwSize*: DWORD
    dwfOptions*: DWORD
    dwCountryID*: DWORD
    dwCountryCode*: DWORD
    szAreaCode*: array[RAS_MaxAreaCode + 1, CHAR]
    szLocalPhoneNumber*: array[RAS_MaxPhoneNumber + 1, CHAR]
    dwAlternateOffset*: DWORD
    ipaddr*: RASIPADDR
    ipaddrDns*: RASIPADDR
    ipaddrDnsAlt*: RASIPADDR
    ipaddrWins*: RASIPADDR
    ipaddrWinsAlt*: RASIPADDR
    dwFrameSize*: DWORD
    dwfNetProtocols*: DWORD
    dwFramingProtocol*: DWORD
    szScript*: array[MAX_PATH, CHAR]
    szAutodialDll*: array[MAX_PATH, CHAR]
    szAutodialFunc*: array[MAX_PATH, CHAR]
    szDeviceType*: array[RAS_MaxDeviceType + 1, CHAR]
    szDeviceName*: array[RAS_MaxDeviceName + 1, CHAR]
    szX25PadType*: array[RAS_MaxPadType + 1, CHAR]
    szX25Address*: array[RAS_MaxX25Address + 1, CHAR]
    szX25Facilities*: array[RAS_MaxFacilities + 1, CHAR]
    szX25UserData*: array[RAS_MaxUserData + 1, CHAR]
    dwChannels*: DWORD
    dwReserved1*: DWORD
    dwReserved2*: DWORD
    dwSubEntries*: DWORD
    dwDialMode*: DWORD
    dwDialExtraPercent*: DWORD
    dwDialExtraSampleSeconds*: DWORD
    dwHangUpExtraPercent*: DWORD
    dwHangUpExtraSampleSeconds*: DWORD
    dwIdleDisconnectSeconds*: DWORD
    dwType*: DWORD
    dwEncryptionType*: DWORD
    dwCustomAuthKey*: DWORD
    guidId*: GUID
    szCustomDialDll*: array[MAX_PATH, CHAR]
    dwVpnStrategy*: DWORD
  LPRASENTRYA* = ptr RASENTRYA
  RASADPARAMS* {.final, pure.} = object
    dwSize*: DWORD
    hwndOwner*: HWND
    dwFlags*: DWORD
    xDlg*: LONG
    yDlg*: LONG
  LPRASADPARAMS* = ptr RASADPARAMS
  RASSUBENTRYW* {.final, pure.} = object
    dwSize*: DWORD
    dwfFlags*: DWORD
    szDeviceType*: array[RAS_MaxDeviceType + 1, WCHAR]
    szDeviceName*: array[RAS_MaxDeviceName + 1, WCHAR]
    szLocalPhoneNumber*: array[RAS_MaxPhoneNumber + 1, WCHAR]
    dwAlternateOffset*: DWORD
  LPRASSUBENTRYW* = ptr RASSUBENTRYW
  RASSUBENTRYA* {.final, pure.} = object
    dwSize*: DWORD
    dwfFlags*: DWORD
    szDeviceType*: array[RAS_MaxDeviceType + 1, CHAR]
    szDeviceName*: array[RAS_MaxDeviceName + 1, CHAR]
    szLocalPhoneNumber*: array[RAS_MaxPhoneNumber + 1, CHAR]
    dwAlternateOffset*: DWORD
  LPRASSUBENTRYA* = ptr RASSUBENTRYA
  RASCREDENTIALSW* {.final, pure.} = object
    dwSize*: DWORD
    dwMask*: DWORD
    szUserName*: array[UNLEN + 1, WCHAR]
    szPassword*: array[PWLEN + 1, WCHAR]
    szDomain*: array[DNLEN + 1, WCHAR]
  LPRASCREDENTIALSW* = ptr RASCREDENTIALSW
  RASCREDENTIALSA* {.final, pure.} = object
    dwSize*: DWORD
    dwMask*: DWORD
    szUserName*: array[UNLEN + 1, CHAR]
    szPassword*: array[PWLEN + 1, CHAR]
    szDomain*: array[DNLEN + 1, CHAR]
  LPRASCREDENTIALSA* = ptr RASCREDENTIALSA
  RASAUTODIALENTRYW* {.final, pure.} = object
    dwSize*: DWORD
    dwFlags*: DWORD
    dwDialingLocation*: DWORD
    szEntry*: array[RAS_MaxEntryName + 1, WCHAR]
  LPRASAUTODIALENTRYW* = ptr RASAUTODIALENTRYW
  RASAUTODIALENTRYA* {.final, pure.} = object
    dwSize*: DWORD
    dwFlags*: DWORD
    dwDialingLocation*: DWORD
    szEntry*: array[RAS_MaxEntryName + 1, CHAR]
  LPRASAUTODIALENTRYA* = ptr RASAUTODIALENTRYA
  RASPPPCCP* {.final, pure.} = object
    dwSize*: DWORD
    dwError*: DWORD
    dwCompressionAlgorithm*: DWORD
    dwOptions*: DWORD
    dwServerCompressionAlgorithm*: DWORD
    dwServerOptions*: DWORD
  LPRASPPPCCP* = ptr RASPPPCCP
  RASEAPUSERIDENTITYW* {.final, pure.} = object
    szUserName*: array[UNLEN + 1, WCHAR]
    dwSizeofEapInfo*: DWORD
    pbEapInfo*: array[1, BYTE]
  LPRASEAPUSERIDENTITYW* = ptr RASEAPUSERIDENTITYW
  RASEAPUSERIDENTITYA* {.final, pure.} = object
    szUserName*: array[UNLEN + 1, CHAR]
    dwSizeofEapInfo*: DWORD
    pbEapInfo*: array[1, BYTE]
  LPRASEAPUSERIDENTITYA* = ptr RASEAPUSERIDENTITYA
  RAS_STATS* {.final, pure.} = object
    dwSize*: DWORD
    dwBytesXmited*: DWORD
    dwBytesRcved*: DWORD
    dwFramesXmited*: DWORD
    dwFramesRcved*: DWORD
    dwCrcErr*: DWORD
    dwTimeoutErr*: DWORD
    dwAlignmentErr*: DWORD
    dwHardwareOverrunErr*: DWORD
    dwFramingErr*: DWORD
    dwBufferOverrunErr*: DWORD
    dwCompressionRatioIn*: DWORD
    dwCompressionRatioOut*: DWORD
    dwBps*: DWORD
    dwConnectDuration*: DWORD
  PRAS_STATS* = ptr RAS_STATS

when not defined(winansi):
  type
    RASCONN* = RASCONNW
    RASENTRY* = RASENTRYW
    RASCONNSTATUS* = RASCONNSTATUSW
    RASDIALPARAMS* = RASDIALPARAMSW
    RASAMB* = RASAMBW
    RASPPPNBF* = RASPPPNBFW
    RASPPPIPX* = RASPPPIPXW
    RASPPPIP* = RASPPPIPW
    RASPPPLCP* = RASPPPLCPW
    RASSLIP* = RASSLIPW
    RASDEVINFO* = RASDEVINFOW
    RASENTRYNAME* = RASENTRYNAMEW
    RASSUBENTRY* = RASSUBENTRYW
    RASCREDENTIALS* = RASCREDENTIALSW
    RASAUTODIALENTRY* = RASAUTODIALENTRYW
    RASEAPUSERIDENTITY* = RASEAPUSERIDENTITYW

else:
  type
    RASCONN* = RASCONNA
    RASENTRY* = RASENTRYA
    RASCONNSTATUS* = RASCONNSTATUSA
    RASDIALPARAMS* = RASDIALPARAMSA
    RASAMB* = RASAMBA
    RASPPPNBF* = RASPPPNBFA
    RASPPPIPX* = RASPPPIPXA
    RASPPPIP* = RASPPPIPA
    RASPPPLCP* = RASPPPLCPA
    RASSLIP* = RASSLIPA
    RASDEVINFO* = RASDEVINFOA
    RASENTRYNAME* = RASENTRYNAMEA
    RASSUBENTRY* = RASSUBENTRYA
    RASCREDENTIALS* = RASCREDENTIALSA
    RASAUTODIALENTRY* = RASAUTODIALENTRYA
    RASEAPUSERIDENTITY* = RASEAPUSERIDENTITYA

type
  LPRASCONN* = ptr RASCONN
  LPRASENTRY* = ptr RASENTRY
  LPRASCONNSTATUS* = ptr RASCONNSTATUS
  LPRASDIALPARAMS* = ptr RASDIALPARAMS
  LPRASAM* = ptr RASAMB
  LPRASPPPNBF* = ptr RASPPPNBF
  LPRASPPPIPX* = ptr RASPPPIPX
  LPRASPPPIP* = ptr RASPPPIP
  LPRASPPPLCP* = ptr RASPPPLCP
  LPRASSLIP* = ptr RASSLIP
  LPRASDEVINFO* = ptr RASDEVINFO
  LPRASENTRYNAME* = ptr RASENTRYNAME
  LPRASSUBENTRY* = ptr RASSUBENTRY
  LPRASCREDENTIALS* = ptr RASCREDENTIALS
  LPRASAUTODIALENTRY* = ptr RASAUTODIALENTRY
  LPRASEAPUSERIDENTITY* = ptr RASEAPUSERIDENTITY
  ORASADFUNC* = proc (P1: HWND, P2: LPSTR, P3: DWORD, P4: LPDWORD): BOOL {.cdecl.}
  RASDIALFUNC* = proc (P1: UINT, P2: RASCONNSTATE, P3: DWORD): void {.cdecl.}
  RASDIALFUNC1* = proc (P1: HRASCONN, P2: UINT, P3: RASCONNSTATE, P4: DWORD, P5: DWORD): void {.cdecl.}
  RASDIALFUNC2* = proc (P1: ULONG_PTR, P2: DWORD, P3: HRASCONN, P4: UINT, P5: RASCONNSTATE, P6: DWORD, P7: DWORD): DWORD {.cdecl.}

proc RasDialA*(P1: LPRASDIALEXTENSIONS, P2: LPCSTR, P3: LPRASDIALPARAMSA, P4: DWORD, P5: LPVOID, P6: LPHRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasDialW*(P1: LPRASDIALEXTENSIONS, P2: LPCWSTR, P3: LPRASDIALPARAMSW, P4: DWORD, P5: LPVOID, P6: LPHRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasEnumConnectionsA*(P1: LPRASCONNA, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasEnumConnectionsW*(P1: LPRASCONNW, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasEnumEntriesA*(P1: LPCSTR, P2: LPCSTR, P3: LPRASENTRYNAMEA, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasEnumEntriesW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPRASENTRYNAMEW, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetConnectStatusA*(P1: HRASCONN, P2: LPRASCONNSTATUSA): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetConnectStatusW*(P1: HRASCONN, P2: LPRASCONNSTATUSW): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetErrorStringA*(P1: UINT, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetErrorStringW*(P1: UINT, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasHangUpA*(P1: HRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasHangUpW*(P1: HRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetProjectionInfoA*(P1: HRASCONN, P2: RASPROJECTION, P3: LPVOID, P4: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetProjectionInfoW*(P1: HRASCONN, P2: RASPROJECTION, P3: LPVOID, P4: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasCreatePhonebookEntryA*(P1: HWND, P2: LPCSTR): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasCreatePhonebookEntryW*(P1: HWND, P2: LPCWSTR): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasEditPhonebookEntryA*(P1: HWND, P2: LPCSTR, P3: LPCSTR): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasEditPhonebookEntryW*(P1: HWND, P2: LPCWSTR, P3: LPCWSTR): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetEntryDialParamsA*(P1: LPCSTR, P2: LPRASDIALPARAMSA, P3: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetEntryDialParamsW*(P1: LPCWSTR, P2: LPRASDIALPARAMSW, P3: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetEntryDialParamsA*(P1: LPCSTR, P2: LPRASDIALPARAMSA, P3: LPBOOL): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetEntryDialParamsW*(P1: LPCWSTR, P2: LPRASDIALPARAMSW, P3: LPBOOL): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasEnumDevicesA*(P1: LPRASDEVINFOA, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasEnumDevicesW*(P1: LPRASDEVINFOW, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetCountryInfoA*(P1: LPRASCTRYINFOA, P2: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetCountryInfoW*(P1: LPRASCTRYINFOW, P2: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetEntryPropertiesA*(P1: LPCSTR, P2: LPCSTR, P3: LPRASENTRYA, P4: LPDWORD, P5: LPBYTE, P6: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetEntryPropertiesW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPRASENTRYW, P4: LPDWORD, P5: LPBYTE, P6: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetEntryPropertiesA*(P1: LPCSTR, P2: LPCSTR, P3: LPRASENTRYA, P4: DWORD, P5: LPBYTE, P6: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetEntryPropertiesW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPRASENTRYW, P4: DWORD, P5: LPBYTE, P6: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasRenameEntryA*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasRenameEntryW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasDeleteEntryA*(P1: LPCSTR, P2: LPCSTR): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasDeleteEntryW*(P1: LPCWSTR, P2: LPCWSTR): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasValidateEntryNameA*(P1: LPCSTR, P2: LPCSTR): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasValidateEntryNameW*(P1: LPCWSTR, P2: LPCWSTR): DWORD {.winapi, dynlib: "rasapi32", importc.}

type
  RASADFUNCA* = proc (P1: LPSTR, P2: LPSTR, P3: LPRASADPARAMS, P4: LPDWORD): BOOL {.cdecl.}
  RASADFUNCW* = proc (P1: LPWSTR, P2: LPWSTR, P3: LPRASADPARAMS, P4: LPDWORD): BOOL {.cdecl.}

proc RasGetSubEntryHandleA*(P1: HRASCONN, P2: DWORD, P3: LPHRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetSubEntryHandleW*(P1: HRASCONN, P2: DWORD, P3: LPHRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetCredentialsA*(P1: LPCSTR, P2: LPCSTR, P3: LPRASCREDENTIALSA): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetCredentialsW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPRASCREDENTIALSW): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetCredentialsA*(P1: LPCSTR, P2: LPCSTR, P3: LPRASCREDENTIALSA, P4: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetCredentialsW*(P1: LPCWSTR, P2: LPCWSTR, P3: LPRASCREDENTIALSW, P4: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasConnectionNotificationA*(P1: HRASCONN, P2: HANDLE, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasConnectionNotificationW*(P1: HRASCONN, P2: HANDLE, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetSubEntryPropertiesA*(P1: LPCSTR, P2: LPCSTR, P3: DWORD, P4: LPRASSUBENTRYA, P5: LPDWORD, P6: LPBYTE, P7: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetSubEntryPropertiesW*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: LPRASSUBENTRYW, P5: LPDWORD, P6: LPBYTE, P7: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetSubEntryPropertiesA*(P1: LPCSTR, P2: LPCSTR, P3: DWORD, P4: LPRASSUBENTRYA, P5: DWORD, P6: LPBYTE, P7: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetSubEntryPropertiesW*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: LPRASSUBENTRYW, P5: DWORD, P6: LPBYTE, P7: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetAutodialAddressA*(P1: LPCSTR, P2: LPDWORD, P3: LPRASAUTODIALENTRYA, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetAutodialAddressW*(P1: LPCWSTR, P2: LPDWORD, P3: LPRASAUTODIALENTRYW, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetAutodialAddressA*(P1: LPCSTR, P2: DWORD, P3: LPRASAUTODIALENTRYA, P4: DWORD, P5: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetAutodialAddressW*(P1: LPCWSTR, P2: DWORD, P3: LPRASAUTODIALENTRYW, P4: DWORD, P5: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasEnumAutodialAddressesA*(P1: ptr LPSTR, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasEnumAutodialAddressesW*(P1: ptr LPWSTR, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetAutodialEnableA*(P1: DWORD, P2: LPBOOL): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetAutodialEnableW*(P1: DWORD, P2: LPBOOL): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetAutodialEnableA*(P1: DWORD, P2: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetAutodialEnableW*(P1: DWORD, P2: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetAutodialParamA*(P1: DWORD, P2: LPVOID, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetAutodialParamW*(P1: DWORD, P2: LPVOID, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetAutodialParamA*(P1: DWORD, P2: LPVOID, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetAutodialParamW*(P1: DWORD, P2: LPVOID, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}

type
  RasCustomHangUpFn* = proc (P1: HRASCONN): DWORD {.cdecl.}
  RasCustomDeleteEntryNotifyFn* = proc (P1: LPCTSTR, P2: LPCTSTR, P3: DWORD): DWORD {.cdecl.}
  RasCustomDialFn* = proc (P1: HINSTANCE, P2: LPRASDIALEXTENSIONS, P3: LPCTSTR, P4: LPRASDIALPARAMS, P5: DWORD, P6: LPVOID, P7: LPHRASCONN, P8: DWORD): DWORD {.cdecl.}

proc RasInvokeEapUI*(P1: HRASCONN, P2: DWORD, P3: LPRASDIALEXTENSIONS, P4: HWND): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetLinkStatistics*(P1: HRASCONN, P2: DWORD, P3: ptr RAS_STATS): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetConnectionStatistics*(P1: HRASCONN, P2: ptr RAS_STATS): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasClearLinkStatistics*(P1: HRASCONN, P2: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasClearConnectionStatistics*(P1: HRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetEapUserDataA*(P1: HANDLE, P2: LPCSTR, P3: LPCSTR, P4: ptr BYTE, P5: ptr DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetEapUserDataW*(P1: HANDLE, P2: LPCWSTR, P3: LPCWSTR, P4: ptr BYTE, P5: ptr DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetEapUserDataA*(P1: HANDLE, P2: LPCSTR, P3: LPCSTR, P4: ptr BYTE, P5: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetEapUserDataW*(P1: HANDLE, P2: LPCWSTR, P3: LPCWSTR, P4: ptr BYTE, P5: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetCustomAuthDataA*(P1: LPCSTR, P2: LPCSTR, P3: ptr BYTE, P4: ptr DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetCustomAuthDataW*(P1: LPCWSTR, P2: LPCWSTR, P3: ptr BYTE, P4: ptr DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetCustomAuthDataA*(P1: LPCSTR, P2: LPCSTR, P3: ptr BYTE, P4: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasSetCustomAuthDataW*(P1: LPCWSTR, P2: LPCWSTR, P3: ptr BYTE, P4: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetEapUserIdentityW*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: HWND, P5: ptr LPRASEAPUSERIDENTITYW): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasGetEapUserIdentityA*(P1: LPCSTR, P2: LPCSTR, P3: DWORD, P4: HWND, P5: ptr LPRASEAPUSERIDENTITYA): DWORD {.winapi, dynlib: "rasapi32", importc.}
proc RasFreeEapUserIdentityW*(P1: LPRASEAPUSERIDENTITYW): void {.winapi, dynlib: "rasapi32", importc.}
proc RasFreeEapUserIdentityA*(P1: LPRASEAPUSERIDENTITYA): void {.winapi, dynlib: "rasapi32", importc.}

when not defined(winansi):
  proc RasDial*(P1: LPRASDIALEXTENSIONS, P2: LPCWSTR, P3: LPRASDIALPARAMSW, P4: DWORD, P5: LPVOID, P6: LPHRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc: "RasDialW".}
  proc RasEnumConnections*(P1: LPRASCONNW, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasEnumConnectionsW".}
  proc RasEnumEntries*(P1: LPCWSTR, P2: LPCWSTR, P3: LPRASENTRYNAMEW, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasEnumEntriesW".}
  proc RasGetConnectStatus*(P1: HRASCONN, P2: LPRASCONNSTATUSW): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetConnectStatusW".}
  proc RasGetErrorString*(P1: UINT, P2: LPWSTR, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetErrorStringW".}
  proc RasHangUp*(P1: HRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc: "RasHangUpW".}
  proc RasGetProjectionInfo*(P1: HRASCONN, P2: RASPROJECTION, P3: LPVOID, P4: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetProjectionInfoW".}
  proc RasCreatePhonebookEntry*(P1: HWND, P2: LPCWSTR): DWORD {.winapi, dynlib: "rasapi32", importc: "RasCreatePhonebookEntryW".}
  proc RasEditPhonebookEntry*(P1: HWND, P2: LPCWSTR, P3: LPCWSTR): DWORD {.winapi, dynlib: "rasapi32", importc: "RasEditPhonebookEntryW".}
  proc RasSetEntryDialParams*(P1: LPCWSTR, P2: LPRASDIALPARAMSW, P3: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetEntryDialParamsW".}
  proc RasGetEntryDialParams*(P1: LPCWSTR, P2: LPRASDIALPARAMSW, P3: LPBOOL): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetEntryDialParamsW".}
  proc RasEnumDevices*(P1: LPRASDEVINFOW, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasEnumDevicesW".}
  proc RasGetCountryInfo*(P1: LPRASCTRYINFOW, P2: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetCountryInfoW".}
  proc RasGetEntryProperties*(P1: LPCWSTR, P2: LPCWSTR, P3: LPRASENTRYW, P4: LPDWORD, P5: LPBYTE, P6: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetEntryPropertiesW".}
  proc RasSetEntryProperties*(P1: LPCWSTR, P2: LPCWSTR, P3: LPRASENTRYW, P4: DWORD, P5: LPBYTE, P6: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetEntryPropertiesW".}
  proc RasRenameEntry*(P1: LPCWSTR, P2: LPCWSTR, P3: LPCWSTR): DWORD {.winapi, dynlib: "rasapi32", importc: "RasRenameEntryW".}
  proc RasDeleteEntry*(P1: LPCWSTR, P2: LPCWSTR): DWORD {.winapi, dynlib: "rasapi32", importc: "RasDeleteEntryW".}
  proc RasValidateEntryName*(P1: LPCWSTR, P2: LPCWSTR): DWORD {.winapi, dynlib: "rasapi32", importc: "RasValidateEntryNameW".}

  type
    RASADFUNC* = RASADFUNCW

  proc RasGetSubEntryHandle*(P1: HRASCONN, P2: DWORD, P3: LPHRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetSubEntryHandleW".}
  proc RasConnectionNotification*(P1: HRASCONN, P2: HANDLE, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasConnectionNotificationW".}
  proc RasGetSubEntryProperties*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: LPRASSUBENTRYW, P5: LPDWORD, P6: LPBYTE, P7: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetSubEntryPropertiesW".}
  proc RasSetSubEntryProperties*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: LPRASSUBENTRYW, P5: DWORD, P6: LPBYTE, P7: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetSubEntryPropertiesW".}
  proc RasGetCredentials*(P1: LPCWSTR, P2: LPCWSTR, P3: LPRASCREDENTIALSW): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetCredentialsW".}
  proc RasSetCredentials*(P1: LPCWSTR, P2: LPCWSTR, P3: LPRASCREDENTIALSW, P4: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetCredentialsW".}
  proc RasGetAutodialAddress*(P1: LPCWSTR, P2: LPDWORD, P3: LPRASAUTODIALENTRYW, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetAutodialAddressW".}
  proc RasSetAutodialAddress*(P1: LPCWSTR, P2: DWORD, P3: LPRASAUTODIALENTRYW, P4: DWORD, P5: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetAutodialAddressW".}
  proc RasEnumAutodialAddresses*(P1: ptr LPWSTR, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasEnumAutodialAddressesW".}
  proc RasGetAutodialEnable*(P1: DWORD, P2: LPBOOL): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetAutodialEnableW".}
  proc RasSetAutodialEnable*(P1: DWORD, P2: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetAutodialEnableW".}
  proc RasGetAutodialParam*(P1: DWORD, P2: LPVOID, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetAutodialParamW".}
  proc RasSetAutodialParam*(P1: DWORD, P2: LPVOID, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetAutodialParamW".}
  proc RasGetEapUserData*(P1: HANDLE, P2: LPCWSTR, P3: LPCWSTR, P4: ptr BYTE, P5: ptr DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetEapUserDataW".}
  proc RasSetEapUserData*(P1: HANDLE, P2: LPCWSTR, P3: LPCWSTR, P4: ptr BYTE, P5: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetEapUserDataW".}
  proc RasGetCustomAuthData*(P1: LPCWSTR, P2: LPCWSTR, P3: ptr BYTE, P4: ptr DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetCustomAuthDataW".}
  proc RasSetCustomAuthData*(P1: LPCWSTR, P2: LPCWSTR, P3: ptr BYTE, P4: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetCustomAuthDataW".}
  proc RasGetEapUserIdentity*(P1: LPCWSTR, P2: LPCWSTR, P3: DWORD, P4: HWND, P5: ptr LPRASEAPUSERIDENTITYW): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetEapUserIdentityW".}
  proc RasFreeEapUserIdentity*(P1: LPRASEAPUSERIDENTITYW): void {.winapi, dynlib: "rasapi32", importc: "RasFreeEapUserIdentityW".}

else:
  proc RasDial*(P1: LPRASDIALEXTENSIONS, P2: LPCSTR, P3: LPRASDIALPARAMSA, P4: DWORD, P5: LPVOID, P6: LPHRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc: "RasDialA".}
  proc RasEnumConnections*(P1: LPRASCONNA, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasEnumConnectionsA".}
  proc RasEnumEntries*(P1: LPCSTR, P2: LPCSTR, P3: LPRASENTRYNAMEA, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasEnumEntriesA".}
  proc RasGetConnectStatus*(P1: HRASCONN, P2: LPRASCONNSTATUSA): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetConnectStatusA".}
  proc RasGetErrorString*(P1: UINT, P2: LPSTR, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetErrorStringA".}
  proc RasHangUp*(P1: HRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc: "RasHangUpA".}
  proc RasGetProjectionInfo*(P1: HRASCONN, P2: RASPROJECTION, P3: LPVOID, P4: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetProjectionInfoA".}
  proc RasCreatePhonebookEntry*(P1: HWND, P2: LPCSTR): DWORD {.winapi, dynlib: "rasapi32", importc: "RasCreatePhonebookEntryA".}
  proc RasEditPhonebookEntry*(P1: HWND, P2: LPCSTR, P3: LPCSTR): DWORD {.winapi, dynlib: "rasapi32", importc: "RasEditPhonebookEntryA".}
  proc RasSetEntryDialParams*(P1: LPCSTR, P2: LPRASDIALPARAMSA, P3: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetEntryDialParamsA".}
  proc RasGetEntryDialParams*(P1: LPCSTR, P2: LPRASDIALPARAMSA, P3: LPBOOL): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetEntryDialParamsA".}
  proc RasEnumDevices*(P1: LPRASDEVINFOA, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasEnumDevicesA".}
  proc RasGetCountryInfo*(P1: LPRASCTRYINFOA, P2: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetCountryInfoA".}
  proc RasGetEntryProperties*(P1: LPCSTR, P2: LPCSTR, P3: LPRASENTRYA, P4: LPDWORD, P5: LPBYTE, P6: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetEntryPropertiesA".}
  proc RasSetEntryProperties*(P1: LPCSTR, P2: LPCSTR, P3: LPRASENTRYA, P4: DWORD, P5: LPBYTE, P6: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetEntryPropertiesA".}
  proc RasRenameEntry*(P1: LPCSTR, P2: LPCSTR, P3: LPCSTR): DWORD {.winapi, dynlib: "rasapi32", importc: "RasRenameEntryA".}
  proc RasDeleteEntry*(P1: LPCSTR, P2: LPCSTR): DWORD {.winapi, dynlib: "rasapi32", importc: "RasDeleteEntryA".}
  proc RasValidateEntryName*(P1: LPCSTR, P2: LPCSTR): DWORD {.winapi, dynlib: "rasapi32", importc: "RasValidateEntryNameA".}

  type
    RASADFUNC* = RASADFUNCA

  proc RasGetSubEntryHandle*(P1: HRASCONN, P2: DWORD, P3: LPHRASCONN): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetSubEntryHandleA".}
  proc RasConnectionNotification*(P1: HRASCONN, P2: HANDLE, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasConnectionNotificationA".}
  proc RasGetSubEntryProperties*(P1: LPCSTR, P2: LPCSTR, P3: DWORD, P4: LPRASSUBENTRYA, P5: LPDWORD, P6: LPBYTE, P7: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetSubEntryPropertiesA".}
  proc RasSetSubEntryProperties*(P1: LPCSTR, P2: LPCSTR, P3: DWORD, P4: LPRASSUBENTRYA, P5: DWORD, P6: LPBYTE, P7: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetSubEntryPropertiesA".}
  proc RasGetCredentials*(P1: LPCSTR, P2: LPCSTR, P3: LPRASCREDENTIALSA): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetCredentialsA".}
  proc RasSetCredentials*(P1: LPCSTR, P2: LPCSTR, P3: LPRASCREDENTIALSA, P4: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetCredentialsA".}
  proc RasGetAutodialAddress*(P1: LPCSTR, P2: LPDWORD, P3: LPRASAUTODIALENTRYA, P4: LPDWORD, P5: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetAutodialAddressA".}
  proc RasSetAutodialAddress*(P1: LPCSTR, P2: DWORD, P3: LPRASAUTODIALENTRYA, P4: DWORD, P5: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetAutodialAddressA".}
  proc RasEnumAutodialAddresses*(P1: ptr LPSTR, P2: LPDWORD, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasEnumAutodialAddressesA".}
  proc RasGetAutodialEnable*(P1: DWORD, P2: LPBOOL): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetAutodialEnableA".}
  proc RasSetAutodialEnable*(P1: DWORD, P2: BOOL): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetAutodialEnableA".}
  proc RasGetAutodialParam*(P1: DWORD, P2: LPVOID, P3: LPDWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetAutodialParamA".}
  proc RasSetAutodialParam*(P1: DWORD, P2: LPVOID, P3: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetAutodialParamA".}
  proc RasGetEapUserData*(P1: HANDLE, P2: LPCSTR, P3: LPCSTR, P4: ptr BYTE, P5: ptr DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetEapUserDataA".}
  proc RasSetEapUserData*(P1: HANDLE, P2: LPCSTR, P3: LPCSTR, P4: ptr BYTE, P5: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetEapUserDataA".}
  proc RasGetCustomAuthData*(P1: LPCSTR, P2: LPCSTR, P3: ptr BYTE, P4: ptr DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetCustomAuthDataA".}
  proc RasSetCustomAuthData*(P1: LPCSTR, P2: LPCSTR, P3: ptr BYTE, P4: DWORD): DWORD {.winapi, dynlib: "rasapi32", importc: "RasSetCustomAuthDataA".}
  proc RasGetEapUserIdentity*(P1: LPCSTR, P2: LPCSTR, P3: DWORD, P4: HWND, P5: ptr LPRASEAPUSERIDENTITYA): DWORD {.winapi, dynlib: "rasapi32", importc: "RasGetEapUserIdentityA".}
  proc RasFreeEapUserIdentity*(P1: LPRASEAPUSERIDENTITYA): void {.winapi, dynlib: "rasapi32", importc: "RasFreeEapUserIdentityA".}

# net/rasdlg.nim

const
  RASPBDEVENT_AddEntry* = 1
  RASPBDEVENT_EditEntry* = 2
  RASPBDEVENT_RemoveEntry* = 3
  RASPBDEVENT_DialEntry* = 4
  RASPBDEVENT_EditGlobals* = 5
  RASPBDEVENT_NoUser* = 6
  RASPBDEVENT_NoUserEdit* = 7
  RASPBDFLAG_PositionDlg* = 1
  RASPBDFLAG_ForceCloseOnDial* = 2
  RASPBDFLAG_NoUser* = 16
  RASEDFLAG_PositionDlg* = 1
  RASEDFLAG_NewEntry* = 2
  RASEDFLAG_CloneEntry* = 4
  RASDDFLAG_PositionDlg* = 1

type
  TRASENTRYDLGA* {.final, pure.} = object # renamed from RASENTRYDLGA
    dwSize*: DWORD
    hwndOwner*: HWND
    dwFlags*: DWORD
    xDlg*: LONG
    yDlg*: LONG
    szEntry*: array[RAS_MaxEntryName + 1, CHAR]
    dwError*: DWORD
    reserved*: ULONG_PTR
    reserved2*: ULONG_PTR
  LPRASENTRYDLGA* = ptr TRASENTRYDLGA
  TRASENTRYDLGW* {.final, pure.} = object # renamed from RASENTRYDLGW
    dwSize*: DWORD
    hwndOwner*: HWND
    dwFlags*: DWORD
    xDlg*: LONG
    yDlg*: LONG
    szEntry*: array[RAS_MaxEntryName + 1, WCHAR]
    dwError*: DWORD
    reserved*: ULONG_PTR
    reserved2*: ULONG_PTR
  LPRASENTRYDLGW* = ptr TRASENTRYDLGA
  TRASDIALDLG* {.final, pure.} = object # renamed from RASDIALDLG
    dwSize*: DWORD
    hwndOwner*: HWND
    dwFlags*: DWORD
    xDlg*: LONG
    yDlg*: LONG
    dwSubEntry*: DWORD
    dwError*: DWORD
    reserved*: ULONG_PTR
    reserved2*: ULONG_PTR
  LPRASDIALDLG* = ptr TRASDIALDLG
  RASPBDLGFUNCW* = proc (P1: DWORD, P2: DWORD, P3: LPWSTR, P4: LPVOID): VOID {.stdcall.}
  RASPBDLGFUNCA* = proc (P1: DWORD, P2: DWORD, P3: LPSTR, P4: LPVOID): VOID {.stdcall.}
  RASPBDLGA* {.final, pure.} = object
    dwSize*: DWORD
    hwndOwner*: HWND
    dwFlags*: DWORD
    xDlg*: LONG
    yDlg*: LONG
    dwCallbackId*: ULONG_PTR
    pCallback*: RASPBDLGFUNCA
    dwError*: DWORD
    reserved*: ULONG_PTR
    reserved2*: ULONG_PTR
  LPRASPBDLGA* = ptr RASPBDLGA
  RASPBDLGW* {.final, pure.} = object
    dwSize*: DWORD
    hwndOwner*: HWND
    dwFlags*: DWORD
    xDlg*: LONG
    yDlg*: LONG
    dwCallbackId*: ULONG_PTR
    pCallback*: RASPBDLGFUNCW
    dwError*: DWORD
    reserved*: ULONG_PTR
    reserved2*: ULONG_PTR
  LPRASPBDLGW* = ptr RASPBDLGW
  RASNOUSERA* {.final, pure.} = object
    dwSize*: DWORD
    dwFlags*: DWORD
    dwTimeoutMs*: DWORD
    szUserName*: array[UNLEN + 1, CHAR]
    szPassword*: array[PWLEN + 1, CHAR]
    szDomain*: array[DNLEN + 1, CHAR]
  LPRASNOUSERA* = ptr RASNOUSERA
  RASNOUSERW* {.final, pure.} = object
    dwSize*: DWORD
    dwFlags*: DWORD
    dwTimeoutMs*: DWORD
    szUserName*: array[UNLEN + 1, WCHAR]
    szPassword*: array[PWLEN + 1, WCHAR]
    szDomain*: array[DNLEN + 1, WCHAR]
  LPRASNOUSERW* = ptr RASNOUSERW

proc RasDialDlgA*(P1: LPSTR, P2: LPSTR, P3: LPSTR, P4: LPRASDIALDLG): BOOL {.winapi, dynlib: "rasdlg", importc.}
proc RasDialDlgW*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR, P4: LPRASDIALDLG): BOOL {.winapi, dynlib: "rasdlg", importc.}
proc RasEntryDlgA*(P1: LPSTR, P2: LPSTR, P3: LPRASENTRYDLGA): BOOL {.winapi, dynlib: "rasdlg", importc.}
proc RasEntryDlgW*(P1: LPWSTR, P2: LPWSTR, P3: LPRASENTRYDLGW): BOOL {.winapi, dynlib: "rasdlg", importc.}
proc RasPhonebookDlgA*(P1: LPSTR, P2: LPSTR, P3: LPRASPBDLGA): BOOL {.winapi, dynlib: "rasdlg", importc.}
proc RasPhonebookDlgW*(P1: LPWSTR, P2: LPWSTR, P3: LPRASPBDLGW): BOOL {.winapi, dynlib: "rasdlg", importc.}

when not defined(winansi):
  type
    TRASENTRYDLG* = TRASENTRYDLGW # renamed from RASENTRYDLG
    RASPBDLG* = RASPBDLGW
    RASNOUSER* = RASNOUSERW

  proc RasDialDlg*(P1: LPWSTR, P2: LPWSTR, P3: LPWSTR, P4: LPRASDIALDLG): BOOL {.winapi, dynlib: "rasdlg", importc: "RasDialDlgW".}
  proc RasEntryDlg*(P1: LPWSTR, P2: LPWSTR, P3: LPRASENTRYDLGW): BOOL {.winapi, dynlib: "rasdlg", importc: "RasEntryDlgW".}
  proc RasPhonebookDlg*(P1: LPWSTR, P2: LPWSTR, P3: LPRASPBDLGW): BOOL {.winapi, dynlib: "rasdlg", importc: "RasPhonebookDlgW".}

else:
  type
    TRASENTRYDLG* = TRASENTRYDLGA # renamed from RASENTRYDLG
    RASPBDLG* = RASPBDLGA
    RASNOUSER* = RASNOUSERA

  proc RasDialDlg*(P1: LPSTR, P2: LPSTR, P3: LPSTR, P4: LPRASDIALDLG): BOOL {.winapi, dynlib: "rasdlg", importc: "RasDialDlgA".}
  proc RasEntryDlg*(P1: LPSTR, P2: LPSTR, P3: LPRASENTRYDLGA): BOOL {.winapi, dynlib: "rasdlg", importc: "RasEntryDlgA".}
  proc RasPhonebookDlg*(P1: LPSTR, P2: LPSTR, P3: LPRASPBDLGA): BOOL {.winapi, dynlib: "rasdlg", importc: "RasPhonebookDlgA".}

type
  LPRASENTRYDLG* = ptr TRASENTRYDLG
  LPRASPBDLG* = ptr RASPBDLG
  LPRASNOUSER* = ptr RASNOUSER

# net/raserror.nim

const
  SUCCESS* = 0
  RASBASE* = 600
  PENDING* = RASBASE
  ERROR_INVALID_PORT_HANDLE* = RASBASE + 1
  ERROR_PORT_ALREADY_OPEN* = RASBASE + 2
  ERROR_BUFFER_TOO_SMALL* = RASBASE + 3
  ERROR_WRONG_INFO_SPECIFIED* = RASBASE + 4
  ERROR_CANNOT_SET_PORT_INFO* = RASBASE + 5
  ERROR_PORT_NOT_CONNECTED* = RASBASE + 6
  ERROR_EVENT_INVALID* = RASBASE + 7
  ERROR_DEVICE_DOES_NOT_EXIST* = RASBASE + 8
  ERROR_DEVICETYPE_DOES_NOT_EXIST* = RASBASE + 9
  ERROR_BUFFER_INVALID* = RASBASE + 10
  ERROR_ROUTE_NOT_AVAILABLE* = RASBASE + 11
  ERROR_ROUTE_NOT_ALLOCATED* = RASBASE + 12
  ERROR_INVALID_COMPRESSION_SPECIFIED* = RASBASE + 13
  ERROR_OUT_OF_BUFFERS* = RASBASE + 14
  ERROR_PORT_NOT_FOUND* = RASBASE + 15
  ERROR_ASYNC_REQUEST_PENDING* = RASBASE + 16
  ERROR_ALREADY_DISCONNECTING* = RASBASE + 17
  ERROR_PORT_NOT_OPEN* = RASBASE + 18
  ERROR_PORT_DISCONNECTED* = RASBASE + 19
  ERROR_NO_ENDPOINTS* = RASBASE + 20
  ERROR_CANNOT_OPEN_PHONEBOOK* = RASBASE + 21
  ERROR_CANNOT_LOAD_PHONEBOOK* = RASBASE + 22
  ERROR_CANNOT_FIND_PHONEBOOK_ENTRY* = RASBASE + 23
  ERROR_CANNOT_WRITE_PHONEBOOK* = RASBASE + 24
  ERROR_CORRUPT_PHONEBOOK* = RASBASE + 25
  ERROR_CANNOT_LOAD_STRING* = RASBASE + 26
  ERROR_KEY_NOT_FOUND* = RASBASE + 27
  ERROR_DISCONNECTION* = RASBASE + 28
  ERROR_REMOTE_DISCONNECTION* = RASBASE + 29
  ERROR_HARDWARE_FAILURE* = RASBASE + 30
  ERROR_USER_DISCONNECTION* = RASBASE + 31
  ERROR_INVALID_SIZE* = RASBASE + 32
  ERROR_PORT_NOT_AVAILABLE* = RASBASE + 33
  ERROR_CANNOT_PROJECT_CLIENT* = RASBASE + 34
  ERROR_UNKNOWN* = RASBASE + 35
  ERROR_WRONG_DEVICE_ATTACHED* = RASBASE + 36
  ERROR_BAD_STRING* = RASBASE + 37
  ERROR_REQUEST_TIMEOUT* = RASBASE + 38
  ERROR_CANNOT_GET_LANA* = RASBASE + 39
  ERROR_NETBIOS_ERROR* = RASBASE + 40
  ERROR_SERVER_OUT_OF_RESOURCES* = RASBASE + 41
  ERROR_NAME_EXISTS_ON_NET* = RASBASE + 42
  ERROR_SERVER_GENERAL_NET_FAILURE* = RASBASE + 43
  WARNING_MSG_ALIAS_NOT_ADDED* = RASBASE + 44
  ERROR_AUTH_INTERNAL* = RASBASE + 45
  ERROR_RESTRICTED_LOGON_HOURS* = RASBASE + 46
  ERROR_ACCT_DISABLED* = RASBASE + 47
  ERROR_PASSWD_EXPIRED* = RASBASE + 48
  ERROR_NO_DIALIN_PERMISSION* = RASBASE + 49
  ERROR_SERVER_NOT_RESPONDING* = RASBASE + 50
  ERROR_FROM_DEVICE* = RASBASE + 51
  ERROR_UNRECOGNIZED_RESPONSE* = RASBASE + 52
  ERROR_MACRO_NOT_FOUND* = RASBASE + 53
  ERROR_MACRO_NOT_DEFINED* = RASBASE + 54
  ERROR_MESSAGE_MACRO_NOT_FOUND* = RASBASE + 55
  ERROR_DEFAULTOFF_MACRO_NOT_FOUND* = RASBASE + 56
  ERROR_FILE_COULD_NOT_BE_OPENED* = RASBASE + 57
  ERROR_DEVICENAME_TOO_LONG* = RASBASE + 58
  ERROR_DEVICENAME_NOT_FOUND* = RASBASE + 59
  ERROR_NO_RESPONSES* = RASBASE + 60
  ERROR_NO_COMMAND_FOUND* = RASBASE + 61
  ERROR_WRONG_KEY_SPECIFIED* = RASBASE + 62
  ERROR_UNKNOWN_DEVICE_TYPE* = RASBASE + 63
  ERROR_ALLOCATING_MEMORY* = RASBASE + 64
  ERROR_PORT_NOT_CONFIGURED* = RASBASE + 65
  ERROR_DEVICE_NOT_READY* = RASBASE + 66
  ERROR_READING_INI_FILE* = RASBASE + 67
  ERROR_NO_CONNECTION* = RASBASE + 68
  ERROR_BAD_USAGE_IN_INI_FILE* = RASBASE + 69
  ERROR_READING_SECTIONNAME* = RASBASE + 70
  ERROR_READING_DEVICETYPE* = RASBASE + 71
  ERROR_READING_DEVICENAME* = RASBASE + 72
  ERROR_READING_USAGE* = RASBASE + 73
  ERROR_READING_MAXCONNECTBPS* = RASBASE + 74
  ERROR_READING_MAXCARRIERBPS* = RASBASE + 75
  ERROR_LINE_BUSY* = RASBASE + 76
  ERROR_VOICE_ANSWER* = RASBASE + 77
  ERROR_NO_ANSWER* = RASBASE + 78
  ERROR_NO_CARRIER* = RASBASE + 79
  ERROR_NO_DIALTONE* = RASBASE + 80
  ERROR_IN_COMMAND* = RASBASE + 81
  ERROR_WRITING_SECTIONNAME* = RASBASE + 82
  ERROR_WRITING_DEVICETYPE* = RASBASE + 83
  ERROR_WRITING_DEVICENAME* = RASBASE + 84
  ERROR_WRITING_MAXCONNECTBPS* = RASBASE + 85
  ERROR_WRITING_MAXCARRIERBPS* = RASBASE + 86
  ERROR_WRITING_USAGE* = RASBASE + 87
  ERROR_WRITING_DEFAULTOFF* = RASBASE + 88
  ERROR_READING_DEFAULTOFF* = RASBASE + 89
  ERROR_EMPTY_INI_FILE* = RASBASE + 90
  ERROR_AUTHENTICATION_FAILURE* = RASBASE + 91
  ERROR_PORT_OR_DEVICE* = RASBASE + 92
  ERROR_NOT_BINARY_MACRO* = RASBASE + 93
  ERROR_DCB_NOT_FOUND* = RASBASE + 94
  ERROR_STATE_MACHINES_NOT_STARTED* = RASBASE + 95
  ERROR_STATE_MACHINES_ALREADY_STARTED* = RASBASE + 96
  ERROR_PARTIAL_RESPONSE_LOOPING* = RASBASE + 97
  ERROR_UNKNOWN_RESPONSE_KEY* = RASBASE + 98
  ERROR_RECV_BUF_FULL* = RASBASE + 99
  ERROR_CMD_TOO_LONG* = RASBASE + 100
  ERROR_UNSUPPORTED_BPS* = RASBASE + 101
  ERROR_UNEXPECTED_RESPONSE* = RASBASE + 102
  ERROR_INTERACTIVE_MODE* = RASBASE + 103
  ERROR_BAD_CALLBACK_NUMBER* = RASBASE + 104
  ERROR_INVALID_AUTH_STATE* = RASBASE + 105
  ERROR_WRITING_INITBPS* = RASBASE + 106
  ERROR_X25_DIAGNOSTIC* = RASBASE + 107
  ERROR_ACCT_EXPIRED* = RASBASE + 108
  ERROR_CHANGING_PASSWORD* = RASBASE + 109
  ERROR_OVERRUN* = RASBASE + 110
  ERROR_RASMAN_CANNOT_INITIALIZE* = RASBASE + 111
  ERROR_BIPLEX_PORT_NOT_AVAILABLE* = RASBASE + 112
  ERROR_NO_ACTIVE_ISDN_LINES* = RASBASE + 113
  ERROR_NO_ISDN_CHANNELS_AVAILABLE* = RASBASE + 114
  ERROR_TOO_MANY_LINE_ERRORS* = RASBASE + 115
  ERROR_IP_CONFIGURATION* = RASBASE + 116
  ERROR_NO_IP_ADDRESSES* = RASBASE + 117
  ERROR_PPP_TIMEOUT* = RASBASE + 118
  ERROR_PPP_REMOTE_TERMINATED* = RASBASE + 119
  ERROR_PPP_NO_PROTOCOLS_CONFIGURED* = RASBASE + 120
  ERROR_PPP_NO_RESPONSE* = RASBASE + 121
  ERROR_PPP_INVALID_PACKET* = RASBASE + 122
  ERROR_PHONE_NUMBER_TOO_LONG* = RASBASE + 123
  ERROR_IPXCP_NO_DIALOUT_CONFIGURED* = RASBASE + 124
  ERROR_IPXCP_NO_DIALIN_CONFIGURED* = RASBASE + 125
  ERROR_IPXCP_DIALOUT_ALREADY_ACTIVE* = RASBASE + 126
  ERROR_ACCESSING_TCPCFGDLL* = RASBASE + 127
  ERROR_NO_IP_RAS_ADAPTER* = RASBASE + 128
  ERROR_SLIP_REQUIRES_IP* = RASBASE + 129
  ERROR_PROJECTION_NOT_COMPLETE* = RASBASE + 130
  ERROR_PROTOCOL_NOT_CONFIGURED* = RASBASE + 131
  ERROR_PPP_NOT_CONVERGING* = RASBASE + 132
  ERROR_PPP_CP_REJECTED* = RASBASE + 133
  ERROR_PPP_LCP_TERMINATED* = RASBASE + 134
  ERROR_PPP_REQUIRED_ADDRESS_REJECTED* = RASBASE + 135
  ERROR_PPP_NCP_TERMINATED* = RASBASE + 136
  ERROR_PPP_LOOPBACK_DETECTED* = RASBASE + 137
  ERROR_PPP_NO_ADDRESS_ASSIGNED* = RASBASE + 138
  ERROR_CANNOT_USE_LOGON_CREDENTIALS* = RASBASE + 139
  ERROR_TAPI_CONFIGURATION* = RASBASE + 140
  ERROR_NO_LOCAL_ENCRYPTION* = RASBASE + 141
  ERROR_NO_REMOTE_ENCRYPTION* = RASBASE + 142
  ERROR_REMOTE_REQUIRES_ENCRYPTION* = RASBASE + 143
  ERROR_IPXCP_NET_NUMBER_CONFLICT* = RASBASE + 144
  ERROR_INVALID_SMM* = RASBASE + 145
  ERROR_SMM_UNINITIALIZED* = RASBASE + 146
  ERROR_NO_MAC_FOR_PORT* = RASBASE + 147
  ERROR_SMM_TIMEOUT* = RASBASE + 148
  ERROR_BAD_PHONE_NUMBER* = RASBASE + 149
  ERROR_WRONG_MODULE* = RASBASE + 150
  ERROR_INVALID_CALLBACK_NUMBER* = RASBASE + 151
  ERROR_SCRIPT_SYNTAX* = RASBASE + 152
  ERROR_HANGUP_FAILED* = RASBASE + 153
  ERROR_BUNDLE_NOT_FOUND* = RASBASE + 154
  ERROR_CANNOT_DO_CUSTOMDIAL* = RASBASE + 155
  ERROR_DIAL_ALREADY_IN_PROGRESS* = RASBASE + 156
  ERROR_RASAUTO_CANNOT_INITIALIZE* = RASBASE + 157
  ERROR_CONNECTION_ALREADY_SHARED* = RASBASE + 158
  ERROR_SHARING_CHANGE_FAILED* = RASBASE + 159
  ERROR_SHARING_ROUTER_INSTALL* = RASBASE + 160
  ERROR_SHARE_CONNECTION_FAILED* = RASBASE + 161
  ERROR_SHARING_PRIVATE_INSTALL* = RASBASE + 162
  ERROR_CANNOT_SHARE_CONNECTION* = RASBASE + 163
  ERROR_NO_SMART_CARD_READER* = RASBASE + 164
  ERROR_SHARING_ADDRESS_EXISTS* = RASBASE + 165
  ERROR_NO_CERTIFICATE* = RASBASE + 166
  ERROR_SHARING_MULTIPLE_ADDRESSES* = RASBASE + 167
  ERROR_FAILED_TO_ENCRYPT* = RASBASE + 168
  ERROR_BAD_ADDRESS_SPECIFIED* = RASBASE + 169
  ERROR_CONNECTION_REJECT* = RASBASE + 170
  ERROR_CONGESTION* = RASBASE + 171
  ERROR_INCOMPATIBLE* = RASBASE + 172
  ERROR_NUMBERCHANGED* = RASBASE + 173
  ERROR_TEMPFAILURE* = RASBASE + 174
  ERROR_BLOCKED* = RASBASE + 175
  ERROR_DONOTDISTURB* = RASBASE + 176
  ERROR_OUTOFORDER* = RASBASE + 177
  ERROR_UNABLE_TO_AUTHENTICATE_SERVER* = RASBASE + 178
  ERROR_SMART_CARD_REQUIRED* = RASBASE + 179
  ERROR_INVALID_FUNCTION_FOR_ENTRY* = RASBASE + 180
  ERROR_CERT_FOR_ENCRYPTION_NOT_FOUND* = RASBASE + 181
  ERROR_SHARING_RRAS_CONFLICT* = RASBASE + 182
  ERROR_SHARING_NO_PRIVATE_LAN* = RASBASE + 183
  ERROR_NO_DIFF_USER_AT_LOGON* = RASBASE + 184
  ERROR_NO_REG_CERT_AT_LOGON* = RASBASE + 185
  ERROR_OAKLEY_NO_CERT* = RASBASE + 186
  ERROR_OAKLEY_AUTH_FAIL* = RASBASE + 187
  ERROR_OAKLEY_ATTRIB_FAIL* = RASBASE + 188
  ERROR_OAKLEY_GENERAL_PROCESSING* = RASBASE + 189
  ERROR_OAKLEY_NO_PEER_CERT* = RASBASE + 190
  ERROR_OAKLEY_NO_POLICY* = RASBASE + 191
  ERROR_OAKLEY_TIMED_OUT* = RASBASE + 192
  ERROR_OAKLEY_ERROR* = RASBASE + 193
  ERROR_UNKNOWN_FRAMED_PROTOCOL* = RASBASE + 194
  ERROR_WRONG_TUNNEL_TYPE* = RASBASE + 195
  ERROR_UNKNOWN_SERVICE_TYPE* = RASBASE + 196
  ERROR_CONNECTING_DEVICE_NOT_FOUND* = RASBASE + 197
  ERROR_NO_EAPTLS_CERTIFICATE* = RASBASE + 198
  RASBASEEND* = ERROR_NO_EAPTLS_CERTIFICATE

# net/rassapi.nim
const
  # RAS_PARAMS_FORMAT* = enum
  ParamNumber* = 0
  ParamString* = 1

const
  RASSAPI_MAX_PHONENUMBER_SIZE* = 128
  RASSAPI_MAX_MEDIA_NAME* = 16
  RASSAPI_MAX_PORT_NAME* = 16
  RASSAPI_MAX_DEVICE_NAME* = 128
  RASSAPI_MAX_DEVICETYPE_NAME* = 16
  RASSAPI_MAX_PARAM_KEY_SIZE* = 32
  RASPRIV_NoCallback* = 0x01
  RASPRIV_AdminSetCallback* = 0x02
  RASPRIV_CallerSetCallback* = 0x04
  RASPRIV_DialinPrivilege* = 0x08
  RASPRIV_CallbackType* = 0x07
  RAS_MODEM_OPERATIONAL* = 1
  RAS_MODEM_NOT_RESPONDING* = 2
  RAS_MODEM_HARDWARE_FAILURE* = 3
  RAS_MODEM_INCORRECT_RESPONSE* = 4
  RAS_MODEM_UNKNOWN* = 5
  RAS_PORT_NON_OPERATIONAL* = 1
  RAS_PORT_DISCONNECTED* = 2
  RAS_PORT_CALLING_BACK* = 3
  RAS_PORT_LISTENING* = 4
  RAS_PORT_AUTHENTICATING* = 5
  RAS_PORT_AUTHENTICATED* = 6
  RAS_PORT_INITIALIZING* = 7
  MEDIA_UNKNOWN* = 0
  MEDIA_SERIAL* = 1
  MEDIA_RAS10_SERIAL* = 2
  MEDIA_X25* = 3
  MEDIA_ISDN* = 4
  USER_AUTHENTICATED* = 0x0001
  MESSENGER_PRESENT* = 0x0002
  PPP_CLIENT* = 0x0004
  GATEWAY_ACTIVE* = 0x0008
  REMOTE_LISTEN* = 0x0010
  PORT_MULTILINKED* = 0x0020
  RAS_IPADDRESSLEN* = 15
  RAS_IPXADDRESSLEN* = 22
  RAS_ATADDRESSLEN* = 32
  RASDOWNLEVEL* = 10
  RASADMIN_35* = 35
  RASADMIN_CURRENT* = 40

type
  IPADDR* = ULONG
  RAS_PARAMS_FORMAT* = int32
  RAS_PARAMS_VALUE_String* {.final, pure.} = object
    Length*: DWORD
    Data*: PCHAR
  RAS_PARAMS_VALUE* {.final, union, pure.} = object
    Number*: DWORD
  RAS_PARAMETERS* {.final, pure.} = object
    P_Key*: array[RASSAPI_MAX_PARAM_KEY_SIZE, CHAR]
    P_Type*: RAS_PARAMS_FORMAT
    P_Attributes*: BYTE
    P_Value*: RAS_PARAMS_VALUE
  RAS_USER_0* {.final, pure.} = object
    bfPrivilege*: BYTE
    szPhoneNumber*: array[RASSAPI_MAX_PHONENUMBER_SIZE + 1, WCHAR]
  PRAS_USER_0* = ptr RAS_USER_0
  RAS_PORT_0* {.final, pure.} = object
    wszPortName*: array[RASSAPI_MAX_PORT_NAME, WCHAR]
    wszDeviceType*: array[RASSAPI_MAX_DEVICETYPE_NAME, WCHAR]
    wszDeviceName*: array[RASSAPI_MAX_DEVICE_NAME, WCHAR]
    wszMediaName*: array[RASSAPI_MAX_MEDIA_NAME, WCHAR]
    reserved*: DWORD
    Flags*: DWORD
    wszUserName*: array[UNLEN + 1, WCHAR]
    wszComputer*: array[NETBIOS_NAME_LEN, WCHAR]
    dwStartSessionTime*: DWORD
    wszLogonDomain*: array[DNLEN + 1, WCHAR]
    fAdvancedServer*: BOOL
  PRAS_PORT_0* = ptr RAS_PORT_0
  RAS_PPP_NBFCP_RESULT* {.final, pure.} = object
    dwError*: DWORD
    dwNetBiosError*: DWORD
    szName*: array[NETBIOS_NAME_LEN + 1, CHAR]
    wszWksta*: array[NETBIOS_NAME_LEN + 1, WCHAR]
  RAS_PPP_IPCP_RESULT* {.final, pure.} = object
    dwError*: DWORD
    wszAddress*: array[RAS_IPADDRESSLEN + 1, WCHAR]
  RAS_PPP_IPXCP_RESULT* {.final, pure.} = object
    dwError*: DWORD
    wszAddress*: array[RAS_IPXADDRESSLEN + 1, WCHAR]
  RAS_PPP_ATCP_RESULT* {.final, pure.} = object
    dwError*: DWORD
    wszAddress*: array[RAS_ATADDRESSLEN + 1, WCHAR]
  RAS_PPP_PROJECTION_RESULT* {.final, pure.} = object
    nbf*: RAS_PPP_NBFCP_RESULT
    ip*: RAS_PPP_IPCP_RESULT
    ipx*: RAS_PPP_IPXCP_RESULT
    at*: RAS_PPP_ATCP_RESULT
  RAS_PORT_1* {.final, pure.} = object
    rasport0*: RAS_PORT_0
    LineCondition*: DWORD
    HardwareCondition*: DWORD
    LineSpeed*: DWORD
    NumStatistics*: WORD
    NumMediaParms*: WORD
    SizeMediaParms*: DWORD
    ProjResult*: RAS_PPP_PROJECTION_RESULT
  PRAS_PORT_1* = ptr RAS_PORT_1
  RAS_PORT_STATISTICS* {.final, pure.} = object
    dwBytesXmited*: DWORD
    dwBytesRcved*: DWORD
    dwFramesXmited*: DWORD
    dwFramesRcved*: DWORD
    dwCrcErr*: DWORD
    dwTimeoutErr*: DWORD
    dwAlignmentErr*: DWORD
    dwHardwareOverrunErr*: DWORD
    dwFramingErr*: DWORD
    dwBufferOverrunErr*: DWORD
    dwBytesXmitedUncompressed*: DWORD
    dwBytesRcvedUncompressed*: DWORD
    dwBytesXmitedCompressed*: DWORD
    dwBytesRcvedCompressed*: DWORD
    dwPortBytesXmited*: DWORD
    dwPortBytesRcved*: DWORD
    dwPortFramesXmited*: DWORD
    dwPortFramesRcved*: DWORD
    dwPortCrcErr*: DWORD
    dwPortTimeoutErr*: DWORD
    dwPortAlignmentErr*: DWORD
    dwPortHardwareOverrunErr*: DWORD
    dwPortFramingErr*: DWORD
    dwPortBufferOverrunErr*: DWORD
    dwPortBytesXmitedUncompressed*: DWORD
    dwPortBytesRcvedUncompressed*: DWORD
    dwPortBytesXmitedCompressed*: DWORD
    dwPortBytesRcvedCompressed*: DWORD
  PRAS_PORT_STATISTICS* = ptr RAS_PORT_STATISTICS
  RAS_SERVER_0* {.final, pure.} = object
    TotalPorts*: WORD
    PortsInUse*: WORD
    RasVersion*: DWORD
  PRAS_SERVER_0* = ptr RAS_SERVER_0

proc RasAdminServerGetInfo*(P1: ptr WCHAR, P2: PRAS_SERVER_0): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminGetUserAccountServer*(P1: ptr WCHAR, P2: ptr WCHAR, P3: LPWSTR): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminUserGetInfo*(P1: ptr WCHAR, P2: ptr WCHAR, P3: PRAS_USER_0): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminUserSetInfo*(P1: ptr WCHAR, P2: ptr WCHAR, P3: PRAS_USER_0): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminPortEnum*(P1: ptr WCHAR, P2: ptr PRAS_PORT_0, P3: ptr WORD): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminPortGetInfo*(P1: ptr WCHAR, P2: ptr WCHAR, P3: ptr RAS_PORT_1, P4: ptr RAS_PORT_STATISTICS, P5: ptr ptr RAS_PARAMETERS): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminPortClearStatistics*(P1: ptr WCHAR, P2: ptr WCHAR): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminPortDisconnect*(P1: ptr WCHAR, P2: ptr WCHAR): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminFreeBuffer*(P1: PVOID): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminGetErrorString*(P1: UINT, P2: ptr WCHAR, P3: DWORD): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminAcceptNewConnection*(P1: ptr RAS_PORT_1, P2: ptr RAS_PORT_STATISTICS, P3: ptr RAS_PARAMETERS): BOOL {.winapi, dynlib: "rassapi", importc.}
proc RasAdminConnectionHangupNotification*(P1: ptr RAS_PORT_1, P2: ptr RAS_PORT_STATISTICS, P3: ptr RAS_PARAMETERS): VOID {.winapi, dynlib: "rassapi", importc.}
proc RasAdminGetIpAddressForUser*(P1: ptr WCHAR, P2: ptr WCHAR, P3: ptr IPADDR, P4: ptr BOOL): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminReleaseIpAddress*(P1: ptr WCHAR, P2: ptr WCHAR, P3: ptr IPADDR): VOID {.winapi, dynlib: "rassapi", importc.}
proc RasAdminGetUserParms*(P1: ptr WCHAR, P2: PRAS_USER_0): DWORD {.winapi, dynlib: "rassapi", importc.}
proc RasAdminSetUserParms*(P1: ptr WCHAR, P2: DWORD, P3: PRAS_USER_0): DWORD {.winapi, dynlib: "rassapi", importc.}

# net/winber.nim

type
  BerElement* {.final, pure.} = object
  ber_int_t* = int32
  ber_slen_t* = int32
  ber_uint_t* = uint32
  ber_len_t* = uint32
  ber_tag_t* = uint32
  BerValue* {.final, pure.} = object
    bv_len*: ber_len_t
    bv_val*: cstring
  LDAP_BERVAL* = BerValue
  BERVAL* = BerValue
  PLDAP_BERVAL* = ptr BerValue
  PBERVAL* = ptr BerValue

const
  LBER_ERROR* = 0xFFFFFFFF'u32
  LBER_DEFAULT* = 0xFFFFFFFF'u32
  LBER_USE_DER* = 1

proc ber_init*(P1: ptr BerValue): ptr BerElement {.winapi, dynlib: "wldap32", importc.}
proc ber_printf*(P1: ptr BerElement, P2: cstring): int32 {.winapi, dynlib: "wldap32", varargs, importc.}
proc ber_flatten*(P1: ptr BerElement, P2: ptr ptr BerValue): int32 {.winapi, dynlib: "wldap32", importc.}
proc ber_scanf*(P1: ptr BerElement, P2: cstring): ber_tag_t {.winapi, dynlib: "wldap32", varargs, importc.}
proc ber_peek_tag*(P1: ptr BerElement, P2: ptr ber_len_t): ber_tag_t {.winapi, dynlib: "wldap32", importc.}
proc ber_skip_tag*(P1: ptr BerElement, P2: ptr ber_len_t): ber_tag_t {.winapi, dynlib: "wldap32", importc.}
proc ber_first_element*(P1: ptr BerElement, P2: ptr ber_len_t, P3: ptr cstring): ber_tag_t {.winapi, dynlib: "wldap32", importc.}
proc ber_next_element*(P1: ptr BerElement, P2: ptr ber_len_t, P3: cstring): ber_tag_t {.winapi, dynlib: "wldap32", importc.}
proc ber_bvfree*(P1: ptr BerValue): void {.winapi, dynlib: "wldap32", importc.}
proc ber_bvecfree*(P1: ptr ptr BerValue): void {.winapi, dynlib: "wldap32", importc.}
proc ber_free*(P1: ptr BerElement, P2: int32): void {.winapi, dynlib: "wldap32", importc.}
proc ber_bvdup*(P1: ptr BerValue): ptr BerValue {.winapi, dynlib: "wldap32", importc.}
proc ber_alloc_t*(P1: int32): ptr BerElement {.winapi, dynlib: "wldap32", importc.}

# net/winldap.nim

const
  LDAP_VERSION1* = 1
  LDAP_VERSION2* = 2
  LDAP_VERSION3* = 3
  LDAP_VERSION* = LDAP_VERSION2
  LDAP_VERSION_MIN* = LDAP_VERSION2
  LDAP_VERSION_MAX* = LDAP_VERSION3
  LDAP_VENDOR_NAME* = "Microsoft Corporation."
  LDAP_API_VERSION* = 2004
  LDAP_VENDOR_VERSION* = 510
  LDAP_API_INFO_VERSION* = 1
  LDAP_FEATURE_INFO_VERSION* = 1
  LDAP_SUCCESS* = 0x00
  LDAP_OPT_SUCCESS* = LDAP_SUCCESS
  LDAP_OPERATIONS_ERROR* = LDAP_SUCCESS + 1
  LDAP_PROTOCOL_ERROR* = LDAP_SUCCESS + 2
  LDAP_TIMELIMIT_EXCEEDED* = LDAP_SUCCESS + 3
  LDAP_SIZELIMIT_EXCEEDED* = LDAP_SUCCESS + 4
  LDAP_COMPARE_FALSE* = LDAP_SUCCESS + 5
  LDAP_COMPARE_TRUE* = LDAP_SUCCESS + 6
  LDAP_STRONG_AUTH_NOT_SUPPORTED* = LDAP_SUCCESS + 7
  LDAP_AUTH_METHOD_NOT_SUPPORTED* = LDAP_STRONG_AUTH_NOT_SUPPORTED
  LDAP_STRONG_AUTH_REQUIRED* = LDAP_STRONG_AUTH_NOT_SUPPORTED + 1
  LDAP_REFERRAL_V2* = LDAP_STRONG_AUTH_NOT_SUPPORTED + 2
  LDAP_PARTIAL_RESULTS* = LDAP_REFERRAL_V2
  LDAP_REFERRAL* = LDAP_REFERRAL_V2 + 1
  LDAP_ADMIN_LIMIT_EXCEEDED* = LDAP_REFERRAL_V2 + 2
  LDAP_UNAVAILABLE_CRIT_EXTENSION* = LDAP_REFERRAL_V2 + 3
  LDAP_CONFIDENTIALITY_REQUIRED* = LDAP_REFERRAL_V2 + 4
  LDAP_SASL_BIND_IN_PROGRESS* = LDAP_REFERRAL_V2 + 5
  LDAP_NO_SUCH_ATTRIBUTE* = 0x10
  LDAP_UNDEFINED_TYPE* = 0x11
  LDAP_INAPPROPRIATE_MATCHING* = 0x12
  LDAP_CONSTRAINT_VIOLATION* = 0x13
  LDAP_TYPE_OR_VALUE_EXISTS* = 0x14
  LDAP_ATTRIBUTE_OR_VALUE_EXISTS* = LDAP_TYPE_OR_VALUE_EXISTS
  LDAP_INVALID_SYNTAX* = LDAP_TYPE_OR_VALUE_EXISTS + 1
  LDAP_NO_SUCH_OBJECT* = 0x20
  LDAP_ALIAS_PROBLEM* = 0x21
  LDAP_INVALID_DN_SYNTAX* = 0x22
  LDAP_IS_LEAF* = 0x23
  LDAP_ALIAS_DEREF_PROBLEM* = 0x24
  LDAP_INAPPROPRIATE_AUTH* = 0x30
  LDAP_INVALID_CREDENTIALS* = 0x31
  LDAP_INSUFFICIENT_ACCESS* = 0x32
  LDAP_INSUFFICIENT_RIGHTS* = LDAP_INSUFFICIENT_ACCESS
  LDAP_BUSY* = LDAP_INSUFFICIENT_ACCESS + 1
  LDAP_UNAVAILABLE* = LDAP_INSUFFICIENT_ACCESS + 2
  LDAP_UNWILLING_TO_PERFORM* = LDAP_INSUFFICIENT_ACCESS + 3
  LDAP_LOOP_DETECT* = LDAP_INSUFFICIENT_ACCESS + 4
  LDAP_NAMING_VIOLATION* = 0x40
  LDAP_OBJECT_CLASS_VIOLATION* = 0x41
  LDAP_NOT_ALLOWED_ON_NONLEAF* = 0x42
  LDAP_NOT_ALLOWED_ON_RDN* = 0x43
  LDAP_ALREADY_EXISTS* = 0x44
  LDAP_NO_OBJECT_CLASS_MODS* = 0x45
  LDAP_RESULTS_TOO_LARGE* = 0x46
  LDAP_AFFECTS_MULTIPLE_DSAS* = 0x47
  LDAP_OTHER* = 0x50
  LDAP_SERVER_DOWN* = 0x51
  LDAP_LOCAL_ERROR* = 0x52
  LDAP_ENCODING_ERROR* = 0x53
  LDAP_DECODING_ERROR* = 0x54
  LDAP_TIMEOUT* = 0x55
  LDAP_AUTH_UNKNOWN* = 0x56
  LDAP_FILTER_ERROR* = 0x57
  LDAP_USER_CANCELLED* = 0x58
  LDAP_PARAM_ERROR* = 0x59
  LDAP_NO_MEMORY* = 0x5A
  LDAP_CONNECT_ERROR* = 0x5B
  LDAP_NOT_SUPPORTED* = 0x5C
  LDAP_CONTROL_NOT_FOUND* = 0x5D
  LDAP_NO_RESULTS_RETURNED* = 0x5E
  LDAP_MORE_RESULTS_TO_RETURN* = 0x5F
  LDAP_CLIENT_LOOP* = 0x60
  LDAP_REFERRAL_LIMIT_EXCEEDED* = 0x61
  LDAP_PORT* = 389
  LDAP_SSL_PORT* = 636
  LDAP_GC_PORT* = 3268
  LDAP_SSL_GC_PORT* = 3269
  LDAP_OPT_OFF* = nil
  LDAP_OPT_ON* = cast[pointer](1)
  LDAP_OPT_API_INFO* = 0x00
  LDAP_OPT_DESC* = 0x1
  LDAP_OPT_DEREF* = 0x2
  LDAP_OPT_SIZELIMIT* = 0x3
  LDAP_OPT_TIMELIMIT* = 0x4
  LDAP_OPT_THREAD_FN_PTRS* = 0x5
  LDAP_OPT_REBIND_FN* = 0x6
  LDAP_OPT_REBIND_ARG* = 0x7
  LDAP_OPT_REFERRALS* = 0x8
  LDAP_OPT_RESTART* = 0x9
  LDAP_OPT_SSL* = 0xA
  LDAP_OPT_TLS* = LDAP_OPT_SSL
  LDAP_OPT_IO_FN_PTRS* = LDAP_OPT_SSL + 1
  LDAP_OPT_CACHE_FN_PTRS* = 0x0d
  LDAP_OPT_CACHE_STRATEGY* = 0xE
  LDAP_OPT_CACHE_ENABLE* = 0xF
  LDAP_OPT_REFERRAL_HOP_LIMIT* = 0x10
  LDAP_OPT_PROTOCOL_VERSION* = 0x11
  LDAP_OPT_VERSION* = LDAP_OPT_PROTOCOL_VERSION
  LDAP_OPT_SERVER_CONTROLS* = LDAP_OPT_PROTOCOL_VERSION + 1
  LDAP_OPT_CLIENT_CONTROLS* = LDAP_OPT_PROTOCOL_VERSION + 2
  LDAP_OPT_API_FEATURE_INFO* = 0x15
  LDAP_OPT_HOST_NAME* = 0x30
  LDAP_OPT_ERROR_NUMBER* = 0x31
  LDAP_OPT_ERROR_STRING* = 0x32
  LDAP_OPT_SERVER_ERROR* = 0x33
  LDAP_OPT_SERVER_EXT_ERROR* = 0x34
  LDAP_OPT_PING_KEEP_ALIVE* = 0x36
  LDAP_OPT_PING_WAIT_TIME* = 0x37
  LDAP_OPT_PING_LIMIT* = 0x38
  LDAP_OPT_DNSDOMAIN_NAME* = 0x3b
  LDAP_OPT_GETDSNAME_FLAGS* = 0x3d
  LDAP_OPT_HOST_REACHABLE* = 0x3E
  LDAP_OPT_PROMPT_CREDENTIALS* = 0x3F
  LDAP_OPT_TCP_KEEPALIVE* = 0x40
  LDAP_OPT_REFERRAL_CALLBACK* = 0x70
  LDAP_OPT_CLIENT_CERTIFICATE* = 0x80
  LDAP_OPT_SERVER_CERTIFICATE* = 0x81
  LDAP_OPT_AUTO_RECONNECT* = 0x91
  LDAP_OPT_SSPI_FLAGS* = 0x92
  LDAP_OPT_SSL_INFO* = 0x93
  LDAP_OPT_TLS_INFO* = LDAP_OPT_SSL_INFO
  LDAP_OPT_REF_DEREF_CONN_PER_MSG* = LDAP_OPT_SSL_INFO + 1
  LDAP_OPT_SIGN* = LDAP_OPT_SSL_INFO + 2
  LDAP_OPT_ENCRYPT* = LDAP_OPT_SSL_INFO + 3
  LDAP_OPT_SASL_METHOD* = LDAP_OPT_SSL_INFO + 4
  LDAP_OPT_AREC_EXCLUSIVE* = LDAP_OPT_SSL_INFO + 5
  LDAP_OPT_SECURITY_CONTEXT* = LDAP_OPT_SSL_INFO + 6
  LDAP_OPT_ROOTDSE_CACHE* = LDAP_OPT_SSL_INFO + 7
  LDAP_DEREF_NEVER* = 0
  LDAP_DEREF_SEARCHING* = 1
  LDAP_DEREF_FINDING* = 2
  LDAP_DEREF_ALWAYS* = 3
  LDAP_NO_LIMIT* = 0
  LDAP_CONTROL_REFERRALS* = "1.2.840.113556.1.4.616"
  LDAP_CHASE_SUBORDINATE_REFERRALS* = 0x20
  LDAP_CHASE_EXTERNAL_REFERRALS* = 0x40
  LDAP_SCOPE_DEFAULT* = -1
  LDAP_SCOPE_BASE* = 0
  LDAP_SCOPE_ONELEVEL* = 1
  LDAP_SCOPE_SUBTREE* = 2
  LDAP_MOD_ADD* = 0
  LDAP_MOD_DELETE* = 1
  LDAP_MOD_REPLACE* = 2
  LDAP_MOD_BVALUES* = 0x80
  LDAP_RES_BIND* = 0x61
  LDAP_RES_SEARCH_ENTRY* = 0x64
  LDAP_RES_SEARCH_RESULT* = 0x65
  LDAP_RES_MODIFY* = 0x67
  LDAP_RES_ADD* = 0x69
  LDAP_RES_DELETE* = 0x6b
  LDAP_RES_MODRDN* = 0x6d
  LDAP_RES_COMPARE* = 0x6f
  LDAP_RES_SEARCH_REFERENCE* = 0x73
  LDAP_RES_EXTENDED* = 0x78
  LDAP_RES_ANY* = -1
  LDAP_MSG_ONE* = 0
  LDAP_MSG_ALL* = 1
  LDAP_MSG_RECEIVED* = 2
  LDAP_SERVER_SORT_OID* = "1.2.840.113556.1.4.473"
  LDAP_SERVER_RESP_SORT_OID* = "1.2.840.113556.1.4.474"
  LDAP_PAGED_RESULT_OID_STRING* = "1.2.840.113556.1.4.319"
  LDAP_CONTROL_VLVREQUEST* = "2.16.840.1.113730.3.4.9"
  LDAP_CONTROL_VLVRESPONSE* = "2.16.840.1.113730.3.4.10"
  LDAP_START_TLS_OID* = "1.3.6.1.4.1.1466.20037"
  LDAP_TTL_EXTENDED_OP_OID* = "1.3.6.1.4.1.1466.101.119.1"
  LDAP_AUTH_NONE* = 0x00
  LDAP_AUTH_SIMPLE* = 0x80
  LDAP_AUTH_SASL* = 0x83
  LDAP_AUTH_OTHERKIND* = 0x86
  LDAP_AUTH_EXTERNAL* = LDAP_AUTH_OTHERKIND or 0x0020
  LDAP_AUTH_SICILY* = LDAP_AUTH_OTHERKIND or 0x0200
  LDAP_AUTH_NEGOTIATE* = LDAP_AUTH_OTHERKIND or 0x0400
  LDAP_AUTH_MSN* = LDAP_AUTH_OTHERKIND or 0x0800
  LDAP_AUTH_NTLM* = LDAP_AUTH_OTHERKIND or 0x1000
  LDAP_AUTH_DIGEST* = LDAP_AUTH_OTHERKIND or 0x4000
  LDAP_AUTH_DPA* = LDAP_AUTH_OTHERKIND or 0x2000
  LDAP_AUTH_SSPI* = LDAP_AUTH_NEGOTIATE
  LDAP_FILTER_AND* = 0xa0
  LDAP_FILTER_OR* = 0xA1
  LDAP_FILTER_NOT* = 0xA2
  LDAP_FILTER_EQUALITY* = 0xA3
  LDAP_FILTER_SUBSTRINGS* = 0xA4
  LDAP_FILTER_GE* = 0xA5
  LDAP_FILTER_LE* = 0xA6
  LDAP_FILTER_APPROX* = 0xa8
  LDAP_FILTER_EXTENSIBLE* = 0xA9
  LDAP_FILTER_PRESENT* = 0x87
  LDAP_SUBSTRING_INITIAL* = 0x80
  LDAP_SUBSTRING_ANY* = 0x81
  LDAP_SUBSTRING_FINAL* = 0x82

type
  LDAP* {.final, pure.} = object
    Reserved*: array[76, char]
    ld_host*: PCHAR
    ld_version*: ULONG
    ld_lberoptions*: UCHAR
    ld_deref*: int32
    ld_timelimit*: int32
    ld_sizelimit*: int32
    ld_errno*: int32
    ld_matched*: PCHAR
    ld_error*: PCHAR
  PLDAP* = ptr LDAP
  LDAPMessage* {.final, pure.} = object
    lm_msgid*: ULONG
    lm_msgtype*: ULONG
    lm_ber*: ptr BerElement
    lm_chain*: ptr LDAPMessage
    lm_next*: ptr LDAPMessage
    lm_time*: ULONG
  PLDAPMessage* = ptr LDAPMessage
  LDAP_TIMEVAL* {.final, pure.} = object
    tv_sec*: LONG
    tv_usec*: LONG
  PLDAP_TIMEVAL* = ptr LDAP_TIMEVAL
  LDAPAPIInfoA* {.final, pure.} = object
    ldapai_info_version*: int32
    ldapai_api_version*: int32
    ldapai_protocol_version*: int32
    ldapai_extensions*: ptr cstring
    ldapai_vendor_name*: cstring
    ldapai_vendor_version*: int32
  PLDAPAPIInfoA* = ptr LDAPAPIInfoA
  LDAPAPIInfoW* {.final, pure.} = object
    ldapai_info_version*: int32
    ldapai_api_version*: int32
    ldapai_protocol_version*: int32
    ldapai_extensions*: ptr PWCHAR
    ldapai_vendor_name*: PWCHAR
    ldapai_vendor_version*: int32
  PLDAPAPIInfoW* = ptr LDAPAPIInfoW
  LDAPAPIFeatureInfoA* {.final, pure.} = object
    ldapaif_info_version*: int32
    ldapaif_name*: cstring
    ldapaif_version*: int32
  PLDAPAPIFeatureInfoA* = ptr LDAPAPIFeatureInfoA
  LDAPAPIFeatureInfoW* {.final, pure.} = object
    ldapaif_info_version*: int32
    ldapaif_name*: PWCHAR
    ldapaif_version*: int32
  PLDAPAPIFeatureInfoW* = ptr LDAPAPIFeatureInfoW
  LDAPControlA* {.final, pure.} = object
    ldctl_oid*: PCHAR
    ldctl_value*: BerValue
    ldctl_iscritical*: BOOLEAN
  PLDAPControlA* = ptr LDAPControlA
  LDAPControlW* {.final, pure.} = object
    ldctl_oid*: PWCHAR
    ldctl_value*: BerValue
    ldctl_iscritical*: BOOLEAN
  PLDAPControlW* = ptr LDAPControlW
  mod_vals_u_tA* {.final, union, pure.} = object
    modv_strvals*: ptr PCHAR
    modv_bvals*: ptr ptr BerValue
  mod_vals_u_tW* {.final, union, pure.} = object
    modv_strvals*: ptr PWCHAR
    modv_bvals*: ptr ptr BerValue
  LDAPModA_UNION1* {.final, union, pure.} = object
    mod_vals*: mod_vals_u_tA
    mod_values*: ptr PCHAR
    mod_bvalues*: ptr ptr BerValue
  LDAPModA* {.final, pure.} = object
    mod_op*: ULONG
    mod_type*: PCHAR
    u1*: LDAPModA_UNION1
  PLDAPModA* = ptr LDAPModA
  LDAPModW_UNION1* {.final, union, pure.} = object
    mod_vals*: mod_vals_u_tW
    mod_values*: ptr PWCHAR
    mod_bvalues*: ptr ptr BerValue
  LDAPModW* {.final, pure.} = object
    mod_op*: ULONG
    mod_type*: PWCHAR
    u1*: LDAPModW_UNION1
  PLDAPModW* = ptr LDAPModW
  LDAPSearch* {.final, pure.} = object
  PLDAPSearch* = ptr LDAPSearch
  LDAPSortKeyA* {.final, pure.} = object
    sk_attrtype*: PCHAR
    sk_matchruleoid*: PCHAR
    sk_reverseorder*: BOOLEAN
  PLDAPSortKeyA* = ptr LDAPSortKeyA
  LDAPSortKeyW* {.final, pure.} = object
    sk_attrtype*: PWCHAR
    sk_matchruleoid*: PWCHAR
    sk_reverseorder*: BOOLEAN
  PLDAPSortKeyW* = ptr LDAPSortKeyW
  QUERYFORCONNECTION* = proc (P1: PLDAP, P2: PLDAP, P3: PWCHAR, P4: PCHAR, P5: ULONG, P6: PVOID, P7: PVOID, P8: ptr PLDAP): ULONG {.cdecl.}
  NOTIFYOFNEWCONNECTION* = proc (P1: PLDAP, P2: PLDAP, P3: PWCHAR, P4: PCHAR, P5: PLDAP, P6: ULONG, P7: PVOID, P8: PVOID, P9: ULONG): BOOLEAN {.cdecl.}
  DEREFERENCECONNECTION* = proc (P1: PLDAP, P2: PLDAP): ULONG {.cdecl.}
  QUERYCLIENTCERT* = proc (P1: PLDAP, P2: PSecPkgContext_IssuerListInfoEx, P3: ptr PCCERT_CONTEXT): BOOLEAN {.cdecl.}
  LDAP_REFERRAL_CALLBACK* {.final, pure.} = object
    SizeOfCallbacks*: ULONG
    QueryForConnection*: ptr QUERYFORCONNECTION
    NotifyRoutine*: ptr NOTIFYOFNEWCONNECTION
    DereferenceRoutine*: ptr DEREFERENCECONNECTION
  PLDAP_REFERRAL_CALLBACK* = ptr LDAP_REFERRAL_CALLBACK
  LDAPVLVInfo* {.final, pure.} = object
    ldvlv_version*: int32
    ldvlv_before_count*: uint32
    ldvlv_after_count*: uint32
    ldvlv_offset*: uint32
    ldvlv_count*: uint32
    ldvlv_attrvalue*: ptr BerValue
    ldvlv_context*: ptr BerValue
    ldvlv_extradata*: pointer

proc ldap_perror*(handle: ptr LDAP, message: cstring): int32 =
  echo message, ": ", handle.ld_error

proc ldap_initA*(P1: PCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc.}
proc ldap_initW*(P1: PWCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc.}
proc ldap_openA*(P1: PCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc.}
proc ldap_openW*(P1: PWCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc.}
proc cldap_openA*(P1: PCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc.}
proc cldap_openW*(P1: PWCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc.}
proc ldap_connect*(P1: ptr LDAP, P2: ptr LDAP_TIMEVAL): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_sslinitA*(P1: PCHAR, P2: ULONG, P3: int32): PLDAP {.winapi, dynlib: "wldap32", importc.}
proc ldap_sslinitW*(P1: PWCHAR, P2: ULONG, P3: int32): PLDAP {.winapi, dynlib: "wldap32", importc.}
proc ldap_start_tls_sA*(P1: ptr LDAP, P2: ptr PLDAPControlA, P3: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_start_tls_sW*(P1: ptr LDAP, P2: ptr PLDAPControlW, P3: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_stop_tls_s*(P1: ptr LDAP): BOOLEAN {.winapi, dynlib: "wldap32", importc.}
proc ldap_get_optionA*(P1: ptr LDAP, P2: int32, P3: pointer): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_get_optionW*(P1: ptr LDAP, P2: int32, P3: pointer): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_set_optionA*(P1: ptr LDAP, P2: int32, P3: pointer): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_set_optionW*(P1: ptr LDAP, P2: int32, P3: pointer): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_control_freeA*(P1: ptr LDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_control_freeW*(P1: ptr LDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_controls_freeA*(P1: ptr ptr LDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_controls_freeW*(P1: ptr ptr LDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_free_controlsA*(P1: ptr ptr LDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_free_controlsW*(P1: ptr ptr LDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_sasl_bindA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: ptr BERVAL, P5: ptr PLDAPControlA, P6: ptr PLDAPControlA, P7: ptr int32): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_sasl_bindW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: ptr BERVAL, P5: ptr PLDAPControlW, P6: ptr PLDAPControlW, P7: ptr int32): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_sasl_bind_sA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: ptr BERVAL, P5: ptr PLDAPControlA, P6: ptr PLDAPControlA, P7: ptr PBERVAL): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_sasl_bind_sW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: ptr BERVAL, P5: ptr PLDAPControlW, P6: ptr PLDAPControlW, P7: ptr PBERVAL): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_simple_bindA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_simple_bindW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_simple_bind_sA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_simple_bind_sW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_unbind*(P1: ptr LDAP): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_unbind_s*(P1: ptr LDAP): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_search_extA*(P1: ptr LDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG, P7: ptr PLDAPControlW, P8: ptr PLDAPControlW, P9: ULONG, P10: ULONG, P11: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_search_extW*(P1: ptr LDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG, P7: ptr PLDAPControlW, P8: ptr PLDAPControlW, P9: ULONG, P10: ULONG, P11: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_search_ext_sA*(P1: ptr LDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG, P7: ptr PLDAPControlA, P8: ptr PLDAPControlA, P9: ptr LDAP_TIMEVAL, P10: ULONG, P11: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_search_ext_sW*(P1: ptr LDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG, P7: ptr PLDAPControlW, P8: ptr PLDAPControlW, P9: ptr LDAP_TIMEVAL, P10: ULONG, P11: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_searchA*(P1: ptr LDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_searchW*(P1: ptr LDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_search_sA*(P1: ptr LDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG, P7: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_search_sW*(P1: ptr LDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG, P7: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_search_stA*(P1: ptr LDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG, P7: ptr LDAP_TIMEVAL, P8: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_search_stW*(P1: ptr LDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG, P7: ptr LDAP_TIMEVAL, P8: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_compare_extA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR, P5: ptr BerValue, P6: ptr PLDAPControlA, P7: ptr PLDAPControlA, P8: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_compare_extW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR, P5: ptr BerValue, P6: ptr PLDAPControlW, P7: ptr PLDAPControlW, P8: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_compare_ext_sA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR, P5: ptr BerValue, P6: ptr PLDAPControlA, P7: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_compare_ext_sW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR, P5: ptr BerValue, P6: ptr PLDAPControlW, P7: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_compareA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_compareW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_compare_sA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_compare_sW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modify_extA*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modify_extW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modify_ext_sA*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modify_ext_sW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modifyA*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modifyW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modify_sA*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modify_sW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_rename_extA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR, P5: INT, P6: ptr PLDAPControlA, P7: ptr PLDAPControlA, P8: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_rename_extW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR, P5: INT, P6: ptr PLDAPControlW, P7: ptr PLDAPControlW, P8: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_rename_ext_sA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR, P5: INT, P6: ptr PLDAPControlA, P7: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_rename_ext_sW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR, P5: INT, P6: ptr PLDAPControlW, P7: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_add_extA*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_add_extW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_add_ext_sA*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_add_ext_sW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_addA*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_addW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_add_sA*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_add_sW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_delete_extA*(P1: ptr LDAP, P2: PCHAR, P3: ptr PLDAPControlA, P4: ptr PLDAPControlA, P5: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_delete_extW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr PLDAPControlW, P4: ptr PLDAPControlW, P5: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_delete_ext_sA*(P1: ptr LDAP, P2: PCHAR, P3: ptr PLDAPControlA, P4: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_delete_ext_sW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr PLDAPControlW, P4: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_deleteA*(P1: ptr LDAP, P2: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_deleteW*(P1: ptr LDAP, P2: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_delete_sA*(P1: ptr LDAP, P2: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_delete_sW*(P1: ptr LDAP, P2: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_extended_operationA*(P1: ptr LDAP, P2: PCHAR, P3: ptr BerValue, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_extended_operationW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr BerValue, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_extended_operation_sA*(P1: ptr LDAP, P2: PCHAR, P3: ptr BerValue, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA, P6: ptr PCHAR, P7: ptr ptr BerValue): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_extended_operation_sW*(P1: ptr LDAP, P2: PWCHAR, P3: ptr BerValue, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW, P6: ptr PWCHAR, P7: ptr ptr BerValue): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_close_extended_op*(P1: ptr LDAP, P2: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_abandon*(P1: ptr LDAP, P2: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_result*(P1: ptr LDAP, P2: ULONG, P3: ULONG, P4: ptr LDAP_TIMEVAL, P5: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_msgfree*(P1: ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_resultA*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ULONG, P4: ptr PCHAR, P5: ptr PCHAR, P6: ptr ptr PCHAR, P7: ptr ptr PLDAPControlA, P8: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_resultW*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ULONG, P4: ptr PWCHAR, P5: ptr PWCHAR, P6: ptr ptr PWCHAR, P7: ptr ptr PLDAPControlW, P8: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_extended_resultA*(P1: LDAP, P2: ptr LDAPMessage, P3: ptr PCHAR, P4: ptr ptr BerValue, P5: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_extended_resultW*(P1: LDAP, P2: ptr LDAPMessage, P3: ptr PWCHAR, P4: ptr ptr BerValue, P5: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_err2stringA*(P1: ULONG): PCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_err2stringW*(P1: ULONG): PWCHAR {.winapi, dynlib: "wldap32", importc.}
proc LdapGetLastError*(): ULONG {.winapi, dynlib: "wldap32", importc.}
proc LdapMapErrorToWin32*(P1: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_result2error*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_first_entry*(P1: ptr LDAP, P2: ptr LDAPMessage): PLDAPMessage {.winapi, dynlib: "wldap32", importc.}
proc ldap_next_entry*(P1: ptr LDAP, P2: ptr LDAPMessage): PLDAPMessage {.winapi, dynlib: "wldap32", importc.}
proc ldap_first_reference*(P1: ptr LDAP, P2: ptr LDAPMessage): PLDAPMessage {.winapi, dynlib: "wldap32", importc.}
proc ldap_next_reference*(P1: ptr LDAP, P2: ptr LDAPMessage): PLDAPMessage {.winapi, dynlib: "wldap32", importc.}
proc ldap_count_entries*(P1: ptr LDAP, P2: ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_count_references*(P1: ptr LDAP, P2: ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_first_attributeA*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ptr BerElement): PCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_first_attributeW*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ptr BerElement): PWCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_next_attributeA*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr BerElement): PCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_next_attributeW*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr BerElement): PWCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_memfreeA*(P1: PCHAR): VOID {.winapi, dynlib: "wldap32", importc.}
proc ldap_memfreeW*(P1: PWCHAR): VOID {.winapi, dynlib: "wldap32", importc.}
proc ldap_get_valuesA*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: PCHAR): ptr PCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_get_valuesW*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: PWCHAR): ptr PWCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_count_valuesA*(P1: ptr PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_count_valuesW*(P1: ptr PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_count_values_len*(P1: ptr ptr BerValue): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_value_freeA*(P1: ptr PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_value_freeW*(P1: ptr PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_value_free_len*(P1: ptr ptr BerValue): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_get_dnA*(P1: ptr LDAP, P2: ptr LDAPMessage): PCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_get_dnW*(P1: ptr LDAP, P2: ptr LDAPMessage): PWCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_explode_dnA*(P1: PCHAR, P2: ULONG): PCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_explode_dnW*(P1: PWCHAR, P2: ULONG): PWCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_dn2ufnA*(P1: PCHAR): PCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_dn2ufnW*(P1: PWCHAR): PWCHAR {.winapi, dynlib: "wldap32", importc.}
proc ldap_ufn2dnA*(P1: PCHAR, P2: ptr PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_ufn2dnW*(P1: PWCHAR, P2: ptr PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_referenceA*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ptr PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_referenceW*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ptr PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_check_filterA*(P1: ptr LDAP, P2: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_check_filterW*(P1: ptr LDAP, P2: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_create_page_controlA*(P1: PLDAP, P2: ULONG, P3: ptr BerValue, P4: UCHAR, P5: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_create_page_controlW*(P1: PLDAP, P2: ULONG, P3: ptr BerValue, P4: UCHAR, P5: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_create_sort_controlA*(P1: PLDAP, P2: ptr PLDAPSortKeyA, P3: UCHAR, P4: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_create_sort_controlW*(P1: PLDAP, P2: ptr PLDAPSortKeyW, P3: UCHAR, P4: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_create_vlv_controlA*(P1: ptr LDAP, P2: ptr LDAPVLVInfo, P3: UCHAR, P4: ptr ptr LDAPControlA): INT {.winapi, dynlib: "wldap32", importc.}
proc ldap_create_vlv_controlW*(P1: ptr LDAP, P2: ptr LDAPVLVInfo, P3: UCHAR, P4: ptr ptr LDAPControlW): INT {.winapi, dynlib: "wldap32", importc.}
proc ldap_encode_sort_controlA*(P1: PLDAP, P2: ptr PLDAPSortKeyA, P3: PLDAPControlA, P4: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_encode_sort_controlW*(P1: PLDAP, P2: ptr PLDAPSortKeyW, P3: PLDAPControlW, P4: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_escape_filter_elementA*(P1: PCHAR, P2: ULONG, P3: PCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_escape_filter_elementW*(P1: PWCHAR, P2: ULONG, P3: PWCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_get_next_page*(P1: PLDAP, P2: PLDAPSearch, P3: ULONG, P4: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_get_next_page_s*(P1: PLDAP, P2: PLDAPSearch, P3: ptr LDAP_TIMEVAL, P4: ULONG, P5: ptr ULONG, P6: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_get_paged_count*(P1: PLDAP, P2: PLDAPSearch, P3: ptr ULONG, P4: PLDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_page_controlA*(P1: PLDAP, P2: ptr PLDAPControlA, P3: ptr ULONG, P4: ptr ptr BerValue): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_page_controlW*(P1: PLDAP, P2: ptr PLDAPControlW, P3: ptr ULONG, P4: ptr ptr BerValue): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_sort_controlA*(P1: PLDAP, P2: ptr PLDAPControlA, P3: ptr ULONG, P4: ptr PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_sort_controlW*(P1: PLDAP, P2: ptr PLDAPControlW, P3: ptr ULONG, P4: ptr PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_vlv_controlA*(P1: ptr LDAP, P2: ptr ptr LDAPControlA, P3: ptr uint32, P4: ptr uint32, P5: ptr ptr BerValue, P6: ptr int32): INT {.winapi, dynlib: "wldap32", importc.}
proc ldap_parse_vlv_controlW*(P1: ptr LDAP, P2: ptr ptr LDAPControlW, P3: ptr uint32, P4: ptr uint32, P5: ptr ptr BerValue, P6: ptr int32): INT {.winapi, dynlib: "wldap32", importc.}
proc ldap_search_init_pageA*(P1: PLDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG, P7: ptr PLDAPControlA, P8: ptr PLDAPControlA, P9: ULONG, P10: ULONG, P11: ptr PLDAPSortKeyA): PLDAPSearch {.winapi, dynlib: "wldap32", importc.}
proc ldap_search_init_pageW*(P1: PLDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG, P7: ptr PLDAPControlW, P8: ptr PLDAPControlW, P9: ULONG, P10: ULONG, P11: ptr PLDAPSortKeyW): PLDAPSearch {.winapi, dynlib: "wldap32", importc.}
proc ldap_search_abandon_page*(P1: PLDAP, P2: PLDAPSearch): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_conn_from_msg*(P1: ptr LDAP, P2: ptr LDAPMessage): LDAP {.winapi, dynlib: "wldap32", importc.}
proc LdapUnicodeToUTF8*(P1: LPCWSTR, P2: int32, P3: LPSTR, P4: int32): INT {.winapi, dynlib: "wldap32", importc.}
proc LdapUTF8ToUnicode*(P1: LPCSTR, P2: int32, P3: LPWSTR, P4: int32): INT {.winapi, dynlib: "wldap32", importc.}
proc ldap_bindA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_bindW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_bind_sA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_bind_sW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modrdnA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modrdnW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modrdn_sA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modrdn_sW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modrdn2A*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: INT): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modrdn2W*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: INT): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modrdn2_sA*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: INT): ULONG {.winapi, dynlib: "wldap32", importc.}
proc ldap_modrdn2_sW*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: INT): ULONG {.winapi, dynlib: "wldap32", importc.}

when not defined(winansi):
  type
    LDAPControl* = LDAPControlW
    PLDAPControl* = PLDAPControlW
    LDAPMod* = LDAPModW
    PLDAPMod* = LDAPModW
    LDAPSortKey* = LDAPSortKeyW
    PLDAPSortKey* = PLDAPSortKeyW
    LDAPAPIInfo* = LDAPAPIInfoW
    PLDAPAPIInfo* = PLDAPAPIInfoW
    LDAPAPIFeatureInfo* = LDAPAPIFeatureInfoW
    PLDAPAPIFeatureInfo* = PLDAPAPIFeatureInfoW

  proc cldap_open*(P1: PWCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc: "cldap_openW".}
  proc ldap_open*(P1: PWCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc: "ldap_openW".}
  proc ldap_simple_bind*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_simple_bindW".}
  proc ldap_simple_bind_s*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_simple_bind_sW".}
  proc ldap_sasl_bind*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: ptr BERVAL, P5: ptr PLDAPControlW, P6: ptr PLDAPControlW, P7: ptr int32): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_sasl_bindW".}
  proc ldap_sasl_bind_s*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: ptr BERVAL, P5: ptr PLDAPControlW, P6: ptr PLDAPControlW, P7: ptr PBERVAL): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_sasl_bind_sW".}
  proc ldap_init*(P1: PWCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc: "ldap_initW".}
  proc ldap_sslinit*(P1: PWCHAR, P2: ULONG, P3: int32): PLDAP {.winapi, dynlib: "wldap32", importc: "ldap_sslinitW".}
  proc ldap_get_option*(P1: ptr LDAP, P2: int32, P3: pointer): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_get_optionW".}
  proc ldap_set_option*(P1: ptr LDAP, P2: int32, P3: pointer): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_set_optionW".}
  proc ldap_start_tls_s*(P1: ptr LDAP, P2: ptr PLDAPControlW, P3: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_start_tls_sW".}
  proc ldap_add*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_addW".}
  proc ldap_add_ext*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_add_extW".}
  proc ldap_add_s*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_add_sW".}
  proc ldap_add_ext_s*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_add_ext_sW".}
  proc ldap_compare*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_compareW".}
  proc ldap_compare_ext*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR, P5: ptr BerValue, P6: ptr PLDAPControlW, P7: ptr PLDAPControlW, P8: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_compare_extW".}
  proc ldap_compare_s*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_compare_sW".}
  proc ldap_compare_ext_s*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR, P5: ptr BerValue, P6: ptr PLDAPControlW, P7: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_compare_ext_sW".}
  proc ldap_delete*(P1: ptr LDAP, P2: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_deleteW".}
  proc ldap_delete_ext*(P1: ptr LDAP, P2: PWCHAR, P3: ptr PLDAPControlW, P4: ptr PLDAPControlW, P5: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_delete_extW".}
  proc ldap_delete_s*(P1: ptr LDAP, P2: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_delete_sW".}
  proc ldap_delete_ext_s*(P1: ptr LDAP, P2: PWCHAR, P3: ptr PLDAPControlW, P4: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_delete_ext_sW".}
  proc ldap_extended_operation_s*(P1: ptr LDAP, P2: PWCHAR, P3: ptr BerValue, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW, P6: ptr PWCHAR, P7: ptr ptr BerValue): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_extended_operation_sW".}
  proc ldap_extended_operation*(P1: ptr LDAP, P2: PWCHAR, P3: ptr BerValue, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_extended_operationW".}
  proc ldap_modify*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modifyW".}
  proc ldap_modify_ext*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modify_extW".}
  proc ldap_modify_s*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modify_sW".}
  proc ldap_modify_ext_s*(P1: ptr LDAP, P2: PWCHAR, P3: ptr ptr LDAPModW, P4: ptr PLDAPControlW, P5: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modify_ext_sW".}
  proc ldap_check_filter*(P1: ptr LDAP, P2: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_check_filterW".}
  proc ldap_count_values*(P1: ptr PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_count_valuesW".}
  proc ldap_create_page_control*(P1: PLDAP, P2: ULONG, P3: ptr BerValue, P4: UCHAR, P5: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_create_page_controlW".}
  proc ldap_create_sort_control*(P1: PLDAP, P2: ptr PLDAPSortKeyW, P3: UCHAR, P4: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_create_sort_controlW".}
  proc ldap_create_vlv_control*(P1: ptr LDAP, P2: ptr LDAPVLVInfo, P3: UCHAR, P4: ptr ptr LDAPControlW): INT {.winapi, dynlib: "wldap32", importc: "ldap_create_vlv_controlW".}
  proc ldap_encode_sort_control*(P1: PLDAP, P2: ptr PLDAPSortKeyW, P3: PLDAPControlW, P4: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_encode_sort_controlW".}
  proc ldap_escape_filter_element*(P1: PWCHAR, P2: ULONG, P3: PWCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_escape_filter_elementW".}
  proc ldap_first_attribute*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ptr BerElement): PWCHAR {.winapi, dynlib: "wldap32", importc: "ldap_first_attributeW".}
  proc ldap_next_attribute*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr BerElement): PWCHAR {.winapi, dynlib: "wldap32", importc: "ldap_next_attributeW".}
  proc ldap_get_values*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: PWCHAR): ptr PWCHAR {.winapi, dynlib: "wldap32", importc: "ldap_get_valuesW".}
  proc ldap_parse_extended_result*(P1: LDAP, P2: ptr LDAPMessage, P3: ptr PWCHAR, P4: ptr ptr BerValue, P5: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_parse_extended_resultW".}
  proc ldap_parse_page_control*(P1: PLDAP, P2: ptr PLDAPControlW, P3: ptr ULONG, P4: ptr ptr BerValue): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_parse_page_controlW".}
  proc ldap_parse_reference*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ptr PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_parse_referenceW".}
  proc ldap_parse_result*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ULONG, P4: ptr PWCHAR, P5: ptr PWCHAR, P6: ptr ptr PWCHAR, P7: ptr ptr PLDAPControlW, P8: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_parse_resultW".}
  proc ldap_parse_sort_control*(P1: PLDAP, P2: ptr PLDAPControlW, P3: ptr ULONG, P4: ptr PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_parse_sort_controlW".}
  proc ldap_parse_vlv_control*(P1: ptr LDAP, P2: ptr ptr LDAPControlW, P3: ptr uint32, P4: ptr uint32, P5: ptr ptr BerValue, P6: ptr int32): INT {.winapi, dynlib: "wldap32", importc: "ldap_parse_vlv_controlW".}
  proc ldap_search*(P1: ptr LDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_searchW".}
  proc ldap_search_s*(P1: ptr LDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG, P7: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_search_sW".}
  proc ldap_search_st*(P1: ptr LDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG, P7: ptr LDAP_TIMEVAL, P8: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_search_stW".}
  proc ldap_search_ext*(P1: ptr LDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG, P7: ptr PLDAPControlW, P8: ptr PLDAPControlW, P9: ULONG, P10: ULONG, P11: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_search_extW".}
  proc ldap_search_ext_s*(P1: ptr LDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG, P7: ptr PLDAPControlW, P8: ptr PLDAPControlW, P9: ptr LDAP_TIMEVAL, P10: ULONG, P11: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_search_ext_sW".}
  proc ldap_search_init_page*(P1: PLDAP, P2: PWCHAR, P3: ULONG, P4: PWCHAR, P5: ptr PWCHAR, P6: ULONG, P7: ptr PLDAPControlW, P8: ptr PLDAPControlW, P9: ULONG, P10: ULONG, P11: ptr PLDAPSortKeyW): PLDAPSearch {.winapi, dynlib: "wldap32", importc: "ldap_search_init_pageW".}
  proc ldap_err2string*(P1: ULONG): PWCHAR {.winapi, dynlib: "wldap32", importc: "ldap_err2stringW".}
  proc ldap_control_free*(P1: ptr LDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_control_freeW".}
  proc ldap_controls_free*(P1: ptr ptr LDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_controls_freeW".}
  proc ldap_free_controls*(P1: ptr ptr LDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_free_controlsW".}
  proc ldap_memfree*(P1: PWCHAR): VOID {.winapi, dynlib: "wldap32", importc: "ldap_memfreeW".}
  proc ldap_value_free*(P1: ptr PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_value_freeW".}
  proc ldap_dn2ufn*(P1: PWCHAR): PWCHAR {.winapi, dynlib: "wldap32", importc: "ldap_dn2ufnW".}
  proc ldap_ufn2dn*(P1: PWCHAR, P2: ptr PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_ufn2dnW".}
  proc ldap_explode_dn*(P1: PWCHAR, P2: ULONG): PWCHAR {.winapi, dynlib: "wldap32", importc: "ldap_explode_dnW".}
  proc ldap_get_dn*(P1: ptr LDAP, P2: ptr LDAPMessage): PWCHAR {.winapi, dynlib: "wldap32", importc: "ldap_get_dnW".}
  proc ldap_rename*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR, P5: INT, P6: ptr PLDAPControlW, P7: ptr PLDAPControlW, P8: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_rename_extW".}
  proc ldap_rename_s*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR, P5: INT, P6: ptr PLDAPControlW, P7: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_rename_ext_sW".}
  proc ldap_rename_ext*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR, P5: INT, P6: ptr PLDAPControlW, P7: ptr PLDAPControlW, P8: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_rename_extW".}
  proc ldap_rename_ext_s*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: PWCHAR, P5: INT, P6: ptr PLDAPControlW, P7: ptr PLDAPControlW): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_rename_ext_sW".}
  proc ldap_bind*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_bindW".}
  proc ldap_bind_s*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_bind_sW".}
  proc ldap_modrdn*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modrdnW".}
  proc ldap_modrdn_s*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modrdn_sW".}
  proc ldap_modrdn2*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: INT): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modrdn2W".}
  proc ldap_modrdn2_s*(P1: ptr LDAP, P2: PWCHAR, P3: PWCHAR, P4: INT): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modrdn2_sW".}

else:
  type
    LDAPControl* = LDAPControlA
    PLDAPControl* = PLDAPControlA
    LDAPMod* = LDAPModA
    PLDAPMod* = LDAPModA
    LDAPSortKey* = LDAPSortKeyA
    PLDAPSortKey* = PLDAPSortKeyA
    LDAPAPIInfo* = LDAPAPIInfoA
    PLDAPAPIInfo* = PLDAPAPIInfoA
    LDAPAPIFeatureInfo* = LDAPAPIFeatureInfoA
    PLDAPAPIFeatureInfo* = PLDAPAPIFeatureInfoA

  proc cldap_open*(P1: PCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc: "cldap_openA".}
  proc ldap_open*(P1: PCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc: "ldap_openA".}
  proc ldap_simple_bind*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_simple_bindA".}
  proc ldap_simple_bind_s*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_simple_bind_sA".}
  proc ldap_sasl_bind*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: ptr BERVAL, P5: ptr PLDAPControlA, P6: ptr PLDAPControlA, P7: ptr int32): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_sasl_bindA".}
  proc ldap_sasl_bind_s*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: ptr BERVAL, P5: ptr PLDAPControlA, P6: ptr PLDAPControlA, P7: ptr PBERVAL): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_sasl_bind_sA".}
  proc ldap_init*(P1: PCHAR, P2: ULONG): PLDAP {.winapi, dynlib: "wldap32", importc: "ldap_initA".}
  proc ldap_sslinit*(P1: PCHAR, P2: ULONG, P3: int32): PLDAP {.winapi, dynlib: "wldap32", importc: "ldap_sslinitA".}
  proc ldap_get_option*(P1: ptr LDAP, P2: int32, P3: pointer): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_get_optionA".}
  proc ldap_set_option*(P1: ptr LDAP, P2: int32, P3: pointer): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_set_optionA".}
  proc ldap_start_tls_s*(P1: ptr LDAP, P2: ptr PLDAPControlA, P3: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_start_tls_sA".}
  proc ldap_add*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_addA".}
  proc ldap_add_ext*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_add_extA".}
  proc ldap_add_s*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_add_sA".}
  proc ldap_add_ext_s*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_add_ext_sA".}
  proc ldap_compare*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_compareA".}
  proc ldap_compare_ext*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR, P5: ptr BerValue, P6: ptr PLDAPControlA, P7: ptr PLDAPControlA, P8: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_compare_extA".}
  proc ldap_compare_s*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_compare_sA".}
  proc ldap_compare_ext_s*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR, P5: ptr BerValue, P6: ptr PLDAPControlA, P7: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_compare_ext_sA".}
  proc ldap_delete*(P1: ptr LDAP, P2: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_deleteA".}
  proc ldap_delete_ext*(P1: ptr LDAP, P2: PCHAR, P3: ptr PLDAPControlA, P4: ptr PLDAPControlA, P5: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_delete_extA".}
  proc ldap_delete_s*(P1: ptr LDAP, P2: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_delete_sA".}
  proc ldap_delete_ext_s*(P1: ptr LDAP, P2: PCHAR, P3: ptr PLDAPControlA, P4: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_delete_ext_sA".}
  proc ldap_extended_operation_s*(P1: ptr LDAP, P2: PCHAR, P3: ptr BerValue, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA, P6: ptr PCHAR, P7: ptr ptr BerValue): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_extended_operation_sA".}
  proc ldap_extended_operation*(P1: ptr LDAP, P2: PCHAR, P3: ptr BerValue, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_extended_operationA".}
  proc ldap_modify*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modifyA".}
  proc ldap_modify_ext*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA, P6: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modify_extA".}
  proc ldap_modify_s*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modify_sA".}
  proc ldap_modify_ext_s*(P1: ptr LDAP, P2: PCHAR, P3: ptr ptr LDAPModA, P4: ptr PLDAPControlA, P5: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modify_ext_sA".}
  proc ldap_check_filter*(P1: ptr LDAP, P2: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_check_filterA".}
  proc ldap_count_values*(P1: ptr PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_count_valuesA".}
  proc ldap_create_page_control*(P1: PLDAP, P2: ULONG, P3: ptr BerValue, P4: UCHAR, P5: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_create_page_controlA".}
  proc ldap_create_sort_control*(P1: PLDAP, P2: ptr PLDAPSortKeyA, P3: UCHAR, P4: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_create_sort_controlA".}
  proc ldap_create_vlv_control*(P1: ptr LDAP, P2: ptr LDAPVLVInfo, P3: UCHAR, P4: ptr ptr LDAPControlA): INT {.winapi, dynlib: "wldap32", importc: "ldap_create_vlv_controlA".}
  proc ldap_encode_sort_control*(P1: PLDAP, P2: ptr PLDAPSortKeyA, P3: PLDAPControlA, P4: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_encode_sort_controlA".}
  proc ldap_escape_filter_element*(P1: PCHAR, P2: ULONG, P3: PCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_escape_filter_elementA".}
  proc ldap_first_attribute*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ptr BerElement): PCHAR {.winapi, dynlib: "wldap32", importc: "ldap_first_attributeA".}
  proc ldap_next_attribute*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr BerElement): PCHAR {.winapi, dynlib: "wldap32", importc: "ldap_next_attributeA".}
  proc ldap_get_values*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: PCHAR): ptr PCHAR {.winapi, dynlib: "wldap32", importc: "ldap_get_valuesA".}
  proc ldap_parse_extended_result*(P1: LDAP, P2: ptr LDAPMessage, P3: ptr PCHAR, P4: ptr ptr BerValue, P5: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_parse_extended_resultA".}
  proc ldap_parse_page_control*(P1: PLDAP, P2: ptr PLDAPControlA, P3: ptr ULONG, P4: ptr ptr BerValue): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_parse_page_controlA".}
  proc ldap_parse_reference*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ptr PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_parse_referenceA".}
  proc ldap_parse_result*(P1: ptr LDAP, P2: ptr LDAPMessage, P3: ptr ULONG, P4: ptr PCHAR, P5: ptr PCHAR, P6: ptr ptr PCHAR, P7: ptr ptr PLDAPControlA, P8: BOOLEAN): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_parse_resultA".}
  proc ldap_parse_sort_control*(P1: PLDAP, P2: ptr PLDAPControlA, P3: ptr ULONG, P4: ptr PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_parse_sort_controlA".}
  proc ldap_parse_vlv_control*(P1: ptr LDAP, P2: ptr ptr LDAPControlA, P3: ptr uint32, P4: ptr uint32, P5: ptr ptr BerValue, P6: ptr int32): INT {.winapi, dynlib: "wldap32", importc: "ldap_parse_vlv_controlA".}
  proc ldap_search*(P1: ptr LDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_searchA".}
  proc ldap_search_s*(P1: ptr LDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG, P7: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_search_sA".}
  proc ldap_search_st*(P1: ptr LDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG, P7: ptr LDAP_TIMEVAL, P8: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_search_stA".}
  proc ldap_search_ext*(P1: ptr LDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG, P7: ptr PLDAPControlW, P8: ptr PLDAPControlW, P9: ULONG, P10: ULONG, P11: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_search_extA".}
  proc ldap_search_ext_s*(P1: ptr LDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG, P7: ptr PLDAPControlA, P8: ptr PLDAPControlA, P9: ptr LDAP_TIMEVAL, P10: ULONG, P11: ptr ptr LDAPMessage): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_search_ext_sA".}
  proc ldap_search_init_page*(P1: PLDAP, P2: PCHAR, P3: ULONG, P4: PCHAR, P5: ptr PCHAR, P6: ULONG, P7: ptr PLDAPControlA, P8: ptr PLDAPControlA, P9: ULONG, P10: ULONG, P11: ptr PLDAPSortKeyA): PLDAPSearch {.winapi, dynlib: "wldap32", importc: "ldap_search_init_pageA".}
  proc ldap_err2string*(P1: ULONG): PCHAR {.winapi, dynlib: "wldap32", importc: "ldap_err2stringA".}
  proc ldap_control_free*(P1: ptr LDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_control_freeA".}
  proc ldap_controls_free*(P1: ptr ptr LDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_controls_freeA".}
  proc ldap_free_controls*(P1: ptr ptr LDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_free_controlsA".}
  proc ldap_memfree*(P1: PCHAR): VOID {.winapi, dynlib: "wldap32", importc: "ldap_memfreeA".}
  proc ldap_value_free*(P1: ptr PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_value_freeA".}
  proc ldap_dn2ufn*(P1: PCHAR): PCHAR {.winapi, dynlib: "wldap32", importc: "ldap_dn2ufnA".}
  proc ldap_ufn2dn*(P1: PCHAR, P2: ptr PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_ufn2dnA".}
  proc ldap_explode_dn*(P1: PCHAR, P2: ULONG): PCHAR {.winapi, dynlib: "wldap32", importc: "ldap_explode_dnA".}
  proc ldap_get_dn*(P1: ptr LDAP, P2: ptr LDAPMessage): PCHAR {.winapi, dynlib: "wldap32", importc: "ldap_get_dnA".}
  proc ldap_rename*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR, P5: INT, P6: ptr PLDAPControlA, P7: ptr PLDAPControlA, P8: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_rename_extA".}
  proc ldap_rename_s*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR, P5: INT, P6: ptr PLDAPControlA, P7: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_rename_ext_sA".}
  proc ldap_rename_ext*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR, P5: INT, P6: ptr PLDAPControlA, P7: ptr PLDAPControlA, P8: ptr ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_rename_extA".}
  proc ldap_rename_ext_s*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: PCHAR, P5: INT, P6: ptr PLDAPControlA, P7: ptr PLDAPControlA): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_rename_ext_sA".}
  proc ldap_bind*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_bindA".}
  proc ldap_bind_s*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: ULONG): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_bind_sA".}
  proc ldap_modrdn*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modrdnA".}
  proc ldap_modrdn_s*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modrdn_sA".}
  proc ldap_modrdn2*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: INT): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modrdn2A".}
  proc ldap_modrdn2_s*(P1: ptr LDAP, P2: PCHAR, P3: PCHAR, P4: INT): ULONG {.winapi, dynlib: "wldap32", importc: "ldap_modrdn2_sA".}

proc `mod_vals=`*(self: var LDAPModA, x: mod_vals_u_tA) = self.u1.mod_vals = x
proc mod_vals*(self: LDAPModA): mod_vals_u_tA = self.u1.mod_vals
proc `mod_values=`*(self: var LDAPModA, x: ptr PCHAR) = self.u1.mod_values = x
proc mod_values*(self: LDAPModA): ptr PCHAR = self.u1.mod_values
proc `mod_bvalues=`*(self: var LDAPModA, x: ptr ptr BerValue) = self.u1.mod_bvalues = x
proc mod_bvalues*(self: LDAPModA): ptr ptr BerValue = self.u1.mod_bvalues
proc `mod_vals=`*(self: var LDAPModW, x: mod_vals_u_tW) = self.u1.mod_vals = x
proc mod_vals*(self: LDAPModW): mod_vals_u_tW = self.u1.mod_vals
proc `mod_values=`*(self: var LDAPModW, x: ptr PWCHAR) = self.u1.mod_values = x
proc mod_values*(self: LDAPModW): ptr PWCHAR = self.u1.mod_values
proc `mod_bvalues=`*(self: var LDAPModW, x: ptr ptr BerValue) = self.u1.mod_bvalues = x
proc mod_bvalues*(self: LDAPModW): ptr ptr BerValue = self.u1.mod_bvalues

# net/ws2tcpip.nim

const
  # IP_OPTIONS* = 1
  IP_HDRINCL* = 2
  IP_TOS* = 3
  IP_TTL* = 4
  IP_MULTICAST_IF* = 9
  IP_MULTICAST_TTL* = 10
  IP_MULTICAST_LOOP* = 11
  IP_ADD_MEMBERSHIP* = 12
  IP_DROP_MEMBERSHIP* = 13
  IP_DONTFRAGMENT* = 14
  IP_ADD_SOURCE_MEMBERSHIP* = 15
  IP_DROP_SOURCE_MEMBERSHIP* = 16
  IP_BLOCK_SOURCE* = 17
  IP_UNBLOCK_SOURCE* = 18
  IP_PKTINFO* = 19
  IPV6_UNICAST_HOPS* = 4
  IPV6_MULTICAST_IF* = 9
  IPV6_MULTICAST_HOPS* = 10
  IPV6_MULTICAST_LOOP* = 11
  IPV6_ADD_MEMBERSHIP* = 12
  IPV6_DROP_MEMBERSHIP* = 13
  IPV6_JOIN_GROUP* = IPV6_ADD_MEMBERSHIP
  IPV6_LEAVE_GROUP* = IPV6_DROP_MEMBERSHIP
  IPV6_PKTINFO* = 19
  IP_DEFAULT_MULTICAST_TTL* = 1
  IP_DEFAULT_MULTICAST_LOOP* = 1
  IP_MAX_MEMBERSHIPS* = 20
  TCP_EXPEDITED_1122* = 2
  UDP_NOCHECKSUM* = 1
  IFF_UP* = 1
  IFF_BROADCAST* = 2
  IFF_LOOPBACK* = 4
  IFF_POINTTOPOINT* = 8
  IFF_MULTICAST* = 16
  SIO_GET_INTERFACE_LIST* = IOR('t', 127, u_long)
  INET_ADDRSTRLEN* = 16
  INET6_ADDRSTRLEN* = 46
  NI_MAXHOST* = 1025
  NI_MAXSERV* = 32
  NI_NOFQDN* = 0x01
  NI_NUMERICHOST* = 0x02
  NI_NAMEREQD* = 0x04
  NI_NUMERICSERV* = 0x08
  NI_DGRAM* = 0x10
  AI_PASSIVE* = 1
  AI_CANONNAME* = 2
  AI_NUMERICHOST* = 4
  EAI_AGAIN* = WSATRY_AGAIN
  EAI_BADFLAGS* = WSAEINVAL
  EAI_FAIL* = WSANO_RECOVERY
  EAI_FAMILY* = WSAEAFNOSUPPORT
  EAI_MEMORY* = WSA_NOT_ENOUGH_MEMORY
  EAI_NODATA* = WSANO_DATA
  EAI_NONAME* = WSAHOST_NOT_FOUND
  EAI_SERVICE* = WSATYPE_NOT_FOUND
  EAI_SOCKTYPE* = WSAESOCKTNOSUPPORT

type
  ip_mreq* {.final, pure.} = object
    imr_multiaddr*: IN_ADDR
    imr_interface*: IN_ADDR
  ip_mreq_source* {.final, pure.} = object
    imr_multiaddr*: IN_ADDR
    imr_sourceaddr*: IN_ADDR
    imr_interface*: IN_ADDR
  ip_msfilter* {.final, pure.} = object
    imsf_multiaddr*: IN_ADDR
    imsf_interface*: IN_ADDR
    imsf_fmode*: u_long
    imsf_numsrc*: u_long
    imsf_slist*: array[1, IN_ADDR]

template IP_MSFILTER_SIZE*(numsrc: ULONG): DWORD =
  ip_msfilter.sizeof - IN_ADDR.sizeof + numsrc * IN_ADDR.sizeof

type
  IN_PKTINFO* {.final, pure.} = object
    ipi_addr*: IN_ADDR
    ipi_ifindex*: UINT
  IN6_ADDR_UNION1* {.final, union, pure.} = object
    S6_u8*: array[16, u_char]
    S6_u16*: array[8, u_short]
    S6_u32*: array[4, u_long]
  IN6_ADDR* {.final, pure.} = object
    u1*: IN6_ADDR_UNION1
  PIN6_ADDR* = ptr IN6_ADDR
  LPIN6_ADDR* = ptr IN6_ADDR
  SOCKADDR_IN6* {.final, pure.} = object
    sin6_family*: int16
    sin6_port*: u_short
    sin6_flowinfo*: u_long
    sin6_addr*: IN6_ADDR
    sin6_scope_id*: u_long
  PSOCKADDR_IN6* = ptr SOCKADDR_IN6
  LPSOCKADDR_IN6* = ptr SOCKADDR_IN6
  socklen_t* = int32
  IPV6_MREG* {.final, pure.} = object
    ipv6mr_multiaddr*: IN6_ADDR
    ipv6mr_interface*: uint32
  IN6_PKTINFO* {.final, pure.} = object
    ipi6_addr*: IN6_ADDR
    ipi6_ifindex*: UINT
  addrinfo* {.final, pure.} = object
    ai_flags*: int32
    ai_family*: int32
    ai_socktype*: int32
    ai_protocol*: int32
    ai_addrlen*: SIZE_T
    ai_canonname*: cstring
    ai_addr*: ptr SOCKADDR
    ai_next*: ptr addrinfo

proc freeaddrinfo*(P1: ptr addrinfo): void {.winapi, dynlib: "ws2_32", importc.}
proc getaddrinfo*(P1: cstring, P2: cstring, P3: ptr addrinfo, P4: ptr ptr addrinfo): int32 {.winapi, dynlib: "ws2_32", importc.}
proc getnameinfo*(P1: ptr SOCKADDR, P2: socklen_t, P3: cstring, P4: DWORD, P5: cstring, P6: DWORD, P7: int32): int32 {.winapi, dynlib: "ws2_32", importc.}
proc getnameinfo*(pSockaddr: ptr SOCKADDR, SockaddrLength: socklen_t, pNodeBuffer: PCHAR, NodeBufferSize: DWORD, pServiceBuffer: PCHAR, ServiceBufferSize: DWORD, Flags: INT): INT {.winapi, dynlib: "ws2_32", importc.}
proc GetNameInfoW*(pSockaddr: ptr SOCKADDR, SockaddrLength: socklen_t, pNodeBuffer: PWCHAR, NodeBufferSize: DWORD, pServiceBuffer: PWCHAR, ServiceBufferSize: DWORD, Flags: INT): INT {.winapi, dynlib: "ws2_32", importc.}
proc GetNameInfoA*(pSockaddr: ptr SOCKADDR, SockaddrLength: socklen_t, pNodeBuffer: PCHAR, NodeBufferSize: DWORD, pServiceBuffer: PCHAR, ServiceBufferSize: DWORD, Flags: INT): INT {.winapi, dynlib: "ws2_32", importc: "getnameinfo".}

when not defined(winansi):
  proc GetNameInfo*(pSockaddr: ptr SOCKADDR, SockaddrLength: socklen_t, pNodeBuffer: PWCHAR, NodeBufferSize: DWORD, pServiceBuffer: PWCHAR, ServiceBufferSize: DWORD, Flags: INT): INT {.winapi, dynlib: "ws2_32", importc: "GetNameInfoW".}

else:
  proc GetNameInfo*(pSockaddr: ptr SOCKADDR, SockaddrLength: socklen_t, pNodeBuffer: PWCHAR, NodeBufferSize: DWORD, pServiceBuffer: PWCHAR, ServiceBufferSize: DWORD, Flags: INT): INT {.winapi, dynlib: "ws2_32", importc: "GetNameInfoA".}

proc `S6_u8=`*(self: var IN6_ADDR, x: array[16, u_char]) = self.u1.S6_u8 = x
proc S6_u8*(self: IN6_ADDR): array[16, u_char] = self.u1.S6_u8
proc `S6_u16=`*(self: var IN6_ADDR, x: array[8, u_short]) = self.u1.S6_u16 = x
proc S6_u16*(self: IN6_ADDR): array[8, u_short] = self.u1.S6_u16
proc `S6_u32=`*(self: var IN6_ADDR, x: array[4, u_long]) = self.u1.S6_u32 = x
proc S6_u32*(self: IN6_ADDR): array[4, u_long] = self.u1.S6_u32


# misc/accctrl.nim
const
  # ACCESS_MODE* = enum
  NOT_USED_ACCESS* = 0
  GRANT_ACCESS* = 1
  SET_ACCESS* = 2
  DENY_ACCESS* = 3
  REVOKE_ACCESS* = 4
  SET_AUDIT_SUCCESS* = 5
  SET_AUDIT_FAILURE* = 6
  # SE_OBJECT_TYPE* = enum
  SE_UNKNOWN_OBJECT_TYPE* = 0
  SE_FILE_OBJECT* = 1
  SE_SERVICE* = 2
  SE_PRINTER* = 3
  SE_REGISTRY_KEY* = 4
  SE_LMSHARE* = 5
  SE_KERNEL_OBJECT* = 6
  SE_WINDOW_OBJECT* = 7
  SE_DS_OBJECT* = 8
  SE_DS_OBJECT_ALL* = 9
  SE_PROVIDER_DEFINED_OBJECT* = 10
  SE_WMIGUID_OBJECT* = 11
  SE_REGISTRY_WOW64_32KEY* = 12
  # TRUSTEE_TYPE* = enum
  TRUSTEE_IS_UNKNOWN* = 0
  TRUSTEE_IS_USER* = 1
  TRUSTEE_IS_GROUP* = 2
  TRUSTEE_IS_DOMAIN* = 3
  TRUSTEE_IS_ALIAS* = 4
  TRUSTEE_IS_WELL_KNOWN_GROUP* = 5
  TRUSTEE_IS_DELETED* = 6
  TRUSTEE_IS_INVALID* = 7
  TRUSTEE_IS_COMPUTER* = 8
  # TRUSTEE_FORM* = enum
  TRUSTEE_IS_SID* = 0
  TRUSTEE_IS_NAME* = 1
  TRUSTEE_BAD_FORM* = 2
  TRUSTEE_IS_OBJECTS_AND_SID* = 3
  TRUSTEE_IS_OBJECTS_AND_NAME* = 4
  # MULTIPLE_TRUSTEE_OPERATION* = enum
  NO_MULTIPLE_TRUSTEE* = 0
  TRUSTEE_IS_IMPERSONATE* = 1

const
  ACTRL_RESERVED* = 0x00000000
  ACTRL_ACCESS_PROTECTED* = 0x00000001
  ACTRL_ACCESS_ALLOWED* = 0x00000001
  ACTRL_ACCESS_DENIED* = 0x00000002
  ACTRL_AUDIT_SUCCESS* = 0x00000004
  ACTRL_AUDIT_FAILURE* = 0x00000008
  ACTRL_SYSTEM_ACCESS* = 0x04000000
  ACTRL_DELETE* = 0x08000000
  ACTRL_READ_CONTROL* = 0x10000000
  ACTRL_CHANGE_ACCESS* = 0x20000000
  ACTRL_CHANGE_OWNER* = 0x40000000
  ACTRL_SYNCHRONIZE* = 0x80000000'u32
  ACTRL_STD_RIGHTS_ALL* = 0xf8000000'u32
  ACTRL_FILE_READ* = 0x00000001
  ACTRL_FILE_WRITE* = 0x00000002
  ACTRL_FILE_APPEND* = 0x00000004
  ACTRL_FILE_READ_PROP* = 0x00000008
  ACTRL_FILE_WRITE_PROP* = 0x00000010
  ACTRL_FILE_EXECUTE* = 0x00000020
  ACTRL_FILE_READ_ATTRIB* = 0x00000080
  ACTRL_FILE_WRITE_ATTRIB* = 0x00000100
  ACTRL_FILE_CREATE_PIPE* = 0x00000200
  ACTRL_DIR_LIST* = 0x00000001
  ACTRL_DIR_CREATE_OBJECT* = 0x00000002
  ACTRL_DIR_CREATE_CHILD* = 0x00000004
  ACTRL_DIR_DELETE_CHILD* = 0x00000040
  ACTRL_DIR_TRAVERSE* = 0x00000020
  ACTRL_KERNEL_TERMINATE* = 0x00000001
  ACTRL_KERNEL_THREAD* = 0x00000002
  ACTRL_KERNEL_VM* = 0x00000004
  ACTRL_KERNEL_VM_READ* = 0x00000008
  ACTRL_KERNEL_VM_WRITE* = 0x00000010
  ACTRL_KERNEL_DUP_HANDLE* = 0x00000020
  ACTRL_KERNEL_PROCESS* = 0x00000040
  ACTRL_KERNEL_SET_INFO* = 0x00000080
  ACTRL_KERNEL_GET_INFO* = 0x00000100
  ACTRL_KERNEL_CONTROL* = 0x00000200
  ACTRL_KERNEL_ALERT* = 0x00000400
  ACTRL_KERNEL_GET_CONTEXT* = 0x00000800
  ACTRL_KERNEL_SET_CONTEXT* = 0x00001000
  ACTRL_KERNEL_TOKEN* = 0x00002000
  ACTRL_KERNEL_IMPERSONATE* = 0x00004000
  ACTRL_KERNEL_DIMPERSONATE* = 0x00008000
  ACTRL_PRINT_SADMIN* = 0x00000001
  ACTRL_PRINT_SLIST* = 0x00000002
  ACTRL_PRINT_PADMIN* = 0x00000004
  ACTRL_PRINT_PUSE* = 0x00000008
  ACTRL_PRINT_JADMIN* = 0x00000010
  ACTRL_SVC_GET_INFO* = 0x00000001
  ACTRL_SVC_SET_INFO* = 0x00000002
  ACTRL_SVC_STATUS* = 0x00000004
  ACTRL_SVC_LIST* = 0x00000008
  ACTRL_SVC_START* = 0x00000010
  ACTRL_SVC_STOP* = 0x00000020
  ACTRL_SVC_PAUSE* = 0x00000040
  ACTRL_SVC_INTERROGATE* = 0x00000080
  ACTRL_SVC_UCONTROL* = 0x00000100
  ACTRL_REG_QUERY* = 0x00000001
  ACTRL_REG_SET* = 0x00000002
  ACTRL_REG_CREATE_CHILD* = 0x00000004
  ACTRL_REG_LIST* = 0x00000008
  ACTRL_REG_NOTIFY* = 0x00000010
  ACTRL_REG_LINK* = 0x00000020
  ACTRL_WIN_CLIPBRD* = 0x00000001
  ACTRL_WIN_GLOBAL_ATOMS* = 0x00000002
  ACTRL_WIN_CREATE* = 0x00000004
  ACTRL_WIN_LIST_DESK* = 0x00000008
  ACTRL_WIN_LIST* = 0x00000010
  ACTRL_WIN_READ_ATTRIBS* = 0x00000020
  ACTRL_WIN_WRITE_ATTRIBS* = 0x00000040
  ACTRL_WIN_SCREEN* = 0x00000080
  ACTRL_WIN_EXIT* = 0x00000100
  ACTRL_ACCESS_NO_OPTIONS* = 0x00000000
  ACTRL_ACCESS_SUPPORTS_OBJECT_ENTRIES* = 0x00000001
  ACCCTRL_DEFAULT_PROVIDER* = "Windows NT Access Provider"
  TRUSTEE_ACCESS_ALLOWED* = 0x00000001
  TRUSTEE_ACCESS_READ* = 0x00000002
  TRUSTEE_ACCESS_WRITE* = 0x00000004
  TRUSTEE_ACCESS_EXPLICIT* = 0x00000001
  TRUSTEE_ACCESS_READ_WRITE* = 0x00000006
  TRUSTEE_ACCESS_ALL* = 0xFFFFFFFF'u32
  NO_INHERITANCE* = 0x0
  SUB_OBJECTS_ONLY_INHERIT* = 0x1
  SUB_CONTAINERS_ONLY_INHERIT* = 0x2
  SUB_CONTAINERS_AND_OBJECTS_INHERIT* = 0x3
  INHERIT_NO_PROPAGATE* = 0x4
  INHERIT_ONLY* = 0x8
  INHERITED_ACCESS_ENTRY* = 0x10
  INHERITED_PARENT* = 0x10000000
  INHERITED_GRANDPARENT* = 0x20000000

type
  INHERIT_FLAGS* = ULONG
  ACCESS_RIGHTS* = ULONG
  PINHERIT_FLAGS* = ptr ULONG
  PACCESS_RIGHTS* = ptr ULONG
  ACCESS_MODE* = int32
  SE_OBJECT_TYPE* = int32
  TRUSTEE_TYPE* = int32
  TRUSTEE_FORM* = int32
  MULTIPLE_TRUSTEE_OPERATION* = int32
  TRUSTEE_A* {.final, pure.} = object
    pMultipleTrustee*: ptr TRUSTEE_A
    MultipleTrusteeOperation*: MULTIPLE_TRUSTEE_OPERATION
    TrusteeForm*: TRUSTEE_FORM
    TrusteeType*: TRUSTEE_TYPE
    ptstrName*: LPSTR
  PTRUSTEE_A* = ptr TRUSTEE_A
  TRUSTEE_W* {.final, pure.} = object
    pMultipleTrustee*: ptr TRUSTEE_W
    MultipleTrusteeOperation*: MULTIPLE_TRUSTEE_OPERATION
    TrusteeForm*: TRUSTEE_FORM
    TrusteeType*: TRUSTEE_TYPE
    ptstrName*: LPWSTR
  PTRUSTEE_W* = ptr TRUSTEEW
  ACTRL_ACCESS_ENTRYA* {.final, pure.} = object
    Trustee*: TRUSTEE_A
    fAccessFlags*: ULONG
    Access*: ACCESS_RIGHTS
    ProvSpecificAccess*: ACCESS_RIGHTS
    Inheritance*: INHERIT_FLAGS
    lpInheritProperty*: LPCSTR
  PACTRL_ACCESS_ENTRYA* = ptr ACTRL_ACCESS_ENTRYA
  ACTRL_ACCESS_ENTRYW* {.final, pure.} = object
    Trustee*: TRUSTEE_W
    fAccessFlags*: ULONG
    Access*: ACCESS_RIGHTS
    ProvSpecificAccess*: ACCESS_RIGHTS
    Inheritance*: INHERIT_FLAGS
    lpInheritProperty*: LPCWSTR
  PACTRL_ACCESS_ENTRYW* = ptr ACTRL_ACCESS_ENTRYW
  ACTRL_ACCESS_ENTRY_LISTA* {.final, pure.} = object
    cEntries*: ULONG
    pAccessList*: ptr ACTRL_ACCESS_ENTRYA
  PACTRL_ACCESS_ENTRY_LISTA* = ptr ACTRL_ACCESS_ENTRY_LISTA
  ACTRL_ACCESS_ENTRY_LISTW* {.final, pure.} = object
    cEntries*: ULONG
    pAccessList*: ptr ACTRL_ACCESS_ENTRYW
  PACTRL_ACCESS_ENTRY_LISTW* = ptr ACTRL_ACCESS_ENTRY_LISTW
  ACTRL_PROPERTY_ENTRYA* {.final, pure.} = object
    lpProperty*: LPCSTR
    pAccessEntryList*: PACTRL_ACCESS_ENTRY_LISTA
    fListFlags*: ULONG
  PACTRL_PROPERTY_ENTRYA* = ptr ACTRL_PROPERTY_ENTRYA
  ACTRL_PROPERTY_ENTRYW* {.final, pure.} = object
    lpProperty*: LPCWSTR
    pAccessEntryList*: PACTRL_ACCESS_ENTRY_LISTW
    fListFlags*: ULONG
  PACTRL_PROPERTY_ENTRYW* = ptr ACTRL_PROPERTY_ENTRYW
  ACTRL_ACCESSA* {.final, pure.} = object
    cEntries*: ULONG
    pPropertyAccessList*: PACTRL_PROPERTY_ENTRYA
  ACTRL_AUDITA* = ACTRL_ACCESSA
  PACTRL_ACCESSA* = ptr ACTRL_ACCESSA
  PACTRL_AUDITA* = ptr ACTRL_ACCESSA
  ACTRL_ACCESSW* {.final, pure.} = object
    cEntries*: ULONG
    pPropertyAccessList*: PACTRL_PROPERTY_ENTRYW
  ACTRL_AUDITW* = ACTRL_ACCESSW
  PACTRL_ACCESSW* = ptr ACTRL_ACCESSW
  PACTRL_AUDITW* = ptr ACTRL_ACCESSW
  TRUSTEE_ACCESSA* {.final, pure.} = object
    lpProperty*: LPSTR
    Access*: ACCESS_RIGHTS
    fAccessFlags*: ULONG
    fReturnedAccess*: ULONG
  PTRUSTEE_ACCESSA* = ptr TRUSTEE_ACCESSA
  TRUSTEE_ACCESSW* {.final, pure.} = object
    lpProperty*: LPWSTR
    Access*: ACCESS_RIGHTS
    fAccessFlags*: ULONG
    fReturnedAccess*: ULONG
  PTRUSTEE_ACCESSW* = ptr TRUSTEE_ACCESSW
  ACTRL_OVERLAPPED_UNION1* {.final, union, pure.} = object
    Provider*: PVOID
    Reserved1*: ULONG
  ACTRL_OVERLAPPED* {.final, pure.} = object
    u1*: ACTRL_OVERLAPPED_UNION1
    Reserved2*: ULONG
    hEvent*: HANDLE
  PACTRL_OVERLAPPED* = ptr ACTRL_OVERLAPPED
  ACTRL_ACCESS_INFOA* {.final, pure.} = object
    fAccessPermission*: ULONG
    lpAccessPermissionName*: LPSTR
  PACTRL_ACCESS_INFOA* = ptr ACTRL_ACCESS_INFOA
  ACTRL_ACCESS_INFOW* {.final, pure.} = object
    fAccessPermission*: ULONG
    lpAccessPermissionName*: LPWSTR
  PACTRL_ACCESS_INFOW* = ptr ACTRL_ACCESS_INFOW
  ACTRL_CONTROL_INFOA* {.final, pure.} = object
    lpControlId*: LPSTR
    lpControlName*: LPSTR
  PACTRL_CONTROL_INFOA* = ptr ACTRL_CONTROL_INFOA
  ACTRL_CONTROL_INFOW* {.final, pure.} = object
    lpControlId*: LPWSTR
    lpControlName*: LPWSTR
  PACTRL_CONTROL_INFOW* = ptr ACTRL_CONTROL_INFOW
  EXPLICIT_ACCESS_A* {.final, pure.} = object
    grfAccessPermissions*: DWORD
    grfAccessMode*: ACCESS_MODE
    grfInheritance*: DWORD
    Trustee*: TRUSTEE_A
  PEXPLICIT_ACCESS_A* = ptr EXPLICIT_ACCESS_A
  EXPLICIT_ACCESS_W* {.final, pure.} = object
    grfAccessPermissions*: DWORD
    grfAccessMode*: ACCESS_MODE
    grfInheritance*: DWORD
    Trustee*: TRUSTEE_W
  PEXPLICIT_ACCESS_W* = ptr EXPLICIT_ACCESS_W
  OBJECTS_AND_SID* {.final, pure.} = object
    ObjectsPresent*: DWORD
    ObjectTypeGuid*: GUID
    InheritedObjectTypeGuid*: GUID
    pSid*: ptr SID
  POBJECTS_AND_SID* = ptr OBJECTS_AND_SID
  OBJECTS_AND_NAME_A* {.final, pure.} = object
    ObjectsPresent*: DWORD
    ObjectType*: SE_OBJECT_TYPE
    ObjectTypeName*: LPSTR
    InheritedObjectTypeName*: LPSTR
    ptstrName*: LPSTR
  POBJECTS_AND_NAME_A* = ptr OBJECTS_AND_NAME_A
  OBJECTS_AND_NAME_W* {.final, pure.} = object
    ObjectsPresent*: DWORD
    ObjectType*: SE_OBJECT_TYPE
    ObjectTypeName*: LPWSTR
    InheritedObjectTypeName*: LPWSTR
    ptstrName*: LPWSTR
  POBJECTS_AND_NAME_W* = ptr OBJECTS_AND_NAME_W
  INHERITED_FROMA* {.final, pure.} = object
    GenerationGap*: LONG
    AncestorName*: LPSTR
  PINHERITED_FROMA* = ptr INHERITED_FROMA
  INHERITED_FROMW* {.final, pure.} = object
    GenerationGap*: LONG
    AncestorName*: LPWSTR
  PINHERITED_FROMW* = ptr INHERITED_FROMW

when not defined(winansi):
  type
    TRUSTEE* = TRUSTEEW
    ACTRL_ACCESS* = ACTRL_ACCESSW
    ACTRL_ACCESS_ENTRY_LIST* = ACTRL_ACCESS_ENTRY_LISTW
    ACTRL_ACCESS_INFO* = ACTRL_ACCESS_INFOW
    ACTRL_ACCESS_ENTRY* = ACTRL_ACCESS_ENTRYW
    ACTRL_AUDIT* = ACTRL_AUDITW
    ACTRL_CONTROL_INFO* = ACTRL_CONTROL_INFOW
    EXPLICIT_ACCESS* = EXPLICIT_ACCESSW
    TRUSTEE_ACCESS* = TRUSTEE_ACCESSW
    OBJECTS_AND_NAME* = OBJECTS_AND_NAME_W
    INHERITED_FROM* = INHERITED_FROMW

else:
  type
    TRUSTEE* = TRUSTEEA
    ACTRL_ACCESS* = ACTRL_ACCESSA
    ACTRL_ACCESS_ENTRY_LIST* = ACTRL_ACCESS_ENTRY_LISTA
    ACTRL_ACCESS_INFO* = ACTRL_ACCESS_INFOA
    ACTRL_ACCESS_ENTRY* = ACTRL_ACCESS_ENTRYA
    ACTRL_AUDIT* = ACTRL_AUDITA
    ACTRL_CONTROL_INFO* = ACTRL_CONTROL_INFOA
    EXPLICIT_ACCESS* = EXPLICIT_ACCESSA
    TRUSTEE_ACCESS* = TRUSTEE_ACCESSA
    OBJECTS_AND_NAME* = OBJECTS_AND_NAME_A
    INHERITED_FROM* = INHERITED_FROMA

type
  PTRUSTEE* = ptr TRUSTEE
  PACTRL_ACCESS* = ptr ACTRL_ACCESS
  PACTRL_ACCESS_ENTRY_LIST* = ptr ACTRL_ACCESS_ENTRY_LIST
  PACTRL_ACCESS_INFO* = ptr ACTRL_ACCESS_INFO
  PACTRL_ACCESS_ENTRY* = ptr ACTRL_ACCESS_ENTRY
  PACTRL_AUDIT* = ptr ACTRL_AUDIT
  PACTRL_CONTROL_INFO* = ptr ACTRL_CONTROL_INFO
  PEXPLICIT_ACCESS* = ptr EXPLICIT_ACCESS
  PTRUSTEE_ACCESS* = ptr TRUSTEE_ACCESS
  PINHERITED_FROM* = ptr INHERITED_FROM

proc `Provider=`*(self: var ACTRL_OVERLAPPED, x: PVOID) = self.u1.Provider = x
proc Provider*(self: ACTRL_OVERLAPPED): PVOID = self.u1.Provider
proc `Reserved1=`*(self: var ACTRL_OVERLAPPED, x: ULONG) = self.u1.Reserved1 = x
proc Reserved1*(self: ACTRL_OVERLAPPED): ULONG = self.u1.Reserved1

# misc/aclapi.nim

proc BuildExplicitAccessWithNameA*(P1: PEXPLICIT_ACCESS_A, P2: LPSTR, P3: DWORD, P4: ACCESS_MODE, P5: DWORD): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildExplicitAccessWithNameW*(P1: PEXPLICIT_ACCESS_W, P2: LPWSTR, P3: DWORD, P4: ACCESS_MODE, P5: DWORD): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildSecurityDescriptorA*(P1: PTRUSTEE_A, P2: PTRUSTEE_A, P3: ULONG, P4: PEXPLICIT_ACCESS_A, P5: ULONG, P6: PEXPLICIT_ACCESS_A, P7: PSECURITY_DESCRIPTOR, P8: PULONG, P9: ptr PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc.}
proc BuildSecurityDescriptorW*(P1: PTRUSTEE_W, P2: PTRUSTEE_W, P3: ULONG, P4: PEXPLICIT_ACCESS_W, P5: ULONG, P6: PEXPLICIT_ACCESS_W, P7: PSECURITY_DESCRIPTOR, P8: PULONG, P9: ptr PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc.}
proc BuildTrusteeWithNameA*(P1: PTRUSTEE_A, P2: LPSTR): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildTrusteeWithNameW*(P1: PTRUSTEE_W, P2: LPWSTR): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildTrusteeWithObjectsAndNameA*(P1: PTRUSTEE_A, P2: POBJECTS_AND_NAME_A, P3: SE_OBJECT_TYPE, P4: LPSTR, P5: LPSTR, P6: LPSTR): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildTrusteeWithObjectsAndNameW*(P1: PTRUSTEE_W, P2: POBJECTS_AND_NAME_W, P3: SE_OBJECT_TYPE, P4: LPWSTR, P5: LPWSTR, P6: LPWSTR): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildTrusteeWithObjectsAndSidA*(P1: PTRUSTEE_A, P2: POBJECTS_AND_SID, P3: ptr GUID, P4: ptr GUID, P5: PSID): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildTrusteeWithObjectsAndSidW*(P1: PTRUSTEE_W, P2: POBJECTS_AND_SID, P3: ptr GUID, P4: ptr GUID, P5: PSID): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildTrusteeWithSidA*(P1: PTRUSTEE_A, P2: PSID): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildTrusteeWithSidW*(P1: PTRUSTEE_W, P2: PSID): VOID {.winapi, dynlib: "advapi32", importc.}
proc GetAuditedPermissionsFromAclA*(P1: PACL, P2: PTRUSTEE_A, P3: PACCESS_MASK, P4: PACCESS_MASK): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetAuditedPermissionsFromAclW*(P1: PACL, P2: PTRUSTEE_W, P3: PACCESS_MASK, P4: PACCESS_MASK): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetEffectiveRightsFromAclA*(P1: PACL, P2: PTRUSTEE_A, P3: PACCESS_MASK): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetEffectiveRightsFromAclW*(P1: PACL, P2: PTRUSTEE_W, P3: PACCESS_MASK): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetExplicitEntriesFromAclA*(P1: PACL, P2: PULONG, P3: ptr PEXPLICIT_ACCESS_A): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetExplicitEntriesFromAclW*(P1: PACL, P2: PULONG, P3: ptr PEXPLICIT_ACCESS_W): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetInheritanceSourceA*(P1: LPSTR, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: BOOL, P5: ptr ptr GUID, P6: DWORD, P7: PACL, P8: pointer, P9: PGENERIC_MAPPING, P10: PINHERITED_FROMA): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetInheritanceSourceW*(P1: LPWSTR, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: BOOL, P5: ptr ptr GUID, P6: DWORD, P7: PACL, P8: pointer, P9: PGENERIC_MAPPING, P10: PINHERITED_FROMW): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetNamedSecurityInfoA*(P1: LPSTR, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: ptr PSID, P5: ptr PSID, P6: ptr PACL, P7: ptr PACL, P8: ptr PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetNamedSecurityInfoW*(P1: LPWSTR, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: ptr PSID, P5: ptr PSID, P6: ptr PACL, P7: ptr PACL, P8: ptr PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetSecurityInfo*(P1: HANDLE, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: ptr PSID, P5: ptr PSID, P6: ptr PACL, P7: ptr PACL, P8: ptr PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc.}
proc GetTrusteeFormA*(P1: PTRUSTEE_A): TRUSTEE_FORM {.winapi, dynlib: "advapi32", importc.}
proc GetTrusteeFormW*(P1: PTRUSTEE_W): TRUSTEE_FORM {.winapi, dynlib: "advapi32", importc.}
proc GetTrusteeNameA*(P1: PTRUSTEE_A): LPSTR {.winapi, dynlib: "advapi32", importc.}
proc GetTrusteeNameW*(P1: PTRUSTEE_W): LPWSTR {.winapi, dynlib: "advapi32", importc.}
proc GetTrusteeTypeA*(P1: PTRUSTEE_A): TRUSTEE_TYPE {.winapi, dynlib: "advapi32", importc.}
proc GetTrusteeTypeW*(P1: PTRUSTEE_W): TRUSTEE_TYPE {.winapi, dynlib: "advapi32", importc.}
proc LookupSecurityDescriptorPartsA*(P1: ptr PTRUSTEE_A, P2: ptr PTRUSTEE_A, P3: PULONG, P4: ptr PEXPLICIT_ACCESS_A, P5: PULONG, P6: ptr PEXPLICIT_ACCESS_A, P7: PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc.}
proc LookupSecurityDescriptorPartsW*(P1: ptr PTRUSTEE_W, P2: ptr PTRUSTEE_W, P3: PULONG, P4: ptr PEXPLICIT_ACCESS_W, P5: PULONG, P6: ptr PEXPLICIT_ACCESS_W, P7: PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc.}
proc SetEntriesInAclA*(P1: ULONG, P2: PEXPLICIT_ACCESS_A, P3: PACL, P4: ptr PACL): DWORD {.winapi, dynlib: "advapi32", importc.}
proc SetEntriesInAclW*(P1: ULONG, P2: PEXPLICIT_ACCESS_W, P3: PACL, P4: ptr PACL): DWORD {.winapi, dynlib: "advapi32", importc.}
proc SetNamedSecurityInfoA*(P1: LPSTR, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: PSID, P5: PSID, P6: PACL, P7: PACL): DWORD {.winapi, dynlib: "advapi32", importc.}
proc SetNamedSecurityInfoW*(P1: LPWSTR, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: PSID, P5: PSID, P6: PACL, P7: PACL): DWORD {.winapi, dynlib: "advapi32", importc.}
proc SetSecurityInfo*(P1: HANDLE, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: PSID, P5: PSID, P6: PACL, P7: PACL): DWORD {.winapi, dynlib: "advapi32", importc.}
proc BuildImpersonateExplicitAccessWithNameA*(P1: PEXPLICIT_ACCESS_A, P2: LPSTR, P3: PTRUSTEE_A, P4: DWORD, P5: ACCESS_MODE, P6: DWORD): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildImpersonateExplicitAccessWithNameW*(P1: PEXPLICIT_ACCESS_W, P2: LPWSTR, P3: PTRUSTEE_W, P4: DWORD, P5: ACCESS_MODE, P6: DWORD): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildImpersonateTrusteeA*(P1: PTRUSTEE_A, P2: PTRUSTEE_A): VOID {.winapi, dynlib: "advapi32", importc.}
proc BuildImpersonateTrusteeW*(P1: PTRUSTEE_W, P2: PTRUSTEE_W): VOID {.winapi, dynlib: "advapi32", importc.}
proc GetMultipleTrusteeA*(P1: PTRUSTEE_A): PTRUSTEE_A {.winapi, dynlib: "advapi32", importc.}
proc GetMultipleTrusteeW*(P1: PTRUSTEE_W): PTRUSTEE_W {.winapi, dynlib: "advapi32", importc.}
proc GetMultipleTrusteeOperationA*(P1: PTRUSTEE_A): MULTIPLE_TRUSTEE_OPERATION {.winapi, dynlib: "advapi32", importc.}
proc GetMultipleTrusteeOperationW*(P1: PTRUSTEE_W): MULTIPLE_TRUSTEE_OPERATION {.winapi, dynlib: "advapi32", importc.}

when not defined(winansi):
  proc BuildExplicitAccessWithName*(P1: PEXPLICIT_ACCESS_W, P2: LPWSTR, P3: DWORD, P4: ACCESS_MODE, P5: DWORD): VOID {.winapi, dynlib: "advapi32", importc: "BuildExplicitAccessWithNameW".}
  proc BuildSecurityDescriptor*(P1: PTRUSTEE_W, P2: PTRUSTEE_W, P3: ULONG, P4: PEXPLICIT_ACCESS_W, P5: ULONG, P6: PEXPLICIT_ACCESS_W, P7: PSECURITY_DESCRIPTOR, P8: PULONG, P9: ptr PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc: "BuildSecurityDescriptorW".}
  proc BuildTrusteeWithName*(P1: PTRUSTEE_W, P2: LPWSTR): VOID {.winapi, dynlib: "advapi32", importc: "BuildTrusteeWithNameW".}
  proc BuildTrusteeWithObjectsAndName*(P1: PTRUSTEE_W, P2: POBJECTS_AND_NAME_W, P3: SE_OBJECT_TYPE, P4: LPWSTR, P5: LPWSTR, P6: LPWSTR): VOID {.winapi, dynlib: "advapi32", importc: "BuildTrusteeWithObjectsAndNameW".}
  proc BuildTrusteeWithObjectsAndSid*(P1: PTRUSTEE_W, P2: POBJECTS_AND_SID, P3: ptr GUID, P4: ptr GUID, P5: PSID): VOID {.winapi, dynlib: "advapi32", importc: "BuildTrusteeWithObjectsAndSidW".}
  proc BuildTrusteeWithSid*(P1: PTRUSTEE_W, P2: PSID): VOID {.winapi, dynlib: "advapi32", importc: "BuildTrusteeWithSidW".}
  proc GetAuditedPermissionsFromAcl*(P1: PACL, P2: PTRUSTEE_W, P3: PACCESS_MASK, P4: PACCESS_MASK): DWORD {.winapi, dynlib: "advapi32", importc: "GetAuditedPermissionsFromAclW".}
  proc GetEffectiveRightsFromAcl*(P1: PACL, P2: PTRUSTEE_W, P3: PACCESS_MASK): DWORD {.winapi, dynlib: "advapi32", importc: "GetEffectiveRightsFromAclW".}
  proc GetExplicitEntriesFromAcl*(P1: PACL, P2: PULONG, P3: ptr PEXPLICIT_ACCESS_W): DWORD {.winapi, dynlib: "advapi32", importc: "GetExplicitEntriesFromAclW".}
  proc GetNamedSecurityInfo*(P1: LPWSTR, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: ptr PSID, P5: ptr PSID, P6: ptr PACL, P7: ptr PACL, P8: ptr PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc: "GetNamedSecurityInfoW".}
  proc GetTrusteeForm*(P1: PTRUSTEE_W): TRUSTEE_FORM {.winapi, dynlib: "advapi32", importc: "GetTrusteeFormW".}
  proc GetTrusteeName*(P1: PTRUSTEE_W): LPWSTR {.winapi, dynlib: "advapi32", importc: "GetTrusteeNameW".}
  proc GetTrusteeType*(P1: PTRUSTEE_W): TRUSTEE_TYPE {.winapi, dynlib: "advapi32", importc: "GetTrusteeTypeW".}
  proc LookupSecurityDescriptorParts*(P1: ptr PTRUSTEE_W, P2: ptr PTRUSTEE_W, P3: PULONG, P4: ptr PEXPLICIT_ACCESS_W, P5: PULONG, P6: ptr PEXPLICIT_ACCESS_W, P7: PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc: "LookupSecurityDescriptorPartsW".}
  proc SetEntriesInAcl*(P1: ULONG, P2: PEXPLICIT_ACCESS_W, P3: PACL, P4: ptr PACL): DWORD {.winapi, dynlib: "advapi32", importc: "SetEntriesInAclW".}
  proc SetNamedSecurityInfo*(P1: LPWSTR, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: PSID, P5: PSID, P6: PACL, P7: PACL): DWORD {.winapi, dynlib: "advapi32", importc: "SetNamedSecurityInfoW".}
  proc BuildImpersonateExplicitAccessWithName*(P1: PEXPLICIT_ACCESS_W, P2: LPWSTR, P3: PTRUSTEE_W, P4: DWORD, P5: ACCESS_MODE, P6: DWORD): VOID {.winapi, dynlib: "advapi32", importc: "BuildImpersonateExplicitAccessWithNameW".}
  proc BuildImpersonateTrustee*(P1: PTRUSTEE_W, P2: PTRUSTEE_W): VOID {.winapi, dynlib: "advapi32", importc: "BuildImpersonateTrusteeW".}
  proc GetMultipleTrustee*(P1: PTRUSTEE_W): PTRUSTEE_W {.winapi, dynlib: "advapi32", importc: "GetMultipleTrusteeW".}
  proc GetMultipleTrusteeOperation*(P1: PTRUSTEE_W): MULTIPLE_TRUSTEE_OPERATION {.winapi, dynlib: "advapi32", importc: "GetMultipleTrusteeOperationW".}

else:
  proc BuildExplicitAccessWithName*(P1: PEXPLICIT_ACCESS_A, P2: LPSTR, P3: DWORD, P4: ACCESS_MODE, P5: DWORD): VOID {.winapi, dynlib: "advapi32", importc: "BuildExplicitAccessWithNameA".}
  proc BuildSecurityDescriptor*(P1: PTRUSTEE_A, P2: PTRUSTEE_A, P3: ULONG, P4: PEXPLICIT_ACCESS_A, P5: ULONG, P6: PEXPLICIT_ACCESS_A, P7: PSECURITY_DESCRIPTOR, P8: PULONG, P9: ptr PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc: "BuildSecurityDescriptorA".}
  proc BuildTrusteeWithName*(P1: PTRUSTEE_A, P2: LPSTR): VOID {.winapi, dynlib: "advapi32", importc: "BuildTrusteeWithNameA".}
  proc BuildTrusteeWithObjectsAndName*(P1: PTRUSTEE_A, P2: POBJECTS_AND_NAME_A, P3: SE_OBJECT_TYPE, P4: LPSTR, P5: LPSTR, P6: LPSTR): VOID {.winapi, dynlib: "advapi32", importc: "BuildTrusteeWithObjectsAndNameA".}
  proc BuildTrusteeWithObjectsAndSid*(P1: PTRUSTEE_A, P2: POBJECTS_AND_SID, P3: ptr GUID, P4: ptr GUID, P5: PSID): VOID {.winapi, dynlib: "advapi32", importc: "BuildTrusteeWithObjectsAndSidA".}
  proc BuildTrusteeWithSid*(P1: PTRUSTEE_A, P2: PSID): VOID {.winapi, dynlib: "advapi32", importc: "BuildTrusteeWithSidA".}
  proc GetAuditedPermissionsFromAcl*(P1: PACL, P2: PTRUSTEE_A, P3: PACCESS_MASK, P4: PACCESS_MASK): DWORD {.winapi, dynlib: "advapi32", importc: "GetAuditedPermissionsFromAclA".}
  proc GetEffectiveRightsFromAcl*(P1: PACL, P2: PTRUSTEE_A, P3: PACCESS_MASK): DWORD {.winapi, dynlib: "advapi32", importc: "GetEffectiveRightsFromAclA".}
  proc GetExplicitEntriesFromAcl*(P1: PACL, P2: PULONG, P3: ptr PEXPLICIT_ACCESS_A): DWORD {.winapi, dynlib: "advapi32", importc: "GetExplicitEntriesFromAclA".}
  proc GetNamedSecurityInfo*(P1: LPSTR, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: ptr PSID, P5: ptr PSID, P6: ptr PACL, P7: ptr PACL, P8: ptr PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc: "GetNamedSecurityInfoA".}
  proc GetTrusteeForm*(P1: PTRUSTEE_A): TRUSTEE_FORM {.winapi, dynlib: "advapi32", importc: "GetTrusteeFormA".}
  proc GetTrusteeName*(P1: PTRUSTEE_A): LPSTR {.winapi, dynlib: "advapi32", importc: "GetTrusteeNameA".}
  proc GetTrusteeType*(P1: PTRUSTEE_A): TRUSTEE_TYPE {.winapi, dynlib: "advapi32", importc: "GetTrusteeTypeA".}
  proc LookupSecurityDescriptorParts*(P1: ptr PTRUSTEE_A, P2: ptr PTRUSTEE_A, P3: PULONG, P4: ptr PEXPLICIT_ACCESS_A, P5: PULONG, P6: ptr PEXPLICIT_ACCESS_A, P7: PSECURITY_DESCRIPTOR): DWORD {.winapi, dynlib: "advapi32", importc: "LookupSecurityDescriptorPartsA".}
  proc SetEntriesInAcl*(P1: ULONG, P2: PEXPLICIT_ACCESS_A, P3: PACL, P4: ptr PACL): DWORD {.winapi, dynlib: "advapi32", importc: "SetEntriesInAclA".}
  proc SetNamedSecurityInfo*(P1: LPSTR, P2: SE_OBJECT_TYPE, P3: SECURITY_INFORMATION, P4: PSID, P5: PSID, P6: PACL, P7: PACL): DWORD {.winapi, dynlib: "advapi32", importc: "SetNamedSecurityInfoA".}
  proc BuildImpersonateExplicitAccessWithName*(P1: PEXPLICIT_ACCESS_A, P2: LPSTR, P3: PTRUSTEE_A, P4: DWORD, P5: ACCESS_MODE, P6: DWORD): VOID {.winapi, dynlib: "advapi32", importc: "BuildImpersonateExplicitAccessWithNameA".}
  proc BuildImpersonateTrustee*(P1: PTRUSTEE_A, P2: PTRUSTEE_A): VOID {.winapi, dynlib: "advapi32", importc: "BuildImpersonateTrusteeA".}
  proc GetMultipleTrustee*(P1: PTRUSTEE_A): PTRUSTEE_A {.winapi, dynlib: "advapi32", importc: "GetMultipleTrusteeA".}
  proc GetMultipleTrusteeOperation*(P1: PTRUSTEE_A): MULTIPLE_TRUSTEE_OPERATION {.winapi, dynlib: "advapi32", importc: "GetMultipleTrusteeOperationA".}

# misc/aclui.nim
const
  # SI_PAGE_TYPE* = enum
  SI_PAGE_PERM* = 0
  SI_PAGE_ADVPERM* = 1
  SI_PAGE_AUDIT* = 2
  SI_PAGE_OWNER* = 3

type
  SI_OBJECT_INFO* {.final, pure.} = object
    dwFlags*: DWORD
    hInstance*: HINSTANCE
    pszServerName*: LPWSTR
    pszObjectName*: LPWSTR
    pszPageTitle*: LPWSTR
    guidObjectType*: GUID
  PSI_OBJECT_INFO* = ptr SI_OBJECT_INFO

const
  SI_EDIT_PERMS* = 0x00000000
  SI_EDIT_OWNER* = 0x00000001
  SI_EDIT_AUDITS* = 0x00000002
  SI_CONTAINER* = 0x00000004
  SI_READONLY* = 0x00000008
  SI_ADVANCED* = 0x00000010
  SI_RESET* = 0x00000020
  SI_OWNER_READONLY* = 0x00000040
  SI_EDIT_PROPERTIES* = 0x00000080
  SI_OWNER_RECURSE* = 0x00000100
  SI_NO_ACL_PROTECT* = 0x00000200
  SI_NO_TREE_APPLY* = 0x00000400
  SI_PAGE_TITLE* = 0x00000800
  SI_SERVER_IS_DC* = 0x00001000
  SI_RESET_DACL_TREE* = 0x00004000
  SI_RESET_SACL_TREE* = 0x00008000
  SI_OBJECT_GUID* = 0x00010000
  SI_EDIT_EFFECTIVE* = 0x00020000
  SI_RESET_DACL* = 0x00040000
  SI_RESET_SACL* = 0x00080000
  SI_RESET_OWNER* = 0x00100000
  SI_NO_ADDITIONAL_PERMISSION* = 0x00200000
  SI_MAY_WRITE* = 0x10000000
  SI_EDIT_ALL* = (SI_EDIT_PERMS or SI_EDIT_OWNER or SI_EDIT_AUDITS).DWORD

type
  SI_ACCESS* {.final, pure.} = object
    pguid*: ptr GUID
    mask*: ACCESS_MASK
    pszName*: LPCWSTR
    dwFlags*: DWORD
  PSI_ACCESS* = ptr SI_ACCESS

const
  SI_ACCESS_SPECIFIC* = 0x00010000
  SI_ACCESS_GENERAL* = 0x00020000
  SI_ACCESS_CONTAINER* = 0x00040000
  SI_ACCESS_PROPERTY* = 0x00080000

type
  SI_INHERIT_TYPE* {.final, pure.} = object
    pguid*: ptr GUID
    dwFlags*: ULONG
    pszName*: LPCWSTR
  PSI_INHERIT_TYPE* = ptr SI_INHERIT_TYPE
  SI_PAGE_TYPE* = int32

const
  PSPCB_SI_INITDIALOG* = (WM_USER + 1)

type
  ISecurityInformation* {.pure.} = object
    lpVtbl*: ptr ISecurityInformationVtbl
  ISecurityInformationVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    GetObjectInformation*: proc(self: ptr ISecurityInformation, P1: PSI_OBJECT_INFO): HRESULT {.stdcall.}
    GetSecurity*: proc(self: ptr ISecurityInformation, P1: SECURITY_INFORMATION, P2: ptr PSECURITY_DESCRIPTOR, P3: BOOL): HRESULT {.stdcall.}
    SetSecurity*: proc(self: ptr ISecurityInformation, P1: SECURITY_INFORMATION, P2: PSECURITY_DESCRIPTOR): HRESULT {.stdcall.}
    GetAccessRights*: proc(self: ptr ISecurityInformation, P1: ptr GUID, P2: DWORD, P3: ptr PSI_ACCESS, P4: ptr ULONG, P5: ptr ULONG): HRESULT {.stdcall.}
    MapGeneric*: proc(self: ptr ISecurityInformation, P1: ptr GUID, P2: ptr UCHAR, P3: ptr ACCESS_MASK): HRESULT {.stdcall.}
    GetInheritTypes*: proc(self: ptr ISecurityInformation, P1: ptr PSI_INHERIT_TYPE, P2: ptr ULONG): HRESULT {.stdcall.}
    PropertySheetPageCallback*: proc(self: ptr ISecurityInformation, P1: HWND, P2: UINT, P3: SI_PAGE_TYPE): HRESULT {.stdcall.}
  LPSECURITYINFO* = ptr ISecurityInformation

proc CreateSecurityPage*(psi: LPSECURITYINFO): HPROPSHEETPAGE {.winapi, dynlib: "aclui", importc.}
proc EditSecurity*(hwndOwner: HWND, psi: LPSECURITYINFO): BOOL {.winapi, dynlib: "aclui", importc.}

converter winim_converter_ISecurityInformation*(x: ptr ISecurityInformation): ptr IUnknown = cast[ptr IUnknown](x)
proc GetObjectInformation*(self: ptr ISecurityInformation, P1: PSI_OBJECT_INFO): HRESULT {.inline, discardable.} = self.lpVtbl.GetObjectInformation(self, P1)
proc GetSecurity*(self: ptr ISecurityInformation, P1: SECURITY_INFORMATION, P2: ptr PSECURITY_DESCRIPTOR, P3: BOOL): HRESULT {.inline, discardable.} = self.lpVtbl.GetSecurity(self, P1, P2, P3)
proc SetSecurity*(self: ptr ISecurityInformation, P1: SECURITY_INFORMATION, P2: PSECURITY_DESCRIPTOR): HRESULT {.inline, discardable.} = self.lpVtbl.SetSecurity(self, P1, P2)
proc GetAccessRights*(self: ptr ISecurityInformation, P1: ptr GUID, P2: DWORD, P3: ptr PSI_ACCESS, P4: ptr ULONG, P5: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetAccessRights(self, P1, P2, P3, P4, P5)
proc MapGeneric*(self: ptr ISecurityInformation, P1: ptr GUID, P2: ptr UCHAR, P3: ptr ACCESS_MASK): HRESULT {.inline, discardable.} = self.lpVtbl.MapGeneric(self, P1, P2, P3)
proc GetInheritTypes*(self: ptr ISecurityInformation, P1: ptr PSI_INHERIT_TYPE, P2: ptr ULONG): HRESULT {.inline, discardable.} = self.lpVtbl.GetInheritTypes(self, P1, P2)
proc PropertySheetPageCallback*(self: ptr ISecurityInformation, P1: HWND, P2: UINT, P3: SI_PAGE_TYPE): HRESULT {.inline, discardable.} = self.lpVtbl.PropertySheetPageCallback(self, P1, P2, P3)

# misc/cderr.nim

const
  CDERR_DIALOGFAILURE* = 0xFFFF
  CDERR_GENERALCODES* = 0x0000
  CDERR_STRUCTSIZE* = 0x1
  CDERR_INITIALIZATION* = 0x2
  CDERR_NOTEMPLATE* = 0x3
  CDERR_NOHINSTANCE* = 0x4
  CDERR_LOADSTRFAILURE* = 0x5
  CDERR_FINDRESFAILURE* = 0x6
  CDERR_LOADRESFAILURE* = 0x7
  CDERR_LOCKRESFAILURE* = 0x8
  CDERR_MEMALLOCFAILURE* = 0x9
  CDERR_MEMLOCKFAILURE* = 0xA
  CDERR_NOHOOK* = 0xB
  CDERR_REGISTERMSGFAIL* = 0xC
  PDERR_PRINTERCODES* = 0x1000
  PDERR_SETUPFAILURE* = 0x1001
  PDERR_PARSEFAILURE* = 0x1002
  PDERR_RETDEFFAILURE* = 0x1003
  PDERR_LOADDRVFAILURE* = 0x1004
  PDERR_GETDEVMODEFAIL* = 0x1005
  PDERR_INITFAILURE* = 0x1006
  PDERR_NODEVICES* = 0x1007
  PDERR_NODEFAULTPRN* = 0x1008
  PDERR_DNDMMISMATCH* = 0x1009
  PDERR_CREATEICFAILURE* = 0x100A
  PDERR_PRINTERNOTFOUND* = 0x100B
  PDERR_DEFAULTDIFFERENT* = 0x100C
  CFERR_CHOOSEFONTCODES* = 0x2000
  CFERR_NOFONTS* = 0x2001
  CFERR_MAXLESSTHANMIN* = 0x2002
  FNERR_FILENAMECODES* = 0x3000
  FNERR_SUBCLASSFAILURE* = 0x3001
  FNERR_INVALIDFILENAME* = 0x3002
  FNERR_BUFFERTOOSMALL* = 0x3003
  FRERR_FINDREPLACECODES* = 0x4000
  FRERR_BUFFERLENGTHZERO* = 0x4001
  CCERR_CHOOSECOLORCODES* = 0x5000

# misc/cpl.nim

const
  WM_CPL_LAUNCH* = (WM_USER + 1000)
  WM_CPL_LAUNCHED* = ((WM_USER + 1000) + 1)
  CPL_DYNAMIC_RES* = 0
  CPL_INIT* = 1
  CPL_GETCOUNT* = 2
  CPL_INQUIRE* = 3
  CPL_SELECT* = 4
  CPL_DBLCLK* = 5
  CPL_STOP* = 6
  CPL_EXIT* = 7
  CPL_NEWINQUIRE* = 8
  CPL_STARTWPARMSA* = 9
  CPL_STARTWPARMSW* = 10
  CPL_SETUP* = 200

type
  APPLET_PROC* = proc (P1: HWND, P2: UINT, P3: LONG, P4: LONG): LONG {.stdcall.}
  CPLINFO* {.final, pure.} = object
    idIcon*: int32
    idName*: int32
    idInfo*: int32
    lData*: LONG
  LPCPLINFO* = ptr CPLINFO
  NEWCPLINFOA* {.final, pure.} = object
    dwSize*: DWORD
    dwFlags*: DWORD
    dwHelpContext*: DWORD
    lData*: LONG
    hIcon*: HICON
    szName*: array[32, CHAR]
    szInfo*: array[64, CHAR]
    szHelpFile*: array[128, CHAR]
  LPNEWCPLINFOA* = ptr NEWCPLINFOA
  NEWCPLINFOW* {.final, pure.} = object
    dwSize*: DWORD
    dwFlags*: DWORD
    dwHelpContext*: DWORD
    lData*: LONG
    hIcon*: HICON
    szName*: array[32, WCHAR]
    szInfo*: array[64, WCHAR]
    szHelpFile*: array[128, WCHAR]
  LPNEWCPLINFOW* = ptr NEWCPLINFOW

when not defined(winansi):
  const
    CPL_STARTWPARMS* = CPL_STARTWPARMSW

  type
    NEWCPLINFO* = NEWCPLINFOW

else:
  const
    CPL_STARTWPARMS* = CPL_STARTWPARMSA

  type
    NEWCPLINFO* = NEWCPLINFOA

type
  LPNEWCPLINFO* = ptr NEWCPLINFO

# misc/cplext.nim

const
  CPLPAGE_MOUSE_BUTTONS* = 1
  CPLPAGE_MOUSE_PTRMOTION* = 2
  CPLPAGE_MOUSE_WHEEL* = 3
  CPLPAGE_KEYBOARD_SPEED* = 1
  CPLPAGE_DISPLAY_BACKGROUND* = 1

# misc/custcntl.nim

const
  CCF_NOTEXT* = 1
  CCHCCCLASS* = 32
  CCHCCDESC* = 32
  CCHCCTEXT* = 256

type
  CCSTYLEA* {.final, pure.} = object
    flStyle*: DWORD
    flExtStyle*: DWORD
    szText*: array[CCHCCTEXT, CHAR]
    lgid*: LANGID
    wReserved1*: WORD
  LPCCSTYLEA* = ptr CCSTYLEA
  CCSTYLEW* {.final, pure.} = object
    flStyle*: DWORD
    flExtStyle*: DWORD
    szText*: array[CCHCCTEXT, WCHAR]
    lgid*: LANGID
    wReserved1*: WORD
  LPCCSTYLEW* = ptr CCSTYLEW
  CCSTYLEFLAGA* {.final, pure.} = object
    flStyle*: DWORD
    flStyleMask*: DWORD
    pszStyle*: LPSTR
  LPCCSTYLEFLAGA* = ptr CCSTYLEFLAGA
  CCSTYLEFLAGW* {.final, pure.} = object
    flStyle*: DWORD
    flStyleMask*: DWORD
    pszStyle*: LPWSTR
  LPCCSTYLEFLAGW* = ptr CCSTYLEFLAGW
  CCINFOA* {.final, pure.} = object
    szClass*: array[CCHCCCLASS, CHAR]
    flOptions*: DWORD
    szDesc*: array[CCHCCDESC, CHAR]
    cxDefault*: UINT
    cyDefault*: UINT
    flStyleDefault*: DWORD
    flExtStyleDefault*: DWORD
    flCtrlTypeMask*: DWORD
    szTextDefault*: array[CCHCCTEXT, CHAR]
    cStyleFlags*: INT
    aStyleFlags*: LPCCSTYLEFLAGA
    lpfnStyle*: LPFNCCSTYLEA
    lpfnSizeToText*: LPFNCCSIZETOTEXTA
    dwReserved1*: DWORD
    dwReserved2*: DWORD
  LPCCINFOA* = ptr CCINFOA
  CCINFOW* {.final, pure.} = object
    szClass*: array[CCHCCCLASS, WCHAR]
    flOptions*: DWORD
    szDesc*: array[CCHCCDESC, WCHAR]
    cxDefault*: UINT
    cyDefault*: UINT
    flStyleDefault*: DWORD
    flExtStyleDefault*: DWORD
    flCtrlTypeMask*: DWORD
    szTextDefault*: array[CCHCCTEXT, WCHAR]
    cStyleFlags*: INT
    aStyleFlags*: LPCCSTYLEFLAGW
    lpfnStyle*: LPFNCCSTYLEW
    lpfnSizeToText*: LPFNCCSIZETOTEXTW
    dwReserved1*: DWORD
    dwReserved2*: DWORD
  LPCCINFOW* = ptr CCINFOW
  LPFNCCSTYLEA* = proc (P1: HWND, P2: LPCCSTYLEA): BOOL {.stdcall.}
  LPFNCCSTYLEW* = proc (P1: HWND, P2: LPCCSTYLEW): BOOL {.stdcall.}
  LPFNCCSIZETOTEXTA* = proc (P1: DWORD, P2: DWORD, P3: HFONT, P4: LPSTR): INT {.stdcall.}
  LPFNCCSIZETOTEXTW* = proc (P1: DWORD, P2: DWORD, P3: HFONT, P4: LPWSTR): INT {.stdcall.}
  LPFNCCINFOA* = proc (P1: LPCCINFOA): UINT {.stdcall.}
  LPFNCCINFOW* = proc (P1: LPCCINFOW): UINT {.stdcall.}

proc CustomControlInfoA*(acci: LPCCINFOA): UINT {.winapi, dynlib: "clb", importc.}
proc CustomControlInfoW*(acci: LPCCINFOW): UINT {.winapi, dynlib: "clb", importc.}

when not defined(winansi):
  type
    CCSTYLE* = CCSTYLEW
    CCSTYLEFLAG* = CCSTYLEFLAGW
    CCINFO* = CCINFOW
    LPFNCCSTYLE* = LPFNCCSTYLEW
    LPFNCCSIZETOTEXT* = LPFNCCSIZETOTEXTW
    LPFNCCINFO* = LPFNCCINFOW

else:
  type
    CCSTYLE* = CCSTYLEA
    CCSTYLEFLAG* = CCSTYLEFLAGA
    CCINFO* = CCINFOA
    LPFNCCSTYLE* = LPFNCCSTYLEA
    LPFNCCSIZETOTEXT* = LPFNCCSIZETOTEXTA
    LPFNCCINFO* = LPFNCCINFOA

type
  LPCCSTYLE* = ptr CCSTYLE
  LPCCSTYLEFLAG* = ptr CCSTYLEFLAG
  LPCCINFO* = ptr CCINFO

# misc/dbt.nim

const
  DBT_NO_DISK_SPACE* = 0x47
  DBT_CONFIGMGPRIVATE* = 0x7FFF
  DBT_DEVICEARRIVAL* = 0x8000
  DBT_DEVICEQUERYREMOVE* = 0x8001
  DBT_DEVICEQUERYREMOVEFAILED* = 0x8002
  DBT_DEVICEREMOVEPENDING* = 0x8003
  DBT_DEVICEREMOVECOMPLETE* = 0x8004
  DBT_DEVICETYPESPECIFIC* = 0x8005
  DBT_DEVTYP_OEM* = 0
  DBT_DEVTYP_DEVNODE* = 1
  DBT_DEVTYP_VOLUME* = 2
  DBT_DEVTYP_PORT* = 3
  DBT_DEVTYP_NET* = 4
  DBT_DEVTYP_DEVICEINTERFACE* = 5
  DBT_DEVTYP_HANDLE* = 6
  DBT_APPYBEGIN* = 0
  DBT_APPYEND* = 1
  DBT_DEVNODES_CHANGED* = 7
  DBT_QUERYCHANGECONFIG* = 0x17
  DBT_CONFIGCHANGED* = 0x18
  DBT_CONFIGCHANGECANCELED* = 0x19
  DBT_MONITORCHANGE* = 0x1B
  DBT_SHELLLOGGEDON* = 32
  DBT_CONFIGMGAPI32* = 34
  DBT_VXDINITCOMPLETE* = 35
  DBT_VOLLOCKQUERYLOCK* = 0x8041
  DBT_VOLLOCKLOCKTAKEN* = 0x8042
  DBT_VOLLOCKLOCKFAILED* = 0x8043
  DBT_VOLLOCKQUERYUNLOCK* = 0x8044
  DBT_VOLLOCKLOCKRELEASED* = 0x8045
  DBT_VOLLOCKUNLOCKFAILED* = 0x8046
  DBT_USERDEFINED* = 0xFFFF
  DBTF_MEDIA* = 1
  DBTF_NET* = 2
  # BSM_ALLCOMPONENTS* = 0.DWORD
  # BSM_APPLICATIONS* = 8.DWORD
  # BSM_ALLDESKTOPS* = 16.DWORD
  # BSM_INSTALLABLEDRIVERS* = 4.DWORD
  # BSM_NETDRIVER* = 2.DWORD
  # BSM_VXDS* = 1.DWORD
  # BSF_FLUSHDISK* = 0x00000004.DWORD
  # BSF_FORCEIFHUNG* = 0x00000020.DWORD
  # BSF_IGNORECURRENTTASK* = 0x00000002.DWORD
  # BSF_NOHANG* = 0x00000008.DWORD
  # BSF_NOTIMEOUTIFNOTHUNG* = 0x00000040.DWORD
  # BSF_POSTMESSAGE* = 0x00000010.DWORD
  # BSF_QUERY* = 0x00000001.DWORD
  BSF_MSGSRV32ISOK_BIT* = 31
  BSF_MSGSRV32ISOK* = 0x80000000'u32
  # BSF_ALLOWSFW* = 0x00000080.DWORD
  # BSF_SENDNOTIFYMESSAGE* = 0x00000100.DWORD
  # BSF_LUID* = 0x00000400.DWORD
  # BSF_RETURNHDESK* = 0x00000200.DWORD

type
  DEV_BROADCAST_HDR* {.final, pure.} = object
    dbch_size*: DWORD
    dbch_devicetype*: DWORD
    dbch_reserved*: DWORD
  PDEV_BROADCAST_HDR* = ptr DEV_BROADCAST_HDR
  DEV_BROADCAST_OEM* {.final, pure.} = object
    dbco_size*: DWORD
    dbco_devicetype*: DWORD
    dbco_reserved*: DWORD
    dbco_identifier*: DWORD
    dbco_suppfunc*: DWORD
  PDEV_BROADCAST_OEM* = ptr DEV_BROADCAST_OEM
  DEV_BROADCAST_PORT_A* {.final, pure.} = object
    dbcp_size*: DWORD
    dbcp_devicetype*: DWORD
    dbcp_reserved*: DWORD
    dbcp_name*: array[1, char]
  PDEV_BROADCAST_PORT_A* = ptr DEV_BROADCAST_PORT_A
  DEV_BROADCAST_PORT_W* {.final, pure.} = object
    dbcp_size*: DWORD
    dbcp_devicetype*: DWORD
    dbcp_reserved*: DWORD
    dbcp_name*: array[1, WCHAR]
  PDEV_BROADCAST_PORT_W* = ptr DEV_BROADCAST_PORT_W
  DEV_BROADCAST_USERDEFINED* {.final, pure.} = object
    dbud_dbh*: DEV_BROADCAST_HDR
    dbud_szName*: array[1, char]
  DEV_BROADCAST_VOLUME* {.final, pure.} = object
    dbcv_size*: DWORD
    dbcv_devicetype*: DWORD
    dbcv_reserved*: DWORD
    dbcv_unitmask*: DWORD
    dbcv_flags*: WORD
  PDEV_BROADCAST_VOLUME* = ptr DEV_BROADCAST_VOLUME

when not defined(winansi):
  type
    DEV_BROADCAST_PORT* = DEV_BROADCAST_PORT_W

else:
  type
    DEV_BROADCAST_PORT* = DEV_BROADCAST_PORT_A

type
  PDEV_BROADCAST_PORT* = ptr DEV_BROADCAST_PORT
  DEV_BROADCAST_DEVICEINTERFACE_A* {.final, pure.} = object
    dbcc_size*: DWORD
    dbcc_devicetype*: DWORD
    dbcc_reserved*: DWORD
    dbcc_classguid*: GUID
    dbcc_name*: array[1, char]
  PDEV_BROADCAST_DEVICEINTERFACE_A* = ptr DEV_BROADCAST_DEVICEINTERFACE_A
  DEV_BROADCAST_DEVICEINTERFACE_W* {.final, pure.} = object
    dbcc_size*: DWORD
    dbcc_devicetype*: DWORD
    dbcc_reserved*: DWORD
    dbcc_classguid*: GUID
    dbcc_name*: array[1, WCHAR]
  PDEV_BROADCAST_DEVICEINTERFACE_W* = ptr DEV_BROADCAST_DEVICEINTERFACE_W

when not defined(winansi):
  type
    DEV_BROADCAST_DEVICEINTERFACE* = DEV_BROADCAST_DEVICEINTERFACE_W

else:
  type
    DEV_BROADCAST_DEVICEINTERFACE* = DEV_BROADCAST_DEVICEINTERFACE_A

type
  PDEV_BROADCAST_DEVICEINTERFACE* = ptr DEV_BROADCAST_DEVICEINTERFACE
  DEV_BROADCAST_HANDLE* {.final, pure.} = object
    dbch_size*: DWORD
    dbch_devicetype*: DWORD
    dbch_reserved*: DWORD
    dbch_handle*: HANDLE
    dbch_hdevnotify*: DWORD
    dbch_eventguid*: GUID
    dbch_nameoffset*: LONG
    dbch_data*: array[1, BYTE]
  PDEV_BROADCAST_HANDLE* = ptr DEV_BROADCAST_HANDLE

# misc/dde.nim

const
  WM_DDE_FIRST* = 0x03E0
  WM_DDE_INITIATE* = WM_DDE_FIRST
  WM_DDE_TERMINATE* = (WM_DDE_FIRST + 1)
  WM_DDE_ADVISE* = (WM_DDE_FIRST + 2)
  WM_DDE_UNADVISE* = (WM_DDE_FIRST + 3)
  WM_DDE_ACK* = (WM_DDE_FIRST + 4)
  WM_DDE_DATA* = (WM_DDE_FIRST + 5)
  WM_DDE_REQUEST* = (WM_DDE_FIRST + 6)
  WM_DDE_POKE* = (WM_DDE_FIRST + 7)
  WM_DDE_EXECUTE* = (WM_DDE_FIRST + 8)
  WM_DDE_LAST* = WM_DDE_EXECUTE

type
  DDEACK* {.final, pure.} = object
    bAppReturnCode*: uint8
    reserved* {.bitsize: 6.}: uint8
    fBusy* {.bitsize: 1.}: uint8
    fAck* {.bitsize: 1.}: uint8
  DDEADVISE* {.final, pure.} = object
    reserved* {.bitsize: 14.}: uint16
    fDeferUpd* {.bitsize: 1.}: uint16
    fAckReq* {.bitsize: 1.}: uint16
    cfFormat*: int16
  DDEDATA* {.final, pure.} = object
    unused* {.bitsize: 12.}: uint16
    fResponse* {.bitsize: 1.}: uint16
    fRelease* {.bitsize: 1.}: uint16
    reserved* {.bitsize: 1.}: uint16
    fAckReq* {.bitsize: 1.}: uint16
    cfFormat*: int16
    Value*: array[1, BYTE]
  DDEPOKE* {.final, pure.} = object
    unused* {.bitsize: 13.}: uint16
    fRelease* {.bitsize: 1.}: uint16
    fReserved* {.bitsize: 2.}: uint16
    cfFormat*: int16
    Value*: array[1, BYTE]
  DDELN* {.final, pure.} = object
    unused* {.bitsize: 13.}: uint16
    fRelease* {.bitsize: 1.}: uint16
    fDeferUpd* {.bitsize: 1.}: uint16
    fAckReq* {.bitsize: 1.}: uint16
    cfFormat*: int16
  DDEUP* {.final, pure.} = object
    unused* {.bitsize: 12.}: uint16
    fAck* {.bitsize: 1.}: uint16
    fRelease* {.bitsize: 1.}: uint16
    fReserved* {.bitsize: 1.}: uint16
    fAckReq* {.bitsize: 1.}: uint16
    cfFormat*: int16
    rgb*: array[1, BYTE]

proc DdeSetQualityOfService*(P1: HWND, P2: ptr SECURITY_QUALITY_OF_SERVICE, P3: PSECURITY_QUALITY_OF_SERVICE): BOOL {.winapi, dynlib: "user32", importc.}
proc ImpersonateDdeClientWindow*(P1: HWND, P2: HWND): BOOL {.winapi, dynlib: "user32", importc.}
proc PackDDElParam*(P1: UINT, P2: UINT_PTR, P3: UINT_PTR): LPARAM {.winapi, dynlib: "user32", importc.}
proc UnpackDDElParam*(P1: UINT, P2: LPARAM, P3: PUINT_PTR, P4: PUINT_PTR): BOOL {.winapi, dynlib: "user32", importc.}
proc FreeDDElParam*(P1: UINT, P2: LPARAM): BOOL {.winapi, dynlib: "user32", importc.}
proc ReuseDDElParam*(P1: LPARAM, P2: UINT, P3: UINT, P4: UINT_PTR, P5: UINT_PTR): LPARAM {.winapi, dynlib: "user32", importc.}

# misc/ddeml.nim

const
  CP_WINANSI* = 1004
  CP_WINUNICODE* = 1200
  XTYPF_NOBLOCK* = 2
  XTYPF_NODATA* = 4
  XTYPF_ACKREQ* = 8
  XCLASS_MASK* = 0xFC00
  XCLASS_BOOL* = 0x1000
  XCLASS_DATA* = 0x2000
  XCLASS_FLAGS* = 0x4000
  XCLASS_NOTIFICATION* = 0x8000
  XST_NULL* = 0
  XST_INCOMPLETE* = 1
  XST_CONNECTED* = 2
  XST_INIT1* = 3
  XST_INIT2* = 4
  XST_REQSENT* = 5
  XST_DATARCVD* = 6
  XST_POKESENT* = 7
  XST_POKEACKRCVD* = 8
  XST_EXECSENT* = 9
  XST_EXECACKRCVD* = 10
  XST_ADVSENT* = 11
  XST_UNADVSENT* = 12
  XST_ADVACKRCVD* = 13
  XST_UNADVACKRCVD* = 14
  XST_ADVDATASENT* = 15
  XST_ADVDATAACKRCVD* = 16
  XTYP_ERROR* = (XCLASS_NOTIFICATION or XTYPF_NOBLOCK)
  XTYP_ADVDATA* = (0x0010 or XCLASS_FLAGS)
  XTYP_ADVREQ* = (0x0020 or XCLASS_DATA or XTYPF_NOBLOCK)
  XTYP_ADVSTART* = (0x0030 or XCLASS_BOOL)
  XTYP_ADVSTOP* = (0x0040 or XCLASS_NOTIFICATION)
  XTYP_EXECUTE* = (0x0050 or XCLASS_FLAGS)
  XTYP_CONNECT* = (0x0060 or XCLASS_BOOL or XTYPF_NOBLOCK)
  XTYP_CONNECT_CONFIRM* = (0x0070 or XCLASS_NOTIFICATION or XTYPF_NOBLOCK)
  XTYP_XACT_COMPLETE* = (0x0080 or XCLASS_NOTIFICATION)
  XTYP_POKE* = (0x0090 or XCLASS_FLAGS)
  XTYP_REGISTER* = (0x00A0 or XCLASS_NOTIFICATION or XTYPF_NOBLOCK)
  XTYP_REQUEST* = (0x00B0 or XCLASS_DATA)
  XTYP_DISCONNECT* = (0x00C0 or XCLASS_NOTIFICATION or XTYPF_NOBLOCK)
  XTYP_UNREGISTER* = (0x00D0 or XCLASS_NOTIFICATION or XTYPF_NOBLOCK)
  XTYP_WILDCONNECT* = (0x00E0 or XCLASS_DATA or XTYPF_NOBLOCK)
  XTYP_MONITOR* = (0x00F0 or XCLASS_NOTIFICATION or XTYPF_NOBLOCK)
  XTYP_MASK* = 0x00F0
  XTYP_SHIFT* = 4
  ST_CONNECTED* = 1
  ST_ADVISE* = 2
  ST_ISLOCAL* = 4
  ST_BLOCKED* = 8
  ST_CLIENT* = 16
  ST_TERMINATED* = 32
  ST_INLIST* = 64
  ST_BLOCKNEXT* = 128
  ST_ISSELF* = 256
  DMLERR_NO_ERROR* = 0
  DMLERR_FIRST* = 0x4000
  DMLERR_ADVACKTIMEOUT* = DMLERR_FIRST
  DMLERR_BUSY* = (DMLERR_FIRST + 1)
  DMLERR_DATAACKTIMEOUT* = (DMLERR_FIRST + 2)
  DMLERR_DLL_NOT_INITIALIZED* = (DMLERR_FIRST + 3)
  DMLERR_DLL_USAGE* = (DMLERR_FIRST + 4)
  DMLERR_EXECACKTIMEOUT* = (DMLERR_FIRST + 5)
  DMLERR_INVALIDPARAMETER* = (DMLERR_FIRST + 6)
  DMLERR_LOW_MEMORY* = (DMLERR_FIRST + 7)
  DMLERR_MEMORY_ERROR* = (DMLERR_FIRST + 8)
  DMLERR_NOTPROCESSED* = (DMLERR_FIRST + 9)
  DMLERR_NO_CONV_ESTABLISHED* = (DMLERR_FIRST + 10)
  DMLERR_POKEACKTIMEOUT* = (DMLERR_FIRST + 11)
  DMLERR_POSTMSG_FAILED* = (DMLERR_FIRST + 12)
  DMLERR_REENTRANCY* = (DMLERR_FIRST + 13)
  DMLERR_SERVER_DIED* = (DMLERR_FIRST + 14)
  DMLERR_SYS_ERROR* = (DMLERR_FIRST + 15)
  DMLERR_UNADVACKTIMEOUT* = (DMLERR_FIRST + 16)
  DMLERR_UNFOUND_QUEUE_ID* = (DMLERR_FIRST + 17)
  DMLERR_LAST* = DMLERR_UNFOUND_QUEUE_ID
  APPCLASS_STANDARD* = 0
  APPCLASS_MONITOR* = 0x00000001
  APPCLASS_MASK* = 0x0000000F
  APPCMD_CLIENTONLY* = 0x00000010
  APPCMD_FILTERINITS* = 0x00000020
  APPCMD_MASK* = 0x00000FF0
  CBF_FAIL_SELFCONNECTIONS* = 0x00001000
  CBF_FAIL_CONNECTIONS* = 0x00002000
  CBF_FAIL_ADVISES* = 0x00004000
  CBF_FAIL_EXECUTES* = 0x00008000
  CBF_FAIL_POKES* = 0x00010000
  CBF_FAIL_REQUESTS* = 0x00020000
  CBF_FAIL_ALLSVRXACTIONS* = 0x0003f000
  CBF_SKIP_CONNECT_CONFIRMS* = 0x00040000
  CBF_SKIP_REGISTRATIONS* = 0x00080000
  CBF_SKIP_UNREGISTRATIONS* = 0x00100000
  CBF_SKIP_DISCONNECTS* = 0x00200000
  CBF_SKIP_ALLNOTIFICATIONS* = 0x003c0000
  MF_HSZ_INFO* = 0x01000000
  MF_SENDMSGS* = 0x02000000
  MF_POSTMSGS* = 0x04000000
  MF_CALLBACKS* = 0x08000000
  MF_ERRORS* = 0x10000000
  MF_LINKS* = 0x20000000
  MF_CONV* = 0x40000000
  MF_MASK* = 0xFF000000'u32
  EC_ENABLEALL* = 0
  EC_ENABLEONE* = ST_BLOCKNEXT
  EC_DISABLE* = ST_BLOCKED
  EC_QUERYWAITING* = 2
  DNS_REGISTER* = 1
  DNS_UNREGISTER* = 2
  DNS_FILTERON* = 4
  DNS_FILTEROFF* = 8
  MH_CREATE* = 1
  MH_KEEP* = 2
  MH_DELETE* = 3
  MH_CLEANUP* = 4

type
  HCONVLIST* = HANDLE
  HCONV* = HANDLE
  HSZ* = HANDLE
  HDDEDATA* = HANDLE
  PFNCALLBACK* = proc (P1: UINT, P2: UINT, P3: HCONV, P4: HSZ, P5: HSZ, P6: HDDEDATA, P7: DWORD, P8: DWORD): HDDEDATA {.stdcall.}
  HSZPAIR* {.final, pure.} = object
    hszSvc*: HSZ
    hszTopic*: HSZ
  PHSZPAIR* = ptr HSZPAIR
  CONVCONTEXT* {.final, pure.} = object
    cb*: UINT
    wFlags*: UINT
    wCountryID*: UINT
    iCodePage*: int32
    dwLangID*: DWORD
    dwSecurity*: DWORD
    qos*: SECURITY_QUALITY_OF_SERVICE
  PCONVCONTEXT* = ptr CONVCONTEXT
  CONVINFO* {.final, pure.} = object
    cb*: DWORD
    hUser*: DWORD
    hConvPartner*: HCONV
    hszSvcPartner*: HSZ
    hszServiceReq*: HSZ
    hszTopic*: HSZ
    hszItem*: HSZ
    wFmt*: UINT
    wType*: UINT
    wStatus*: UINT
    wConvst*: UINT
    wLastError*: UINT
    hConvList*: HCONVLIST
    ConvCtxt*: CONVCONTEXT
    hwnd*: HWND
    hwndPartner*: HWND
  PCONVINFO* = ptr CONVINFO
  DDEML_MSG_HOOK_DATA* {.final, pure.} = object
    uiLo*: UINT
    uiHi*: UINT
    cbData*: DWORD
    Data*: array[8, DWORD]
  MONHSZSTRUCT* {.final, pure.} = object
    cb*: UINT
    fsAction*: int32
    dwTime*: DWORD
    hsz*: HSZ
    hTask*: HANDLE
    str*: array[1, TCHAR]
  PMONHSZSTRUCT* = ptr MONHSZSTRUCT
  MONLINKSTRUCT* {.final, pure.} = object
    cb*: UINT
    dwTime*: DWORD
    hTask*: HANDLE
    fEstablished*: BOOL
    fNoData*: BOOL
    hszSvc*: HSZ
    hszTopic*: HSZ
    hszItem*: HSZ
    wFmt*: UINT
    fServer*: BOOL
    hConvServer*: HCONV
    hConvClient*: HCONV
  PMONLINKSTRUCT* = ptr MONLINKSTRUCT
  MONCONVSTRUCT* {.final, pure.} = object
    cb*: UINT
    fConnect*: BOOL
    dwTime*: DWORD
    hTask*: HANDLE
    hszSvc*: HSZ
    hszTopic*: HSZ
    hConvClient*: HCONV
    hConvServer*: HCONV
  PMONCONVSTRUCT* = ptr MONCONVSTRUCT
  MONCBSTRUCT* {.final, pure.} = object
    cb*: UINT
    dwTime*: DWORD
    hTask*: HANDLE
    dwRet*: DWORD
    wType*: UINT
    wFmt*: UINT
    hConv*: HCONV
    hsz1*: HSZ
    hsz2*: HSZ
    hData*: HDDEDATA
    dwData1*: ULONG_PTR
    dwData2*: ULONG_PTR
    cc*: CONVCONTEXT
    cbData*: DWORD
    Data*: array[8, DWORD]
  PMONCBSTRUCT* = ptr MONCBSTRUCT
  MONERRSTRUCT* {.final, pure.} = object
    cb*: UINT
    wLastError*: UINT
    dwTime*: DWORD
    hTask*: HANDLE
  PMONERRSTRUCT* = ptr MONERRSTRUCT
  MONMSGSTRUCT* {.final, pure.} = object
    cb*: UINT
    hwndTo*: HWND
    dwTime*: DWORD
    hTask*: HANDLE
    wMsg*: UINT
    wParam*: WPARAM
    lParam*: LPARAM
    dmhd*: DDEML_MSG_HOOK_DATA
  PMONMSGSTRUCT* = ptr MONMSGSTRUCT

proc DdeAbandonTransaction*(P1: DWORD, P2: HCONV, P3: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc DdeAccessData*(P1: HDDEDATA, P2: PDWORD): PBYTE {.winapi, dynlib: "user32", importc.}
proc DdeAddData*(P1: HDDEDATA, P2: PBYTE, P3: DWORD, P4: DWORD): HDDEDATA {.winapi, dynlib: "user32", importc.}
proc DdeClientTransaction*(P1: PBYTE, P2: DWORD, P3: HCONV, P4: HSZ, P5: UINT, P6: UINT, P7: DWORD, P8: PDWORD): HDDEDATA {.winapi, dynlib: "user32", importc.}
proc DdeCmpStringHandles*(P1: HSZ, P2: HSZ): int32 {.winapi, dynlib: "user32", importc.}
proc DdeConnect*(P1: DWORD, P2: HSZ, P3: HSZ, P4: PCONVCONTEXT): HCONV {.winapi, dynlib: "user32", importc.}
proc DdeConnectList*(P1: DWORD, P2: HSZ, P3: HSZ, P4: HCONVLIST, P5: PCONVCONTEXT): HCONVLIST {.winapi, dynlib: "user32", importc.}
proc DdeCreateDataHandle*(P1: DWORD, P2: PBYTE, P3: DWORD, P4: DWORD, P5: HSZ, P6: UINT, P7: UINT): HDDEDATA {.winapi, dynlib: "user32", importc.}
proc DdeCreateStringHandleA*(P1: DWORD, P2: LPSTR, P3: int32): HSZ {.winapi, dynlib: "user32", importc.}
proc DdeCreateStringHandleW*(P1: DWORD, P2: LPWSTR, P3: int32): HSZ {.winapi, dynlib: "user32", importc.}
proc DdeDisconnect*(P1: HCONV): BOOL {.winapi, dynlib: "user32", importc.}
proc DdeDisconnectList*(P1: HCONVLIST): BOOL {.winapi, dynlib: "user32", importc.}
proc DdeEnableCallback*(P1: DWORD, P2: HCONV, P3: UINT): BOOL {.winapi, dynlib: "user32", importc.}
proc DdeFreeDataHandle*(P1: HDDEDATA): BOOL {.winapi, dynlib: "user32", importc.}
proc DdeFreeStringHandle*(P1: DWORD, P2: HSZ): BOOL {.winapi, dynlib: "user32", importc.}
proc DdeGetData*(P1: HDDEDATA, P2: PBYTE, P3: DWORD, P4: DWORD): DWORD {.winapi, dynlib: "user32", importc.}
proc DdeGetLastError*(P1: DWORD): UINT {.winapi, dynlib: "user32", importc.}
proc DdeImpersonateClient*(P1: HCONV): BOOL {.winapi, dynlib: "user32", importc.}
proc DdeInitializeA*(P1: PDWORD, P2: PFNCALLBACK, P3: DWORD, P4: DWORD): UINT {.winapi, dynlib: "user32", importc.}
proc DdeInitializeW*(P1: PDWORD, P2: PFNCALLBACK, P3: DWORD, P4: DWORD): UINT {.winapi, dynlib: "user32", importc.}
proc DdeKeepStringHandle*(P1: DWORD, P2: HSZ): BOOL {.winapi, dynlib: "user32", importc.}
proc DdeNameService*(P1: DWORD, P2: HSZ, P3: HSZ, P4: UINT): HDDEDATA {.winapi, dynlib: "user32", importc.}
proc DdePostAdvise*(P1: DWORD, P2: HSZ, P3: HSZ): BOOL {.winapi, dynlib: "user32", importc.}
proc DdeQueryConvInfo*(P1: HCONV, P2: DWORD, P3: PCONVINFO): UINT {.winapi, dynlib: "user32", importc.}
proc DdeQueryNextServer*(P1: HCONVLIST, P2: HCONV): HCONV {.winapi, dynlib: "user32", importc.}
proc DdeQueryStringA*(P1: DWORD, P2: HSZ, P3: LPSTR, P4: DWORD, P5: int32): DWORD {.winapi, dynlib: "user32", importc.}
proc DdeQueryStringW*(P1: DWORD, P2: HSZ, P3: LPWSTR, P4: DWORD, P5: int32): DWORD {.winapi, dynlib: "user32", importc.}
proc DdeReconnect*(P1: HCONV): HCONV {.winapi, dynlib: "user32", importc.}
proc DdeSetUserHandle*(P1: HCONV, P2: DWORD, P3: DWORD): BOOL {.winapi, dynlib: "user32", importc.}
proc DdeUnaccessData*(P1: HDDEDATA): BOOL {.winapi, dynlib: "user32", importc.}
proc DdeUninitialize*(P1: DWORD): BOOL {.winapi, dynlib: "user32", importc.}

const
  SZDDESYS_TOPIC* = "System"
  SZDDESYS_ITEM_TOPICS* = "Topics"
  SZDDESYS_ITEM_SYSITEMS* = "SysItems"
  SZDDESYS_ITEM_RTNMSG* = "ReturnMessage"
  SZDDESYS_ITEM_STATUS* = "Status"
  SZDDESYS_ITEM_FORMATS* = "Formats"
  SZDDESYS_ITEM_HELP* = "Help"
  SZDDE_ITEM_ITEMLIST* = "TopicItemList"

when not defined(winansi):
  proc DdeCreateStringHandle*(P1: DWORD, P2: LPWSTR, P3: int32): HSZ {.winapi, dynlib: "user32", importc: "DdeCreateStringHandleW".}
  proc DdeInitialize*(P1: PDWORD, P2: PFNCALLBACK, P3: DWORD, P4: DWORD): UINT {.winapi, dynlib: "user32", importc: "DdeInitializeW".}
  proc DdeQueryString*(P1: DWORD, P2: HSZ, P3: LPWSTR, P4: DWORD, P5: int32): DWORD {.winapi, dynlib: "user32", importc: "DdeQueryStringW".}

else:
  proc DdeCreateStringHandle*(P1: DWORD, P2: LPSTR, P3: int32): HSZ {.winapi, dynlib: "user32", importc: "DdeCreateStringHandleA".}
  proc DdeInitialize*(P1: PDWORD, P2: PFNCALLBACK, P3: DWORD, P4: DWORD): UINT {.winapi, dynlib: "user32", importc: "DdeInitializeA".}
  proc DdeQueryString*(P1: DWORD, P2: HSZ, P3: LPSTR, P4: DWORD, P5: int32): DWORD {.winapi, dynlib: "user32", importc: "DdeQueryStringA".}

# misc/dhcpcsdk.nim

const
  DHCPCAPI_REGISTER_HANDLE_EVENT* = 1
  DHCPCAPI_REQUEST_PERSISTENT* = 1
  DHCPCAPI_REQUEST_SYNCHRONOUS* = 2

type
  DHCPCAPI_CLASSID* {.final, pure.} = object
    Flags*: ULONG
    Data*: LPBYTE
    nBytesData*: ULONG
  PDHCPCAPI_CLASSID* = ptr DHCPCAPI_CLASSID
  LPDHCPCAPI_CLASSID* = ptr DHCPCAPI_CLASSID
  DHCPAPI_PARAMS* {.final, pure.} = object
    Flags*: ULONG
    OptionId*: ULONG
    IsVendor*: BOOL
    Data*: LPBYTE
    nBytesData*: DWORD
  PDHCPAPI_PARAMS* = ptr DHCPAPI_PARAMS
  LPDHCPAPI_PARAMS* = ptr DHCPAPI_PARAMS
  DHCPCAPI_PARAMS_ARRAY* {.final, pure.} = object
    nParams*: ULONG
    Params*: LPDHCPAPI_PARAMS
  PDHCPCAPI_PARAMS_ARRAY* = ptr DHCPCAPI_PARAMS_ARRAY
  LPDHCPCAPI_PARAMS_ARRAY* = ptr DHCPCAPI_PARAMS_ARRAY

proc DhcpCApiCleanup*(): void {.winapi, dynlib: "dhcpcsvc", importc.}
proc DhcpCApiInitialize*(P1: LPDWORD): DWORD {.winapi, dynlib: "dhcpcsvc", importc.}
proc DhcpDeRegisterParamChange*(P1: DWORD, P2: LPVOID, P3: LPVOID): DWORD {.winapi, dynlib: "dhcpcsvc", importc.}
proc DhcpRegisterParamChange*(P1: DWORD, P2: LPVOID, P3: PWSTR, P4: LPDHCPCAPI_CLASSID, P5: DHCPCAPI_PARAMS_ARRAY, P6: LPVOID): DWORD {.winapi, dynlib: "dhcpcsvc", importc.}
proc DhcpRemoveDNSRegistrations*(): DWORD {.winapi, dynlib: "dhcpcsvc", importc.}
proc DhcpUndoRequestParams*(P1: DWORD, P2: LPVOID, P3: LPWSTR, P4: LPWSTR): DWORD {.winapi, dynlib: "dhcpcsvc", importc.}

# misc/dlgs.nim

const
  FILEOPENORD* = 1536
  MULTIFILEOPENORD* = 1537
  PRINTDLGORD* = 1538
  PRNSETUPDLGORD* = 1539
  FINDDLGORD* = 1540
  REPLACEDLGORD* = 1541
  FONTDLGORD* = 1542
  FORMATDLGORD31* = 1543
  FORMATDLGORD30* = 1544
  PAGESETUPDLGORD* = 1546
  ctlFirst* = 0x400
  ctlLast* = 0x4ff
  chx1* = 0x410
  chx2* = 0x411
  chx3* = 0x412
  chx4* = 0x413
  chx5* = 0x414
  chx6* = 0x415
  chx7* = 0x416
  chx8* = 0x417
  chx9* = 0x418
  chx10* = 0x419
  chx11* = 0x41a
  chx12* = 0x41b
  chx13* = 0x41c
  chx14* = 0x41d
  chx15* = 0x41e
  chx16* = 0x41f
  cmb1* = 0x470
  cmb2* = 0x471
  cmb3* = 0x472
  cmb4* = 0x473
  cmb5* = 0x474
  cmb6* = 0x475
  cmb7* = 0x476
  cmb8* = 0x477
  cmb9* = 0x478
  cmb10* = 0x479
  cmb11* = 0x47a
  cmb12* = 0x47b
  cmb13* = 0x47c
  cmb14* = 0x47d
  cmb15* = 0x47e
  cmb16* = 0x47f
  edt1* = 0x480
  edt2* = 0x481
  edt3* = 0x482
  edt4* = 0x483
  edt5* = 0x484
  edt6* = 0x485
  edt7* = 0x486
  edt8* = 0x487
  edt9* = 0x488
  edt10* = 0x489
  edt11* = 0x48a
  edt12* = 0x48b
  edt13* = 0x48c
  edt14* = 0x48d
  edt15* = 0x48e
  edt16* = 0x48f
  frm1* = 0x434
  frm2* = 0x435
  frm3* = 0x436
  frm4* = 0x437
  grp1* = 0x430
  grp2* = 0x431
  grp3* = 0x432
  grp4* = 0x433
  ico1* = 0x43c
  ico2* = 0x43d
  ico3* = 0x43e
  ico4* = 0x43f
  lst1* = 0x460
  lst2* = 0x461
  lst3* = 0x462
  lst4* = 0x463
  lst5* = 0x464
  lst6* = 0x465
  lst7* = 0x466
  lst8* = 0x467
  lst9* = 0x468
  lst10* = 0x469
  lst11* = 0x46a
  lst12* = 0x46b
  lst13* = 0x46c
  lst14* = 0x46d
  lst15* = 0x46e
  lst16* = 0x46f
  psh1* = 0x400
  psh2* = 0x401
  psh3* = 0x402
  psh4* = 0x403
  psh5* = 0x404
  psh6* = 0x405
  psh7* = 0x406
  psh8* = 0x407
  psh9* = 0x408
  psh10* = 0x409
  psh11* = 0x40a
  psh12* = 0x40b
  psh13* = 0x40c
  psh14* = 0x40d
  psh15* = 0x40e
  pshHelp* = 0x40e
  psh16* = 0x40f
  rad1* = 0x420
  rad2* = 0x421
  rad3* = 0x422
  rad4* = 0x423
  rad5* = 0x424
  rad6* = 0x425
  rad7* = 0x426
  rad8* = 0x427
  rad9* = 0x428
  rad10* = 0x429
  rad11* = 0x42a
  rad12* = 0x42b
  rad13* = 0x42c
  rad14* = 0x42d
  rad15* = 0x42e
  rad16* = 0x42f
  rct1* = 0x438
  rct2* = 0x439
  rct3* = 0x43a
  rct4* = 0x43b
  scr1* = 0x490
  scr2* = 0x491
  scr3* = 0x492
  scr4* = 0x493
  scr5* = 0x494
  scr6* = 0x495
  scr7* = 0x496
  scr8* = 0x497
  stc1* = 0x440
  stc2* = 0x441
  stc3* = 0x442
  stc4* = 0x443
  stc5* = 0x444
  stc6* = 0x445
  stc7* = 0x446
  stc8* = 0x447
  stc9* = 0x448
  stc10* = 0x449
  stc11* = 0x44a
  stc12* = 0x44b
  stc13* = 0x44c
  stc14* = 0x44d
  stc15* = 0x44e
  stc16* = 0x44f
  stc17* = 0x450
  stc18* = 0x451
  stc19* = 0x452
  stc20* = 0x453
  stc21* = 0x454
  stc22* = 0x455
  stc23* = 0x456
  stc24* = 0x457
  stc25* = 0x458
  stc26* = 0x459
  stc27* = 0x45a
  stc28* = 0x45b
  stc29* = 0x45c
  stc30* = 0x45d
  stc31* = 0x45e
  stc32* = 0x45f

type
  CRGB* {.final, pure.} = object
    bRed*: uint8
    bGreen*: uint8
    bBlue*: uint8
    bExtra*: uint8

# misc/errorrep.nim

const
  # EFaultRepRetVal* = enum
  frrvOk* = 0
  frrvOkManifest* = 1
  frrvOkQueued* = 2
  frrvErr* = 3
  frrvErrNoDW* = 4
  frrvErrTimeout* = 5
  frrvLaunchDebugger* = 6
  frrvOkHeadless* = 7

type
  EFaultRepRetVal* = int32

proc AddERExcludedApplicationA*(P1: LPCSTR): BOOL {.winapi, dynlib: "faultrep", importc.}
proc AddERExcludedApplicationW*(P1: LPCWSTR): BOOL {.winapi, dynlib: "faultrep", importc.}
proc ReportFault*(P1: LPEXCEPTION_POINTERS, P2: DWORD): EFaultRepRetVal {.winapi, dynlib: "faultrep", importc.}

when not defined(winansi):
  proc AddERExcludedApplication*(P1: LPCWSTR): BOOL {.winapi, dynlib: "faultrep", importc: "AddERExcludedApplicationW".}
else:
  proc AddERExcludedApplication*(P1: LPCSTR): BOOL {.winapi, dynlib: "faultrep", importc: "AddERExcludedApplicationA".}

# misc/exdispid.nim

const
  DISPID_STATUSTEXTCHANGE* = 102
  DISPID_PROGRESSCHANGE* = 108
  DISPID_TITLECHANGE* = 113
  DISPID_BEFORENAVIGATE2* = 250
  DISPID_NEWWINDOW2* = 251
  DISPID_DOCUMENTCOMPLETE* = 259

# misc/httpext.nim

const
  HSE_VERSION_MAJOR* = 2
  HSE_VERSION_MINOR* = 0
  HSE_LOG_BUFFER_LEN* = 80
  HSE_MAX_EXT_DLL_NAME_LEN* = 256
  HSE_STATUS_SUCCESS* = 1
  HSE_STATUS_SUCCESS_AND_KEEP_CONN* = 2
  HSE_STATUS_PENDING* = 3
  HSE_STATUS_ERROR* = 4
  HSE_REQ_BASE* = 0
  HSE_REQ_SEND_URL_REDIRECT_RESP* = 1
  HSE_REQ_SEND_URL* = 2
  HSE_REQ_SEND_RESPONSE_HEADER* = 3
  HSE_REQ_DONE_WITH_SESSION* = 4
  HSE_REQ_SEND_RESPONSE_HEADER_EX* = 1016
  HSE_REQ_END_RESERVED* = 1000
  HSE_TERM_ADVISORY_UNLOAD* = 0x00000001
  HSE_TERM_MUST_UNLOAD* = 0x2
  HSE_IO_SYNC* = 0x00000001
  HSE_IO_ASYNC* = 0x2
  HSE_IO_DISCONNECT_AFTER_SEND* = 0x00000004
  HSE_IO_SEND_HEADERS* = 0x00000008

type
  HCONN* = HANDLE
  HSE_VERSION_INFO* {.final, pure.} = object
    dwExtensionVersion*: DWORD
    lpszExtensionDesc*: array[HSE_MAX_EXT_DLL_NAME_LEN, CHAR]
  LPHSE_VERSION_INFO* = ptr HSE_VERSION_INFO
  EXTENSION_CONTROL_BLOCK* {.final, pure.} = object
    cbSize*: DWORD
    dwVersion*: DWORD
    ConnID*: HCONN
    dwHttpStatusCode*: DWORD
    lpszLogData*: array[HSE_LOG_BUFFER_LEN, CHAR]
    lpszMethod*: LPSTR
    lpszQueryString*: LPSTR
    lpszPathInfo*: LPSTR
    lpszPathTranslated*: LPSTR
    cbTotalBytes*: DWORD
    cbAvailable*: DWORD
    lpbData*: LPBYTE
    lpszContentType*: LPSTR
    GetServerVariable*: proc (P1: HCONN, P2: LPSTR, P3: LPVOID, P4: LPDWORD): BOOL {.stdcall.}
    WriteClient*: proc (P1: HCONN, P2: LPVOID, P3: LPDWORD, P4: DWORD): BOOL {.stdcall.}
    ReadClient*: proc (P1: HCONN, P2: LPVOID, P3: LPDWORD): BOOL {.stdcall.}
    ServerSupportFunction*: proc (P1: HCONN, P2: DWORD, P3: LPVOID, P4: LPDWORD, P5: LPDWORD): BOOL {.stdcall.}
  PFN_GETEXTENSIONVERSION* = proc (P1: ptr HSE_VERSION_INFO): BOOL {.stdcall.}
  PFN_HTTPEXTENSIONPROC* = proc (P1: ptr EXTENSION_CONTROL_BLOCK): DWORD {.stdcall.}
  PFN_TERMINATEEXTENSION* = proc (P1: DWORD): BOOL {.stdcall.}
  PFN_HSE_IO_COMPLETION* = proc (P1: ptr EXTENSION_CONTROL_BLOCK, P2: PVOID, P3: DWORD, P4: DWORD): VOID {.stdcall.}
  LPEXTENSION_CONTROL_BLOCK* = ptr EXTENSION_CONTROL_BLOCK
  HSE_TF_INFO* {.final, pure.} = object
    pfnHseIO*: PFN_HSE_IO_COMPLETION
    pContext*: PVOID
    hFile*: HANDLE
    pszStatusCode*: LPCSTR
    BytesToWrite*: DWORD
    Offset*: DWORD
    pHead*: PVOID
    HeadLength*: DWORD
    pTail*: PVOID
    TailLength*: DWORD
    dwFlags*: DWORD
  LPHSE_TF_INFO* = ptr HSE_TF_INFO
  HSE_SEND_HEADER_EX_INFO* {.final, pure.} = object
    pszStatus*: LPCSTR
    pszHeader*: LPCSTR
    cchStatus*: DWORD
    cchHeader*: DWORD
    fKeepConn*: BOOL
  LPHSE_SEND_HEADER_EX_INF* = ptr HSE_SEND_HEADER_EX_INFO

# misc/idispids.nim

const
  DISPID_AMBIENT_OFFLINEIFNOTCONNECTED* = -5501
  DISPID_AMBIENT_SILENT* = -5502

# misc/intshcut.nim

const
  # IURL_SETURL_FLAGS* = enum
  IURL_SETURL_FL_GUESS_PROTOCOL* = 1
  IURL_SETURL_FL_USE_DEFAULT_PROTOCOL* = 2
  ALL_IURL_SETURL_FLAGS* = 3
  # IURL_INVOKECOMMAND_FLAGS* = enum
  IURL_INVOKECOMMAND_FL_ALLOW_UI* = 1
  IURL_INVOKECOMMAND_FL_USE_DEFAULT_VERB* = 2
  ALL_IURL_INVOKECOMMAND_FLAGS* = 3
  # TRANSLATEURL_IN_FLAGS* = enum
  TRANSLATEURL_FL_GUESS_PROTOCOL* = 1
  TRANSLATEURL_FL_USE_DEFAULT_PROTOCOL* = 2
  ALL_TRANSLATEURL_FLAGS* = 3
  # URLASSOCIATIONDIALOG_IN_FLAGS* = enum
  URLASSOCDLG_FL_USE_DEFAULT_NAME* = 1
  URLASSOCDLG_FL_REGISTER_ASSOC* = 2
  ALL_URLASSOCDLG_FLAGS* = 3
  # MIMEASSOCIATIONDIALOG_IN_FLAGS* = enum
  MIMEASSOCDLG_FL_REGISTER_ASSOC* = 1

const
  E_FLAGS* = -2147217408
  URL_E_INVALID_SYNTAX* = -2147217407
  URL_E_UNREGISTERED_PROTOCOL* = -2147217406
  IS_E_EXEC_FAILED* = -2147213310

type
  IURL_SETURL_FLAGS* = int32
  IURL_INVOKECOMMAND_FLAGS* = int32
  TRANSLATEURL_IN_FLAGS* = int32
  URLASSOCIATIONDIALOG_IN_FLAGS* = int32
  MIMEASSOCIATIONDIALOG_IN_FLAGS* = int32
  URLINVOKECOMMANDINFO* {.final, pure.} = object
    dwcbSize*: DWORD
    dwFlags*: DWORD
    hwndParent*: HWND
    pcszVerb*: PCSTR
  CURLINVOKECOMMANDINFO* = URLINVOKECOMMANDINFO
  PURLINVOKECOMMANDINFO* = ptr URLINVOKECOMMANDINFO
  PCURLINVOKECOMMANDINFO* = ptr URLINVOKECOMMANDINFO
  IUniformResourceLocator* {.pure.} = object
    lpVtbl*: ptr IUniformResourceLocatorVtbl
  IUniformResourceLocatorVtbl* {.pure, inheritable.} = object of IUnknownVtbl
    SetURL*: proc(self: ptr IUniformResourceLocator, P1: PCSTR, P2: DWORD): HRESULT {.stdcall.}
    GetURL*: proc(self: ptr IUniformResourceLocator, P1: ptr PSTR): HRESULT {.stdcall.}
    InvokeCommand*: proc(self: ptr IUniformResourceLocator, P1: PURLINVOKECOMMANDINFO): HRESULT {.stdcall.}
  CIUniformResourceLocator* = ptr IUniformResourceLocator
  PIUniformResourceLocator* = ptr IUniformResourceLocator
  PCIUniformResourceLocator* = ptr IUniformResourceLocator

proc InetIsOffline*(P1: DWORD): BOOL {.winapi, dynlib: "url", importc.}
proc MIMEAssociationDialogA*(P1: HWND, P2: DWORD, P3: PCSTR, P4: PCSTR, P5: PSTR, P6: UINT): HRESULT {.winapi, dynlib: "url", importc.}
proc MIMEAssociationDialogW*(P1: HWND, P2: DWORD, P3: PCWSTR, P4: PCWSTR, P5: PWSTR, P6: UINT): HRESULT {.winapi, dynlib: "url", importc.}
proc TranslateURLA*(P1: PCSTR, P2: DWORD, P3: ptr PSTR): HRESULT {.winapi, dynlib: "url", importc.}
proc TranslateURLW*(P1: PCWSTR, P2: DWORD, P3: ptr PWSTR): HRESULT {.winapi, dynlib: "url", importc.}
proc URLAssociationDialogA*(P1: HWND, P2: DWORD, P3: PCSTR, P4: PCSTR, P5: PSTR, P6: UINT): HRESULT {.winapi, dynlib: "url", importc.}
proc URLAssociationDialogW*(P1: HWND, P2: DWORD, P3: PCWSTR, P4: PCWSTR, P5: PWSTR, P6: UINT): HRESULT {.winapi, dynlib: "url", importc.}

when not defined(winansi):
  proc TranslateURL*(P1: PCWSTR, P2: DWORD, P3: ptr PWSTR): HRESULT {.winapi, dynlib: "url", importc: "TranslateURLW".}
  proc MIMEAssociationDialog*(P1: HWND, P2: DWORD, P3: PCWSTR, P4: PCWSTR, P5: PWSTR, P6: UINT): HRESULT {.winapi, dynlib: "url", importc: "MIMEAssociationDialogW".}
  proc URLAssociationDialog*(P1: HWND, P2: DWORD, P3: PCWSTR, P4: PCWSTR, P5: PWSTR, P6: UINT): HRESULT {.winapi, dynlib: "url", importc: "URLAssociationDialogW".}

else:
  proc TranslateURL*(P1: PCSTR, P2: DWORD, P3: ptr PSTR): HRESULT {.winapi, dynlib: "url", importc: "TranslateURLA".}
  proc MIMEAssociationDialog*(P1: HWND, P2: DWORD, P3: PCSTR, P4: PCSTR, P5: PSTR, P6: UINT): HRESULT {.winapi, dynlib: "url", importc: "MIMEAssociationDialogA".}
  proc URLAssociationDialog*(P1: HWND, P2: DWORD, P3: PCSTR, P4: PCSTR, P5: PSTR, P6: UINT): HRESULT {.winapi, dynlib: "url", importc: "URLAssociationDialogA".}

converter winim_converter_IUniformResourceLocator*(x: ptr IUniformResourceLocator): ptr IUnknown = cast[ptr IUnknown](x)
proc SetURL*(self: ptr IUniformResourceLocator, P1: PCSTR, P2: DWORD): HRESULT {.inline, discardable.} = self.lpVtbl.SetURL(self, P1, P2)
proc GetURL*(self: ptr IUniformResourceLocator, P1: ptr PSTR): HRESULT {.inline, discardable.} = self.lpVtbl.GetURL(self, P1)
proc InvokeCommand*(self: ptr IUniformResourceLocator, P1: PURLINVOKECOMMANDINFO): HRESULT {.inline, discardable.} = self.lpVtbl.InvokeCommand(self, P1)

# misc/ipexport.nim

type
  IP_STATUS* = uint32

const
  MAX_ADAPTER_NAME* = 128
  IP_SUCCESS* = 0
  IP_STATUS_BASE* = 11000
  IP_BUF_TOO_SMALL* = 11001
  IP_DEST_NET_UNREACHABLE* = 11002
  IP_DEST_HOST_UNREACHABLE* = 11003
  IP_DEST_PROT_UNREACHABLE* = 11004
  IP_DEST_PORT_UNREACHABLE* = 11005
  IP_NO_RESOURCES* = 11006
  IP_BAD_OPTION* = 11007
  IP_HW_ERROR* = 11008
  IP_PACKET_TOO_BIG* = 11009
  IP_REQ_TIMED_OUT* = 11010
  IP_BAD_REQ* = 11011
  IP_BAD_ROUTE* = 11012
  IP_TTL_EXPIRED_TRANSIT* = 11013
  IP_TTL_EXPIRED_REASSEM* = 11014
  IP_PARAM_PROBLEM* = 11015
  IP_SOURCE_QUENCH* = 11016
  IP_OPTION_TOO_BIG* = 11017
  IP_BAD_DESTINATION* = 11018
  IP_ADDR_DELETED* = 11019
  IP_SPEC_MTU_CHANGE* = 11020
  IP_MTU_CHANGE* = 11021
  IP_UNLOAD* = 11022
  IP_GENERAL_FAILURE* = (IP_STATUS_BASE + 50).IP_STATUS
  MAX_IP_STATUS* = IP_GENERAL_FAILURE.IP_STATUS
  IP_PENDING* = (IP_STATUS_BASE + 255).IP_STATUS
  IP_FLAG_DF* = 2
  IP_OPT_EOL* = 0
  IP_OPT_NOP* = 0x01
  IP_OPT_RR* = 0x07
  IP_OPT_SECURITY* = 0x82
  IP_OPT_LSRR* = 0x83
  IP_OPT_SSRR* = 0x89
  IP_OPT_TS* = 0x44
  IP_OPT_SID* = 0x88
  IP_OPT_ROUTER_ALERT* = 0x94
  MAX_OPT_SIZE* = 40

type
  # IPAddr* = uint32
  IPMask* = uint32
  IP_OPTION_INFORMATION* {.final, pure.} = object
    Ttl*: uint8
    Tos*: uint8
    Flags*: uint8
    OptionsSize*: uint8
    OptionsData*: ptr uint8
  PIP_OPTION_INFORMATION* = ptr IP_OPTION_INFORMATION
  ICMP_ECHO_REPLY* {.final, pure.} = object
    Address*: IPAddr
    Status*: uint32
    RoundTripTime*: uint32
    DataSize*: uint16
    Reserved*: uint16
    Data*: pointer
    Options*: IP_OPTION_INFORMATION
  PICMP_ECHO_REPLY* = ptr ICMP_ECHO_REPLY
  IP_ADAPTER_INDEX_MAP* {.final, pure.} = object
    Index*: ULONG
    Name*: array[MAX_ADAPTER_NAME, WCHAR]
  PIP_ADAPTER_INDEX_MAP* = ptr IP_ADAPTER_INDEX_MAP
  IP_INTERFACE_INFO* {.final, pure.} = object
    NumAdapters*: LONG
    Adapter*: array[1, IP_ADAPTER_INDEX_MAP]
  PIP_INTERFACE_INFO* = ptr IP_INTERFACE_INFO
  IP_UNIDIRECTIONAL_ADAPTER_ADDRESS* {.final, pure.} = object
    NumAdapters*: ULONG
    Address*: array[1, IPAddr]
  PIP_UNIDIRECTIONAL_ADAPTER_ADDRESS* = ptr IP_UNIDIRECTIONAL_ADAPTER_ADDRESS

# misc/ipifcons.nim

const
  MIB_IF_ADMIN_STATUS_UP* = 1
  MIB_IF_ADMIN_STATUS_DOWN* = 2
  MIB_IF_ADMIN_STATUS_TESTING* = 3
  MIB_IF_OPER_STATUS_NON_OPERATIONAL* = 0
  MIB_IF_OPER_STATUS_UNREACHABLE* = 1
  MIB_IF_OPER_STATUS_DISCONNECTED* = 2
  MIB_IF_OPER_STATUS_CONNECTING* = 3
  MIB_IF_OPER_STATUS_CONNECTED* = 4
  MIB_IF_OPER_STATUS_OPERATIONAL* = 5
  MIB_IF_TYPE_OTHER* = 1
  MIB_IF_TYPE_ETHERNET* = 6
  MIB_IF_TYPE_TOKENRING* = 9
  MIB_IF_TYPE_FDDI* = 15
  MIB_IF_TYPE_PPP* = 23
  MIB_IF_TYPE_LOOPBACK* = 24
  MIB_IF_TYPE_SLIP* = 28

# misc/iprtrmib.nim

const
  MAXLEN_PHYSADDR* = 8
  MAXLEN_IFDESCR* = 256
  MAX_INTERFACE_NAME_LEN* = 256
  MIB_IPNET_TYPE_OTHER* = 1
  MIB_IPNET_TYPE_INVALID* = 2
  MIB_IPNET_TYPE_DYNAMIC* = 3
  MIB_IPNET_TYPE_STATIC* = 4
  MIB_TCP_RTO_OTHER* = 1
  MIB_TCP_RTO_CONSTANT* = 2
  MIB_TCP_RTO_RSRE* = 3
  MIB_TCP_RTO_VANJ* = 4
  MIB_TCP_STATE_CLOSED* = 1
  MIB_TCP_STATE_LISTEN* = 2
  MIB_TCP_STATE_SYN_SENT* = 3
  MIB_TCP_STATE_SYN_RCVD* = 4
  MIB_TCP_STATE_ESTAB* = 5
  MIB_TCP_STATE_FIN_WAIT1* = 6
  MIB_TCP_STATE_FIN_WAIT2* = 7
  MIB_TCP_STATE_CLOSE_WAIT* = 8
  MIB_TCP_STATE_CLOSING* = 9
  MIB_TCP_STATE_LAST_ACK* = 10
  MIB_TCP_STATE_TIME_WAIT* = 11
  MIB_TCP_STATE_DELETE_TCB* = 12
  MIB_USE_CURRENT_TTL* = 0xFFFFFFFF'u32
  MIB_USE_CURRENT_FORWARDING* = 0xFFFFFFFF'u32
  MIB_TCP_MAXCONN_DYNAMIC* = 0xFFFFFFFF'u32

type
  MIB_IPADDRROW* {.final, pure.} = object
    dwAddr*: DWORD
    dwIndex*: DWORD
    dwMask*: DWORD
    dwBCastAddr*: DWORD
    dwReasmSize*: DWORD
    unused1*: uint16
    unused2*: uint16
  PMIB_IPADDRROW* = ptr MIB_IPADDRROW
  MIB_IPADDRTABLE* {.final, pure.} = object
    dwNumEntries*: DWORD
    table*: array[1, MIB_IPADDRROW]
  PMIB_IPADDRTABLE* = ptr MIB_IPADDRTABLE
  MIB_IPFORWARDROW* {.final, pure.} = object
    dwForwardDest*: DWORD
    dwForwardMask*: DWORD
    dwForwardPolicy*: DWORD
    dwForwardNextHop*: DWORD
    dwForwardIfIndex*: DWORD
    dwForwardType*: DWORD
    dwForwardProto*: DWORD
    dwForwardAge*: DWORD
    dwForwardNextHopAS*: DWORD
    dwForwardMetric1*: DWORD
    dwForwardMetric2*: DWORD
    dwForwardMetric3*: DWORD
    dwForwardMetric4*: DWORD
    dwForwardMetric5*: DWORD
  PMIB_IPFORWARDROW* = ptr MIB_IPFORWARDROW
  MIB_IPFORWARDTABLE* {.final, pure.} = object
    dwNumEntries*: DWORD
    table*: array[1, MIB_IPFORWARDROW]
  PMIB_IPFORWARDTABLE* = ptr MIB_IPFORWARDTABLE
  MIB_IPNETROW* {.final, pure.} = object
    dwIndex*: DWORD
    dwPhysAddrLen*: DWORD
    bPhysAddr*: array[MAXLEN_PHYSADDR, BYTE]
    dwAddr*: DWORD
    dwType*: DWORD
  PMIB_IPNETROW* = ptr MIB_IPNETROW
  MIB_IPNETTABLE* {.final, pure.} = object
    dwNumEntries*: DWORD
    table*: array[1, MIB_IPNETROW]
  PMIB_IPNETTABLE* = ptr MIB_IPNETTABLE
  MIBICMPSTATS* {.final, pure.} = object
    dwMsgs*: DWORD
    dwErrors*: DWORD
    dwDestUnreachs*: DWORD
    dwTimeExcds*: DWORD
    dwParmProbs*: DWORD
    dwSrcQuenchs*: DWORD
    dwRedirects*: DWORD
    dwEchos*: DWORD
    dwEchoReps*: DWORD
    dwTimestamps*: DWORD
    dwTimestampReps*: DWORD
    dwAddrMasks*: DWORD
    dwAddrMaskReps*: DWORD
  PMIBICMPSTATS* = ptr MIBICMPSTATS
  MIBICMPINFO* {.final, pure.} = object
    icmpInStats*: MIBICMPSTATS
    icmpOutStats*: MIBICMPSTATS
  PMIBICMPINFO* = ptr MIBICMPINFO
  MIB_ICMP* {.final, pure.} = object
    stats*: MIBICMPINFO
  PMIB_ICMP* = ptr MIB_ICMP
  MIB_IFROW* {.final, pure.} = object
    wszName*: array[MAX_INTERFACE_NAME_LEN, WCHAR]
    dwIndex*: DWORD
    dwType*: DWORD
    dwMtu*: DWORD
    dwSpeed*: DWORD
    dwPhysAddrLen*: DWORD
    bPhysAddr*: array[MAXLEN_PHYSADDR, BYTE]
    dwAdminStatus*: DWORD
    dwOperStatus*: DWORD
    dwLastChange*: DWORD
    dwInOctets*: DWORD
    dwInUcastPkts*: DWORD
    dwInNUcastPkts*: DWORD
    dwInDiscards*: DWORD
    dwInErrors*: DWORD
    dwInUnknownProtos*: DWORD
    dwOutOctets*: DWORD
    dwOutUcastPkts*: DWORD
    dwOutNUcastPkts*: DWORD
    dwOutDiscards*: DWORD
    dwOutErrors*: DWORD
    dwOutQLen*: DWORD
    dwDescrLen*: DWORD
    bDescr*: array[MAXLEN_IFDESCR, BYTE]
  PMIB_IFROW* = ptr MIB_IFROW
  MIB_IFTABLE* {.final, pure.} = object
    dwNumEntries*: DWORD
    table*: array[1, MIB_IFROW]
  PMIB_IFTABLE* = ptr MIB_IFTABLE
  MIB_IPSTATS* {.final, pure.} = object
    dwForwarding*: DWORD
    dwDefaultTTL*: DWORD
    dwInReceives*: DWORD
    dwInHdrErrors*: DWORD
    dwInAddrErrors*: DWORD
    dwForwDatagrams*: DWORD
    dwInUnknownProtos*: DWORD
    dwInDiscards*: DWORD
    dwInDelivers*: DWORD
    dwOutRequests*: DWORD
    dwRoutingDiscards*: DWORD
    dwOutDiscards*: DWORD
    dwOutNoRoutes*: DWORD
    dwReasmTimeout*: DWORD
    dwReasmReqds*: DWORD
    dwReasmOks*: DWORD
    dwReasmFails*: DWORD
    dwFragOks*: DWORD
    dwFragFails*: DWORD
    dwFragCreates*: DWORD
    dwNumIf*: DWORD
    dwNumAddr*: DWORD
    dwNumRoutes*: DWORD
  PMIB_IPSTATS* = ptr MIB_IPSTATS
  MIB_TCPSTATS* {.final, pure.} = object
    dwRtoAlgorithm*: DWORD
    dwRtoMin*: DWORD
    dwRtoMax*: DWORD
    dwMaxConn*: DWORD
    dwActiveOpens*: DWORD
    dwPassiveOpens*: DWORD
    dwAttemptFails*: DWORD
    dwEstabResets*: DWORD
    dwCurrEstab*: DWORD
    dwInSegs*: DWORD
    dwOutSegs*: DWORD
    dwRetransSegs*: DWORD
    dwInErrs*: DWORD
    dwOutRsts*: DWORD
    dwNumConns*: DWORD
  PMIB_TCPSTATS* = ptr MIB_TCPSTATS
  MIB_TCPROW* {.final, pure.} = object
    dwState*: DWORD
    dwLocalAddr*: DWORD
    dwLocalPort*: DWORD
    dwRemoteAddr*: DWORD
    dwRemotePort*: DWORD
  PMIB_TCPROW* = ptr MIB_TCPROW
  MIB_TCPTABLE* {.final, pure.} = object
    dwNumEntries*: DWORD
    table*: array[1, MIB_TCPROW]
  PMIB_TCPTABLE* = ptr MIB_TCPTABLE
  MIB_UDPSTATS* {.final, pure.} = object
    dwInDatagrams*: DWORD
    dwNoPorts*: DWORD
    dwInErrors*: DWORD
    dwOutDatagrams*: DWORD
    dwNumAddrs*: DWORD
  PMIB_UDPSTATS* = ptr MIB_UDPSTATS
  MIB_UDPROW* {.final, pure.} = object
    dwLocalAddr*: DWORD
    dwLocalPort*: DWORD
  PMIB_UDPROW* = ptr MIB_UDPROW
  MIB_UDPTABLE* {.final, pure.} = object
    dwNumEntries*: DWORD
    table*: array[1, MIB_UDPROW]
  PMIB_UDPTABLE* = ptr MIB_UDPTABLE

# misc/iptypes.nim

const
  DEFAULT_MINIMUM_ENTITIES* = 32
  MAX_ADAPTER_ADDRESS_LENGTH* = 8
  MAX_ADAPTER_DESCRIPTION_LENGTH* = 128
  MAX_ADAPTER_NAME_LENGTH* = 256
  MAX_DOMAIN_NAME_LEN* = 128
  MAX_HOSTNAME_LEN* = 128
  MAX_SCOPE_ID_LEN* = 256
  BROADCAST_NODETYPE* = 1
  PEER_TO_PEER_NODETYPE* = 2
  MIXED_NODETYPE* = 4
  HYBRID_NODETYPE* = 8
  IF_OTHER_ADAPTERTYPE* = 0
  IF_ETHERNET_ADAPTERTYPE* = 1
  IF_TOKEN_RING_ADAPTERTYPE* = 2
  IF_FDDI_ADAPTERTYPE* = 3
  IF_PPP_ADAPTERTYPE* = 4
  IF_LOOPBACK_ADAPTERTYPE* = 5

type
  IP_ADDRESS_STRING* {.final, pure.} = object
    String*: array[16, char]
  IP_MASK_STRING* = IP_ADDRESS_STRING
  PIP_ADDRESS_STRING* = ptr IP_ADDRESS_STRING
  PIP_MASK_STRING* = ptr IP_ADDRESS_STRING
  IP_ADDR_STRING* {.final, pure.} = object
    Next*: ptr IP_ADDR_STRING
    IpAddress*: IP_ADDRESS_STRING
    IpMask*: IP_MASK_STRING
    Context*: DWORD
  PIP_ADDR_STRING* = ptr IP_ADDR_STRING
  IP_ADAPTER_INFO* {.final, pure.} = object
    Next*: ptr IP_ADAPTER_INFO
    ComboIndex*: DWORD
    AdapterName*: array[MAX_ADAPTER_NAME_LENGTH+4, char]
    Description*: array[MAX_ADAPTER_DESCRIPTION_LENGTH+4, char]
    AddressLength*: UINT
    Address*: array[MAX_ADAPTER_ADDRESS_LENGTH, BYTE]
    Index*: DWORD
    Type*: UINT
    DhcpEnabled*: UINT
    CurrentIpAddress*: PIP_ADDR_STRING
    IpAddressList*: IP_ADDR_STRING
    GatewayList*: IP_ADDR_STRING
    DhcpServer*: IP_ADDR_STRING
    HaveWins*: BOOL
    PrimaryWinsServer*: IP_ADDR_STRING
    SecondaryWinsServer*: IP_ADDR_STRING
    LeaseObtained*: int32
    LeaseExpires*: int32
  PIP_ADAPTER_INFO* = ptr IP_ADAPTER_INFO
  IP_PER_ADAPTER_INFO* {.final, pure.} = object
    AutoconfigEnabled*: UINT
    AutoconfigActive*: UINT
    CurrentDnsServer*: PIP_ADDR_STRING
    DnsServerList*: IP_ADDR_STRING
  PIP_PER_ADAPTER_INFO* = ptr IP_PER_ADAPTER_INFO
  FIXED_INFO* {.final, pure.} = object
    HostName*: array[MAX_HOSTNAME_LEN+4, char]
    DomainName*: array[MAX_DOMAIN_NAME_LEN+4, char]
    CurrentDnsServer*: PIP_ADDR_STRING
    DnsServerList*: IP_ADDR_STRING
    NodeType*: UINT
    ScopeId*: array[MAX_SCOPE_ID_LEN+4, char]
    EnableRouting*: UINT
    EnableProxy*: UINT
    EnableDns*: UINT
  PFIXED_INFO* = ptr FIXED_INFO

# misc/iphlpapi.nim

proc AddIPAddress*(P1: IPAddr, P2: IPMask, P3: DWORD, P4: PULONG, P5: PULONG): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc CreateIpForwardEntry*(P1: PMIB_IPFORWARDROW): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc CreateIpNetEntry*(P1: PMIB_IPNETROW): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc CreateProxyArpEntry*(P1: DWORD, P2: DWORD, P3: DWORD): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc DeleteIPAddress*(P1: ULONG): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc DeleteIpForwardEntry*(P1: PMIB_IPFORWARDROW): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc DeleteIpNetEntry*(P1: PMIB_IPNETROW): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc DeleteProxyArpEntry*(P1: DWORD, P2: DWORD, P3: DWORD): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc EnableRouter*(P1: ptr HANDLE, P2: ptr OVERLAPPED): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc FlushIpNetTable*(P1: DWORD): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetAdapterIndex*(P1: LPWSTR, P2: PULONG): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetAdaptersInfo*(P1: PIP_ADAPTER_INFO, P2: PULONG): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetBestInterface*(P1: IPAddr, P2: PDWORD): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetBestRoute*(P1: DWORD, P2: DWORD, P3: PMIB_IPFORWARDROW): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetFriendlyIfIndex*(P1: DWORD): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetIcmpStatistics*(P1: PMIB_ICMP): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetIfEntry*(P1: PMIB_IFROW): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetIfTable*(P1: PMIB_IFTABLE, P2: PULONG, P3: BOOL): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetInterfaceInfo*(P1: PIP_INTERFACE_INFO, P2: PULONG): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetIpAddrTable*(P1: PMIB_IPADDRTABLE, P2: PULONG, P3: BOOL): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetIpForwardTable*(P1: PMIB_IPFORWARDTABLE, P2: PULONG, P3: BOOL): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetIpNetTable*(P1: PMIB_IPNETTABLE, P2: PULONG, P3: BOOL): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetIpStatistics*(P1: PMIB_IPSTATS): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetNetworkParams*(P1: PFIXED_INFO, P2: PULONG): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetNumberOfInterfaces*(P1: PDWORD): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetPerAdapterInfo*(P1: ULONG, P2: PIP_PER_ADAPTER_INFO, P3: PULONG): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetRTTAndHopCount*(P1: IPAddr, P2: PULONG, P3: ULONG, P4: PULONG): BOOL {.winapi, dynlib: "iphlpapi", importc.}
proc GetTcpStatistics*(P1: PMIB_TCPSTATS): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetTcpTable*(P1: PMIB_TCPTABLE, P2: PDWORD, P3: BOOL): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetUniDirectionalAdapterInfo*(P1: PIP_UNIDIRECTIONAL_ADAPTER_ADDRESS, P2: PULONG): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetUdpStatistics*(P1: PMIB_UDPSTATS): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc GetUdpTable*(P1: PMIB_UDPTABLE, P2: PDWORD, P3: BOOL): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc IpReleaseAddress*(P1: PIP_ADAPTER_INDEX_MAP): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc IpRenewAddress*(P1: PIP_ADAPTER_INDEX_MAP): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc NotifyAddrChange*(P1: PHANDLE, P2: LPOVERLAPPED): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc NotifyRouteChange*(P1: PHANDLE, P2: LPOVERLAPPED): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc SendARP*(P1: IPAddr, P2: IPAddr, P3: PULONG, P4: PULONG): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc SetIfEntry*(P1: PMIB_IFROW): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc SetIpForwardEntry*(P1: PMIB_IPFORWARDROW): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc SetIpNetEntry*(P1: PMIB_IPNETROW): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc SetIpStatistics*(P1: PMIB_IPSTATS): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc SetIpTTL*(P1: UINT): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc SetTcpEntry*(P1: PMIB_TCPROW): DWORD {.winapi, dynlib: "iphlpapi", importc.}
proc UnenableRouter*(P1: ptr OVERLAPPED, P2: LPDWORD): DWORD {.winapi, dynlib: "iphlpapi", importc.}

# misc/lzexpand.nim

const
  LZERROR_BADINHANDLE* = -1
  LZERROR_BADOUTHANDLE* = -2
  LZERROR_READ* = -3
  LZERROR_WRITE* = -4
  LZERROR_GLOBALLOC* = -5
  LZERROR_GLOBLOCK* = -6
  LZERROR_BADVALUE* = -7
  LZERROR_UNKNOWNALG* = -8

proc CopyLZFile*(P1: INT, P2: INT): LONG {.winapi, dynlib: "lz32", importc.}
proc LZDone*(): void {.winapi, dynlib: "lz32", importc.}
proc LZStart*(): INT {.winapi, dynlib: "lz32", importc.}
proc GetExpandedNameA*(P1: LPSTR, P2: LPSTR): INT {.winapi, dynlib: "lz32", importc.}
proc GetExpandedNameW*(P1: LPWSTR, P2: LPWSTR): INT {.winapi, dynlib: "lz32", importc.}
proc LZClose*(P1: INT): void {.winapi, dynlib: "lz32", importc.}
proc LZCopy*(P1: INT, P2: INT): LONG {.winapi, dynlib: "lz32", importc.}
proc LZInit*(P1: INT): INT {.winapi, dynlib: "lz32", importc.}
proc LZOpenFileA*(P1: LPSTR, P2: LPOFSTRUCT, P3: WORD): INT {.winapi, dynlib: "lz32", importc.}
proc LZOpenFileW*(P1: LPWSTR, P2: LPOFSTRUCT, P3: WORD): INT {.winapi, dynlib: "lz32", importc.}
proc LZRead*(P1: INT, P2: LPSTR, P3: INT): INT {.winapi, dynlib: "lz32", importc.}
proc LZSeek*(P1: INT, P2: LONG, P3: INT): LONG {.winapi, dynlib: "lz32", importc.}

when not defined(winansi):
  proc GetExpandedName*(P1: LPWSTR, P2: LPWSTR): INT {.winapi, dynlib: "lz32", importc: "GetExpandedNameW".}
  proc LZOpenFile*(P1: LPWSTR, P2: LPOFSTRUCT, P3: WORD): INT {.winapi, dynlib: "lz32", importc: "LZOpenFileW".}

else:
  proc GetExpandedName*(P1: LPSTR, P2: LPSTR): INT {.winapi, dynlib: "lz32", importc: "GetExpandedNameA".}
  proc LZOpenFile*(P1: LPSTR, P2: LPOFSTRUCT, P3: WORD): INT {.winapi, dynlib: "lz32", importc: "LZOpenFileA".}

# misc/mapi.nim

const
  SUCCESS_SUCCESS* = 0
  MAPI_USER_ABORT* = 1
  MAPI_E_USER_ABORT* = MAPI_USER_ABORT
  MAPI_E_FAILURE* = MAPI_USER_ABORT + 1
  MAPI_E_LOGIN_FAILURE* = MAPI_USER_ABORT + 2
  MAPI_E_LOGON_FAILURE* = MAPI_E_LOGIN_FAILURE
  MAPI_E_DISK_FULL* = 4
  MAPI_E_INSUFFICIENT_MEMORY* = 5
  MAPI_E_ACCESS_DENIED* = 6
  MAPI_E_BLK_TOO_SMALL* = MAPI_E_ACCESS_DENIED
  MAPI_E_TOO_MANY_SESSIONS* = 8
  MAPI_E_TOO_MANY_FILES* = 9
  MAPI_E_TOO_MANY_RECIPIENTS* = 10
  MAPI_E_ATTACHMENT_NOT_FOUND* = 11
  MAPI_E_ATTACHMENT_OPEN_FAILURE* = 12
  MAPI_E_ATTACHMENT_WRITE_FAILURE* = 13
  MAPI_E_UNKNOWN_RECIPIENT* = 14
  MAPI_E_BAD_RECIPTYPE* = 15
  MAPI_E_NO_MESSAGES* = 16
  MAPI_E_INVALID_MESSAGE* = 17
  MAPI_E_TEXT_TOO_LARGE* = 18
  MAPI_E_INVALID_SESSION* = 19
  MAPI_E_TYPE_NOT_SUPPORTED* = 20
  MAPI_E_AMBIGUOUS_RECIPIENT* = 21
  MAPI_E_AMBIGUOUS_RECIP* = MAPI_E_AMBIGUOUS_RECIPIENT
  MAPI_E_MESSAGE_IN_USE* = MAPI_E_AMBIGUOUS_RECIPIENT + 1
  MAPI_E_NETWORK_FAILURE* = MAPI_E_AMBIGUOUS_RECIPIENT + 2
  MAPI_E_INVALID_EDITFIELDS* = MAPI_E_AMBIGUOUS_RECIPIENT + 3
  MAPI_E_INVALID_RECIPS* = MAPI_E_AMBIGUOUS_RECIPIENT + 4
  MAPI_E_NOT_SUPPORTED* = MAPI_E_AMBIGUOUS_RECIPIENT + 5
  MAPI_ORIG* = 0
  MAPI_TO* = 1
  MAPI_CC* = 2
  MAPI_BCC* = 3
  MAPI_LOGON_UI* = 0x0001
  MAPI_NEW_SESSION* = 0x0002
  MAPI_FORCE_DOWNLOAD* = 0x1000
  MAPI_LOGOFF_SHARED* = 0x0001
  MAPI_LOGOFF_UI* = 0x0002
  MAPI_DIALOG* = 0x0008
  MAPI_UNREAD_ONLY* = 0x0020
  MAPI_LONG_MSGID* = 0x4000
  MAPI_GUARANTEE_FIFO* = 0x0100
  MAPI_ENVELOPE_ONLY* = 0x0040
  MAPI_PEEK* = 0x0080
  MAPI_BODY_AS_FILE* = 0x0200
  MAPI_SUPPRESS_ATTACH* = 0x0800
  MAPI_AB_NOMODIFY* = 0x0400
  MAPI_OLE* = 0x0001
  MAPI_OLE_STATIC* = 0x0002
  MAPI_UNREAD* = 0x0001
  MAPI_RECEIPT_REQUESTED* = 0x0002
  MAPI_SENT* = 0x0004

type
  FLAGS* = uint32
  LHANDLE* = uint32
  LPLHANDLE* = ptr uint32
  LPULONG* = ptr uint32
  MapiRecipDesc* {.final, pure.} = object
    ulReserved*: ULONG
    ulRecipClass*: ULONG
    lpszName*: LPSTR
    lpszAddress*: LPSTR
    ulEIDSize*: ULONG
    lpEntryID*: LPVOID
  lpMapiRecipDesc* = ptr MapiRecipDesc
  MapiFileDesc* {.final, pure.} = object
    ulReserved*: ULONG
    flFlags*: ULONG
    nPosition*: ULONG
    lpszPathName*: LPSTR
    lpszFileName*: LPSTR
    lpFileType*: LPVOID
  lpMapiFileDesc* = ptr MapiFileDesc
  MapiFileTagExt* {.final, pure.} = object
    ulReserved*: ULONG
    cbTag*: ULONG
    lpTag*: LPBYTE
    cbEncoding*: ULONG
    lpEncoding*: LPBYTE
  lpMapiFileTagExt* = ptr MapiFileTagExt
  MapiMessage* {.final, pure.} = object
    ulReserved*: ULONG
    lpszSubject*: LPSTR
    lpszNoteText*: LPSTR
    lpszMessageType*: LPSTR
    lpszDateReceived*: LPSTR
    lpszConversationID*: LPSTR
    flFlags*: FLAGS
    lpOriginator*: lpMapiRecipDesc
    nRecipCount*: ULONG
    lpRecips*: lpMapiRecipDesc
    nFileCount*: ULONG
    lpFiles*: lpMapiFileDesc
  lpMapiMessage* = ptr MapiMessage

# misc/mciavi.nim

const
  MCI_MCIAVI_PLAY_WINDOW* = 0x01000000
  MCI_MCIAVI_PLAY_FULLSCREEN* = 0x02000000
  MCI_MCIAVI_PLAY_FULLBY2* = 0x04000000
  MCI_AVI_STATUS_FRAMES_SKIPPED* = 0x00008001
  MCI_AVI_STATUS_LAST_PLAY_SPEED* = 0x00008002
  MCI_AVI_STATUS_AUDIO_BREAKS* = 0x00008003
  MCI_AVI_SETVIDEO_DRAW_PROCEDURE* = 0x00008000
  MCI_AVI_SETVIDEO_PALETTE_COLOR* = 0x00008100
  MCI_AVI_SETVIDEO_PALETTE_HALFTONE* = 0x0000FFFF
  MCIERR_AVI_OLDAVIFORMAT* = MCIERR_CUSTOM_DRIVER_BASE + 100
  MCIERR_AVI_NOTINTERLEAVED* = (MCIERR_CUSTOM_DRIVER_BASE + 100) + 1
  MCIERR_AVI_NODISPDIB* = (MCIERR_CUSTOM_DRIVER_BASE + 100) + 2
  MCIERR_AVI_CANTPLAYFULLSCREEN* = (MCIERR_CUSTOM_DRIVER_BASE + 100) + 3
  MCIERR_AVI_TOOBIGFORVGA* = (MCIERR_CUSTOM_DRIVER_BASE + 100) + 4
  MCIERR_AVI_NOCOMPRESSOR* = (MCIERR_CUSTOM_DRIVER_BASE + 100) + 5
  MCIERR_AVI_DISPLAYERROR* = (MCIERR_CUSTOM_DRIVER_BASE + 100) + 6
  MCIERR_AVI_AUDIOERROR* = (MCIERR_CUSTOM_DRIVER_BASE + 100) + 7
  MCIERR_AVI_BADPALETTE* = (MCIERR_CUSTOM_DRIVER_BASE + 100) + 8

# misc/mcx.nim

const
  DIALOPTION_BILLING* = 64
  DIALOPTION_QUIET* = 128
  DIALOPTION_DIALTONE* = 256
  MDMVOLFLAG_LOW* = 1
  MDMVOLFLAG_MEDIUM* = 2
  MDMVOLFLAG_HIGH* = 4
  MDMVOL_LOW* = 0
  MDMVOL_MEDIUM* = 1
  MDMVOL_HIGH* = 2
  MDMSPKRFLAG_OFF* = 1
  MDMSPKRFLAG_DIAL* = 2
  MDMSPKRFLAG_ON* = 4
  MDMSPKRFLAG_CALLSETUP* = 8
  MDMSPKR_OFF* = 0
  MDMSPKR_DIAL* = 1
  MDMSPKR_ON* = 2
  MDMSPKR_CALLSETUP* = 3
  MDM_COMPRESSION* = 0x0001
  MDM_ERROR_CONTROL* = 0x0002
  MDM_FORCED_EC* = 0x0004
  MDM_CELLULAR* = 0x0008
  MDM_FLOWCONTROL_HARD* = 0x0010
  MDM_FLOWCONTROL_SOFT* = 0x0020
  MDM_CCITT_OVERRIDE* = 0x0040
  MDM_SPEED_ADJUST* = 0x0080
  MDM_TONE_DIAL* = 0x0100
  MDM_BLIND_DIAL* = 0x0200
  MDM_V23_OVERRIDE* = 0x0400

type
  MODEMDEVCAPS* {.final, pure.} = object
    dwActualSize*: DWORD
    dwRequiredSize*: DWORD
    dwDevSpecificOffset*: DWORD
    dwDevSpecificSize*: DWORD
    dwModemProviderVersion*: DWORD
    dwModemManufacturerOffset*: DWORD
    dwModemManufacturerSize*: DWORD
    dwModemModelOffset*: DWORD
    dwModemModelSize*: DWORD
    dwModemVersionOffset*: DWORD
    dwModemVersionSize*: DWORD
    dwDialOptions*: DWORD
    dwCallSetupFailTimer*: DWORD
    dwInactivityTimeout*: DWORD
    dwSpeakerVolume*: DWORD
    dwSpeakerMode*: DWORD
    dwModemOptions*: DWORD
    dwMaxDTERate*: DWORD
    dwMaxDCERate*: DWORD
    abVariablePortion*: array[1, BYTE]
  PMODEMDEVCAPS* = ptr MODEMDEVCAPS
  LPMODEMDEVCAPS* = ptr MODEMDEVCAPS
  MODEMSETTINGS* {.final, pure.} = object
    dwActualSize*: DWORD
    dwRequiredSize*: DWORD
    dwDevSpecificOffset*: DWORD
    dwDevSpecificSize*: DWORD
    dwCallSetupFailTimer*: DWORD
    dwInactivityTimeout*: DWORD
    dwSpeakerVolume*: DWORD
    dwSpeakerMode*: DWORD
    dwPreferredModemOptions*: DWORD
    dwNegotiatedModemOptions*: DWORD
    dwNegotiatedDCERate*: DWORD
    abVariablePortion*: array[1, BYTE]
  PMODEMSETTINGS* = ptr MODEMSETTINGS
  LPMODEMSETTINGS* = ptr MODEMSETTINGS

# misc/msacm.nim

type
  HACMDRIVERID* = HANDLE
  HACMDRIVER* = HANDLE
  LPHACMDRIVER* = ptr HANDLE

const
  ACMDRIVERDETAILS_SHORTNAME_CHARS* = 32
  ACMDRIVERDETAILS_LONGNAME_CHARS* = 128
  ACMDRIVERDETAILS_COPYRIGHT_CHARS* = 80
  ACMDRIVERDETAILS_LICENSING_CHARS* = 128
  ACMFORMATDETAILS_FORMAT_CHARS* = 256
  ACMFORMATTAGDETAILS_FORMATTAG_CHARS* = 256
  ACMDRIVERDETAILS_FEATURES_CHARS* = 256

type
  ACMFORMATDETAILSA* {.final, pure.} = object
    cbStruct*: DWORD
    dwFormatIndex*: DWORD
    dwFormatTag*: DWORD
    fdwSupport*: DWORD
    pwfx*: LPWAVEFORMATEX
    cbwfx*: DWORD
    szFormat*: array[ACMFORMATDETAILS_FORMAT_CHARS, char]
  LPACMFORMATDETAILSA* = ptr ACMFORMATDETAILSA
  ACMFORMATDETAILSW* {.final, pure.} = object
    cbStruct*: DWORD
    dwFormatIndex*: DWORD
    dwFormatTag*: DWORD
    fdwSupport*: DWORD
    pwfx*: LPWAVEFORMATEX
    cbwfx*: DWORD
    szFormat*: array[ACMFORMATDETAILS_FORMAT_CHARS, WCHAR]
  LPACMFORMATDETAILSW* = ptr ACMFORMATDETAILSW
  ACMFORMATTAGDETAILSA* {.final, pure.} = object
    cbStruct*: DWORD
    dwFormatTagIndex*: DWORD
    dwFormatTag*: DWORD
    cbFormatSize*: DWORD
    fdwSupport*: DWORD
    cStandardFormats*: DWORD
    szFormatTag*: array[ACMFORMATTAGDETAILS_FORMATTAG_CHARS, char]
  LPACMFORMATTAGDETAILSA* = ptr ACMFORMATTAGDETAILSA
  ACMFORMATTAGDETAILSW* {.final, pure.} = object
    cbStruct*: DWORD
    dwFormatTagIndex*: DWORD
    dwFormatTag*: DWORD
    cbFormatSize*: DWORD
    fdwSupport*: DWORD
    cStandardFormats*: DWORD
    szFormatTag*: array[ACMFORMATTAGDETAILS_FORMATTAG_CHARS, WCHAR]
  LPACMFORMATTAGDETAILSW* = ptr ACMFORMATTAGDETAILSW
  ACMDRIVERDETAILSA* {.final, pure.} = object
    cbStruct*: DWORD
    fccType*: FOURCC
    fccComp*: FOURCC
    wMid*: WORD
    wPid*: WORD
    vdwACM*: DWORD
    vdwDriver*: DWORD
    fdwSupport*: DWORD
    cFormatTags*: DWORD
    cFilterTags*: DWORD
    hicon*: HICON
    szShortName*: array[ACMDRIVERDETAILS_SHORTNAME_CHARS, char]
    szLongName*: array[ACMDRIVERDETAILS_LONGNAME_CHARS, char]
    szCopyright*: array[ACMDRIVERDETAILS_COPYRIGHT_CHARS, char]
    szLicensing*: array[ACMDRIVERDETAILS_LICENSING_CHARS, char]
    szFeatures*: array[ACMDRIVERDETAILS_FEATURES_CHARS, char]
  LPACMDRIVERDETAILSA* = ptr ACMDRIVERDETAILSA
  ACMDRIVERDETAILSW* {.final, pure.} = object
    cbStruct*: DWORD
    fccType*: FOURCC
    fccComp*: FOURCC
    wMid*: WORD
    wPid*: WORD
    vdwACM*: DWORD
    vdwDriver*: DWORD
    fdwSupport*: DWORD
    cFormatTags*: DWORD
    cFilterTags*: DWORD
    hicon*: HICON
    szShortName*: array[ACMDRIVERDETAILS_SHORTNAME_CHARS, WCHAR]
    szLongName*: array[ACMDRIVERDETAILS_LONGNAME_CHARS, WCHAR]
    szCopyright*: array[ACMDRIVERDETAILS_COPYRIGHT_CHARS, WCHAR]
    szLicensing*: array[ACMDRIVERDETAILS_LICENSING_CHARS, WCHAR]
    szFeatures*: array[ACMDRIVERDETAILS_FEATURES_CHARS, WCHAR]
  LPACMDRIVERDETAILSW* = ptr ACMDRIVERDETAILSW
  ACMFORMATENUMCBA* = proc (hadid: HACMDRIVERID, pafd: LPACMFORMATDETAILSA, dwInstance: DWORD_PTR, fdwSupport: DWORD): BOOL {.stdcall.}
  ACMFORMATENUMCBW* = proc (hadid: HACMDRIVERID, pafd: LPACMFORMATDETAILSW, dwInstance: DWORD_PTR, fdwSupport: DWORD): BOOL {.stdcall.}
  ACMFORMATTAGENUMCBA* = proc (hadid: HACMDRIVERID, paftd: LPACMFORMATTAGDETAILSA, dwInstance: DWORD_PTR, fdwSupport: DWORD): BOOL {.stdcall.}
  ACMFORMATTAGENUMCBW* = proc (hadid: HACMDRIVERID, paftd: LPACMFORMATTAGDETAILSW, dwInstance: DWORD_PTR, fdwSupport: DWORD): BOOL {.stdcall.}
  ACMDRIVERENUMCB* = proc (hadid: HACMDRIVERID, dwInstance: DWORD_PTR, fdwSupport: DWORD): BOOL {.stdcall.}

proc acmDriverOpen*(phad: LPHACMDRIVER, hadid: HACMDRIVERID, fdwOpen: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc.}
proc acmDriverEnum*(fnCallback: ACMDRIVERENUMCB, dwInstance: DWORD_PTR, fdwEnum: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc.}
proc acmFormatEnumA*(had: HACMDRIVER, pafd: LPACMFORMATDETAILSA, fnCallback: ACMFORMATENUMCBA, dwInstance: DWORD_PTR, fdwEnum: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc.}
proc acmFormatEnumW*(had: HACMDRIVER, pafd: LPACMFORMATDETAILSW, fnCallback: ACMFORMATENUMCBW, dwInstance: DWORD_PTR, fdwEnum: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc.}
proc acmDriverClose*(had: HACMDRIVER, fdwClose: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc.}
proc acmDriverDetailsA*(hadid: HACMDRIVERID, padd: LPACMDRIVERDETAILSA, fdwDetails: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc.}
proc acmDriverDetailsW*(hadid: HACMDRIVERID, padd: LPACMDRIVERDETAILSW, fdwDetails: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc.}
proc acmFormatTagEnumA*(had: HACMDRIVER, paftd: LPACMFORMATTAGDETAILSA, fnCallback: ACMFORMATTAGENUMCBA, dwInstance: DWORD_PTR, fdwEnum: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc.}
proc acmFormatTagEnumW*(had: HACMDRIVER, paftd: LPACMFORMATTAGDETAILSW, fnCallback: ACMFORMATTAGENUMCBW, dwInstance: DWORD_PTR, fdwEnum: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc.}

when not defined(winansi):
  type
    ACMFORMATDETAILS* = ACMFORMATDETAILSW
    ACMFORMATTAGDETAILS* = ACMFORMATTAGDETAILSW
    ACMDRIVERDETAILS* = ACMDRIVERDETAILSW
    ACMFORMATENUMCB* = ACMFORMATENUMCBW
    ACMFORMATTAGENUMCB* = ACMFORMATTAGENUMCBW

  proc acmFormatEnum*(had: HACMDRIVER, pafd: LPACMFORMATDETAILSW, fnCallback: ACMFORMATENUMCBW, dwInstance: DWORD_PTR, fdwEnum: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc: "acmFormatEnumW".}
  proc acmDriverDetails*(hadid: HACMDRIVERID, padd: LPACMDRIVERDETAILSW, fdwDetails: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc: "acmDriverDetailsW".}
  proc acmFormatTagEnum*(had: HACMDRIVER, paftd: LPACMFORMATTAGDETAILSW, fnCallback: ACMFORMATTAGENUMCBW, dwInstance: DWORD_PTR, fdwEnum: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc: "acmFormatTagEnumW".}

else:
  type
    ACMFORMATDETAILS* = ACMFORMATDETAILSA
    ACMFORMATTAGDETAILS* = ACMFORMATTAGDETAILSA
    ACMDRIVERDETAILS* = ACMDRIVERDETAILSA
    ACMFORMATENUMCB* = ACMFORMATENUMCBA
    ACMFORMATTAGENUMCB* = ACMFORMATTAGENUMCBA

  proc acmFormatEnum*(had: HACMDRIVER, pafd: LPACMFORMATDETAILSA, fnCallback: ACMFORMATENUMCBA, dwInstance: DWORD_PTR, fdwEnum: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc: "acmFormatEnumA".}
  proc acmDriverDetails*(hadid: HACMDRIVERID, padd: LPACMDRIVERDETAILSA, fdwDetails: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc: "acmDriverDetailsA".}
  proc acmFormatTagEnum*(had: HACMDRIVER, paftd: LPACMFORMATTAGDETAILSA, fnCallback: ACMFORMATTAGENUMCBA, dwInstance: DWORD_PTR, fdwEnum: DWORD): MMRESULT {.winapi, dynlib: "msacm32", importc: "acmFormatTagEnumA".}

type
  LPACMFORMATDETAILS* = ptr ACMFORMATDETAILS
  LPACMFORMATTAGDETAILS* = ptr ACMFORMATTAGDETAILS
  LPACMDRIVERDETAILS* = ptr ACMDRIVERDETAILS

# misc/nb30.nim

const
  NCBNAMSZ* = 16
  MAX_LANA* = 254
  REGISTERING* = 0
  REGISTERED* = 4
  DEREGISTERED* = 5
  DUPLICATE* = 6
  DUPLICATE_DEREG* = 7
  UNIQUE_NAME* = 0
  GROUP_NAME* = 0x80
  NAME_FLAGS_MASK* = 0x87
  LISTEN_OUTSTANDING* = 1
  CALL_PENDING* = 2
  SESSION_ESTABLISHED* = 3
  HANGUP_PENDING* = 4
  HANGUP_COMPLETE* = 5
  SESSION_ABORTED* = 6
  ALL_TRANSPORTS* = "M\0\0\0"
  MS_NBF* = "MNBF"
  NCBCALL* = 0x10
  NCBLISTEN* = 0x11
  NCBHANGUP* = 0x12
  NCBSEND* = 0x14
  NCBRECV* = 0x15
  NCBRECVANY* = 0x16
  NCBCHAINSEND* = 0x17
  NCBDGSEND* = 0x20
  NCBDGRECV* = 0x21
  NCBDGSENDBC* = 0x22
  NCBDGRECVBC* = 0x23
  NCBADDNAME* = 0x30
  NCBDELNAME* = 0x31
  NCBRESET* = 0x32
  NCBASTAT* = 0x33
  NCBSSTAT* = 0x34
  NCBCANCEL* = 0x35
  NCBADDGRNAME* = 0x36
  NCBENUM* = 0x37
  NCBUNLINK* = 0x70
  NCBSENDNA* = 0x71
  NCBCHAINSENDNA* = 0x72
  NCBLANSTALERT* = 0x73
  NCBACTION* = 0x77
  NCBFINDNAME* = 0x78
  NCBTRACE* = 0x79
  ASYNCH* = 0x80
  NRC_GOODRET* = 0x00
  NRC_BUFLEN* = 0x01
  NRC_ILLCMD* = 0x03
  NRC_CMDTMO* = 0x05
  NRC_INCOMP* = 0x6
  NRC_BADDR* = 0x7
  NRC_SNUMOUT* = 0x8
  NRC_NORES* = 0x9
  NRC_SCLOSED* = 0xA
  NRC_CMDCAN* = 0xB
  NRC_DUPNAME* = 0x0d
  NRC_NAMTFUL* = 0xE
  NRC_ACTSES* = 0xF
  NRC_LOCTFUL* = 0x11
  NRC_REMTFUL* = 0x12
  NRC_ILLNN* = 0x13
  NRC_NOCALL* = 0x14
  NRC_NOWILD* = 0x15
  NRC_INUSE* = 0x16
  NRC_NAMERR* = 0x17
  NRC_SABORT* = 0x18
  NRC_NAMCONF* = 0x19
  NRC_IFBUSY* = 0x21
  NRC_TOOMANY* = 0x22
  NRC_BRIDGE* = 0x23
  NRC_CANOCCR* = 0x24
  NRC_CANCEL* = 0x26
  NRC_DUPENV* = 0x30
  NRC_ENVNOTDEF* = 0x34
  NRC_OSRESNOTAV* = 0x35
  NRC_MAXAPPS* = 0x36
  NRC_NOSAPS* = 0x37
  NRC_NORESOURCES* = 0x38
  NRC_INVADDRESS* = 0x39
  NRC_INVDDID* = 0x3B
  NRC_LOCKFAIL* = 0x3C
  NRC_OPENERR* = 0x3f
  NRC_SYSTEM* = 0x40
  NRC_PENDING* = 0xff

type
  ACTION_HEADER_UNION1* {.final, union, pure.} = object
    transport_id*: ULONG
    c_transport_id*: array[4, char]
  ACTION_HEADER* {.final, pure.} = object
    u1*: ACTION_HEADER_UNION1
    action_code*: USHORT
    reserved*: USHORT
  PACTION_HEADER* = ptr ACTION_HEADER
  ADAPTER_STATUS* {.final, pure.} = object
    adapter_address*: array[6, UCHAR]
    rev_major*: UCHAR
    reserved0*: UCHAR
    adapter_type*: UCHAR
    rev_minor*: UCHAR
    duration*: WORD
    frmr_recv*: WORD
    frmr_xmit*: WORD
    iframe_recv_err*: WORD
    xmit_aborts*: WORD
    xmit_success*: DWORD
    recv_success*: DWORD
    iframe_xmit_err*: WORD
    recv_buff_unavail*: WORD
    t1_timeouts*: WORD
    ti_timeouts*: WORD
    reserved1*: DWORD
    free_ncbs*: WORD
    max_cfg_ncbs*: WORD
    max_ncbs*: WORD
    xmit_buf_unavail*: WORD
    max_dgram_size*: WORD
    pending_sess*: WORD
    max_cfg_sess*: WORD
    max_sess*: WORD
    max_sess_pkt_size*: WORD
    name_count*: WORD
  PADAPTER_STATUS* = ptr ADAPTER_STATUS
  FIND_NAME_BUFFER* {.final, pure.} = object
    length*: UCHAR
    access_control*: UCHAR
    frame_control*: UCHAR
    destination_addr*: array[6, UCHAR]
    source_addr*: array[6, UCHAR]
    routing_info*: array[18, UCHAR]
  PFIND_NAME_BUFFER* = ptr FIND_NAME_BUFFER
  FIND_NAME_HEADER* {.final, pure.} = object
    node_count*: WORD
    reserved*: UCHAR
    unique_group*: UCHAR
  PFIND_NAME_HEADER* = ptr FIND_NAME_HEADER
  LANA_ENUM* {.final, pure.} = object
    length*: UCHAR
    lana*: array[MAX_LANA+1, UCHAR]
  PLANA_ENUM* = ptr LANA_ENUM
  NAME_BUFFER* {.final, pure.} = object
    name*: array[NCBNAMSZ, UCHAR]
    name_num*: UCHAR
    name_flags*: UCHAR
  PNAME_BUFFER* = ptr NAME_BUFFER
  NCB* {.final, pure.} = object
    ncb_command*: UCHAR
    ncb_retcode*: UCHAR
    ncb_lsn*: UCHAR
    ncb_num*: UCHAR
    ncb_buffer*: PUCHAR
    ncb_length*: WORD
    ncb_callname*: array[NCBNAMSZ, UCHAR]
    ncb_name*: array[NCBNAMSZ, UCHAR]
    ncb_rto*: UCHAR
    ncb_sto*: UCHAR
    ncb_post*: proc (P1: ptr NCB): void {.stdcall.}
    ncb_lana_num*: UCHAR
    ncb_cmd_cplt*: UCHAR
    ncb_reserve*: array[10, UCHAR]
    ncb_event*: HANDLE
  PNCB* = ptr NCB
  SESSION_BUFFER* {.final, pure.} = object
    lsn*: UCHAR
    state*: UCHAR
    local_name*: array[NCBNAMSZ, UCHAR]
    remote_name*: array[NCBNAMSZ, UCHAR]
    rcvs_outstanding*: UCHAR
    sends_outstanding*: UCHAR
  PSESSION_BUFFER* = ptr SESSION_BUFFER
  SESSION_HEADER* {.final, pure.} = object
    sess_name*: UCHAR
    num_sess*: UCHAR
    rcv_dg_outstanding*: UCHAR
    rcv_any_outstanding*: UCHAR
  PSESSION_HEADER* = ptr SESSION_HEADER

proc Netbios*(P1: PNCB): UCHAR {.winapi, dynlib: "netapi32", importc.}

proc `transport_id=`*(self: var ACTION_HEADER, x: ULONG) = self.u1.transport_id = x
proc transport_id*(self: ACTION_HEADER): ULONG = self.u1.transport_id
proc `c_transport_id=`*(self: var ACTION_HEADER, x: array[4, char]) = self.u1.c_transport_id = x
proc c_transport_id*(self: ACTION_HEADER): array[4, char] = self.u1.c_transport_id

# misc/nddeapi.nim

const
  SEP_CHAR* = ','.char
  BAR_CHAR* = "|"
  SEP_WCHAR* = ','.WCHAR
  BAR_WCHAR* = "|"
  NDDE_NO_ERROR* = 0
  NDDE_ACCESS_DENIED* = 1
  NDDE_BUF_TOO_SMALL* = 2
  NDDE_ERROR_MORE_DATA* = 3
  NDDE_INVALID_SERVER* = 4
  NDDE_INVALID_SHARE* = 5
  NDDE_INVALID_PARAMETER* = 6
  NDDE_INVALID_LEVEL* = 7
  NDDE_INVALID_PASSWORD* = 8
  NDDE_INVALID_ITEMNAME* = 9
  NDDE_INVALID_TOPIC* = 10
  NDDE_INTERNAL_ERROR* = 11
  NDDE_OUT_OF_MEMORY* = 12
  NDDE_INVALID_APPNAME* = 13
  NDDE_NOT_IMPLEMENTED* = 14
  NDDE_SHARE_ALREADY_EXIST* = 15
  NDDE_SHARE_NOT_EXIST* = 16
  NDDE_INVALID_FILENAME* = 17
  NDDE_NOT_RUNNING* = 18
  NDDE_INVALID_WINDOW* = 19
  NDDE_INVALID_SESSION* = 20
  NDDE_INVALID_ITEM_LIST* = 21
  NDDE_SHARE_DATA_CORRUPTED* = 22
  NDDE_REGISTRY_ERROR* = 23
  NDDE_CANT_ACCESS_SERVER* = 24
  NDDE_INVALID_SPECIAL_COMMAND* = 25
  NDDE_INVALID_SECURITY_DESC* = 26
  NDDE_TRUST_SHARE_FAIL* = 27
  MAX_NDDESHARENAME* = 256
  MAX_DOMAINNAME* = 15
  MAX_USERNAME* = 15
  MAX_APPNAME* = 255
  MAX_TOPICNAME* = 255
  MAX_ITEMNAME* = 255
  NDDEF_NOPASSWORDPROMPT* = 1
  NDDEF_NOCACHELOOKUP* = 2
  NDDEF_STRIP_NDDE* = 4
  SHARE_TYPE_OLD* = 1
  SHARE_TYPE_NEW* = 2
  SHARE_TYPE_STATIC* = 4
  NDDE_CMD_SHOW_MASK* = 0x0000FFFF
  NDDE_TRUST_CMD_SHOW* = 0x10000000
  NDDE_TRUST_SHARE_DEL* = 0x20000000
  NDDE_TRUST_SHARE_INIT* = 0x40000000
  NDDE_TRUST_SHARE_START* = 0x80000000'u32

type
  NDdeShareInfo_tag* {.final, pure.} = object
    lRevision*: LONG
    lpszShareName*: LPTSTR
    lShareType*: LONG
    lpszAppTopicList*: LPTSTR
    fSharedFlag*: LONG
    fService*: LONG
    fStartAppFlag*: LONG
    nCmdShow*: LONG
    qModifyId*: array[2, LONG]
    cNumItems*: LONG
    lpszItemList*: LPTSTR

proc NDdeGetErrorStringA*(P1: UINT, P2: LPSTR, P3: DWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeGetErrorStringW*(P1: UINT, P2: LPWSTR, P3: DWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeGetShareSecurityA*(P1: LPSTR, P2: LPSTR, P3: SECURITY_INFORMATION, P4: PSECURITY_DESCRIPTOR, P5: DWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeGetShareSecurityW*(P1: LPWSTR, P2: LPWSTR, P3: SECURITY_INFORMATION, P4: PSECURITY_DESCRIPTOR, P5: DWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeGetTrustedShareA*(P1: LPSTR, P2: LPSTR, P3: PDWORD, P4: PDWORD, P5: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeGetTrustedShareW*(P1: LPWSTR, P2: LPWSTR, P3: PDWORD, P4: PDWORD, P5: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeIsValidShareNameA*(P1: LPSTR): BOOL {.winapi, dynlib: "nddeapi", importc.}
proc NDdeIsValidShareNameW*(P1: LPWSTR): BOOL {.winapi, dynlib: "nddeapi", importc.}
proc NDdeIsValidAppTopicListA*(P1: LPSTR): BOOL {.winapi, dynlib: "nddeapi", importc.}
proc NDdeIsValidAppTopicListW*(P1: LPWSTR): BOOL {.winapi, dynlib: "nddeapi", importc.}
proc NDdeSetShareSecurityA*(P1: LPSTR, P2: LPSTR, P3: SECURITY_INFORMATION, P4: PSECURITY_DESCRIPTOR): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeSetShareSecurityW*(P1: LPWSTR, P2: LPWSTR, P3: SECURITY_INFORMATION, P4: PSECURITY_DESCRIPTOR): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeSetTrustedShareA*(P1: LPSTR, P2: LPSTR, P3: DWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeSetTrustedShareW*(P1: LPWSTR, P2: LPWSTR, P3: DWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeShareAddA*(P1: LPSTR, P2: UINT, P3: PSECURITY_DESCRIPTOR, P4: PBYTE, P5: DWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeShareAddW*(P1: LPWSTR, P2: UINT, P3: PSECURITY_DESCRIPTOR, P4: PBYTE, P5: DWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeShareDelA*(P1: LPSTR, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeShareDelW*(P1: LPWSTR, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeShareEnumA*(P1: LPSTR, P2: UINT, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeShareEnumW*(P1: LPWSTR, P2: UINT, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeShareGetInfoA*(P1: LPSTR, P2: LPSTR, P3: UINT, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeShareGetInfoW*(P1: LPWSTR, P2: LPWSTR, P3: UINT, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeShareSetInfoA*(P1: LPSTR, P2: LPSTR, P3: UINT, P4: PBYTE, P5: DWORD, P6: WORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeShareSetInfoW*(P1: LPWSTR, P2: LPWSTR, P3: UINT, P4: PBYTE, P5: DWORD, P6: WORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeTrustedShareEnumA*(P1: LPSTR, P2: UINT, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc.}
proc NDdeTrustedShareEnumW*(P1: LPWSTR, P2: UINT, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc.}

when not defined(winansi):
  proc NDdeShareAdd*(P1: LPWSTR, P2: UINT, P3: PSECURITY_DESCRIPTOR, P4: PBYTE, P5: DWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeShareAddW".}
  proc NDdeShareDel*(P1: LPWSTR, P2: LPWSTR, P3: UINT): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeShareDelW".}
  proc NDdeSetShareSecurity*(P1: LPWSTR, P2: LPWSTR, P3: SECURITY_INFORMATION, P4: PSECURITY_DESCRIPTOR): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeSetShareSecurityW".}
  proc NDdeGetShareSecurity*(P1: LPWSTR, P2: LPWSTR, P3: SECURITY_INFORMATION, P4: PSECURITY_DESCRIPTOR, P5: DWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeGetShareSecurityW".}
  proc NDdeShareEnum*(P1: LPWSTR, P2: UINT, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeShareEnumW".}
  proc NDdeShareGetInfo*(P1: LPWSTR, P2: LPWSTR, P3: UINT, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeShareGetInfoW".}
  proc NDdeShareSetInfo*(P1: LPWSTR, P2: LPWSTR, P3: UINT, P4: PBYTE, P5: DWORD, P6: WORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeShareSetInfoW".}
  proc NDdeGetErrorString*(P1: UINT, P2: LPWSTR, P3: DWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeGetErrorStringW".}
  proc NDdeIsValidShareName*(P1: LPWSTR): BOOL {.winapi, dynlib: "nddeapi", importc: "NDdeIsValidShareNameW".}
  proc NDdeIsValidAppTopicList*(P1: LPWSTR): BOOL {.winapi, dynlib: "nddeapi", importc: "NDdeIsValidAppTopicListW".}
  proc NDdeSetTrustedShare*(P1: LPWSTR, P2: LPWSTR, P3: DWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeSetTrustedShareW".}
  proc NDdeGetTrustedShare*(P1: LPWSTR, P2: LPWSTR, P3: PDWORD, P4: PDWORD, P5: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeGetTrustedShareW".}
  proc NDdeTrustedShareEnum*(P1: LPWSTR, P2: UINT, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeTrustedShareEnumW".}

else:
  proc NDdeShareAdd*(P1: LPSTR, P2: UINT, P3: PSECURITY_DESCRIPTOR, P4: PBYTE, P5: DWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeShareAddA".}
  proc NDdeShareDel*(P1: LPSTR, P2: LPSTR, P3: UINT): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeShareDelA".}
  proc NDdeSetShareSecurity*(P1: LPSTR, P2: LPSTR, P3: SECURITY_INFORMATION, P4: PSECURITY_DESCRIPTOR): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeSetShareSecurityA".}
  proc NDdeGetShareSecurity*(P1: LPSTR, P2: LPSTR, P3: SECURITY_INFORMATION, P4: PSECURITY_DESCRIPTOR, P5: DWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeGetShareSecurityA".}
  proc NDdeShareEnum*(P1: LPSTR, P2: UINT, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeShareEnumA".}
  proc NDdeShareGetInfo*(P1: LPSTR, P2: LPSTR, P3: UINT, P4: PBYTE, P5: DWORD, P6: PDWORD, P7: PWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeShareGetInfoA".}
  proc NDdeShareSetInfo*(P1: LPSTR, P2: LPSTR, P3: UINT, P4: PBYTE, P5: DWORD, P6: WORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeShareSetInfoA".}
  proc NDdeGetErrorString*(P1: UINT, P2: LPSTR, P3: DWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeGetErrorStringA".}
  proc NDdeIsValidShareName*(P1: LPSTR): BOOL {.winapi, dynlib: "nddeapi", importc: "NDdeIsValidShareNameA".}
  proc NDdeIsValidAppTopicList*(P1: LPSTR): BOOL {.winapi, dynlib: "nddeapi", importc: "NDdeIsValidAppTopicListA".}
  proc NDdeSetTrustedShare*(P1: LPSTR, P2: LPSTR, P3: DWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeSetTrustedShareA".}
  proc NDdeGetTrustedShare*(P1: LPSTR, P2: LPSTR, P3: PDWORD, P4: PDWORD, P5: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeGetTrustedShareA".}
  proc NDdeTrustedShareEnum*(P1: LPSTR, P2: UINT, P3: PBYTE, P4: DWORD, P5: PDWORD, P6: PDWORD): UINT {.winapi, dynlib: "nddeapi", importc: "NDdeTrustedShareEnumA".}

# misc/nspapi.nim

const
  NS_ALL* = 0
  NS_SAP* = 1
  NS_NDS* = 2
  NS_PEER_BROWSE* = 3
  NS_TCPIP_LOCAL* = 10
  NS_TCPIP_HOSTS* = 11
  NS_DNS* = 12
  NS_NETBT* = 13
  NS_WINS* = 14
  NS_NBP* = 20
  NS_MS* = 30
  NS_STDA* = 31
  NS_NTDS* = 32
  NS_X500* = 40
  NS_NIS* = 41
  NS_NISPLUS* = 42
  NS_WRQ* = 50
  SERVICE_REGISTER* = 1
  SERVICE_DEREGISTER* = 2
  SERVICE_FLUSH* = 3
  SERVICE_FLAG_HARD* = 2

type
  # SOCKET_ADDRESS* {.final, pure.} = object
  #   lpSockaddr*: LPSOCKADDR
  #   iSockaddrLength*: INT
  # PSOCKET_ADDRESS* = ptr SOCKET_ADDRESS
  # LPSOCKET_ADDRESS* = ptr SOCKET_ADDRESS
  # CSADDR_INFO* {.final, pure.} = object
  #   LocalAddr*: SOCKET_ADDRESS
  #   RemoteAddr*: SOCKET_ADDRESS
  #   iSocketType*: INT
  #   iProtocol*: INT
  # PCSADDR_INFO* = ptr CSADDR_INFO
  # LPCSADDR_INFO* = ptr CSADDR_INFO
  # BLOB* {.final, pure.} = object
  #   cbSize*: ULONG
  #   pBlobData*: ptr BYTE
  # PBLOB* = ptr BLOB
  # LPBLOB* = ptr BLOB
  SERVICE_ADDRESS* {.final, pure.} = object
    dwAddressType*: DWORD
    dwAddressFlags*: DWORD
    dwAddressLength*: DWORD
    dwPrincipalLength*: DWORD
    lpAddress*: ptr BYTE
    lpPrincipal*: ptr BYTE
  SERVICE_ADDRESSES* {.final, pure.} = object
    dwAddressCount*: DWORD
    Addresses*: array[1, SERVICE_ADDRESS]
  PSERVICE_ADDRESSES* = ptr SERVICE_ADDRESSES
  LPSERVICE_ADDRESSES* = ptr SERVICE_ADDRESSES
  SERVICE_INFOA* {.final, pure.} = object
    lpServiceType*: LPGUID
    lpServiceName*: LPSTR
    lpComment*: LPSTR
    lpLocale*: LPSTR
    dwDisplayHint*: DWORD
    dwVersion*: DWORD
    dwTime*: DWORD
    lpMachineName*: LPSTR
    lpServiceAddress*: LPSERVICE_ADDRESSES
    ServiceSpecificInfo*: BLOB
  LPSERVICE_INFOA* = ptr SERVICE_INFOA
  SERVICE_INFOW* {.final, pure.} = object
    lpServiceType*: LPGUID
    lpServiceName*: LPWSTR
    lpComment*: LPWSTR
    lpLocale*: LPWSTR
    dwDisplayHint*: DWORD
    dwVersion*: DWORD
    dwTime*: DWORD
    lpMachineName*: LPWSTR
    lpServiceAddress*: LPSERVICE_ADDRESSES
    ServiceSpecificInfo*: BLOB
  LPSERVICE_INFOW* = ptr SERVICE_INFOW
  LPSERVICE_ASYNC_INFO* = pointer

proc SetServiceA*(P1: DWORD, P2: DWORD, P3: DWORD, P4: LPSERVICE_INFOA, P5: LPSERVICE_ASYNC_INFO, P6: LPDWORD): INT {.winapi, dynlib: "mswsock", importc.}
proc SetServiceW*(P1: DWORD, P2: DWORD, P3: DWORD, P4: LPSERVICE_INFOW, P5: LPSERVICE_ASYNC_INFO, P6: LPDWORD): INT {.winapi, dynlib: "mswsock", importc.}
proc GetAddressByNameA*(P1: DWORD, P2: LPGUID, P3: LPSTR, P4: LPINT, P5: DWORD, P6: LPSERVICE_ASYNC_INFO, P7: LPVOID, P8: LPDWORD, P9: LPSTR, P10: LPDWORD): INT {.winapi, dynlib: "mswsock", importc.}
proc GetAddressByNameW*(P1: DWORD, P2: LPGUID, P3: LPWSTR, P4: LPINT, P5: DWORD, P6: LPSERVICE_ASYNC_INFO, P7: LPVOID, P8: LPDWORD, P9: LPWSTR, P10: LPDWORD): INT {.winapi, dynlib: "mswsock", importc.}

when not defined(winansi):
  type
    SERVICE_INFO* = SERVICE_INFOW

  proc SetService*(P1: DWORD, P2: DWORD, P3: DWORD, P4: LPSERVICE_INFOW, P5: LPSERVICE_ASYNC_INFO, P6: LPDWORD): INT {.winapi, dynlib: "mswsock", importc: "SetServiceW".}
  proc GetAddressByName*(P1: DWORD, P2: LPGUID, P3: LPWSTR, P4: LPINT, P5: DWORD, P6: LPSERVICE_ASYNC_INFO, P7: LPVOID, P8: LPDWORD, P9: LPWSTR, P10: LPDWORD): INT {.winapi, dynlib: "mswsock", importc: "GetAddressByNameW".}

else:
  type
    SERVICE_INFO* = SERVICE_INFOA

  proc SetService*(P1: DWORD, P2: DWORD, P3: DWORD, P4: LPSERVICE_INFOA, P5: LPSERVICE_ASYNC_INFO, P6: LPDWORD): INT {.winapi, dynlib: "mswsock", importc: "SetServiceA".}
  proc GetAddressByName*(P1: DWORD, P2: LPGUID, P3: LPSTR, P4: LPINT, P5: DWORD, P6: LPSERVICE_ASYNC_INFO, P7: LPVOID, P8: LPDWORD, P9: LPSTR, P10: LPDWORD): INT {.winapi, dynlib: "mswsock", importc: "GetAddressByNameA".}

type
  # _SERVICE_INFO* = SERVICE_INFO
  LPSERVICE_INFO* = ptr SERVICE_INFO

# misc/ntdll.nim
const
  # SHUTDOWN_ACTION* = enum
  ShutdownNoReboot* = 0
  ShutdownReboot* = 1
  ShutdownPowerOff* = 2

type
  SHUTDOWN_ACTION* = int32

proc NtShutdownSystem*(Action: SHUTDOWN_ACTION): uint32 {.winapi, dynlib: "ntdll", importc.}

# misc/ntldap.nim

const
  LDAP_SERVER_ASQ_OID* = "1.2.840.113556.1.4.1504"
  LDAP_SERVER_DIRSYNC_OID* = "1.2.840.113556.1.4.841"
  LDAP_SERVER_SD_FLAGS_OID* = "1.2.840.113556.1.4.801"
  LDAP_SERVER_FAST_BIND_OID* = "1.2.840.113556.1.4.1781"
  LDAP_MATCHING_RULE_BIT_OR* = "1.2.840.113556.1.4.804"
  LDAP_MATCHING_RULE_BIT_AND* = "1.2.840.113556.1.4.803"
  LDAP_SERVER_EXTENDED_DN_OID* = "1.2.840.113556.1.4.529"
  LDAP_SERVER_LAZY_COMMIT_OID* = "1.2.840.113556.1.4.619"
  LDAP_SERVER_TREE_DELETE_OID* = "1.2.840.113556.1.4.805"
  LDAP_SERVER_VERIFY_NAME_OID* = "1.2.840.113556.1.4.1338"
  LDAP_SERVER_SHOW_DELETED_OID* = "1.2.840.113556.1.4.417"
  LDAP_SERVER_NOTIFICATION_OID* = "1.2.840.113556.1.4.528"
  LDAP_SERVER_DOMAIN_SCOPE_OID* = "1.2.840.113556.1.4.1339"
  LDAP_CAP_ACTIVE_DIRECTORY_OID* = "1.2.840.113556.1.4.800"
  LDAP_SERVER_SEARCH_OPTIONS_OID* = "1.2.840.113556.1.4.1340"
  LDAP_CAP_ACTIVE_DIRECTORY_V51_OID* = "1.2.840.113556.1.4.1670"
  LDAP_SERVER_PERMISSIVE_MODIFY_OID* = "1.2.840.113556.1.4.1413"
  LDAP_SERVER_CROSSDOM_MOVE_TARGET_OID* = "1.2.840.113556.1.4.521"
  LDAP_SERVER_ASQ_OID_W* = "1.2.840.113556.1.4.1504"
  LDAP_SERVER_DIRSYNC_OID_W* = "1.2.840.113556.1.4.841"
  LDAP_SERVER_SD_FLAGS_OID_W* = "1.2.840.113556.1.4.801"
  LDAP_SERVER_FAST_BIND_OID_W* = "1.2.840.113556.1.4.1781"
  LDAP_MATCHING_RULE_BIT_OR_W* = "1.2.840.113556.1.4.804"
  LDAP_MATCHING_RULE_BIT_AND_W* = "1.2.840.113556.1.4.803"
  LDAP_SERVER_EXTENDED_DN_OID_W* = "1.2.840.113556.1.4.529"
  LDAP_SERVER_LAZY_COMMIT_OID_W* = "1.2.840.113556.1.4.619"
  LDAP_SERVER_TREE_DELETE_OID_W* = "1.2.840.113556.1.4.805"
  LDAP_SERVER_VERIFY_NAME_OID_W* = "1.2.840.113556.1.4.1338"
  LDAP_SERVER_SHOW_DELETED_OID_W* = "1.2.840.113556.1.4.417"
  LDAP_SERVER_NOTIFICATION_OID_W* = "1.2.840.113556.1.4.528"
  LDAP_SERVER_DOMAIN_SCOPE_OID_W* = "1.2.840.113556.1.4.1339"
  LDAP_CAP_ACTIVE_DIRECTORY_OID_W* = "1.2.840.113556.1.4.800"
  LDAP_SERVER_SEARCH_OPTIONS_OID_W* = "1.2.840.113556.1.4.1340"
  LDAP_CAP_ACTIVE_DIRECTORY_V51_OID_W* = "1.2.840.113556.1.4.1670"
  LDAP_SERVER_PERMISSIVE_MODIFY_OID_W* = "1.2.840.113556.1.4.1413"
  LDAP_SERVER_CROSSDOM_MOVE_TARGET_OID_W* = "1.2.840.113556.1.4.521"
  SERVER_SEARCH_FLAG_DOMAIN_SCOPE* = 1
  SERVER_SEARCH_FLAG_PHANTOM_ROOT* = 2

# misc/snmp.nim

type
  SNMPAPI* = INT
  AsnInteger32* = LONG
  AsnUnsigned32* = ULONG
  AsnCounter32* = ULONG
  AsnGauge32* = ULONG
  AsnInteger* = AsnInteger32
  AsnCounter* = AsnCounter32
  AsnGauge* = AsnGauge32
  AsnTimeticks* = ULONG
  AsnCounter64* = ULARGE_INTEGER

const
  DEFAULT_SNMP_PORT_UDP* = 161
  DEFAULT_SNMP_PORT_IPX* = 36879
  DEFAULT_SNMPTRAP_PORT_UDP* = 162
  DEFAULT_SNMPTRAP_PORT_IPX* = 36880
  ASN_UNIVERSAL* = 0x00
  ASN_PRIMITIVE* = 0x00
  ASN_CONSTRUCTOR* = 0x20
  ASN_APPLICATION* = 0x40
  ASN_CONTEXT* = 0x80
  ASN_PRIVATE* = 0xC0
  SNMP_PDU_GET* = (ASN_CONTEXT or ASN_CONSTRUCTOR)
  SNMP_PDU_GETNEXT* = ((ASN_CONTEXT or ASN_CONSTRUCTOR) + 1)
  SNMP_PDU_RESPONSE* = ((ASN_CONTEXT or ASN_CONSTRUCTOR) + 2)
  SNMP_PDU_SET* = ((ASN_CONTEXT or ASN_CONSTRUCTOR) + 3)
  SNMP_PDU_GETBULK* = ((ASN_CONTEXT or ASN_CONSTRUCTOR) + 4)
  SNMP_PDU_V1TRAP* = (ASN_CONTEXT or ASN_CONSTRUCTOR or 4)
  SNMP_PDU_INFORM* = (ASN_CONTEXT or ASN_CONSTRUCTOR or 6)
  SNMP_PDU_TRAP* = ((ASN_CONTEXT or ASN_CONSTRUCTOR or 6) + 1)
  SNMP_PDU_REPORT* = ((ASN_CONTEXT or ASN_CONSTRUCTOR or 6) + 2)
  aSN_INTEGER* = (ASN_UNIVERSAL or ASN_PRIMITIVE or 2)
  aSN_BITS* = ((ASN_UNIVERSAL or ASN_PRIMITIVE or 2) + 1)
  aSN_OCTETSTRING* = ((ASN_UNIVERSAL or ASN_PRIMITIVE or 2) + 2)
  aSN_NULL* = ((ASN_UNIVERSAL or ASN_PRIMITIVE or 2) + 3)
  aSN_OBJECTIDENTIFIER* = ((ASN_UNIVERSAL or ASN_PRIMITIVE or 2) + 4)
  aSN_INTEGER32* = aSN_INTEGER
  aSN_SEQUENCE* = (ASN_UNIVERSAL or ASN_CONSTRUCTOR or 0x10)
  aSN_SEQUENCEOF* = aSN_SEQUENCE
  aSN_IPADDRESS* = (ASN_APPLICATION or ASN_PRIMITIVE)
  aSN_COUNTER32* = ((ASN_APPLICATION or ASN_PRIMITIVE) + 1)
  aSN_GAUGE32* = ((ASN_APPLICATION or ASN_PRIMITIVE) + 2)
  aSN_TIMETICKS* = ((ASN_APPLICATION or ASN_PRIMITIVE) + 3)
  aSN_OPAQUE* = ((ASN_APPLICATION or ASN_PRIMITIVE) + 4)
  aSN_COUNTER64* = (ASN_APPLICATION or ASN_PRIMITIVE or 6)
  aSN_UNSIGNED32* = ((ASN_APPLICATION or ASN_PRIMITIVE or 6) + 1)
  SNMP_EXCEPTION_NOSUCHOBJECT* = (ASN_CONTEXT or ASN_PRIMITIVE)
  SNMP_EXCEPTION_NOSUCHINSTANCE* = ((ASN_CONTEXT or ASN_PRIMITIVE) + 1)
  SNMP_EXCEPTION_ENDOFMIBVIEW* = ((ASN_CONTEXT or ASN_PRIMITIVE) + 2)
  SNMP_EXTENSION_GET* = SNMP_PDU_GET
  SNMP_EXTENSION_GET_NEXT* = SNMP_PDU_GETNEXT
  SNMP_EXTENSION_GET_BULK* = SNMP_PDU_GETBULK
  SNMP_EXTENSION_SET_TEST* = (ASN_PRIVATE or ASN_CONSTRUCTOR)
  SNMP_EXTENSION_SET_COMMIT* = SNMP_PDU_SET
  SNMP_EXTENSION_SET_UNDO* = (ASN_PRIVATE or ASN_CONSTRUCTOR or 1)
  SNMP_EXTENSION_SET_CLEANUP* = ((ASN_PRIVATE or ASN_CONSTRUCTOR or 1) + 1)
  SNMP_ERRORSTATUS_NOERROR* = 0
  SNMP_ERRORSTATUS_TOOBIG* = 1
  SNMP_ERRORSTATUS_NOSUCHNAME* = 2
  SNMP_ERRORSTATUS_BADVALUE* = 3
  SNMP_ERRORSTATUS_READONLY* = 4
  SNMP_ERRORSTATUS_GENERR* = 5
  SNMP_ERRORSTATUS_NOACCESS* = 6
  SNMP_ERRORSTATUS_WRONGTYPE* = 7
  SNMP_ERRORSTATUS_WRONGLENGTH* = 8
  SNMP_ERRORSTATUS_WRONGENCODING* = 9
  SNMP_ERRORSTATUS_WRONGVALUE* = 10
  SNMP_ERRORSTATUS_NOCREATION* = 11
  SNMP_ERRORSTATUS_INCONSISTENTVALUE* = 12
  SNMP_ERRORSTATUS_RESOURCEUNAVAILABLE* = 13
  SNMP_ERRORSTATUS_COMMITFAILED* = 14
  SNMP_ERRORSTATUS_UNDOFAILED* = 15
  SNMP_ERRORSTATUS_AUTHORIZATIONERROR* = 16
  SNMP_ERRORSTATUS_NOTWRITABLE* = 17
  SNMP_ERRORSTATUS_INCONSISTENTNAME* = 18
  SNMP_GENERICTRAP_COLDSTART* = 0
  SNMP_GENERICTRAP_WARMSTART* = 1
  SNMP_GENERICTRAP_LINKDOWN* = 2
  SNMP_GENERICTRAP_LINKUP* = 3
  SNMP_GENERICTRAP_AUTHFAILURE* = 4
  SNMP_GENERICTRAP_EGPNEIGHLOSS* = 5
  SNMP_GENERICTRAP_ENTERSPECIFIC* = 6
  SNMP_ACCESS_NONE* = 0
  SNMP_ACCESS_NOTIFY* = 1
  SNMP_ACCESS_READ_ONLY* = 2
  SNMP_ACCESS_READ_WRITE* = 3
  SNMP_ACCESS_READ_CREATE* = 4
  SNMPAPI_ERROR* = 0
  SNMPAPI_NOERROR* = 1
  SNMP_LOG_SILENT* = 0
  SNMP_LOG_FATAL* = 1
  SNMP_LOG_ERROR* = 2
  SNMP_LOG_WARNING* = 3
  SNMP_LOG_TRACE* = 4
  SNMP_LOG_VERBOSE* = 5
  SNMP_OUTPUT_TO_CONSOLE* = 1
  SNMP_OUTPUT_TO_LOGFILE* = 2
  SNMP_OUTPUT_TO_EVENTLOG* = 4
  SNMP_OUTPUT_TO_DEBUGGER* = 8
  SNMP_MAX_OID_LEN* = 128
  SNMP_MEM_ALLOC_ERROR* = 1
  SNMP_BERAPI_INVALID_LENGTH* = 10
  SNMP_BERAPI_INVALID_TAG* = 11
  SNMP_BERAPI_OVERFLOW* = 12
  SNMP_BERAPI_SHORT_BUFFER* = 13
  SNMP_BERAPI_INVALID_OBJELEM* = 14
  SNMP_PDUAPI_UNRECOGNIZED_PDU* = 20
  SNMP_PDUAPI_INVALID_ES* = 21
  SNMP_PDUAPI_INVALID_GT* = 22
  SNMP_AUTHAPI_INVALID_VERSION* = 30
  SNMP_AUTHAPI_INVALID_MSG_TYPE* = 31
  SNMP_AUTHAPI_TRIV_AUTH_FAILED* = 32

type
  AsnOctetString* {.final, pure.} = object
    stream*: ptr BYTE
    length*: UINT
    dynamic*: BOOL
  AsnBits* = AsnOctetString
  AsnSequence* = AsnOctetString
  AsnImplicitSequence* = AsnOctetString
  AsnIPAddress* = AsnOctetString
  AsnNetworkAddress* = AsnOctetString
  AsnDisplayString* = AsnOctetString
  AsnOpaque* = AsnOctetString
  AsnObjectIdentifier* {.final, pure.} = object
    idLength*: UINT
    ids*: ptr UINT
  AsnObjectName* = AsnObjectIdentifier
  AsnAny_asnValue* {.final, union, pure.} = object
    number*: AsnInteger32
    unsigned32*: AsnUnsigned32
    counter64*: AsnCounter64
    string*: AsnOctetString
    bits*: AsnBits
    obj*: AsnObjectIdentifier
    sequence*: AsnSequence
    address*: AsnIPAddress
    counter*: AsnCounter32
    gauge*: AsnGauge32
    ticks*: AsnTimeticks
    arbitrary*: AsnOpaque
  AsnAny* {.final, pure.} = object
    asnType*: BYTE
  AsnObjectSyntax* = AsnAny
  SnmpVarBind* {.final, pure.} = object
    name*: AsnObjectName
    value*: AsnObjectSyntax
  SnmpVarBindList* {.final, pure.} = object
    list*: ptr SnmpVarBind
    len*: UINT

proc SnmpExtensionClose*(): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpExtensionInit*(P1: DWORD, P2: ptr HANDLE, P3: ptr AsnObjectIdentifier): BOOL {.winapi, dynlib: "snmpapi", importc.}
proc SnmpExtensionInitEx*(P1: ptr AsnObjectIdentifier): BOOL {.winapi, dynlib: "snmpapi", importc.}
proc SnmpExtensionMonitor*(P1: LPVOID): BOOL {.winapi, dynlib: "snmpapi", importc.}
proc SnmpExtensionQuery*(P1: BYTE, P2: ptr SnmpVarBindList, P3: ptr AsnInteger32, P4: ptr AsnInteger32): BOOL {.winapi, dynlib: "snmpapi", importc.}
proc SnmpExtensionQueryEx*(P1: DWORD, P2: DWORD, P3: ptr SnmpVarBindList, P4: ptr AsnOctetString, P5: ptr AsnInteger32, P6: ptr AsnInteger32): BOOL {.winapi, dynlib: "snmpapi", importc.}
proc SnmpExtensionTrap*(P1: ptr AsnObjectIdentifier, P2: ptr AsnInteger32, P3: ptr AsnInteger32, P4: ptr AsnTimeticks, P5: ptr SnmpVarBindList): BOOL {.winapi, dynlib: "snmpapi", importc.}
proc SnmpSvcGetUptime*(): DWORD {.winapi, dynlib: "snmpapi", importc.}
proc SnmpSvcSetLogLevel*(P1: INT): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpSvcSetLogType*(P1: INT): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilAsnAnyCpy*(P1: ptr AsnAny, P2: ptr AsnAny): SNMPAPI {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilAsnAnyFree*(P1: ptr AsnAny): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilDbgPrint*(P1: INT, P2: LPSTR): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilIdsToA*(P1: ptr UINT, P2: UINT): LPSTR {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilMemAlloc*(P1: UINT): LPVOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilMemFree*(P1: LPVOID): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilMemReAlloc*(P1: LPVOID, P2: UINT): LPVOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilOctetsCmp*(P1: ptr AsnOctetString, P2: ptr AsnOctetString): SNMPAPI {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilOctetsCpy*(P1: ptr AsnOctetString, P2: ptr AsnOctetString): SNMPAPI {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilOctetsFree*(P1: ptr AsnOctetString): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilOctetsNCmp*(P1: ptr AsnOctetString, P2: ptr AsnOctetString, P3: UINT): SNMPAPI {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilOidAppend*(P1: ptr AsnObjectIdentifier, P2: ptr AsnObjectIdentifier): SNMPAPI {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilOidCmp*(P1: ptr AsnObjectIdentifier, P2: ptr AsnObjectIdentifier): SNMPAPI {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilOidCpy*(P1: ptr AsnObjectIdentifier, P2: ptr AsnObjectIdentifier): SNMPAPI {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilOidFree*(P1: ptr AsnObjectIdentifier): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilOidNCmp*(P1: ptr AsnObjectIdentifier, P2: ptr AsnObjectIdentifier, P3: UINT): SNMPAPI {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilOidToA*(P1: ptr AsnObjectIdentifier): LPSTR {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilPrintAsnAny*(P1: ptr AsnAny): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilPrintOid*(P1: ptr AsnObjectIdentifier): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilVarBindCpy*(P1: ptr SnmpVarBind, P2: ptr SnmpVarBind): SNMPAPI {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilVarBindListCpy*(P1: ptr SnmpVarBindList, P2: ptr SnmpVarBindList): SNMPAPI {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilVarBindFree*(P1: ptr SnmpVarBind): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SnmpUtilVarBindListFree*(P1: ptr SnmpVarBindList): VOID {.winapi, dynlib: "snmpapi", importc.}
proc SNMP_malloc*(P1: UINT): LPVOID {.winapi, dynlib: "snmpapi", importc: "SnmpUtilMemAlloc".}
proc SNMP_free*(P1: LPVOID): VOID {.winapi, dynlib: "snmpapi", importc: "SnmpUtilMemFree".}
proc SNMP_realloc*(P1: LPVOID, P2: UINT): LPVOID {.winapi, dynlib: "snmpapi", importc: "SnmpUtilMemReAlloc".}
proc SNMP_DBG_malloc*(P1: UINT): LPVOID {.winapi, dynlib: "snmpapi", importc: "SnmpUtilMemAlloc".}
proc SNMP_DBG_free*(P1: LPVOID): VOID {.winapi, dynlib: "snmpapi", importc: "SnmpUtilMemFree".}
proc SNMP_DBG_realloc*(P1: LPVOID, P2: UINT): LPVOID {.winapi, dynlib: "snmpapi", importc: "SnmpUtilMemReAlloc".}
proc SNMP_oidappend*(P1: ptr AsnObjectIdentifier, P2: ptr AsnObjectIdentifier): SNMPAPI {.winapi, dynlib: "snmpapi", importc: "SnmpUtilOidAppend".}
proc SNMP_oidcmp*(P1: ptr AsnObjectIdentifier, P2: ptr AsnObjectIdentifier): SNMPAPI {.winapi, dynlib: "snmpapi", importc: "SnmpUtilOidCmp".}
proc SNMP_oidcpy*(P1: ptr AsnObjectIdentifier, P2: ptr AsnObjectIdentifier): SNMPAPI {.winapi, dynlib: "snmpapi", importc: "SnmpUtilOidCpy".}
proc SNMP_oidfree*(P1: ptr AsnObjectIdentifier): VOID {.winapi, dynlib: "snmpapi", importc: "SnmpUtilOidFree".}
proc SNMP_oidncmp*(P1: ptr AsnObjectIdentifier, P2: ptr AsnObjectIdentifier, P3: UINT): SNMPAPI {.winapi, dynlib: "snmpapi", importc: "SnmpUtilOidNCmp".}
proc SNMP_printany*(P1: ptr AsnAny): VOID {.winapi, dynlib: "snmpapi", importc: "SnmpUtilPrintAsnAny".}
proc SNMP_CopyVarBind*(P1: ptr SnmpVarBind, P2: ptr SnmpVarBind): SNMPAPI {.winapi, dynlib: "snmpapi", importc: "SnmpUtilVarBindCpy".}
proc SNMP_CopyVarBindList*(P1: ptr SnmpVarBindList, P2: ptr SnmpVarBindList): SNMPAPI {.winapi, dynlib: "snmpapi", importc: "SnmpUtilVarBindListCpy".}
proc SNMP_FreeVarBind*(P1: ptr SnmpVarBind): VOID {.winapi, dynlib: "snmpapi", importc: "SnmpUtilVarBindFree".}
proc SNMP_FreeVarBindList*(P1: ptr SnmpVarBindList): VOID {.winapi, dynlib: "snmpapi", importc: "SnmpUtilVarBindListFree".}

type
  ASN_RFC1155_IPADDRESS* = ASN_IPADDRESS
  ASN_RFC1155_COUNTER* = ASN_COUNTER32
  ASN_RFC1155_GAUGE* = ASN_GAUGE32
  ASN_RFC1155_TIMETICKS* = ASN_TIMETICKS
  ASN_RFC1155_OPAQUE* = ASN_OPAQUE
  ASN_RFC1213_DISPSTRING* = ASN_OCTETSTRING
  RFC1157VarBindList* = SnmpVarBindList
  RFC1157VarBind* = SnmpVarBind

const
  ASN_RFC1157_GETREQUEST* = SNMP_PDU_GET
  ASN_RFC1157_GETNEXTREQUEST* = SNMP_PDU_GETNEXT
  ASN_RFC1157_GETRESPONSE* = SNMP_PDU_RESPONSE
  ASN_RFC1157_SETREQUEST* = SNMP_PDU_SET
  ASN_RFC1157_TRAP* = SNMP_PDU_V1TRAP
  ASN_CONTEXTSPECIFIC* = ASN_CONTEXT
  ASN_PRIMATIVE* = ASN_PRIMITIVE

# misc/mgmtapi.nim

const
  SNMP_MGMTAPI_TIMEOUT* = 40
  SNMP_MGMTAPI_SELECT_FDERRORS* = 41
  SNMP_MGMTAPI_TRAP_ERRORS* = 42
  SNMP_MGMTAPI_TRAP_DUPINIT* = 43
  SNMP_MGMTAPI_NOTRAPS* = 44
  SNMP_MGMTAPI_AGAIN* = 45
  SNMP_MGMTAPI_INVALID_CTL* = 46
  SNMP_MGMTAPI_INVALID_SESSION* = 47
  SNMP_MGMTAPI_INVALID_BUFFER* = 48
  MGMCTL_SETAGENTPORT* = 1

type
  LPSNMP_MGR_SESSION* = PVOID

proc SnmpMgrClose*(P1: LPSNMP_MGR_SESSION): BOOL {.winapi, dynlib: "mgmtapi", importc.}
proc SnmpMgrCtl*(P1: LPSNMP_MGR_SESSION, P2: DWORD, P3: LPVOID, P4: DWORD, P5: LPVOID, P6: DWORD, P7: LPDWORD): BOOL {.winapi, dynlib: "mgmtapi", importc.}
proc SnmpMgrGetTrap*(P1: ptr AsnObjectIdentifier, P2: ptr AsnNetworkAddress, P3: ptr AsnInteger, P4: ptr AsnInteger, P5: ptr AsnTimeticks, P6: ptr SnmpVarBindList): BOOL {.winapi, dynlib: "mgmtapi", importc.}
proc SnmpMgrGetTrapEx*(P1: ptr AsnObjectIdentifier, P2: ptr AsnNetworkAddress, P3: ptr AsnNetworkAddress, P4: ptr AsnInteger, P5: ptr AsnInteger, P6: ptr AsnOctetString, P7: ptr AsnTimeticks, P8: ptr SnmpVarBindList): BOOL {.winapi, dynlib: "mgmtapi", importc.}
proc SnmpMgrOidToStr*(P1: ptr AsnObjectIdentifier, P2: ptr LPSTR): BOOL {.winapi, dynlib: "mgmtapi", importc.}
proc SnmpMgrOpen*(P1: LPSTR, P2: LPSTR, P3: INT, P4: INT): LPSNMP_MGR_SESSION {.winapi, dynlib: "mgmtapi", importc.}
proc SnmpMgrRequest*(P1: LPSNMP_MGR_SESSION, P2: BYTE, P3: ptr SnmpVarBindList, P4: ptr AsnInteger, P5: ptr AsnInteger): INT {.winapi, dynlib: "mgmtapi", importc.}
proc SnmpMgrStrToOid*(P1: LPSTR, P2: ptr AsnObjectIdentifier): BOOL {.winapi, dynlib: "mgmtapi", importc.}
proc SnmpMgrTrapListen*(P1: ptr HANDLE): BOOL {.winapi, dynlib: "mgmtapi", importc.}

# misc/subauth.nim
const
  # NETLOGON_LOGON_INFO_CLASS* = enum
  NetlogonInteractiveInformation* = 1
  NetlogonNetworkInformation* = 2
  NetlogonServiceInformation* = 3
  NetlogonGenericInformation* = 4
  NetlogonInteractiveTransitiveInformation* = 5
  NetlogonNetworkTransitiveInformation* = 6
  NetlogonServiceTransitiveInformation* = 7

const
  MSV1_0_PASSTHRU* = 1
  MSV1_0_GUEST_LOGON* = 2
  MSV1_0_VALIDATION_LOGOFF_TIME* = 1
  MSV1_0_VALIDATION_KICKOFF_TIME* = 2
  MSV1_0_VALIDATION_LOGON_SERVER* = 4
  MSV1_0_VALIDATION_LOGON_DOMAIN* = 8
  MSV1_0_VALIDATION_SESSION_KEY* = 16
  MSV1_0_VALIDATION_USER_FLAGS* = 32
  MSV1_0_VALIDATION_USER_ID* = 64
  MSV1_0_SUBAUTH_ACCOUNT_DISABLED* = 1
  MSV1_0_SUBAUTH_PASSWORD* = 2
  MSV1_0_SUBAUTH_WORKSTATIONS* = 4
  MSV1_0_SUBAUTH_LOGON_HOURS* = 8
  MSV1_0_SUBAUTH_ACCOUNT_EXPIRY* = 16
  MSV1_0_SUBAUTH_PASSWORD_EXPIRY* = 32
  MSV1_0_SUBAUTH_ACCOUNT_TYPE* = 64
  MSV1_0_SUBAUTH_LOCKOUT* = 128
  NEXT_FREE_ACCOUNT_CONTROL_BIT* = 131072
  SAM_DAYS_PER_WEEK* = 7
  SAM_HOURS_PER_WEEK* = 168
  SAM_MINUTES_PER_WEEK* = 10080
  STATUS_SUCCESS* = 0
  STATUS_INVALID_INFO_CLASS* = -1073741821
  STATUS_NO_SUCH_USER* = -1073741724
  STATUS_WRONG_PASSWORD* = -1073741718
  STATUS_PASSWORD_RESTRICTION* = -1073741716
  STATUS_LOGON_FAILURE* = -1073741715
  STATUS_ACCOUNT_RESTRICTION* = -1073741714
  STATUS_INVALID_LOGON_HOURS* = -1073741713
  STATUS_INVALID_WORKSTATION* = -1073741712
  STATUS_PASSWORD_EXPIRED* = -1073741711
  STATUS_ACCOUNT_DISABLED* = -1073741710
  STATUS_INSUFFICIENT_RESOURCES* = -1073741670
  STATUS_ACCOUNT_EXPIRED* = -1073741421
  STATUS_PASSWORD_MUST_CHANGE* = -1073741276
  STATUS_ACCOUNT_LOCKED_OUT* = -1073741260
  USER_ACCOUNT_DISABLED* = 1
  USER_HOME_DIRECTORY_REQUIRED* = 2
  USER_PASSWORD_NOT_REQUIRED* = 4
  USER_TEMP_DUPLICATE_ACCOUNT* = 8
  USER_NORMAL_ACCOUNT* = 16
  USER_MNS_LOGON_ACCOUNT* = 32
  USER_INTERDOMAIN_TRUST_ACCOUNT* = 64
  USER_WORKSTATION_TRUST_ACCOUNT* = 128
  USER_SERVER_TRUST_ACCOUNT* = 256
  USER_DONT_EXPIRE_PASSWORD* = 512
  USER_ACCOUNT_AUTO_LOCKED* = 1024
  USER_ENCRYPTED_TEXT_PASSWORD_ALLOWED* = 2048
  USER_SMARTCARD_REQUIRED* = 4096
  USER_TRUSTED_FOR_DELEGATION* = 8192
  USER_NOT_DELEGATED* = 16384
  USER_USE_DES_KEY_ONLY* = 32768
  USER_DONT_REQUIRE_PREAUTH* = 65536
  USER_MACHINE_ACCOUNT_MASK* = 448
  USER_ACCOUNT_TYPE_MASK* = 472
  USER_ALL_PARAMETERS* = 2097152

type
  SAM_HANDLE* = HANDLE
  PSAM_HANDLE* = ptr HANDLE
  OLD_LARGE_INTEGER* {.final, pure.} = object
    LowPart*: ULONG
    HighPart*: LONG
  POLD_LARGE_INTEGER* = ptr OLD_LARGE_INTEGER
  NETLOGON_LOGON_INFO_CLASS* = int32

const
  CYPHER_BLOCK_LENGTH* = 8
  USER_SESSION_KEY_LENGTH* = CYPHER_BLOCK_LENGTH * 2
  CLEAR_BLOCK_LENGTH* = 8

type
  CYPHER_BLOCK* {.final, pure.} = object
    data*: array[CYPHER_BLOCK_LENGTH, CHAR]
  PCYPHER_BLOCK* = ptr CYPHER_BLOCK
  CLEAR_BLOCK* {.final, pure.} = object
    data*: array[CLEAR_BLOCK_LENGTH, CHAR]
  PCLEAR_BLOCK* = ptr CLEAR_BLOCK
  LM_OWF_PASSWORD* {.final, pure.} = object
    data*: array[2, CYPHER_BLOCK]
  PLM_OWF_PASSWORD* = ptr LM_OWF_PASSWORD
  USER_SESSION_KEY* {.final, pure.} = object
    data*: array[2, CYPHER_BLOCK]
  PUSER_SESSION_KEY* = ptr USER_SESSION_KEY
  LM_CHALLENGE* = CLEAR_BLOCK
  PLM_CHALLENGE* = ptr LM_CHALLENGE
  NT_OWF_PASSWORD* = LM_OWF_PASSWORD
  PNT_OWF_PASSWORD* = ptr NT_OWF_PASSWORD
  NT_CHALLENGE* = LM_CHALLENGE
  PNT_CHALLENGE* = ptr NT_CHALLENGE
  LOGON_HOURS* {.final, pure.} = object
    UnitsPerWeek*: USHORT
    LogonHours*: PUCHAR
  PLOGON_HOURS* = ptr LOGON_HOURS
  SR_SECURITY_DESCRIPTOR* {.final, pure.} = object
    Length*: ULONG
    SecurityDescriptor*: PUCHAR
  PSR_SECURITY_DESCRIPTOR* = ptr SR_SECURITY_DESCRIPTOR
  USER_ALL_INFORMATION* {.final, pure.} = object
    LastLogon*: LARGE_INTEGER

    LastLogoff*: LARGE_INTEGER
    PasswordLastSet*: LARGE_INTEGER
    AccountExpires*: LARGE_INTEGER
    PasswordCanChange*: LARGE_INTEGER
    PasswordMustChange*: LARGE_INTEGER
    UserName*: UNICODE_STRING
    FullName*: UNICODE_STRING
    HomeDirectory*: UNICODE_STRING
    HomeDirectoryDrive*: UNICODE_STRING
    ScriptPath*: UNICODE_STRING
    ProfilePath*: UNICODE_STRING
    AdminComment*: UNICODE_STRING
    WorkStations*: UNICODE_STRING
    UserComment*: UNICODE_STRING
    Parameters*: UNICODE_STRING
    LmPassword*: UNICODE_STRING
    NtPassword*: UNICODE_STRING
    PrivateData*: UNICODE_STRING
    SecurityDescriptor*: SR_SECURITY_DESCRIPTOR
    UserId*: ULONG
    PrimaryGroupId*: ULONG
    UserAccountControl*: ULONG
    WhichFields*: ULONG
    LogonHours*: LOGON_HOURS
    BadPasswordCount*: USHORT
    LogonCount*: USHORT
    CountryCode*: USHORT
    CodePage*: USHORT
    LmPasswordPresent*: BOOLEAN
    NtPasswordPresent*: BOOLEAN
    PasswordExpired*: BOOLEAN
    PrivateDataSensitive*: BOOLEAN
  PUSER_ALL_INFORMATION* = ptr USER_ALL_INFORMATION
  MSV1_0_VALIDATION_INFO* {.final, pure.} = object
    LogoffTime*: LARGE_INTEGER
    KickoffTime*: LARGE_INTEGER
    LogonServer*: UNICODE_STRING
    LogonDomainName*: UNICODE_STRING
    SessionKey*: USER_SESSION_KEY
    Authoritative*: BOOLEAN
    UserFlags*: ULONG
    WhichFields*: ULONG
    UserId*: ULONG
  PMSV1_0_VALIDATION_INFO* = ptr MSV1_0_VALIDATION_INFO
  NETLOGON_LOGON_IDENTITY_INFO* {.final, pure.} = object
    LogonDomainName*: UNICODE_STRING
    ParameterControl*: ULONG
    LogonId*: OLD_LARGE_INTEGER
    UserName*: UNICODE_STRING
    Workstation*: UNICODE_STRING
  PNETLOGON_LOGON_IDENTITY_INFO* = ptr NETLOGON_LOGON_IDENTITY_INFO
  NETLOGON_INTERACTIVE_INFO* {.final, pure.} = object
    Identity*: NETLOGON_LOGON_IDENTITY_INFO
    LmOwfPassword*: LM_OWF_PASSWORD
    NtOwfPassword*: NT_OWF_PASSWORD
  PNETLOGON_INTERACTIVE_INFO* = ptr NETLOGON_INTERACTIVE_INFO
  NETLOGON_GENERIC_INFO* {.final, pure.} = object
    Identity*: NETLOGON_LOGON_IDENTITY_INFO
    PackageName*: UNICODE_STRING
    DataLength*: ULONG
    LogonData*: PUCHAR
  PNETLOGON_GENERIC_INFO* = ptr NETLOGON_GENERIC_INFO
  NETLOGON_NETWORK_INFO* {.final, pure.} = object
    Identity*: NETLOGON_LOGON_IDENTITY_INFO
    LmChallenge*: LM_CHALLENGE
    NtChallengeResponse*: STRING
    LmChallengeResponse*: STRING
  PNETLOGON_NETWORK_INFO* = ptr NETLOGON_NETWORK_INFO
  NETLOGON_SERVICE_INFO* {.final, pure.} = object
    Identity*: NETLOGON_LOGON_IDENTITY_INFO
    LmOwfPassword*: LM_OWF_PASSWORD
    NtOwfPassword*: NT_OWF_PASSWORD
  PNETLOGON_SERVICE_INFO* = ptr NETLOGON_SERVICE_INFO

type
  Msv1_0SubAuthenticationRoutine* = proc(P1: NETLOGON_LOGON_INFO_CLASS, P2: PVOID, P3: ULONG, P4: PUSER_ALL_INFORMATION, P5: PULONG, P6: PULONG, P7: PBOOLEAN, P8: PLARGE_INTEGER, P9: PLARGE_INTEGER): NTSTATUS {.stdcall.}
  Msv1_0SubAuthenticationFilter* = proc(P1: NETLOGON_LOGON_INFO_CLASS, P2: PVOID, P3: ULONG, P4: PUSER_ALL_INFORMATION, P5: PULONG, P6: PULONG, P7: PBOOLEAN, P8: PLARGE_INTEGER, P9: PLARGE_INTEGER): NTSTATUS {.stdcall.}
  Msv1_0SubAuthenticationRoutineGeneric* = proc(P1: PVOID, P2: ULONG, P3: PULONG, P4: ptr PVOID): NTSTATUS {.stdcall.}
  Msv1_0SubAuthenticationRoutineEx* = proc(P1: NETLOGON_LOGON_INFO_CLASS, P2: PVOID, P3: ULONG, P4: PUSER_ALL_INFORMATION, P5: SAM_HANDLE, P6: PMSV1_0_VALIDATION_INFO, P7: PULONG): NTSTATUS {.stdcall.}

# misc/regstr.nim

const
  REGSTR_MAX_VALUE_LENGTH* = 256
  IT_COMPACT* = 0
  IT_TYPICAL* = 1
  IT_PORTABLE* = 2
  IT_CUSTOM* = 3
  DOSOPTGF_DEFCLEAN* = 1
  DOSOPTF_DEFAULT* = 0x01
  DOSOPTF_SUPPORTED* = 0x02
  DOSOPTF_ALWAYSUSE* = 0x04
  DOSOPTF_USESPMODE* = 0x08
  DOSOPTF_PROVIDESUMB* = 0x10
  DOSOPTF_NEEDSETUP* = 0x20
  DOSOPTF_INDOSSTART* = 0x40
  DOSOPTF_MULTIPLE* = 0x80
  SUF_FIRSTTIME* = 0x0001
  SUF_EXPRESS* = 0x0002
  SUF_BATCHINF* = 0x0004
  SUF_CLEAN* = 0x0008
  SUF_INSETUP* = 0x0010
  SUF_NETSETUP* = 0x0020
  SUF_NETHDBOOT* = 0x0040
  SUF_NETRPLBOOT* = 0x0080
  SUF_SBSCOPYOK* = 0x0100
  VPDF_DISABLEPWRMGMT* = 1
  VPDF_FORCEAPM10MODE* = 2
  VPDF_SKIPINTELSLCHECK* = 4
  VPDF_DISABLEPWRSTATUSPOLL* = 8
  PCMCIA_OPT_HAVE_SOCKET* = 0x01
  PCMCIA_OPT_AUTOMEM* = 0x04
  PCMCIA_OPT_NO_SOUND* = 0x08
  PCMCIA_OPT_NO_AUDIO* = 0x10
  PCMCIA_OPT_NO_APMREMOVE* = 0x20
  PCMCIA_DEF_MEMBEGIN* = 0x0C0000
  PCMCIA_DEF_MEMEND* = 0xFFFFFF
  PCMCIA_DEF_MEMLEN* = 0x001000
  PCMCIA_DEF_MIN_REGION* = 0x010000
  PCI_OPTIONS_USE_BIOS* = 1
  PCI_OPTIONS_USE_IRQ_STEERING* = 2
  PCI_FLAG_NO_VIDEO_IRQ* = 0x0001
  PCI_FLAG_PCMCIA_WANT_IRQ* = 0x0002
  PCI_FLAG_DUAL_IDE* = 0x0004
  PCI_FLAG_NO_ENUM_AT_ALL* = 0x0008
  PCI_FLAG_ENUM_NO_RESOURCE* = 0x0010
  PCI_FLAG_NEED_DWORD_ACCESS* = 0x0020
  PCI_FLAG_SINGLE_FUNCTION* = 0x0040
  PCI_FLAG_ALWAYS_ENABLED* = 0x0080
  PCI_FLAG_IS_IDE* = 0x0100
  PCI_FLAG_IS_VIDEO* = 0x0200
  PCI_FLAG_FAIL_START* = 0x0400
  REGSTR_VAL_MAX_HCID_LEN* = 1024
  REGDF_NOTDETIO* = 0x00000001
  REGDF_NOTDETMEM* = 0x00000002
  REGDF_NOTDETIRQ* = 0x00000004
  REGDF_NOTDETDMA* = 0x00000008
  REGDF_NOTDETALL* = REGDF_NOTDETIO or REGDF_NOTDETMEM or REGDF_NOTDETIRQ or REGDF_NOTDETDMA
  REGDF_NEEDFULLCONFIG* = 0x00000010
  REGDF_GENFORCEDCONFIG* = 0x00000020
  REGDF_NODETCONFIG* = 0x00008000
  REGDF_CONFLICTIO* = 0x00010000
  REGDF_CONFLICTMEM* = 0x00020000
  REGDF_CONFLICTIRQ* = 0x00040000
  REGDF_CONFLICTDMA* = 0x00080000
  REGDF_CONFLICTALL* = REGDF_CONFLICTIO or REGDF_CONFLICTMEM or REGDF_CONFLICTIRQ or REGDF_CONFLICTDMA
  REGDF_MAPIRQ2TO9* = 0x00100000
  REGDF_NOTVERIFIED* = 0x80000000'i32
  CONFIGFLAG_DISABLED* = 0x0001
  CONFIGFLAG_REMOVED* = 0x0002
  CONFIGFLAG_MANUAL_INSTALL* = 0x0004
  CONFIGFLAG_IGNORE_BOOT_LC* = 0x0008
  CONFIGFLAG_NET_BOOT* = 0x0010
  CONFIGFLAG_REINSTALL* = 0x0020
  CONFIGFLAG_FAILEDINSTALL* = 0x0040
  CONFIGFLAG_CANTSTOPACHILD* = 0x0080
  CONFIGFLAG_OKREMOVEROM* = 0x0100
  CONFIGFLAG_NOREMOVEEXIT* = 0x0200
  CSCONFIGFLAG_DISABLED* = 1
  CSCONFIGFLAG_DO_NOT_CREATE* = 2
  CSCONFIGFLAG_DO_NOT_START* = 4
  CSCONFIGFLAG_BITS* = 7
  DMSTATEFLAG_APPLYTOALL* = 1
  NUM_RESOURCE_MAP* = 256
  MF_FLAGS_EVEN_IF_NO_RESOURCE* = 1
  MF_FLAGS_NO_CREATE_IF_NO_RESOURCE* = 2
  MF_FLAGS_FILL_IN_UNKNOWN_RESOURCE* = 4
  MF_FLAGS_CREATE_BUT_NO_SHOW_DISABLED* = 8
  EISAFLAG_NO_IO_MERGE* = 1
  EISAFLAG_SLOT_IO_FIRST* = 2
  EISA_NO_MAX_FUNCTION* = 0xFF
  NUM_EISA_RANGES* = 4
  APMMENUSUSPEND_DISABLED* = 0
  APMMENUSUSPEND_ENABLED* = 1
  APMMENUSUSPEND_UNDOCKED* = 2
  APMMENUSUSPEND_NOCHANGE* = 128
  REGSTR_KEY_ISAENUM* = "ISAPnP"
  REGSTR_KEY_EISAENUM* = "EISA"
  REGSTR_VAL_EISA_RANGES* = "EISARanges"
  REGSTR_VAL_EISA_FUNCTIONS* = "EISAFunctions"
  REGSTR_VAL_EISA_FUNCTIONS_MASK* = "EISAFunctionsMask"
  REGSTR_VAL_EISA_FLAGS* = "EISAFlags"
  REGSTR_VAL_EISA_SIMULATE_INT15* = "EISASimulateInt15"
  REGSTR_KEY_CLASS* = r"Class"
  REGSTR_KEY_CONFIG* = r"Config"
  REGSTR_KEY_ENUM* = r"Enum"
  REGSTR_KEY_ROOTENUM* = r"Root"
  REGSTR_KEY_BIOSENUM* = r"BIOS"
  REGSTR_KEY_PCMCIAENUM* = r"PCMCIA"
  REGSTR_KEY_PCIENUM* = r"PCI"
  REGSTR_KEY_LOGCONFIG* = r"LogConfig"
  REGSTR_KEY_SYSTEMBOARD* = r" * PNP0C01"
  REGSTR_KEY_APM* = r" * PNP0C05"
  REGSTR_KEY_INIUPDATE* = r"IniUpdate"
  REG_KEY_INSTDEV* = r"Installed"
  REGSTR_KEY_DOSOPTCDROM* = r"CD-ROM"
  REGSTR_KEY_DOSOPTMOUSE* = r"MOUSE"
  REGSTR_DEFAULT_INSTANCE* = r"0000"
  REGSTR_PATH_MOTHERBOARD* = REGSTR_KEY_SYSTEMBOARD & r"\" & REGSTR_DEFAULT_INSTANCE
  REGSTR_PATH_SETUP* = r"Software\Microsoft\Windows\CurrentVersion"
  REGSTR_PATH_PIFCONVERT* = r"Software\Microsoft\Windows\CurrentVersion\PIFConvert"
  REGSTR_PATH_MSDOSOPTS* = r"Software\Microsoft\Windows\CurrentVersion\MS-DOSOptions"
  REGSTR_PATH_MSDOSEMU* = r"Software\Microsoft\Windows\CurrentVersion\MS-DOS Emulation"
  REGSTR_PATH_NEWDOSBOX* = r"Software\Microsoft\Windows\CurrentVersion\MS-DOS Emulation\AppCompat"
  REGSTR_PATH_RUNONCE* = r"Software\Microsoft\Windows\CurrentVersion\RunOnce"
  REGSTR_PATH_RUN* = r"Software\Microsoft\Windows\CurrentVersion\Run"
  REGSTR_PATH_RUNSERVICESONCE* = r"Software\Microsoft\Windows\CurrentVersion\RunServicesOnce"
  REGSTR_PATH_RUNSERVICES* = r"Software\Microsoft\Windows\CurrentVersion\RunServices"
  REGSTR_PATH_EXPLORER* = r"Software\Microsoft\Windows\CurrentVersion\Explorer"
  REGSTR_PATH_DETECT* = r"Software\Microsoft\Windows\CurrentVersion\Detect"
  REGSTR_PATH_APPPATHS* = r"Software\Microsoft\Windows\CurrentVersion\App Paths"
  REGSTR_PATH_UNINSTALL* = r"Software\Microsoft\Windows\CurrentVersion\Uninstall"
  REGSTR_PATH_REALMODENET* = r"Software\Microsoft\Windows\CurrentVersion\Network\Real Mode Net"
  REGSTR_PATH_NETEQUIV* = r"Software\Microsoft\Windows\CurrentVersion\Network\Equivalent"
  REGSTR_PATH_CVNETWORK* = r"Software\Microsoft\Windows\CurrentVersion\Network"
  REGSTR_PATH_IDCONFIGDB* = r"System\CurrentControlSet\Control\IDConfigDB"
  REGSTR_PATH_CLASS* = r"System\CurrentControlSet\Services\Class"
  REGSTR_PATH_DISPLAYSETTINGS* = r"Display\Settings"
  REGSTR_PATH_FONTS* = r"Display\Fonts"
  REGSTR_PATH_ENUM* = r"Enum"
  REGSTR_PATH_ROOT* = r"Enum\Root"
  REGSTR_PATH_SERVICES* = r"System\CurrentControlSet\Services"
  REGSTR_PATH_VXD* = r"System\CurrentControlSet\Services\VxD"
  REGSTR_PATH_IOS* = r"System\CurrentControlSet\Services\VxD\IOS"
  REGSTR_PATH_VMM* = r"System\CurrentControlSet\Services\VxD\VMM"
  REGSTR_PATH_VPOWERD* = r"System\CurrentControlSet\Services\VxD\VPOWERD"
  REGSTR_PATH_VNETSUP* = r"System\CurrentControlSet\Services\VxD\VNETSUP"
  REGSTR_PATH_NWREDIR* = r"System\CurrentControlSet\Services\VxD\NWREDIR"
  REGSTR_PATH_NCPSERVER* = r"System\CurrentControlSet\Services\NcpServer\Parameters"
  REGSTR_PATH_IOARB* = r"System\CurrentControlSet\Services\Arbitrators\IOArb"
  REGSTR_PATH_ADDRARB* = r"System\CurrentControlSet\Services\Arbitrators\AddrArb"
  REGSTR_PATH_DMAARB* = r"System\CurrentControlSet\Services\Arbitrators\DMAArb"
  REGSTR_PATH_IRQARB* = r"System\CurrentControlSet\Services\Arbitrators\IRQArb"
  REGSTR_PATH_CODEPAGE* = r"System\CurrentControlSet\Control\Nls\Codepage"
  REGSTR_PATH_FILESYSTEM* = r"System\CurrentControlSet\Control\FileSystem"
  REGSTR_PATH_FILESYSTEM_NOVOLTRACK* = r"System\CurrentControlSet\Control\FileSystem\NoVolTrack"
  REGSTR_PATH_CDFS* = r"System\CurrentControlSet\Control\FileSystem\CDFS"
  REGSTR_PATH_WINBOOT* = r"System\CurrentControlSet\Control\WinBoot"
  REGSTR_PATH_INSTALLEDFILES* = r"System\CurrentControlSet\Control\InstalledFiles"
  REGSTR_PATH_VMM32FILES* = r"System\CurrentControlSet\Control\VMM32Files"
  REGSTR_VAL_BITSPERPIXEL* = r"BitsPerPixel"
  REGSTR_VAL_RESOLUTION* = r"Resolution"
  REGSTR_VAL_DPILOGICALX* = r"DPILogicalX"
  REGSTR_VAL_DPILOGICALY* = r"DPILogicalY"
  REGSTR_VAL_DPIPHYSICALX* = r"DPIPhysicalX"
  REGSTR_VAL_DPIPHYSICALY* = r"DPIPhysicalY"
  REGSTR_VAL_REFRESHRATE* = r"RefreshRate"
  REGSTR_VAL_DISPLAYFLAGS* = r"DisplayFlags"
  REGSTR_PATH_CONTROLPANEL* = r"Control Panel"
  REGSTR_PATH_CONTROLSFOLDER* = r"Software\Microsoft\Windows\CurrentVersion\Controls Folder"
  REGSTR_VAL_DOSCP* = r"OEMCP"
  REGSTR_VAL_WINCP* = r"ACP"
  REGSTR_PATH_DYNA_ENUM* = r"Config Manager\Enum"
  REGSTR_VAL_HARDWARE_KEY* = r"HardWareKey"
  REGSTR_VAL_ALLOCATION* = r"Allocation"
  REGSTR_VAL_PROBLEM* = r"Problem"
  REGSTR_VAL_STATUS* = r"Status"
  REGSTR_VAL_DONTUSEMEM* = r"DontAllocLastMem"
  REGSTR_VAL_SYSTEMROOT* = r"SystemRoot"
  REGSTR_VAL_BOOTCOUNT* = r"BootCount"
  REGSTR_VAL_REALNETSTART* = r"RealNetStart"
  REGSTR_VAL_MEDIA* = r"MediaPath"
  REGSTR_VAL_CONFIG* = r"ConfigPath"
  REGSTR_VAL_DEVICEPATH* = r"DevicePath"
  REGSTR_VAL_SRCPATH* = r"SourcePath"
  REGSTR_VAL_OLDWINDIR* = r"OldWinDir"
  REGSTR_VAL_SETUPFLAGS* = r"SetupFlags"
  REGSTR_VAL_REGOWNER* = r"RegisteredOwner"
  REGSTR_VAL_REGORGANIZATION* = r"RegisteredOrganization"
  REGSTR_VAL_LICENSINGINFO* = r"LicensingInfo"
  REGSTR_VAL_OLDMSDOSVER* = r"OldMSDOSVer"
  REGSTR_VAL_FIRSTINSTALLDATETIME* = r"FirstInstallDateTime"
  REGSTR_VAL_INSTALLTYPE* = r"InstallType"
  REGSTR_VAL_WRAPPER* = r"Wrapper"
  REGSTR_KEY_SETUP* = r"\Setup"
  REGSTR_VAL_BOOTDIR* = r"BootDir"
  REGSTR_VAL_WINBOOTDIR* = r"WinbootDir"
  REGSTR_VAL_WINDIR* = r"WinDir"
  REGSTR_VAL_APPINSTPATH* = r"AppInstallPath"
  REGSTR_PATH_EBD* = REGSTR_PATH_SETUP & REGSTR_KEY_SETUP & r"\EBD"
  REGSTR_KEY_EBDFILESLOCAL* = r"EBDFilesLocale"
  REGSTR_KEY_EBDFILESKEYBOARD* = r"EBDFilesKeyboard"
  REGSTR_KEY_EBDAUTOEXECBATLOCAL* = r"EBDAutoexecBatLocale"
  REGSTR_KEY_EBDAUTOEXECBATKEYBOARD* = r"EBDAutoexecBatKeyboard"
  REGSTR_KEY_EBDCONFIGSYSLOCAL* = r"EBDConfigSysLocale"
  REGSTR_KEY_EBDCONFIGSYSKEYBOARD* = r"EBDConfigSysKeyboard"
  REGSTR_VAL_MSDOSMODE* = r"MSDOSMode"
  REGSTR_VAL_MSDOSMODEDISCARD* = r"Discard"
  REGSTR_VAL_DOSOPTGLOBALFLAGS* = r"GlobalFlags"
  REGSTR_VAL_DOSOPTFLAGS* = r"Flags"
  REGSTR_VAL_OPTORDER* = r"Order"
  REGSTR_VAL_CONFIGSYS* = r"Config.Sys"
  REGSTR_VAL_AUTOEXEC* = r"Autoexec.Bat"
  REGSTR_VAL_STDDOSOPTION* = r"StdOption"
  REGSTR_VAL_DOSOPTTIP* = r"TipText"
  REGSTR_VAL_DOSPAGER* = r"DOSPager"
  REGSTR_VAL_VXDGROUPS* = r"VXDGroups"
  REGSTR_VAL_VPOWERDFLAGS* = r"Flags"
  REGSTR_VAL_WORKGROUP* = r"Workgroup"
  REGSTR_VAL_DIRECTHOST* = r"DirectHost"
  REGSTR_VAL_FILESHARING* = r"FileSharing"
  REGSTR_VAL_PRINTSHARING* = r"PrintSharing"
  REGSTR_VAL_FIRSTNETDRIVE* = r"FirstNetworkDrive"
  REGSTR_VAL_MAXCONNECTIONS* = r"MaxConnections"
  REGSTR_VAL_APISUPPORT* = r"APISupport"
  REGSTR_VAL_MAXRETRY* = r"MaxRetry"
  REGSTR_VAL_MINRETRY* = r"MinRetry"
  REGSTR_VAL_SUPPORTLFN* = r"SupportLFN"
  REGSTR_VAL_SUPPORTBURST* = r"SupportBurst"
  REGSTR_VAL_SUPPORTTUNNELLING* = r"SupportTunnelling"
  REGSTR_VAL_FULLTRACE* = r"FullTrace"
  REGSTR_VAL_READCACHING* = r"ReadCaching"
  REGSTR_VAL_SHOWDOTS* = r"ShowDots"
  REGSTR_VAL_GAPTIME* = r"GapTime"
  REGSTR_VAL_SEARCHMODE* = r"SearchMode"
  REGSTR_VAL_SHELLVERSION* = r"ShellVersion"
  REGSTR_VAL_MAXLIP* = r"MaxLIP"
  REGSTR_VAL_PRESERVECASE* = r"PreserveCase"
  REGSTR_VAL_OPTIMIZESFN* = r"OptimizeSFN"
  REGSTR_VAL_NCP_BROWSEMASTER* = r"BrowseMaster"
  REGSTR_VAL_NCP_USEPEERBROWSING* = r"Use_PeerBrowsing"
  REGSTR_VAL_NCP_USESAP* = r"Use_Sap"
  REGSTR_VAL_WIN31FILESYSTEM* = r"Win31FileSystem"
  REGSTR_VAL_PRESERVELONGNAMES* = r"PreserveLongNames"
  REGSTR_VAL_DRIVEWRITEBEHIND* = r"DriveWriteBehind"
  REGSTR_VAL_ASYNCFILECOMMIT* = r"AsyncFileCommit"
  REGSTR_VAL_PATHCACHECOUNT* = r"PathCache"
  REGSTR_VAL_NAMECACHECOUNT* = r"NameCache"
  REGSTR_VAL_CONTIGFILEALLOC* = r"ContigFileAllocSize"
  REGSTR_VAL_VOLIDLETIMEOUT* = r"VolumeIdleTimeout"
  REGSTR_VAL_BUFFIDLETIMEOUT* = r"BufferIdleTimeout"
  REGSTR_VAL_BUFFAGETIMEOUT* = r"BufferAgeTimeout"
  REGSTR_VAL_NAMENUMERICTAIL* = r"NameNumericTail"
  REGSTR_VAL_READAHEADTHRESHOLD* = r"ReadAheadThreshold"
  REGSTR_VAL_DOUBLEBUFFER* = r"DoubleBuffer"
  REGSTR_VAL_SOFTCOMPATMODE* = r"SoftCompatMode"
  REGSTR_VAL_DRIVESPINDOWN* = r"DriveSpinDown"
  REGSTR_VAL_FORCEPMIO* = r"ForcePMIO"
  REGSTR_VAL_FORCERMIO* = r"ForceRMIO"
  REGSTR_VAL_LASTBOOTPMDRVS* = r"LastBootPMDrvs"
  REGSTR_VAL_VIRTUALHDIRQ* = r"VirtualHDIRQ"
  REGSTR_VAL_SRVNAMECACHECOUNT* = r"ServerNameCacheMax"
  REGSTR_VAL_SRVNAMECACHE* = r"ServerNameCache"
  REGSTR_VAL_SRVNAMECACHENETPROV* = r"ServerNameCacheNumNets"
  REGSTR_VAL_AUTOMOUNT* = r"AutoMountDrives"
  REGSTR_VAL_COMPRESSIONMETHOD* = r"CompressionAlgorithm"
  REGSTR_VAL_COMPRESSIONTHRESHOLD* = r"CompressionThreshold"
  REGSTR_VAL_CDCACHESIZE* = r"CacheSize"
  REGSTR_VAL_CDPREFETCH* = r"Prefetch"
  REGSTR_VAL_CDPREFETCHTAIL* = r"PrefetchTail"
  REGSTR_VAL_CDRAWCACHE* = r"RawCache"
  REGSTR_VAL_CDEXTERRORS* = r"ExtendedErrors"
  REGSTR_VAL_CDSVDSENSE* = r"SVDSense"
  REGSTR_VAL_CDSHOWVERSIONS* = r"ShowVersions"
  REGSTR_VAL_CDCOMPATNAMES* = r"MSCDEXCompatNames"
  REGSTR_VAL_CDNOREADAHEAD* = r"NoReadAhead"
  REGSTR_VAL_SCSI* = r"SCSI\"
  REGSTR_VAL_ESDI* = r"ESDI\"
  REGSTR_VAL_FLOP* = r"FLOP\"
  REGSTR_VAL_DISK* = r"GenDisk"
  REGSTR_VAL_CDROM* = r"GenCD"
  REGSTR_VAL_TAPE* = r"TAPE"
  REGSTR_VAL_SCANNER* = r"SCANNER"
  REGSTR_VAL_FLOPPY* = r"FLOPPY"
  REGSTR_VAL_SCSITID* = r"SCSITargetID"
  REGSTR_VAL_SCSILUN* = r"SCSILUN"
  REGSTR_VAL_REVLEVEL* = r"RevisionLevel"
  REGSTR_VAL_PRODUCTID* = r"ProductId"
  REGSTR_VAL_PRODUCTTYPE* = r"ProductType"
  REGSTR_VAL_DEVTYPE* = r"DeviceType"
  REGSTR_VAL_REMOVABLE* = r"Removable"
  REGSTR_VAL_CURDRVLET* = r"CurrentDriveLetterAssignment"
  REGSTR_VAL_USRDRVLET* = r"UserDriveLetterAssignment"
  REGSTR_VAL_SYNCDATAXFER* = r"SyncDataXfer"
  REGSTR_VAL_AUTOINSNOTE* = r"AutoInsertNotification"
  REGSTR_VAL_DISCONNECT* = r"Disconnect"
  REGSTR_VAL_INT13* = r"Int13"
  REGSTR_VAL_PMODE_INT13* = r"PModeInt13"
  REGSTR_VAL_USERSETTINGS* = r"AdapterSettings"
  REGSTR_VAL_NOIDE* = r"NoIDE"
  REGSTR_VAL_DISKCLASSNAME* = r"DiskDrive"
  REGSTR_VAL_CDROMCLASSNAME* = r"CDROM"
  REGSTR_VAL_FORCELOAD* = r"ForceLoadPD"
  REGSTR_VAL_FORCEFIFO* = r"ForceFIFO"
  REGSTR_VAL_FORCECL* = r"ForceChangeLine"
  REGSTR_VAL_NOUSECLASS* = r"NoUseClass"
  REGSTR_VAL_NOINSTALLCLASS* = r"NoInstallClass"
  REGSTR_VAL_NODISPLAYCLASS* = r"NoDisplayClass"
  REGSTR_VAL_SILENTINSTALL* = r"SilentInstall"
  REGSTR_KEY_PCMCIA_CLASS* = r"PCMCIA"
  REGSTR_KEY_SCSI_CLASS* = r"SCSIAdapter"
  REGSTR_KEY_PORTS_CLASS* = r"ports"
  REGSTR_KEY_MEDIA_CLASS* = r"MEDIA"
  REGSTR_KEY_DISPLAY_CLASS* = r"Display"
  REGSTR_KEY_KEYBOARD_CLASS* = r"Keyboard"
  REGSTR_KEY_MOUSE_CLASS* = r"Mouse"
  REGSTR_KEY_MONITOR_CLASS* = r"Monitor"
  REGSTR_VAL_PCMCIA_OPT* = r"Options"
  REGSTR_VAL_PCMCIA_MEM* = r"Memory"
  REGSTR_VAL_PCMCIA_ALLOC* = r"AllocMemWin"
  REGSTR_VAL_PCMCIA_ATAD* = r"ATADelay"
  REGSTR_VAL_PCMCIA_SIZ* = r"MinRegionSize"
  REGSTR_VAL_P1284MDL* = r"Model"
  REGSTR_VAL_P1284MFG* = r"Manufacturer"
  REGSTR_VAL_ISAPNP* = r"ISAPNP"
  REGSTR_VAL_ISAPNP_RDP_OVERRIDE* = r"RDPOverRide"
  REGSTR_VAL_PCI* = r"PCI"
  REGSTR_PCI_OPTIONS* = r"Options"
  REGSTR_PCI_DUAL_IDE* = r"PCIDualIDE"
  REGSTR_KEY_CRASHES* = r"Crashes"
  REGSTR_KEY_DANGERS* = r"Dangers"
  REGSTR_KEY_DETMODVARS* = r"DetModVars"
  REGSTR_KEY_NDISINFO* = r"NDISInfo"
  REGSTR_VAL_PROTINIPATH* = r"ProtIniPath"
  REGSTR_VAL_RESOURCES* = r"Resources"
  REGSTR_VAL_CRASHFUNCS* = r"CrashFuncs"
  REGSTR_VAL_CLASS* = r"Class"
  REGSTR_VAL_DEVDESC* = r"DeviceDesc"
  REGSTR_VAL_BOOTCONFIG* = r"BootConfig"
  REGSTR_VAL_DETFUNC* = r"DetFunc"
  REGSTR_VAL_DETFLAGS* = r"DetFlags"
  REGSTR_VAL_COMPATIBLEIDS* = r"CompatibleIDs"
  REGSTR_VAL_DETCONFIG* = r"DetConfig"
  REGSTR_VAL_VERIFYKEY* = r"VerifyKey"
  REGSTR_VAL_COMINFO* = r"ComInfo"
  REGSTR_VAL_INFNAME* = r"InfName"
  REGSTR_VAL_CARDSPECIFIC* = r"CardSpecific"
  REGSTR_VAL_NETOSTYPE* = r"NetOSType"
  REGSTR_DATA_NETOS_NDIS* = r"NDIS"
  REGSTR_DATA_NETOS_ODI* = r"ODI"
  REGSTR_DATA_NETOS_IPX* = r"IPX"
  REGSTR_VAL_MFG* = r"Mfg"
  REGSTR_VAL_SCAN_ONLY_FIRST* = r"ScanOnlyFirstDrive"
  REGSTR_VAL_SHARE_IRQ* = r"ForceIRQSharing"
  REGSTR_VAL_NONSTANDARD_ATAPI* = r"NonStandardATAPI"
  REGSTR_VAL_IDE_FORCE_SERIALIZE* = r"ForceSerialization"
  REGSTR_VAL_HWREV* = r"HWRevision"
  REGSTR_VAL_ENABLEINTS* = r"EnableInts"
  REGSTR_VAL_APMBIOSVER* = r"APMBiosVer"
  REGSTR_VAL_APMFLAGS* = r"APMFlags"
  REGSTR_VAL_SLSUPPORT* = r"SLSupport"
  REGSTR_VAL_MACHINETYPE* = r"MachineType"
  REGSTR_VAL_SETUPMACHINETYPE* = r"SetupMachineType"
  REGSTR_MACHTYPE_UNKNOWN* = r"Unknown"
  REGSTR_MACHTYPE_IBMPC* = r"IBM PC"
  REGSTR_MACHTYPE_IBMPCJR* = r"IBM PCjr"
  REGSTR_MACHTYPE_IBMPCCONV* = r"IBM PC Convertible"
  REGSTR_MACHTYPE_IBMPCXT* = r"IBM PC/XT"
  REGSTR_MACHTYPE_IBMPCXT_286* = r"IBM PC/XT 286"
  REGSTR_MACHTYPE_IBMPCAT* = r"IBM PC/AT"
  REGSTR_MACHTYPE_IBMPS2_25* = r"IBM PS/2-25"
  REGSTR_MACHTYPE_IBMPS2_30_286* = r"IBM PS/2-30 286"
  REGSTR_MACHTYPE_IBMPS2_30* = r"IBM PS/2-30"
  REGSTR_MACHTYPE_IBMPS2_50* = r"IBM PS/2-50"
  REGSTR_MACHTYPE_IBMPS2_50Z* = r"IBM PS/2-50Z"
  REGSTR_MACHTYPE_IBMPS2_55SX* = r"IBM PS/2-55SX"
  REGSTR_MACHTYPE_IBMPS2_60* = r"IBM PS/2-60"
  REGSTR_MACHTYPE_IBMPS2_65SX* = r"IBM PS/2-65SX"
  REGSTR_MACHTYPE_IBMPS2_70* = r"IBM PS/2-70"
  REGSTR_MACHTYPE_IBMPS2_P70* = r"IBM PS/2-P70"
  REGSTR_MACHTYPE_IBMPS2_70_80* = r"IBM PS/2-70/80"
  REGSTR_MACHTYPE_IBMPS2_80* = r"IBM PS/2-80"
  REGSTR_MACHTYPE_IBMPS2_90* = r"IBM PS/2-90"
  REGSTR_MACHTYPE_IBMPS1* = r"IBM PS/1"
  REGSTR_MACHTYPE_PHOENIX_PCAT* = r"Phoenix PC/AT Compatible"
  REGSTR_MACHTYPE_HP_VECTRA* = r"HP Vectra"
  REGSTR_MACHTYPE_ATT_PC* = r"AT&T PC"
  REGSTR_MACHTYPE_ZENITH_PC* = r"Zenith PC"
  REGSTR_VAL_APMMENUSUSPEND* = r"APMMenuSuspend"
  REGSTR_VAL_BUSTYPE* = r"BusType"
  REGSTR_VAL_CPU* = r"CPU"
  REGSTR_VAL_NDP* = r"NDP"
  REGSTR_VAL_PNPBIOSVER* = r"PnPBIOSVer"
  REGSTR_VAL_PNPSTRUCOFFSET* = r"PnPStrucOffset"
  REGSTR_VAL_PCIBIOSVER* = r"PCIBIOSVer"
  REGSTR_VAL_HWMECHANISM* = r"HWMechanism"
  REGSTR_VAL_LASTPCIBUSNUM* = r"LastPCIBusNum"
  REGSTR_VAL_CONVMEM* = r"ConvMem"
  REGSTR_VAL_EXTMEM* = r"ExtMem"
  REGSTR_VAL_COMPUTERNAME* = r"ComputerName"
  REGSTR_VAL_BIOSNAME* = r"BIOSName"
  REGSTR_VAL_BIOSVERSION* = r"BIOSVersion"
  REGSTR_VAL_BIOSDATE* = r"BIOSDate"
  REGSTR_VAL_MODEL* = r"Model"
  REGSTR_VAL_SUBMODEL* = r"Submodel"
  REGSTR_VAL_REVISION* = r"Revision"
  REGSTR_VAL_FIFODEPTH* = r"FIFODepth"
  REGSTR_VAL_RDINTTHRESHOLD* = r"RDIntThreshold"
  REGSTR_VAL_WRINTTHRESHOLD* = r"WRIntThreshold"
  REGSTR_VAL_PRIORITY* = r"Priority"
  REGSTR_VAL_DRIVER* = r"Driver"
  REGSTR_VAL_FUNCDESC* = r"FunctionDesc"
  REGSTR_VAL_FORCEDCONFIG* = r"ForcedConfig"
  REGSTR_VAL_CONFIGFLAGS* = r"ConfigFlags"
  REGSTR_VAL_CSCONFIGFLAGS* = r"CSConfigFlags"
  REGSTR_VAL_ROOT_DEVNODE* = r"HTREE\ROOT\0"
  REGSTR_VAL_RESERVED_DEVNODE* = r"HTREE\RESERVED\0"
  REGSTR_PATH_READDATAPORT* = REGSTR_KEY_ISAENUM & r"\ReadDataPort\0"
  REGSTR_PATH_MULTI_FUNCTION* = r"MF"
  REGSTR_VAL_RESOURCE_MAP* = r"ResourceMap"
  REGSTR_PATH_CHILD_PREFIX* = r"Child"
  REGSTR_VAL_MF_FLAGS* = r"MFFlags"
  REGSTR_VAL_DRVDESC* = r"DriverDesc"
  REGSTR_VAL_DEVLOADER* = r"DevLoader"
  REGSTR_VAL_STATICVXD* = r"StaticVxD"
  REGSTR_VAL_PROPERTIES* = r"Properties"
  REGSTR_VAL_MANUFACTURER* = r"Manufacturer"
  REGSTR_VAL_EXISTS* = r"Exists"
  REGSTR_VAL_CMENUMFLAGS* = r"CMEnumFlags"
  REGSTR_VAL_CMDRIVFLAGS* = r"CMDrivFlags"
  REGSTR_VAL_ENUMERATOR* = r"Enumerator"
  REGSTR_VAL_DEVICEDRIVER* = r"DeviceDriver"
  REGSTR_VAL_PORTNAME* = r"PortName"
  REGSTR_VAL_INFPATH* = r"InfPath"
  REGSTR_VAL_INFSECTION* = r"InfSection"
  REGSTR_VAL_POLLING* = r"Polling"
  REGSTR_VAL_DONTLOADIFCONFLICT* = r"DontLoadIfConflict"
  REGSTR_VAL_PORTSUBCLASS* = r"PortSubClass"
  REGSTR_VAL_NETCLEAN* = r"NetClean"
  REGSTR_VAL_IDE_NO_SERIALIZE* = r"IDENoSerialize"
  REGSTR_VAL_NOCMOSORFDPT* = r"NoCMOSorFDPT"
  REGSTR_VAL_COMVERIFYBASE* = r"COMVerifyBase"
  REGSTR_KEY_OVERRIDE* = r"Override"
  REGSTR_VAL_CONFIGMG* = r"CONFIGMG"
  REGSTR_VAL_SYSDM* = r"SysDM"
  REGSTR_VAL_SYSDMFUNC* = r"SysDMFunc"
  REGSTR_VAL_PRIVATE* = r"Private"
  REGSTR_VAL_PRIVATEFUNC* = r"PrivateFunc"
  REGSTR_VAL_DETECT* = r"Detect"
  REGSTR_VAL_DETECTFUNC* = r"DetectFunc"
  REGSTR_VAL_ASKFORCONFIG* = r"AskForConfig"
  REGSTR_VAL_ASKFORCONFIGFUNC* = r"AskForConfigFunc"
  REGSTR_VAL_WAITFORUNDOCK* = r"WaitForUndock"
  REGSTR_VAL_WAITFORUNDOCKFUNC* = r"WaitForUndockFunc"
  REGSTR_VAL_REMOVEROMOKAY* = r"RemoveRomOkay"
  REGSTR_VAL_REMOVEROMOKAYFUNC* = r"RemoveRomOkayFunc"
  REGSTR_VAL_CURCONFIG* = r"CurrentConfig"
  REGSTR_VAL_FRIENDLYNAME* = r"FriendlyName"
  REGSTR_VAL_CURRENTCONFIG* = r"CurrentConfig"
  REGSTR_VAL_MAP* = r"Map"
  REGSTR_VAL_ID* = r"CurrentID"
  REGSTR_VAL_DOCKED* = r"CurrentDockedState"
  REGSTR_VAL_CHECKSUM* = r"CurrentChecksum"
  REGSTR_VAL_HWDETECT* = r"HardwareDetect"
  REGSTR_VAL_INHIBITRESULTS* = r"InhibitResults"
  REGSTR_VAL_PROFILEFLAGS* = r"ProfileFlags"
  REGSTR_KEY_PCMCIA* = r"PCMCIA\"
  REGSTR_KEY_PCUNKNOWN* = r"UNKNOWN_MANUFACTURER"
  REGSTR_VAL_PCSSDRIVER* = r"Driver"
  REGSTR_KEY_PCMTD* = r"MTD-"
  REGSTR_VAL_PCMTDRIVER* = r"MTD"
  REGSTR_VAL_HARDWAREID* = r"HardwareID"
  REGSTR_VAL_INSTALLER* = r"Installer"
  REGSTR_VAL_INSICON* = r"Icon"
  REGSTR_VAL_ENUMPROPPAGES* = r"EnumPropPages"
  REGSTR_VAL_BASICPROPERTIES* = r"BasicProperties"
  REGSTR_VAL_PRIVATEPROBLEM* = r"PrivateProblem"
  REGSTR_KEY_CURRENT* = r"Current"
  REGSTR_KEY_DEFAULT* = r"Default"
  REGSTR_KEY_MODES* = r"Modes"
  REGSTR_VAL_MODE* = r"Mode"
  REGSTR_VAL_BPP* = r"BPP"
  REGSTR_VAL_HRES* = r"HRes"
  REGSTR_VAL_VRES* = r"VRes"
  REGSTR_VAL_FONTSIZE* = r"FontSize"
  REGSTR_VAL_DRV* = r"drv"
  REGSTR_VAL_GRB* = r"grb"
  REGSTR_VAL_VDD* = r"vdd"
  REGSTR_VAL_VER* = r"Ver"
  REGSTR_VAL_MAXRES* = r"MaxResolution"
  REGSTR_VAL_DPMS* = r"DPMS"
  REGSTR_VAL_RESUMERESET* = r"ResumeReset"
  REGSTR_VAL_DESCRIPTION* = r"Description"
  REGSTR_KEY_SYSTEM* = r"System"
  REGSTR_KEY_USER* = r"User"
  REGSTR_VAL_DPI* = r"dpi"
  REGSTR_VAL_PCICOPTIONS* = r"PCICOptions"
  REGSTR_VAL_PCICIRQMAP* = r"PCICIRQMap"
  REGSTR_PATH_APPEARANCE* = r"Control Panel\Appearance"
  REGSTR_PATH_LOOKSCHEMES* = r"Control Panel\Appearance\Schemes"
  REGSTR_VAL_CUSTOMCOLORS* = r"CustomColors"
  REGSTR_PATH_SCREENSAVE* = r"Control Panel\Desktop"
  REGSTR_VALUE_USESCRPASSWORD* = r"ScreenSaveUsePassword"
  REGSTR_VALUE_SCRPASSWORD* = r"ScreenSave_Data"
  REGSTR_VALUE_LOWPOWERTIMEOUT* = r"ScreenSaveLowPowerTimeout"
  REGSTR_VALUE_POWEROFFTIMEOUT* = r"ScreenSavePowerOffTimeout"
  REGSTR_VALUE_LOWPOWERACTIVE* = r"ScreenSaveLowPowerActive"
  REGSTR_VALUE_POWEROFFACTIVE* = r"ScreenSavePowerOffActive"
  REGSTR_PATH_WINDOWSAPPLETS* = r"Software\Microsoft\Windows\CurrentVersion\Applets"
  REGSTR_PATH_SYSTRAY* = r"Software\Microsoft\Windows\CurrentVersion\Applets\SysTray"
  REGSTR_VAL_SYSTRAYSVCS* = r"Services"
  REGSTR_VAL_SYSTRAYBATFLAGS* = r"PowerFlags"
  REGSTR_VAL_SYSTRAYPCCARDFLAGS* = r"PCMCIAFlags"
  REGSTR_PATH_NETWORK_USERSETTINGS* = r"Network"
  REGSTR_KEY_NETWORK_PERSISTENT* = r"\Persistent"
  REGSTR_KEY_NETWORK_RECENT* = r"\Recent"
  REGSTR_VAL_REMOTE_PATH* = r"RemotePath"
  REGSTR_VAL_USER_NAME* = r"UserName"
  REGSTR_VAL_PROVIDER_NAME* = r"ProviderName"
  REGSTR_VAL_CONNECTION_TYPE* = r"ConnectionType"
  REGSTR_VAL_UPGRADE* = r"Upgrade"
  REGSTR_KEY_LOGON* = r"\Logon"
  REGSTR_VAL_MUSTBEVALIDATED* = r"MustBeValidated"
  REGSTR_VAL_RUNLOGINSCRIPT* = r"ProcessLoginScript"
  REGSTR_KEY_NETWORKPROVIDER* = r"\NetworkProvider"
  REGSTR_PATH_NW32NETPROVIDER* = REGSTR_PATH_SERVICES & r"\NWNP32" & REGSTR_KEY_NETWORKPROVIDER
  REGSTR_PATH_MS32NETPROVIDER* = REGSTR_PATH_SERVICES & r"\MSNP32" & REGSTR_KEY_NETWORKPROVIDER
  REGSTR_VAL_AUTHENT_AGENT* = r"AuthenticatingAgent"
  REGSTR_VAL_PREFREDIR* = r"PreferredRedir"
  REGSTR_VAL_AUTOSTART* = r"AutoStart"
  REGSTR_VAL_AUTOLOGON* = r"AutoLogon"
  REGSTR_VAL_NETCARD* = r"Netcard"
  REGSTR_VAL_TRANSPORT* = r"Transport"
  REGSTR_VAL_DYNAMIC* = r"Dynamic"
  REGSTR_VAL_TRANSITION* = r"Transition"
  REGSTR_VAL_STATICDRIVE* = r"StaticDrive"
  REGSTR_VAL_LOADHI* = r"LoadHi"
  REGSTR_VAL_LOADRMDRIVERS* = r"LoadRMDrivers"
  REGSTR_VAL_SETUPN* = r"SetupN"
  REGSTR_VAL_SETUPNPATH* = r"SetupNPath"
  REGSTR_VAL_WRKGRP_FORCEMAPPING* = r"WrkgrpForceMapping"
  REGSTR_VAL_WRKGRP_REQUIRED* = r"WrkgrpRequired"
  REGSTR_PATH_CURRENT_CONTROL_SET* = r"System\CurrentControlSet\Control"
  REGSTR_VAL_CURRENT_USER* = r"Current User"
  REGSTR_PATH_PWDPROVIDER* = r"System\CurrentControlSet\Control\PwdProvider"
  REGSTR_VAL_PWDPROVIDER_PATH* = r"ProviderPath"
  REGSTR_VAL_PWDPROVIDER_DESC* = r"Description"
  REGSTR_VAL_PWDPROVIDER_CHANGEPWD* = r"ChangePassword"
  REGSTR_VAL_PWDPROVIDER_CHANGEPWDHWND* = r"ChangePasswordHwnd"
  REGSTR_VAL_PWDPROVIDER_GETPWDSTATUS* = r"GetPasswordStatus"
  REGSTR_VAL_PWDPROVIDER_ISNP* = r"NetworkProvider"
  REGSTR_VAL_PWDPROVIDER_CHANGEORDER* = r"ChangeOrder"
  REGSTR_PATH_POLICIES* = r"Software\Microsoft\Windows\CurrentVersion\Policies"
  REGSTR_PATH_UPDATE* = r"System\CurrentControlSet\Control\Update"
  REGSTR_VALUE_ENABLE* = r"Enable"
  REGSTR_VALUE_VERBOSE* = r"Verbose"
  REGSTR_VALUE_NETPATH* = r"NetworkPath"
  REGSTR_VALUE_DEFAULTLOC* = r"UseDefaultNetLocation"
  REGSTR_KEY_NETWORK* = r"Network"
  REGSTR_KEY_PRINTERS* = r"Printers"
  REGSTR_KEY_WINOLDAPP* = r"WinOldApp"
  REGSTR_VAL_NOFILESHARING* = r"NoFileSharing"
  REGSTR_VAL_NOPRINTSHARING* = r"NoPrintSharing"
  REGSTR_VAL_NOFILESHARINGCTRL* = r"NoFileSharingControl"
  REGSTR_VAL_NOPRINTSHARINGCTRL* = r"NoPrintSharingControl"
  REGSTR_VAL_HIDESHAREPWDS* = r"HideSharePwds"
  REGSTR_VAL_DISABLEPWDCACHING* = r"DisablePwdCaching"
  REGSTR_VAL_ALPHANUMPWDS* = r"AlphanumPwds"
  REGSTR_VAL_NETSETUP_DISABLE* = r"NoNetSetup"
  REGSTR_VAL_NETSETUP_NOCONFIGPAGE* = r"NoNetSetupConfigPage"
  REGSTR_VAL_NETSETUP_NOIDPAGE* = r"NoNetSetupIDPage"
  REGSTR_VAL_NETSETUP_NOSECURITYPAGE* = r"NoNetSetupSecurityPage"
  REGSTR_VAL_SYSTEMCPL_NOVIRTMEMPAGE* = r"NoVirtMemPage"
  REGSTR_VAL_SYSTEMCPL_NODEVMGRPAGE* = r"NoDevMgrPage"
  REGSTR_VAL_SYSTEMCPL_NOCONFIGPAGE* = r"NoConfigPage"
  REGSTR_VAL_SYSTEMCPL_NOFILESYSPAGE* = r"NoFileSysPage"
  REGSTR_VAL_DISPCPL_NODISPCPL* = r"NoDispCPL"
  REGSTR_VAL_DISPCPL_NOBACKGROUNDPAGE* = r"NoDispBackgroundPage"
  REGSTR_VAL_DISPCPL_NOSCRSAVPAGE* = r"NoDispScrSavPage"
  REGSTR_VAL_DISPCPL_NOAPPEARANCEPAGE* = r"NoDispAppearancePage"
  REGSTR_VAL_DISPCPL_NOSETTINGSPAGE* = r"NoDispSettingsPage"
  REGSTR_VAL_SECCPL_NOSECCPL* = r"NoSecCPL"
  REGSTR_VAL_SECCPL_NOPWDPAGE* = r"NoPwdPage"
  REGSTR_VAL_SECCPL_NOADMINPAGE* = r"NoAdminPage"
  REGSTR_VAL_SECCPL_NOPROFILEPAGE* = r"NoProfilePage"
  REGSTR_VAL_PRINTERS_HIDETABS* = r"NoPrinterTabs"
  REGSTR_VAL_PRINTERS_NODELETE* = r"NoDeletePrinter"
  REGSTR_VAL_PRINTERS_NOADD* = r"NoAddPrinter"
  REGSTR_VAL_WINOLDAPP_DISABLED* = r"Disabled"
  REGSTR_VAL_WINOLDAPP_NOREALMODE* = r"NoRealMode"
  REGSTR_VAL_NOENTIRENETWORK* = r"NoEntireNetwork"
  REGSTR_VAL_NOWORKGROUPCONTENTS* = r"NoWorkgroupContents"
  REGSTR_VAL_MINPWDLEN* = r"MinPwdLen"
  REGSTR_VAL_PWDEXPIRATION* = r"PwdExpiration"
  REGSTR_VAL_WIN31PROVIDER* = r"Win31Provider"
  REGSTR_VAL_DISABLEREGTOOLS* = r"DisableRegistryTools"
  REGSTR_PATH_WINLOGON* = r"Software\Microsoft\Windows\CurrentVersion\Winlogon"
  REGSTR_VAL_LEGALNOTICECAPTION* = r"LegalNoticeCaption"
  REGSTR_VAL_LEGALNOTICETEXT* = r"LegalNoticeText"
  REGSTR_VAL_RESTRICTRUN* = r"RestrictRun"
  REGSTR_KEY_POL_USERS* = r"Users"
  REGSTR_KEY_POL_COMPUTERS* = r"Computers"
  REGSTR_KEY_POL_USERGROUPS* = r"UserGroups"
  REGSTR_KEY_POL_DEFAULT* = r".default"
  REGSTR_KEY_POL_USERGROUPDATA* = r"GroupData\UserGroups\Priority"
  REGSTR_PATH_TIMEZONE* = r"System\CurrentControlSet\Control\TimeZoneInformation"
  REGSTR_VAL_TZBIAS* = r"Bias"
  REGSTR_VAL_TZDLTBIAS* = r"DaylightBias"
  REGSTR_VAL_TZSTDBIAS* = r"StandardBias"
  REGSTR_VAL_TZACTBIAS* = r"ActiveTimeBias"
  REGSTR_VAL_TZDLTFLAG* = r"DaylightFlag"
  REGSTR_VAL_TZSTDSTART* = r"StandardStart"
  REGSTR_VAL_TZDLTSTART* = r"DaylightStart"
  REGSTR_VAL_TZDLTNAME* = r"DaylightName"
  REGSTR_VAL_TZSTDNAME* = r"StandardName"
  REGSTR_VAL_TZNOCHANGESTART* = r"NoChangeStart"
  REGSTR_VAL_TZNOCHANGEEND* = r"NoChangeEnd"
  REGSTR_VAL_TZNOAUTOTIME* = r"DisableAutoDaylightTimeSet"
  REGSTR_PATH_FLOATINGPOINTPROCESSOR* = r"HARDWARE\DESCRIPTION\System\FloatingPointProcessor"
  REGSTR_PATH_FLOATINGPOINTPROCESSOR0* = r"HARDWARE\DESCRIPTION\System\FloatingPointProcessor\0"
  REGSTR_PATH_COMPUTRNAME* = r"System\CurrentControlSet\Control\ComputerName\ComputerName"
  REGSTR_VAL_COMPUTRNAME* = r"ComputerName"
  REGSTR_PATH_SHUTDOWN* = r"System\CurrentControlSet\Control\Shutdown"
  REGSTR_VAL_FORCEREBOOT* = r"ForceReboot"
  REGSTR_VAL_SETUPPROGRAMRAN* = r"SetupProgramRan"
  REGSTR_VAL_DOES_POLLING* = r"PollingSupportNeeded"
  REGSTR_PATH_KNOWNDLLS* = r"System\CurrentControlSet\Control\SessionManager\KnownDLLs"
  REGSTR_PATH_KNOWN16DLLS* = r"System\CurrentControlSet\Control\SessionManager\Known16DLLs"
  REGSTR_PATH_CHECKVERDLLS* = r"System\CurrentControlSet\Control\SessionManager\CheckVerDLLs"
  REGSTR_PATH_WARNVERDLLS* = r"System\CurrentControlSet\Control\SessionManager\WarnVerDLLs"
  REGSTR_PATH_HACKINIFILE* = r"System\CurrentControlSet\Control\SessionManager\HackIniFiles"
  REGSTR_PATH_CHECKBADAPPS* = r"System\CurrentControlSet\Control\SessionManager\CheckBadApps"
  REGSTR_PATH_APPPATCH* = r"System\CurrentControlSet\Control\SessionManager\AppPatches"
  REGSTR_PATH_KNOWNVXDS* = r"System\CurrentControlSet\Control\SessionManager\KnownVxDs"
  REGSTR_VAL_UNINSTALLER_DISPLAYNAME* = r"DisplayName"
  REGSTR_VAL_UNINSTALLER_COMMANDLINE* = r"UninstallString"
  REGSTR_PATH_DESKTOP* = REGSTR_PATH_SCREENSAVE
  REGSTR_PATH_MOUSE* = r"Control Panel\Mouse"
  REGSTR_PATH_KEYBOARD* = r"Control Panel\Keyboard"
  REGSTR_PATH_COLORS* = r"Control Panel\Colors"
  REGSTR_PATH_SOUND* = r"Control Panel\Sound"
  REGSTR_PATH_METRICS* = r"Control Panel\Desktop\WindowMetrics"
  REGSTR_PATH_ICONS* = r"Control Panel\Icons"
  REGSTR_PATH_CURSORS* = r"Control Panel\Cursors"
  REGSTR_PATH_CHECKDISK* = r"Software\Microsoft\Windows\CurrentVersion\Applets\Check Drive"
  REGSTR_PATH_CHECKDISKSET* = r"Settings"
  REGSTR_PATH_CHECKDISKUDRVS* = r"NoUnknownDDErrDrvs"
  REGSTR_PATH_FAULT* = r"Software\Microsoft\Windows\CurrentVersion\Fault"
  REGSTR_VAL_FAULT_LOGFILE* = r"LogFile"
  REGSTR_PATH_AEDEBUG* = r"Software\Microsoft\Windows NT\CurrentVersion\AeDebug"
  REGSTR_VAL_AEDEBUG_DEBUGGER* = r"Debugger"
  REGSTR_VAL_AEDEBUG_AUTO* = r"Auto"
  REGSTR_PATH_GRPCONV* = r"Software\Microsoft\Windows\CurrentVersion\GrpConv"
  REGSTR_VAL_REGITEMDELETEMESSAGE* = r"Removal Message"
  REGSTR_PATH_LASTCHECK* = r"Software\Microsoft\Windows\CurrentVersion\Explorer\LastCheck"
  REGSTR_PATH_LASTOPTIMIZE* = r"Software\Microsoft\Windows\CurrentVersion\Explorer\LastOptimize"
  REGSTR_PATH_LASTBACKUP* = r"Software\Microsoft\Windows\CurrentVersion\Explorer\LastBackup"
  REGSTR_PATH_CHKLASTCHECK* = r"Software\Microsoft\Windows\CurrentVersion\Applets\Check Drive\LastCheck"
  REGSTR_PATH_CHKLASTSURFAN* = r"Software\Microsoft\Windows\CurrentVersion\Applets\Check Drive\LastSurfaceAnalysis"
  REGSTR_KEY_SHARES* = r"Software\Microsoft\Windows\CurrentVersion\Network\LanMan"
  REGSTR_VAL_SHARES_FLAGS* = r"Flags"
  REGSTR_VAL_SHARES_TYPE* = r"Type"
  REGSTR_VAL_SHARES_PATH* = r"Path"
  REGSTR_VAL_SHARES_REMARK* = r"Remark"
  REGSTR_VAL_SHARES_RW_PASS* = r"Parm1"
  REGSTR_VAL_SHARES_RO_PASS* = r"Parm2"
  REGSTR_PATH_PRINT* = r"System\CurrentControlSet\Control\Print"
  REGSTR_PATH_PRINTERS* = r"System\CurrentControlSet\Control\Print\Printers"
  REGSTR_PATH_PROVIDERS* = r"System\CurrentControlSet\Control\Print\Providers"
  REGSTR_PATH_MONITORS* = r"System\CurrentControlSet\Control\Print\Monitors"
  REGSTR_PATH_ENVIRONMENTS* = r"System\CurrentControlSet\Control\Print\Environments"
  REGSTR_VAL_START_ON_BOOT* = r"StartOnBoot"
  REGSTR_VAL_PRINTERS_MASK* = r"PrintersMask"
  REGSTR_VAL_DOS_SPOOL_MASK* = r"DOSSpoolMask"
  REGSTR_KEY_CURRENT_ENV* = r"\Windows 4.0"
  REGSTR_KEY_DRIVERS* = r"\Drivers"
  REGSTR_KEY_PRINT_PROC* = r"\Print Processors"
  REGSTR_PATH_EVENTLABELS* = r"AppEvents\EventLabels"
  REGSTR_PATH_SCHEMES* = r"AppEvents\Schemes"
  REGSTR_PATH_APPS* = REGSTR_PATH_SCHEMES & r"\Apps"
  REGSTR_PATH_APPS_DEFAULT* = REGSTR_PATH_SCHEMES & r"\Apps\.Default"
  REGSTR_PATH_NAMES* = REGSTR_PATH_SCHEMES & r"\Names"
  REGSTR_PATH_MULTIMEDIA* = REGSTR_PATH_SETUP & r"\Multimedia"
  REGSTR_PATH_MULTIMEDIA_AUDIO* = r"Software\Microsoft\Multimedia\Audio"
  REGSTR_PATH_MEDIARESOURCES* = REGSTR_PATH_CURRENT_CONTROL_SET & r"\MediaResources"
  REGSTR_PATH_MEDIAPROPERTIES* = REGSTR_PATH_CURRENT_CONTROL_SET & r"\MediaProperties"
  REGSTR_PATH_PRIVATEPROPERTIES* = REGSTR_PATH_MEDIAPROPERTIES & r"\PrivateProperties"
  REGSTR_PATH_PUBLICPROPERTIES* = REGSTR_PATH_MEDIAPROPERTIES & r"\PublicProperties"
  REGSTR_PATH_JOYOEM* = REGSTR_PATH_PRIVATEPROPERTIES & r"\Joystick\OEM"
  REGSTR_PATH_JOYCONFIG* = REGSTR_PATH_MEDIARESOURCES & r"\Joystick"
  REGSTR_KEY_JOYCURR* = r"CurrentJoystickSettings"
  REGSTR_KEY_JOYSETTINGS* = r"JoystickSettings"
  REGSTR_VAL_JOYUSERVALUES* = r"JoystickUserValues"
  REGSTR_VAL_JOYCALLOUT* = r"JoystickCallout"
  REGSTR_VAL_JOYNCONFIG* = r"Joystick%dConfiguration"
  REGSTR_VAL_JOYNOEMNAME* = r"Joystick%dOEMName"
  REGSTR_VAL_JOYNOEMCALLOUT* = r"Joystick%dOEMCallout"
  REGSTR_VAL_JOYOEMCALLOUT* = r"OEMCallout"
  REGSTR_VAL_JOYOEMNAME* = r"OEMName"
  REGSTR_VAL_JOYOEMDATA* = r"OEMData"
  REGSTR_VAL_JOYOEMXYLABEL* = r"OEMXYLabel"
  REGSTR_VAL_JOYOEMZLABEL* = r"OEMZLabel"
  REGSTR_VAL_JOYOEMRLABEL* = r"OEMRLabel"
  REGSTR_VAL_JOYOEMPOVLABEL* = r"OEMPOVLabel"
  REGSTR_VAL_JOYOEMULABEL* = r"OEMULabel"
  REGSTR_VAL_JOYOEMVLABEL* = r"OEMVLabel"
  REGSTR_VAL_JOYOEMTESTMOVEDESC* = r"OEMTestMoveDesc"
  REGSTR_VAL_JOYOEMTESTBUTTONDESC* = r"OEMTestButtonDesc"
  REGSTR_VAL_JOYOEMTESTMOVECAP* = r"OEMTestMoveCap"
  REGSTR_VAL_JOYOEMTESTBUTTONCAP* = r"OEMTestButtonCap"
  REGSTR_VAL_JOYOEMTESTWINCAP* = r"OEMTestWinCap"
  REGSTR_VAL_JOYOEMCALCAP* = r"OEMCalCap"
  REGSTR_VAL_JOYOEMCALWINCAP* = r"OEMCalWinCap"
  REGSTR_VAL_JOYOEMCAL1* = r"OEMCal1"
  REGSTR_VAL_JOYOEMCAL2* = r"OEMCal2"
  REGSTR_VAL_JOYOEMCAL3* = r"OEMCal3"
  REGSTR_VAL_JOYOEMCAL4* = r"OEMCal4"
  REGSTR_VAL_JOYOEMCAL5* = r"OEMCal5"
  REGSTR_VAL_JOYOEMCAL6* = r"OEMCal6"
  REGSTR_VAL_JOYOEMCAL7* = r"OEMCal7"
  REGSTR_VAL_JOYOEMCAL8* = r"OEMCal8"
  REGSTR_VAL_JOYOEMCAL9* = r"OEMCal9"
  REGSTR_VAL_JOYOEMCAL10* = r"OEMCal10"
  REGSTR_VAL_JOYOEMCAL11* = r"OEMCal11"
  REGSTR_VAL_JOYOEMCAL12* = r"OEMCal12"
  DTRESULTOK* = 0
  DTRESULTFIX* = 1
  DTRESULTPROB* = 2
  DTRESULTPART* = 3
  PCIC_DEFAULT_IRQMASK* = 0x4EB8
  PCIC_DEFAULT_NUMSOCKETS* = 0

type
  DSKTLSYSTEMTIME* {.final, pure.} = object
    wYear*: WORD
    wMonth*: WORD
    wDayOfWeek*: WORD
    wDay*: WORD
    wHour*: WORD
    wMinute*: WORD
    wSecond*: WORD
    wMilliseconds*: WORD
    wResult*: WORD
  PDSKTLSYSTEMTIME* = ptr DSKTLSYSTEMTIME
  LPDSKTLSYSTEMTIME* = ptr DSKTLSYSTEMTIME

# misc/pbt.nim

const
  PBT_APMQUERYSUSPEND* = 0
  PBT_APMQUERYSTANDBY* = 1
  PBT_APMQUERYSUSPENDFAILED* = 2
  PBT_APMQUERYSTANDBYFAILED* = 3
  PBT_APMSUSPEND* = 4
  PBT_APMSTANDBY* = 5
  PBT_APMRESUMECRITICAL* = 6
  PBT_APMRESUMESUSPEND* = 7
  PBT_APMRESUMESTANDBY* = 8
  PBT_APMBATTERYLOW* = 9
  PBT_APMPOWERSTATUSCHANGE* = 10
  PBT_APMOEMEVENT* = 11
  PBTF_APMRESUMEFROMFAILURE* = 1

# misc/rapi.nim
const
  # RAPISTREAMFLAG* = enum
  STREAM_TIMEOUT_READ* = 0

type
  IRAPIStream* {.final, pure.} = object
    lpVtbl*: ptr IRAPIStreamVtbl
  RAPISTREAMFLAG* = int32
  SetRapiStat* = proc (P1: ptr IRAPIStream, P2: RAPISTREAMFLAG, P3: DWORD): HRESULT {.stdcall.}
  GetRapiStat* = proc (P1: ptr IRAPIStream, P2: RAPISTREAMFLAG, P3: ptr DWORD): HRESULT {.stdcall.}
  IRAPIStreamVtbl* {.final, pure.} = object
    SetRapiStat*: SetRapiStat
    GetRapiStat*: GetRapiStat
  RAPIINIT* {.final, pure.} = object
    cbSize*: DWORD
    heRapiInit*: HANDLE
    hrRapiInit*: HRESULT

proc CeRapiInit*(): HRESULT {.winapi, dynlib: "rapi", importc.}
proc CeRapiInitEx*(P1: ptr RAPIINIT): HRESULT {.winapi, dynlib: "rapi", importc.}
proc CeCreateProcess*(P1: LPCWSTR, P2: LPCWSTR, P3: LPSECURITY_ATTRIBUTES, P4: LPSECURITY_ATTRIBUTES, P5: BOOL, P6: DWORD, P7: LPVOID, P8: LPWSTR, P9: LPSTARTUPINFO, P10: LPPROCESS_INFORMATION): BOOL {.winapi, dynlib: "rapi", importc.}
proc CeRapiUninit*(): HRESULT {.winapi, dynlib: "rapi", importc.}
proc CeWriteFile*(P1: HANDLE, P2: LPCVOID, P3: DWORD, P4: LPDWORD, P5: LPOVERLAPPED): BOOL {.winapi, dynlib: "rapi", importc.}
proc CeCreateFile*(P1: LPCWSTR, P2: DWORD, P3: DWORD, P4: LPSECURITY_ATTRIBUTES, P5: DWORD, P6: DWORD, P7: HANDLE): HANDLE {.winapi, dynlib: "rapi", importc.}
proc CeCreateDirectory*(P1: LPCWSTR, P2: LPSECURITY_ATTRIBUTES): BOOL {.winapi, dynlib: "rapi", importc.}
proc CeGetLastError*(): DWORD {.winapi, dynlib: "rapi", importc.}
proc CeGetFileTime*(P1: HANDLE, P2: LPFILETIME, P3: LPFILETIME, P4: LPFILETIME): BOOL {.winapi, dynlib: "rapi", importc.}
proc CeCloseHandle*(P1: HANDLE): BOOL {.winapi, dynlib: "rapi", importc.}

# misc/reason.nim

const
  SHTDN_REASON_MAJOR_OTHER* = 0x00000000
  SHTDN_REASON_MAJOR_HARDWARE* = 0x00010000
  SHTDN_REASON_MAJOR_OPERATINGSYSTEM* = 0x00020000
  SHTDN_REASON_MAJOR_SOFTWARE* = 0x00030000
  SHTDN_REASON_MAJOR_APPLICATION* = 0x00040000
  SHTDN_REASON_MAJOR_SYSTEM* = 0x00050000
  SHTDN_REASON_MAJOR_POWER* = 0x00060000
  SHTDN_REASON_MAJOR_LEGACY_API* = 0x00070000
  SHTDN_REASON_MINOR_OTHER* = 0
  SHTDN_REASON_MINOR_MAINTENANCE* = 1
  SHTDN_REASON_MINOR_INSTALLATION* = 2
  SHTDN_REASON_MINOR_UPGRADE* = 3
  SHTDN_REASON_MINOR_RECONFIG* = 4
  SHTDN_REASON_MINOR_HUNG* = 5
  SHTDN_REASON_MINOR_UNSTABLE* = 6
  SHTDN_REASON_MINOR_DISK* = 7
  SHTDN_REASON_MINOR_PROCESSOR* = 8
  SHTDN_REASON_MINOR_NETWORKCARD* = 9
  SHTDN_REASON_MINOR_POWER_SUPPLY* = 10
  SHTDN_REASON_MINOR_CORDUNPLUGGED* = 11
  SHTDN_REASON_MINOR_ENVIRONMENT* = 12
  SHTDN_REASON_MINOR_HARDWARE_DRIVER* = 13
  SHTDN_REASON_MINOR_OTHERDRIVER* = 14
  SHTDN_REASON_MINOR_BLUESCREEN* = 15
  SHTDN_REASON_MINOR_SERVICEPACK* = 16
  SHTDN_REASON_MINOR_HOTFIX* = 17
  SHTDN_REASON_MINOR_SECURITYFIX* = 18
  SHTDN_REASON_MINOR_SECURITY* = 19
  SHTDN_REASON_MINOR_NETWORK_CONNECTIVITY* = 20
  SHTDN_REASON_MINOR_WMI* = 21
  SHTDN_REASON_MINOR_SERVICEPACK_UNINSTALL* = 22
  SHTDN_REASON_MINOR_HOTFIX_UNINSTALL* = 23
  SHTDN_REASON_MINOR_SECURITYFIX_UNINSTALL* = 24
  SHTDN_REASON_MINOR_MMC* = 25
  SHTDN_REASON_MINOR_TERMSRV* = 0x00000020
  SHTDN_REASON_FLAG_USER_DEFINED* = 0x40000000
  SHTDN_REASON_FLAG_PLANNED* = 0x80000000'u32

# misc/rpcdcep.nim

type
  I_RPC_HANDLE* = HANDLE
  RPC_STATUS* = int64

const
  RPC_NCA_FLAGS_DEFAULT* = 0
  RPC_NCA_FLAGS_IDEMPOTENT* = 1
  RPC_NCA_FLAGS_BROADCAST* = 2
  RPC_NCA_FLAGS_MAYBE* = 4
  RPCFLG_ASYNCHRONOUS* = 0x40000000
  RPCFLG_INPUT_SYNCHRONOUS* = 0x20000000
  RPC_FLAGS_VALID_BIT* = 0x8000
  TRANSPORT_TYPE_CN* = 1
  TRANSPORT_TYPE_DG* = 2
  TRANSPORT_TYPE_LPC* = 4
  TRANSPORT_TYPE_WMSG* = 8

type
  RPC_VERSION* {.final, pure.} = object
    MajorVersion*: uint16
    MinorVersion*: uint16
  RPC_SYNTAX_IDENTIFIER* {.final, pure.} = object
    SyntaxGUID*: GUID
    SyntaxVersion*: RPC_VERSION
  PRPC_SYNTAX_IDENTIFIER* = ptr RPC_SYNTAX_IDENTIFIER
  RPC_MESSAGE* {.final, pure.} = object
    Handle*: HANDLE
    DataRepresentation*: uint32
    Buffer*: pointer
    BufferLength*: uint32
    ProcNum*: uint32
    TransferSyntax*: PRPC_SYNTAX_IDENTIFIER
    RpcInterfaceInformation*: pointer
    ReservedForRuntime*: pointer
    ManagerEpv*: pointer
    ImportContext*: pointer
    RpcFlags*: uint32
  PRPC_MESSAGE* = ptr RPC_MESSAGE
  RPC_DISPATCH_FUNCTION* = proc (Message: PRPC_MESSAGE): void {.stdcall.}
  RPC_DISPATCH_TABLE* {.final, pure.} = object
    DispatchTableCount*: uint32
    DispatchTable*: ptr RPC_DISPATCH_FUNCTION
    Reserved*: int32
  PRPC_DISPATCH_TABLE* = ptr RPC_DISPATCH_TABLE
  RPC_PROTSEQ_ENDPOINT* {.final, pure.} = object
    RpcProtocolSequence*: ptr uint8
    Endpoint*: ptr uint8
  PRPC_PROTSEQ_ENDPOINT* = ptr RPC_PROTSEQ_ENDPOINT
  RPC_SERVER_INTERFACE* {.final, pure.} = object
    Length*: uint32
    InterfaceId*: RPC_SYNTAX_IDENTIFIER
    TransferSyntax*: RPC_SYNTAX_IDENTIFIER
    DispatchTable*: PRPC_DISPATCH_TABLE
    RpcProtseqEndpointCount*: uint32
    RpcProtseqEndpoint*: PRPC_PROTSEQ_ENDPOINT
    DefaultManagerEpv*: pointer
    InterpreterInfo*: pointer
  PRPC_SERVER_INTERFACE* = ptr RPC_SERVER_INTERFACE
  RPC_CLIENT_INTERFACE* {.final, pure.} = object
    Length*: uint32
    InterfaceId*: RPC_SYNTAX_IDENTIFIER
    TransferSyntax*: RPC_SYNTAX_IDENTIFIER
    DispatchTable*: PRPC_DISPATCH_TABLE
    RpcProtseqEndpointCount*: uint32
    RpcProtseqEndpoint*: PRPC_PROTSEQ_ENDPOINT
    Reserved*: uint32
    InterpreterInfo*: pointer
  PRPC_CLIENT_INTERFACE* = ptr RPC_CLIENT_INTERFACE
  I_RPC_MUTEX* = pointer
  RPC_TRANSFER_SYNTAX* {.final, pure.} = object
    Uuid*: GUID
    VersMajor*: uint16
    VersMinor*: uint16
  RPC_BLOCKING_FN* = proc (P1: pointer, P2: pointer, P3: pointer): RPC_STATUS {.cdecl.}
  PRPC_RUNDOWN* = proc (P1: pointer): void {.stdcall.}

proc I_RpcGetBuffer*(P1: ptr RPC_MESSAGE): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcSendReceive*(P1: ptr RPC_MESSAGE): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcSend*(P1: ptr RPC_MESSAGE): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcFreeBuffer*(P1: ptr RPC_MESSAGE): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcRequestMutex*(P1: ptr I_RPC_MUTEX): void {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcClearMutex*(P1: I_RPC_MUTEX): void {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcDeleteMutex*(P1: I_RPC_MUTEX): void {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcAllocate*(P1: uint32): pointer {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcFree*(P1: pointer): void {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcPauseExecution*(P1: uint32): void {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcMonitorAssociation*(P1: HANDLE, P2: PRPC_RUNDOWN, P3: pointer): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcStopMonitorAssociation*(P1: HANDLE): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcGetCurrentCallHandle*(): HANDLE {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcGetAssociationContext*(P1: ptr pointer): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcSetAssociationContext*(P1: pointer): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcNsBindingSetEntryName*(P1: HANDLE, P2: uint32, P3: ptr uint16): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcBindingInqDynamicEndpoint*(P1: HANDLE, P2: ptr ptr uint16): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcBindingInqTransportType*(P1: HANDLE, P2: ptr uint32): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcIfInqTransferSyntaxes*(P1: HANDLE, P2: ptr RPC_TRANSFER_SYNTAX, P3: uint32, P4: ptr uint32): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_UuidCreate*(P1: ptr GUID): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcBindingCopy*(P1: HANDLE, P2: ptr HANDLE): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcBindingIsClientLocal*(P1: HANDLE, P2: ptr uint32): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcSsDontSerializeContext*(): void {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcServerRegisterForwardFunction*(P1: proc(P1: ptr GUID, P2: ptr RPC_VERSION, P3: ptr GUID, P4: ptr uint8, P5: ptr pointer): int32):int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcConnectionInqSockBuffSize*(P1: ptr uint32, P2: ptr uint32): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcConnectionSetSockBuffSize*(P1: uint32, P2: uint32): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcBindingSetAsync*(P1: HANDLE, P2: RPC_BLOCKING_FN): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcAsyncSendReceive*(P1: ptr RPC_MESSAGE, P2: pointer): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcGetThreadWindowHandle*(P1: ptr pointer): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcServerThreadPauseListening*(): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcServerThreadContinueListening*(): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcServerUnregisterEndpointA*(P1: ptr uint8, P2: ptr uint8): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc I_RpcServerUnregisterEndpointW*(P1: ptr uint16, P2: ptr uint16): int32 {.winapi, dynlib: "rpcrt4", importc.}

when not defined(winansi):
  proc I_RpcServerUnregisterEndpoint*(P1: ptr uint16, P2: ptr uint16): int32 {.winapi, dynlib: "rpcrt4", importc: "I_RpcServerUnregisterEndpointW".}

else:
  proc I_RpcServerUnregisterEndpoint*(P1: ptr uint8, P2: ptr uint8): int32 {.winapi, dynlib: "rpcrt4", importc: "I_RpcServerUnregisterEndpointA".}

# misc/rpc.nim

type
  midl_user_allocate* = MIDL_user_allocate
  midl_user_free* = MIDL_user_free

proc I_RpcMapWin32Status*(P1: RPC_STATUS): int32 {.winapi, dynlib: "rpcrt4", importc.}

# misc/rpcdce.nim

const
  RPC_C_BINDING_MIN_TIMEOUT* = 0
  RPC_C_BINDING_DEFAULT_TIMEOUT* = 5
  RPC_C_BINDING_MAX_TIMEOUT* = 9
  RPC_C_BINDING_INFINITE_TIMEOUT* = 10
  RPC_C_CANCEL_INFINITE_TIMEOUT* = -1
  RPC_C_LISTEN_MAX_CALLS_DEFAULT* = 1234
  RPC_C_PROTSEQ_MAX_REQS_DEFAULT* = 10
  RPC_C_BIND_TO_ALL_NICS* = 1
  RPC_C_USE_INTERNET_PORT* = 1
  RPC_C_USE_INTRANET_PORT* = 2
  RPC_C_STATS_CALLS_IN* = 0
  RPC_C_STATS_CALLS_OUT* = 1
  RPC_C_STATS_PKTS_IN* = 2
  RPC_C_STATS_PKTS_OUT* = 3
  RPC_IF_AUTOLISTEN* = 0x0001
  RPC_IF_OLE* = 2
  RPC_C_MGMT_INQ_IF_IDS* = 0
  RPC_C_MGMT_INQ_PRINC_NAME* = 1
  RPC_C_MGMT_INQ_STATS* = 2
  RPC_C_MGMT_IS_SERVER_LISTEN* = 3
  RPC_C_MGMT_STOP_SERVER_LISTEN* = 4
  RPC_C_EP_ALL_ELTS* = 0
  RPC_C_EP_MATCH_BY_IF* = 1
  RPC_C_EP_MATCH_BY_OBJ* = 2
  RPC_C_EP_MATCH_BY_BOTH* = 3
  RPC_C_VERS_ALL* = 1
  RPC_C_VERS_COMPATIBLE* = 2
  RPC_C_VERS_EXACT* = 3
  RPC_C_VERS_MAJOR_ONLY* = 4
  RPC_C_VERS_UPTO* = 5
  DCE_C_ERROR_STRING_LEN* = 256
  RPC_C_PARM_MAX_PACKET_LENGTH* = 1
  RPC_C_PARM_BUFFER_LENGTH* = 2
  RPC_C_AUTHN_LEVEL_DEFAULT* = 0
  RPC_C_AUTHN_LEVEL_NONE* = 1
  RPC_C_AUTHN_LEVEL_CONNECT* = 2
  RPC_C_AUTHN_LEVEL_CALL* = 3
  RPC_C_AUTHN_LEVEL_PKT* = 4
  RPC_C_AUTHN_LEVEL_PKT_INTEGRITY* = 5
  RPC_C_AUTHN_LEVEL_PKT_PRIVACY* = 6
  RPC_C_IMP_LEVEL_ANONYMOUS* = 1
  RPC_C_IMP_LEVEL_IDENTIFY* = 2
  RPC_C_IMP_LEVEL_IMPERSONATE* = 3
  RPC_C_IMP_LEVEL_DELEGATE* = 4
  RPC_C_QOS_IDENTITY_STATIC* = 0
  RPC_C_QOS_IDENTITY_DYNAMIC* = 1
  RPC_C_QOS_CAPABILITIES_DEFAULT* = 0
  RPC_C_QOS_CAPABILITIES_MUTUAL_AUTH* = 1
  RPC_C_PROTECT_LEVEL_DEFAULT* = RPC_C_AUTHN_LEVEL_DEFAULT
  RPC_C_PROTECT_LEVEL_NONE* = RPC_C_AUTHN_LEVEL_NONE
  RPC_C_PROTECT_LEVEL_CONNECT* = RPC_C_AUTHN_LEVEL_CONNECT
  RPC_C_PROTECT_LEVEL_CALL* = RPC_C_AUTHN_LEVEL_CALL
  RPC_C_PROTECT_LEVEL_PKT* = RPC_C_AUTHN_LEVEL_PKT
  RPC_C_PROTECT_LEVEL_PKT_INTEGRITY* = RPC_C_AUTHN_LEVEL_PKT_INTEGRITY
  RPC_C_PROTECT_LEVEL_PKT_PRIVACY* = RPC_C_AUTHN_LEVEL_PKT_PRIVACY
  RPC_C_AUTHN_NONE* = 0
  RPC_C_AUTHN_DCE_PRIVATE* = 1
  RPC_C_AUTHN_DCE_PUBLIC* = 2
  RPC_C_AUTHN_DEC_PUBLIC* = 4
  RPC_C_AUTHN_WINNT* = 10
  RPC_C_AUTHN_DEFAULT* = -1
  SEC_WINNT_AUTH_IDENTITY_ANSI* = 0x1
  SEC_WINNT_AUTH_IDENTITY_UNICODE* = 0x2
  RPC_C_AUTHZ_NONE* = 0
  RPC_C_AUTHZ_NAME* = 1
  RPC_C_AUTHZ_DCE* = 2
  RPC_C_AUTHZ_DEFAULT* = -1

type
  # uuid_t* = UUID
  uuid_vector_t* = UUID_VECTOR
  RPC_MGR_EPV* = void
  RPC_BINDING_HANDLE* = I_RPC_HANDLE
  handle_t* = RPC_BINDING_HANDLE
  RPC_BINDING_VECTOR* {.final, pure.} = object
    Count*: uint32
    BindingH*: array[1, RPC_BINDING_HANDLE]
  rpc_binding_handle_t* = RPC_BINDING_HANDLE
  rpc_binding_vector_t* = RPC_BINDING_VECTOR
  UUID_VECTOR* {.final, pure.} = object
    Count*: uint32
    Uuid*: array[1, ptr UUID]
  RPC_IF_HANDLE* = pointer
  RPC_IF_ID* {.final, pure.} = object
    Uuid*: UUID
    VersMajor*: uint16
    VersMinor*: uint16
  RPC_POLICY* {.final, pure.} = object
    Length*: uint32
    EndpointFlags*: uint32
    NICFlags*: uint32
  PRPC_POLICY* = ptr RPC_POLICY
  RPC_OBJECT_INQ_FN* = proc (P1: ptr UUID, P2: ptr UUID, P3: ptr RPC_STATUS): void {.stdcall.}
  RPC_IF_CALLBACK_FN* = proc (P1: RPC_IF_HANDLE, P2: pointer): RPC_STATUS {.stdcall.}
  RPC_STATS_VECTOR* {.final, pure.} = object
    Count*: uint32
    Stats*: array[1, uint32]
  RPC_IF_ID_VECTOR* {.final, pure.} = object
    Count*: uint32
    IfId*: array[1, ptr RPC_IF_ID]
  # RPC_AUTH_IDENTITY_HANDLE* = HANDLE
  # RPC_AUTHZ_HANDLE* = HANDLE
  RPC_SECURITY_QOS* {.final, pure.} = object
    Version*: uint32
    Capabilities*: uint32
    IdentityTracking*: uint32
    ImpersonationType*: uint32
  PRPC_SECURITY_QOS* = ptr RPC_SECURITY_QOS
  SEC_WINNT_AUTH_IDENTITY_W* {.final, pure.} = object
    User*: ptr uint16
    UserLength*: uint32
    Domain*: ptr uint16
    DomainLength*: uint32
    Password*: ptr uint16
    PasswordLength*: uint32
    Flags*: uint32
  PSEC_WINNT_AUTH_IDENTITY_W* = ptr SEC_WINNT_AUTH_IDENTITY_W
  SEC_WINNT_AUTH_IDENTITY_A* {.final, pure.} = object
    User*: ptr uint8
    UserLength*: uint32
    Domain*: ptr uint8
    DomainLength*: uint32
    Password*: ptr uint8
    PasswordLength*: uint32
    Flags*: uint32
  PSEC_WINNT_AUTH_IDENTITY_A* = ptr SEC_WINNT_AUTH_IDENTITY_A
  RPC_CLIENT_INFORMATION1* {.final, pure.} = object
    UserName*: ptr uint8
    ComputerName*: ptr uint8
    Privilege*: uint16
    AuthFlags*: uint32
  PRPC_CLIENT_INFORMATION1* = ptr RPC_CLIENT_INFORMATION1
  RPC_EP_INQ_HANDLE* = ptr I_RPC_HANDLE
  RPC_MGMT_AUTHORIZATION_FN* = proc (P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr RPC_STATUS): int32 {.stdcall.}
  RPC_PROTSEQ_VECTORA* {.final, pure.} = object
    Count*: uint32
    Protseq*: array[1, ptr CHAR]
  RPC_PROTSEQ_VECTORW* {.final, pure.} = object
    Count*: uint32
    Protseq*: array[1, ptr WCHAR]

proc RpcBindingFromStringBindingA*(P1: cstring, P2: ptr RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingFromStringBindingW*(P1: ptr uint16, P2: ptr RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingToStringBindingA*(P1: RPC_BINDING_HANDLE, P2: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingToStringBindingW*(P1: RPC_BINDING_HANDLE, P2: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcStringBindingComposeA*(P1: cstring, P2: cstring, P3: cstring, P4: cstring, P5: cstring, P6: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcStringBindingComposeW*(P1: ptr uint16, P2: ptr uint16, P3: ptr uint16, P4: ptr uint16, P5: ptr uint16, P6: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcStringBindingParseA*(P1: cstring, P2: ptr cstring, P3: ptr cstring, P4: ptr cstring, P5: ptr cstring, P6: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcStringBindingParseW*(P1: ptr uint16, P2: ptr ptr uint16, P3: ptr ptr uint16, P4: ptr ptr uint16, P5: ptr ptr uint16, P6: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcStringFreeA*(P1: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcStringFreeW*(P1: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcNetworkIsProtseqValidA*(P1: cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcNetworkIsProtseqValidW*(P1: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcNetworkInqProtseqsA*(P1: ptr ptr RPC_PROTSEQ_VECTORA): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcNetworkInqProtseqsW*(P1: ptr ptr RPC_PROTSEQ_VECTORW): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcProtseqVectorFreeA*(P1: ptr ptr RPC_PROTSEQ_VECTORA): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcProtseqVectorFreeW*(P1: ptr ptr RPC_PROTSEQ_VECTORW): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqA*(P1: cstring, P2: uint32, P3: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqW*(P1: ptr uint16, P2: uint32, P3: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqExA*(P1: cstring, MaxCalls: uint32, P3: pointer, P4: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqExW*(P1: ptr uint16, P2: uint32, P3: pointer, P4: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqEpA*(P1: cstring, P2: uint32, P3: cstring, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqEpExA*(P1: cstring, P2: uint32, P3: cstring, P4: pointer, P5: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqEpW*(P1: ptr uint16, P2: uint32, P3: ptr uint16, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqEpExW*(P1: ptr uint16, P2: uint32, P3: ptr uint16, P4: pointer, P5: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqIfA*(P1: cstring, P2: uint32, P3: RPC_IF_HANDLE, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqIfExA*(P1: cstring, P2: uint32, P3: RPC_IF_HANDLE, P4: pointer, P5: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqIfW*(P1: ptr uint16, P2: uint32, P3: RPC_IF_HANDLE, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseProtseqIfExW*(P1: ptr uint16, P2: uint32, P3: RPC_IF_HANDLE, P4: pointer, P5: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtInqServerPrincNameA*(P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtInqServerPrincNameW*(P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerInqDefaultPrincNameA*(P1: uint32, P2: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerInqDefaultPrincNameW*(P1: uint32, P2: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcNsBindingInqEntryNameA*(P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcNsBindingInqEntryNameW*(P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingInqAuthClientA*(P1: RPC_BINDING_HANDLE, P2: ptr RPC_AUTHZ_HANDLE, P3: ptr cstring, P4: ptr uint32, P5: ptr uint32, P6: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingInqAuthClientW*(P1: RPC_BINDING_HANDLE, P2: ptr RPC_AUTHZ_HANDLE, P3: ptr ptr uint16, P4: ptr uint32, P5: ptr uint32, P6: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingInqAuthInfoA*(P1: RPC_BINDING_HANDLE, P2: ptr cstring, P3: ptr uint32, P4: ptr uint32, P5: ptr RPC_AUTH_IDENTITY_HANDLE, P6: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingInqAuthInfoW*(P1: RPC_BINDING_HANDLE, P2: ptr ptr uint16, P3: ptr uint32, P4: ptr uint32, P5: ptr RPC_AUTH_IDENTITY_HANDLE, P6: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingSetAuthInfoA*(P1: RPC_BINDING_HANDLE, P2: cstring, P3: uint32, P4: uint32, P5: RPC_AUTH_IDENTITY_HANDLE, P6: uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingSetAuthInfoExA*(P1: RPC_BINDING_HANDLE, P2: cstring, P3: uint32, P4: uint32, P5: RPC_AUTH_IDENTITY_HANDLE, P6: uint32, P7: ptr RPC_SECURITY_QOS): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingSetAuthInfoW*(P1: RPC_BINDING_HANDLE, P2: ptr uint16, P3: uint32, P4: uint32, P5: RPC_AUTH_IDENTITY_HANDLE, P6: uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingSetAuthInfoExW*(P1: RPC_BINDING_HANDLE, P2: ptr uint16, P3: uint32, P4: uint32, P5: RPC_AUTH_IDENTITY_HANDLE, P6: uint32, P7: ptr RPC_SECURITY_QOS): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingInqAuthInfoExA*(P1: RPC_BINDING_HANDLE, P2: ptr cstring, P3: ptr uint32, P4: ptr uint32, P5: ptr RPC_AUTH_IDENTITY_HANDLE, P6: ptr uint32, P7: uint32, P8: ptr RPC_SECURITY_QOS): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingInqAuthInfoExW*(P1: RPC_BINDING_HANDLE, P2: ptr ptr uint16, P3: ptr uint32, P4: ptr uint32, P5: ptr RPC_AUTH_IDENTITY_HANDLE, P6: ptr uint32, P7: uint32, P8: ptr RPC_SECURITY_QOS): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}

type
  RPC_AUTH_KEY_RETRIEVAL_FN* = proc (P1: pointer, P2: ptr uint16, P3: uint32, P4: ptr pointer, P5: ptr RPC_STATUS): void {.stdcall.}

proc RpcServerRegisterAuthInfoA*(P1: cstring, P2: uint32, P3: RPC_AUTH_KEY_RETRIEVAL_FN, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerRegisterAuthInfoW*(P1: ptr uint16, P2: uint32, P3: RPC_AUTH_KEY_RETRIEVAL_FN, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc UuidToStringA*(P1: ptr UUID, P2: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc UuidFromStringA*(P1: cstring, P2: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc UuidToStringW*(P1: ptr UUID, P2: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc UuidFromStringW*(P1: ptr uint16, P2: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcEpRegisterNoReplaceA*(P1: RPC_IF_HANDLE, P2: ptr RPC_BINDING_VECTOR, P3: ptr UUID_VECTOR, P4: cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcEpRegisterNoReplaceW*(P1: RPC_IF_HANDLE, P2: ptr RPC_BINDING_VECTOR, P3: ptr UUID_VECTOR, P4: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcEpRegisterA*(P1: RPC_IF_HANDLE, P2: ptr RPC_BINDING_VECTOR, P3: ptr UUID_VECTOR, P4: cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcEpRegisterW*(P1: RPC_IF_HANDLE, P2: ptr RPC_BINDING_VECTOR, P3: ptr UUID_VECTOR, P4: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc DceErrorInqTextA*(P1: RPC_STATUS, P2: cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc DceErrorInqTextW*(P1: RPC_STATUS, P2: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtEpEltInqNextA*(P1: RPC_EP_INQ_HANDLE, P2: ptr RPC_IF_ID, P3: ptr RPC_BINDING_HANDLE, P4: ptr UUID, P5: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtEpEltInqNextW*(P1: RPC_EP_INQ_HANDLE, P2: ptr RPC_IF_ID, P3: ptr RPC_BINDING_HANDLE, P4: ptr UUID, P5: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcImpersonateClient*(P1: RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcRevertToSelf*(): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}

when not defined(winansi):
  type
    RPC_PROTSEQ_VECTOR* = RPC_PROTSEQ_VECTORW
    SEC_WINNT_AUTH_IDENTITY* = SEC_WINNT_AUTH_IDENTITY_W
    PSEC_WINNT_AUTH_IDENTITY* = PSEC_WINNT_AUTH_IDENTITY_W

  proc RpcMgmtEpEltInqNext*(P1: RPC_EP_INQ_HANDLE, P2: ptr RPC_IF_ID, P3: ptr RPC_BINDING_HANDLE, P4: ptr UUID, P5: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcMgmtEpEltInqNextW".}
  proc RpcBindingFromStringBinding*(P1: ptr uint16, P2: ptr RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingFromStringBindingW".}
  proc RpcBindingToStringBinding*(P1: RPC_BINDING_HANDLE, P2: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingToStringBindingW".}
  proc RpcStringBindingCompose*(P1: ptr uint16, P2: ptr uint16, P3: ptr uint16, P4: ptr uint16, P5: ptr uint16, P6: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcStringBindingComposeW".}
  proc RpcStringBindingParse*(P1: ptr uint16, P2: ptr ptr uint16, P3: ptr ptr uint16, P4: ptr ptr uint16, P5: ptr ptr uint16, P6: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcStringBindingParseW".}
  proc RpcStringFree*(P1: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcStringFreeW".}
  proc RpcNetworkIsProtseqValid*(P1: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcNetworkIsProtseqValidW".}
  proc RpcNetworkInqProtseqs*(P1: ptr ptr RPC_PROTSEQ_VECTORW): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcNetworkInqProtseqsW".}
  proc RpcProtseqVectorFree*(P1: ptr ptr RPC_PROTSEQ_VECTORW): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcProtseqVectorFreeW".}
  proc RpcServerUseProtseq*(P1: ptr uint16, P2: uint32, P3: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqW".}
  proc RpcServerUseProtseqEx*(P1: ptr uint16, P2: uint32, P3: pointer, P4: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqExW".}
  proc RpcServerUseProtseqEp*(P1: ptr uint16, P2: uint32, P3: ptr uint16, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqEpW".}
  proc RpcServerUseProtseqEpEx*(P1: ptr uint16, P2: uint32, P3: ptr uint16, P4: pointer, P5: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqEpExW".}
  proc RpcServerUseProtseqIf*(P1: ptr uint16, P2: uint32, P3: RPC_IF_HANDLE, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqIfW".}
  proc RpcServerUseProtseqIfEx*(P1: ptr uint16, P2: uint32, P3: RPC_IF_HANDLE, P4: pointer, P5: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqIfExW".}
  proc RpcMgmtInqServerPrincName*(P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcMgmtInqServerPrincNameW".}
  proc RpcServerInqDefaultPrincName*(P1: uint32, P2: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerInqDefaultPrincNameW".}
  proc RpcNsBindingInqEntryName*(P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcNsBindingInqEntryNameW".}
  proc RpcBindingInqAuthClient*(P1: RPC_BINDING_HANDLE, P2: ptr RPC_AUTHZ_HANDLE, P3: ptr ptr uint16, P4: ptr uint32, P5: ptr uint32, P6: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingInqAuthClientW".}
  proc RpcBindingInqAuthInfo*(P1: RPC_BINDING_HANDLE, P2: ptr ptr uint16, P3: ptr uint32, P4: ptr uint32, P5: ptr RPC_AUTH_IDENTITY_HANDLE, P6: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingInqAuthInfoW".}
  proc RpcBindingSetAuthInfo*(P1: RPC_BINDING_HANDLE, P2: ptr uint16, P3: uint32, P4: uint32, P5: RPC_AUTH_IDENTITY_HANDLE, P6: uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingSetAuthInfoW".}
  proc RpcServerRegisterAuthInfo*(P1: ptr uint16, P2: uint32, P3: RPC_AUTH_KEY_RETRIEVAL_FN, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerRegisterAuthInfoW".}
  proc RpcBindingInqAuthInfoEx*(P1: RPC_BINDING_HANDLE, P2: ptr ptr uint16, P3: ptr uint32, P4: ptr uint32, P5: ptr RPC_AUTH_IDENTITY_HANDLE, P6: ptr uint32, P7: uint32, P8: ptr RPC_SECURITY_QOS): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingInqAuthInfoExW".}
  proc RpcBindingSetAuthInfoEx*(P1: RPC_BINDING_HANDLE, P2: ptr uint16, P3: uint32, P4: uint32, P5: RPC_AUTH_IDENTITY_HANDLE, P6: uint32, P7: ptr RPC_SECURITY_QOS): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingSetAuthInfoExW".}
  proc UuidFromString*(P1: ptr uint16, P2: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "UuidFromStringW".}
  proc UuidToString*(P1: ptr UUID, P2: ptr ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "UuidToStringW".}
  proc RpcEpRegisterNoReplace*(P1: RPC_IF_HANDLE, P2: ptr RPC_BINDING_VECTOR, P3: ptr UUID_VECTOR, P4: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcEpRegisterNoReplaceW".}
  proc RpcEpRegister*(P1: RPC_IF_HANDLE, P2: ptr RPC_BINDING_VECTOR, P3: ptr UUID_VECTOR, P4: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcEpRegisterW".}
  proc DceErrorInqText*(P1: RPC_STATUS, P2: ptr uint16): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "DceErrorInqTextW".}

else:
  type
    RPC_PROTSEQ_VECTOR* = RPC_PROTSEQ_VECTORA
    SEC_WINNT_AUTH_IDENTITY* = SEC_WINNT_AUTH_IDENTITY_A
    PSEC_WINNT_AUTH_IDENTITY* = PSEC_WINNT_AUTH_IDENTITY_A

  proc RpcMgmtEpEltInqNext*(P1: RPC_EP_INQ_HANDLE, P2: ptr RPC_IF_ID, P3: ptr RPC_BINDING_HANDLE, P4: ptr UUID, P5: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcMgmtEpEltInqNextA".}
  proc RpcBindingFromStringBinding*(P1: cstring, P2: ptr RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingFromStringBindingA".}
  proc RpcBindingToStringBinding*(P1: RPC_BINDING_HANDLE, P2: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingToStringBindingA".}
  proc RpcStringBindingCompose*(P1: cstring, P2: cstring, P3: cstring, P4: cstring, P5: cstring, P6: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcStringBindingComposeA".}
  proc RpcStringBindingParse*(P1: cstring, P2: ptr cstring, P3: ptr cstring, P4: ptr cstring, P5: ptr cstring, P6: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcStringBindingParseA".}
  proc RpcStringFree*(P1: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcStringFreeA".}
  proc RpcNetworkIsProtseqValid*(P1: cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcNetworkIsProtseqValidA".}
  proc RpcNetworkInqProtseqs*(P1: ptr ptr RPC_PROTSEQ_VECTORA): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcNetworkInqProtseqsA".}
  proc RpcProtseqVectorFree*(P1: ptr ptr RPC_PROTSEQ_VECTORA): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcProtseqVectorFreeA".}
  proc RpcServerUseProtseq*(P1: cstring, P2: uint32, P3: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqA".}
  proc RpcServerUseProtseqEx*(P1: cstring, MaxCalls: uint32, P3: pointer, P4: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqExA".}
  proc RpcServerUseProtseqEp*(P1: cstring, P2: uint32, P3: cstring, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqEpA".}
  proc RpcServerUseProtseqEpEx*(P1: cstring, P2: uint32, P3: cstring, P4: pointer, P5: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqEpExA".}
  proc RpcServerUseProtseqIf*(P1: cstring, P2: uint32, P3: RPC_IF_HANDLE, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqIfA".}
  proc RpcServerUseProtseqIfEx*(P1: cstring, P2: uint32, P3: RPC_IF_HANDLE, P4: pointer, P5: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerUseProtseqIfExA".}
  proc RpcMgmtInqServerPrincName*(P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcMgmtInqServerPrincNameA".}
  proc RpcServerInqDefaultPrincName*(P1: uint32, P2: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerInqDefaultPrincNameA".}
  proc RpcNsBindingInqEntryName*(P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcNsBindingInqEntryNameA".}
  proc RpcBindingInqAuthClient*(P1: RPC_BINDING_HANDLE, P2: ptr RPC_AUTHZ_HANDLE, P3: ptr cstring, P4: ptr uint32, P5: ptr uint32, P6: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingInqAuthClientA".}
  proc RpcBindingInqAuthInfo*(P1: RPC_BINDING_HANDLE, P2: ptr cstring, P3: ptr uint32, P4: ptr uint32, P5: ptr RPC_AUTH_IDENTITY_HANDLE, P6: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingInqAuthInfoA".}
  proc RpcBindingSetAuthInfo*(P1: RPC_BINDING_HANDLE, P2: cstring, P3: uint32, P4: uint32, P5: RPC_AUTH_IDENTITY_HANDLE, P6: uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingSetAuthInfoA".}
  proc RpcServerRegisterAuthInfo*(P1: cstring, P2: uint32, P3: RPC_AUTH_KEY_RETRIEVAL_FN, P4: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcServerRegisterAuthInfoA".}
  proc RpcBindingInqAuthInfoEx*(P1: RPC_BINDING_HANDLE, P2: ptr cstring, P3: ptr uint32, P4: ptr uint32, P5: ptr RPC_AUTH_IDENTITY_HANDLE, P6: ptr uint32, P7: uint32, P8: ptr RPC_SECURITY_QOS): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingInqAuthInfoExA".}
  proc RpcBindingSetAuthInfoEx*(P1: RPC_BINDING_HANDLE, P2: cstring, P3: uint32, P4: uint32, P5: RPC_AUTH_IDENTITY_HANDLE, P6: uint32, P7: ptr RPC_SECURITY_QOS): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcBindingSetAuthInfoExA".}
  proc UuidFromString*(P1: cstring, P2: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "UuidFromStringA".}
  proc UuidToString*(P1: ptr UUID, P2: ptr cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "UuidToStringA".}
  proc RpcEpRegisterNoReplace*(P1: RPC_IF_HANDLE, P2: ptr RPC_BINDING_VECTOR, P3: ptr UUID_VECTOR, P4: cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcEpRegisterNoReplaceA".}
  proc RpcEpRegister*(P1: RPC_IF_HANDLE, P2: ptr RPC_BINDING_VECTOR, P3: ptr UUID_VECTOR, P4: cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "RpcEpRegisterA".}
  proc DceErrorInqText*(P1: RPC_STATUS, P2: cstring): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc: "DceErrorInqTextA".}

proc RpcBindingCopy*(P1: RPC_BINDING_HANDLE, P2: ptr RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingFree*(P1: ptr RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingInqObject*(P1: RPC_BINDING_HANDLE, P2: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingReset*(P1: RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingSetObject*(P1: RPC_BINDING_HANDLE, P2: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtInqDefaultProtectLevel*(P1: uint32, P2: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingVectorFree*(P1: ptr ptr RPC_BINDING_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcIfInqId*(P1: RPC_IF_HANDLE, P2: ptr RPC_IF_ID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtInqComTimeout*(P1: RPC_BINDING_HANDLE, P2: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtSetComTimeout*(P1: RPC_BINDING_HANDLE, P2: uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtSetCancelTimeout*(Timeout: int32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcObjectInqType*(P1: ptr UUID, P2: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcObjectSetInqFn*(P1: ptr RPC_OBJECT_INQ_FN): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcObjectSetType*(P1: ptr UUID, P2: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
# proc RpcProtseqVectorFree*(P1: ptr ptr RPC_PROTSEQ_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerInqIf*(P1: RPC_IF_HANDLE, P2: ptr UUID, P3: ptr ptr RPC_MGR_EPV): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerListen*(P1: uint32, P2: uint32, P3: uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerRegisterIf*(P1: RPC_IF_HANDLE, P2: ptr UUID, P3: ptr RPC_MGR_EPV): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerRegisterIfEx*(P1: RPC_IF_HANDLE, P2: ptr UUID, P3: ptr RPC_MGR_EPV, P4: uint32, P5: uint32, P6: ptr RPC_IF_CALLBACK_FN): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerRegisterIf2*(P1: RPC_IF_HANDLE, P2: ptr UUID, P3: ptr RPC_MGR_EPV, P4: uint32, P5: uint32, P6: uint32, P7: ptr RPC_IF_CALLBACK_FN): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUnregisterIf*(P1: RPC_IF_HANDLE, P2: ptr UUID, P3: uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseAllProtseqs*(P1: uint32, P2: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseAllProtseqsEx*(P1: uint32, P2: pointer, P3: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseAllProtseqsIf*(P1: uint32, P2: RPC_IF_HANDLE, P3: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcServerUseAllProtseqsIfEx*(P1: uint32, P2: RPC_IF_HANDLE, P3: pointer, P4: PRPC_POLICY): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtStatsVectorFree*(P1: ptr ptr RPC_STATS_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtInqStats*(P1: RPC_BINDING_HANDLE, P2: ptr ptr RPC_STATS_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtIsServerListening*(P1: RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtStopServerListening*(P1: RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtWaitServerListen*(): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtSetServerStackSize*(P1: uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcSsDontSerializeContext*(): void {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtEnableIdleCleanup*(): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtInqIfIds*(P1: RPC_BINDING_HANDLE, P2: ptr ptr RPC_IF_ID_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcIfIdVectorFree*(P1: ptr ptr RPC_IF_ID_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcEpResolveBinding*(P1: RPC_BINDING_HANDLE, P2: RPC_IF_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcBindingServerFromClient*(P1: RPC_BINDING_HANDLE, P2: ptr RPC_BINDING_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcRaiseException*(P1: RPC_STATUS): void {.winapi, dynlib: "rpcrt4", importc.}
proc RpcTestCancel*(): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcCancelThread*(P1: pointer): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc UuidCreate*(P1: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc UuidCompare*(P1: ptr UUID, P2: ptr UUID, P3: ptr RPC_STATUS): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc UuidCreateNil*(P1: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc UuidEqual*(P1: ptr UUID, P2: ptr UUID, P3: ptr RPC_STATUS): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc UuidHash*(P1: ptr UUID, P2: ptr RPC_STATUS): uint16 {.winapi, dynlib: "rpcrt4", importc.}
proc UuidIsNil*(P1: ptr UUID, P2: ptr RPC_STATUS): int32 {.winapi, dynlib: "rpcrt4", importc.}
proc RpcEpUnregister*(P1: RPC_IF_HANDLE, P2: ptr RPC_BINDING_VECTOR, P3: ptr UUID_VECTOR): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtEpEltInqBegin*(P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr RPC_IF_ID, P4: uint32, P5: ptr UUID, P6: ptr RPC_EP_INQ_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtEpEltInqDone*(P1: ptr RPC_EP_INQ_HANDLE): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtEpUnregister*(P1: RPC_BINDING_HANDLE, P2: ptr RPC_IF_ID, P3: RPC_BINDING_HANDLE, P4: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtSetAuthorizationFn*(P1: RPC_MGMT_AUTHORIZATION_FN): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtInqParameter*(P1: uint32, P2: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtSetParameter*(P1: uint32, P2: uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtBindingInqParameter*(P1: RPC_BINDING_HANDLE, P2: uint32, P3: ptr uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc RpcMgmtBindingSetParameter*(P1: RPC_BINDING_HANDLE, P2: uint32, P3: uint32): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
proc UuidCreateSequential*(P1: ptr UUID): RPC_STATUS {.winapi, dynlib: "rpcrt4", importc.}
